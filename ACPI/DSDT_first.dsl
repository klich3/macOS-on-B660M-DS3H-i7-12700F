/*
 * Intel ACPI Component Architecture
 * AML/ASL+ Disassembler version 20180427 (64-bit version)(RM)
 * Copyright (c) 2000 - 2018 Intel Corporation
 * 
 * Disassembling to non-symbolic legacy ASL operators
 *
 * Disassembly of DSDT.dat, Tue Sep  5 18:40:20 2023
 *
 * Original Table Header:
 *     Signature        "DSDT"
 *     Length           0x0007DA73 (514675)
 *     Revision         0x02
 *     Checksum         0x0B
 *     OEM ID           "ALASKA"
 *     OEM Table ID     "A M I "
 *     OEM Revision     0x01072009 (17244169)
 *     Compiler ID      "INTL"
 *     Compiler Version 0x20200717 (538969879)
 */
DefinitionBlock ("", "DSDT", 2, "ALASKA", "A M I ", 0x01072009)
{
    /*
     * iASL Warning: There were 246 external control methods found during
     * disassembly, but only 502 were resolved (4294967040 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    /*
     * External declarations were imported from
     * a reference file -- refs.txt
     */

    External (_GPE.AL6F, MethodObj)    // 0 Arguments (from opcode)
    External (_GPE.DTIN, MethodObj)    // 0 Arguments (from opcode)
    External (_GPE.MMTB, MethodObj)    // Imported: 0 Arguments
    External (_GPE.SL61, MethodObj)    // 0 Arguments (from opcode)
    External (_GPE.SL66, MethodObj)    // 0 Arguments (from opcode)
    External (_GPE.SL69, MethodObj)    // 0 Arguments (from opcode)
    External (_GPE.SL6D, MethodObj)    // 0 Arguments (from opcode)
    External (_GPE.SL6F, MethodObj)    // 0 Arguments (from opcode)
    External (_GPE.VHOV, MethodObj)    // Imported: 3 Arguments
    External (_SB_.AWAC, DeviceObj)    // (from opcode)
    External (_SB_.AWAC.WAST, IntObj)    // (from opcode)
    External (_SB_.BGIA, UnknownObj)    // (from opcode)
    External (_SB_.BGMA, UnknownObj)    // (from opcode)
    External (_SB_.BGMS, UnknownObj)    // (from opcode)
    External (_SB_.BTRK, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.CPID, UnknownObj)    // (from opcode)
    External (_SB_.CPPC, IntObj)    // (from opcode)
    External (_SB_.GBTR, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.GGOV, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.IETM, DeviceObj)    // (from opcode)
    External (_SB_.NVDR._DSM, MethodObj)    // 4 Arguments (from opcode)
    External (_SB_.NVDR.NVD1._DSM, MethodObj)    // 4 Arguments (from opcode)
    External (_SB_.NVDR.NVD1._LSI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.NVDR.NVD1._LSR, MethodObj)    // 2 Arguments (from opcode)
    External (_SB_.NVDR.NVD1._LSW, MethodObj)    // 3 Arguments (from opcode)
    External (_SB_.PC00, DeviceObj)    // (from opcode)
    External (_SB_.PC00.CNVW.CRFI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.CNVW.PRRS, UnknownObj)    // (from opcode)
    External (_SB_.PC00.CNVW.RSTT, UnknownObj)    // (from opcode)
    External (_SB_.PC00.DPOF, UnknownObj)    // (from opcode)
    External (_SB_.PC00.GFX0.ALSI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.GFX0.CBLV, UnknownObj)    // (from opcode)
    External (_SB_.PC00.GFX0.CDCK, UnknownObj)    // (from opcode)
    External (_SB_.PC00.GFX0.CLID, UnknownObj)    // (from opcode)
    External (_SB_.PC00.GFX0.DD1F, DeviceObj)    // (from opcode)
    External (_SB_.PC00.GFX0.DD2F, DeviceObj)    // (from opcode)
    External (_SB_.PC00.GFX0.GSSE, UnknownObj)    // (from opcode)
    External (_SB_.PC00.GFX0.IPCO, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.GFX0.IUEH, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.GFX0.STAT, UnknownObj)    // (from opcode)
    External (_SB_.PC00.GFX0.TCHE, UnknownObj)    // (from opcode)
    External (_SB_.PC00.GMHB, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.HDAS.PPMS, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.HDAS.PS0X, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.HDAS.PS3X, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.HIDW, MethodObj)    // 4 Arguments (from opcode)
    External (_SB_.PC00.HIWC, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.ITSP, UnknownObj)    // (from opcode)
    External (_SB_.PC00.LPCB.H_EC.BAT0, DeviceObj)    // (from opcode)
    External (_SB_.PC00.LPCB.H_EC.BAT1, DeviceObj)    // (from opcode)
    External (_SB_.PC00.LPCB.H_EC.BAT2, DeviceObj)    // (from opcode)
    External (_SB_.PC00.LPCB.H_EC.BNUM, IntObj)    // (from opcode)
    External (_SB_.PC00.LPCB.H_EC.CFAN, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.LPCB.H_EC.CHRG, DeviceObj)    // (from opcode)
    External (_SB_.PC00.LPCB.H_EC.ECNT, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.LPCB.H_EC.ECWT, MethodObj)    // 2 Arguments (from opcode)
    External (_SB_.PC00.LPCB.H_EC.LID0, DeviceObj)    // (from opcode)
    External (_SB_.PC00.LPCB.H_EC.LSTE, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.LPCB.H_EC.ONTM, IntObj)    // (from opcode)
    External (_SB_.PC00.LPCB.H_EC.RPWR, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.LPCB.H_EC.UTEC, MethodObj)    // 2 Arguments (from opcode)
    External (_SB_.PC00.LPCB.H_EC.VPWR, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.LPCB.H_EC.WTMM, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.LPCB.H_EC.WTMV, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.M32B, UnknownObj)    // (from opcode)
    External (_SB_.PC00.M32L, UnknownObj)    // (from opcode)
    External (_SB_.PC00.M64B, UnknownObj)    // (from opcode)
    External (_SB_.PC00.M64L, UnknownObj)    // (from opcode)
    External (_SB_.PC00.PAUD.PUAM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.PC2M, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.PEG0, DeviceObj)    // (from opcode)
    External (_SB_.PC00.PEG0.PEGP.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.PEG0.PEGP.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.PEG0.PEGP.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.PEG0.PEGP.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.PEG0.PEGP.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.PEG0.PEGP.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.PEG0.PEGP.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.PEG0.PEGP.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.PEG0.PEGP.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.PEG0.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.PEG0.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.PEG0.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.PEG0.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.PEG0.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.PEG0.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.PEG1, DeviceObj)    // (from opcode)
    External (_SB_.PC00.PEG1.CBLV, UnknownObj)    // (from opcode)
    External (_SB_.PC00.PEG1.CLID, UnknownObj)    // (from opcode)
    External (_SB_.PC00.PEG1.DGCE, IntObj)    // (from opcode)
    External (_SB_.PC00.PEG1.DHDW, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.PEG1.PEGP.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.PEG1.PEGP.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.PEG1.PEGP.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.PEG1.PEGP.PEGB.PEGE.DEDP, DeviceObj)    // (from opcode)
    External (_SB_.PC00.PEG1.PEGP.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.PEG1.PEGP.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.PEG1.PEGP.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.PEG1.PEGP.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.PEG1.PEGP.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.PEG1.PEGP.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.PEG1.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.PEG1.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.PEG1.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.PEG1.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.PEG1.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.PEG1.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.PEG2, DeviceObj)    // (from opcode)
    External (_SB_.PC00.PEG2.PEGP.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.PEG2.PEGP.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.PEG2.PEGP.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.PEG2.PEGP.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.PEG2.PEGP.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.PEG2.PEGP.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.PEG2.PEGP.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.PEG2.PEGP.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.PEG2.PEGP.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.PEG2.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.PEG2.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.PEG2.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.PEG2.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.PEG2.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.PEG2.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.PEG3.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.PEG3.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.PTHT.THEN, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP01, DeviceObj)    // (from opcode)
    External (_SB_.PC00.RP01.NFRP, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP01.PINI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP01.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP01.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP01.PPBA, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP01.PPS0, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP01.PPS3, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP01.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.RP01.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.RP01.PXSX.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP01.PXSX.CRFI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP01.PXSX.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP01.PXSX.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP01.PXSX.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP01.PXSX.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP01.PXSX.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP01.PXSX.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP01.PXSX.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP01.PXSX.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP01.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.RP01.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.RP01.TPRW, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP01.UPRD, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP01.VDID, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.RP02, DeviceObj)    // (from opcode)
    External (_SB_.PC00.RP02.PINI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP02.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP02.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP02.PPBA, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP02.PPS0, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP02.PPS3, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP02.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.RP02.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.RP02.PXSX.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP02.PXSX.CRFI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP02.PXSX.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP02.PXSX.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP02.PXSX.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP02.PXSX.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP02.PXSX.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP02.PXSX.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP02.PXSX.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP02.PXSX.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP02.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.RP02.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.RP02.UPRD, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP02.VDID, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.RP03, DeviceObj)    // (from opcode)
    External (_SB_.PC00.RP03.PINI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP03.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP03.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP03.PPBA, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP03.PPS0, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP03.PPS3, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP03.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.RP03.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.RP03.PXSX.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP03.PXSX.CRFI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP03.PXSX.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP03.PXSX.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP03.PXSX.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP03.PXSX.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP03.PXSX.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP03.PXSX.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP03.PXSX.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP03.PXSX.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP03.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.RP03.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.RP03.UPRD, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP03.VDID, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.RP04, DeviceObj)    // (from opcode)
    External (_SB_.PC00.RP04.PINI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP04.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP04.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP04.PPBA, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP04.PPS0, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP04.PPS3, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP04.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.RP04.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.RP04.PXSX.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP04.PXSX.CRFI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP04.PXSX.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP04.PXSX.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP04.PXSX.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP04.PXSX.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP04.PXSX.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP04.PXSX.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP04.PXSX.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP04.PXSX.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP04.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.RP04.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.RP04.UPRD, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP04.VDID, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.RP05, DeviceObj)    // (from opcode)
    External (_SB_.PC00.RP05.NFRP, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP05.PINI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP05.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP05.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP05.PPBA, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP05.PPS0, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP05.PPS3, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP05.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.RP05.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.RP05.PXSX.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP05.PXSX.CRFI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP05.PXSX.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP05.PXSX.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP05.PXSX.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP05.PXSX.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP05.PXSX.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP05.PXSX.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP05.PXSX.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP05.PXSX.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP05.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.RP05.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.RP05.TPRW, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP05.UPRD, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP05.VDID, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.RP06, DeviceObj)    // (from opcode)
    External (_SB_.PC00.RP06.PINI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP06.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP06.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP06.PPBA, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP06.PPS0, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP06.PPS3, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP06.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.RP06.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.RP06.PXSX.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP06.PXSX.CRFI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP06.PXSX.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP06.PXSX.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP06.PXSX.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP06.PXSX.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP06.PXSX.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP06.PXSX.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP06.PXSX.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP06.PXSX.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP06.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.RP06.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.RP06.UPRD, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP06.VDID, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.RP07, DeviceObj)    // (from opcode)
    External (_SB_.PC00.RP07.PINI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP07.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP07.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP07.PPBA, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP07.PPS0, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP07.PPS3, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP07.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.RP07.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.RP07.PXSX.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP07.PXSX.CRFI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP07.PXSX.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP07.PXSX.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP07.PXSX.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP07.PXSX.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP07.PXSX.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP07.PXSX.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP07.PXSX.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP07.PXSX.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP07.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.RP07.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.RP07.UPRD, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP07.VDID, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.RP08, DeviceObj)    // (from opcode)
    External (_SB_.PC00.RP08.PINI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP08.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP08.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP08.PPBA, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP08.PPS0, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP08.PPS3, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP08.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.RP08.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.RP08.PXSX.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP08.PXSX.CRFI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP08.PXSX.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP08.PXSX.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP08.PXSX.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP08.PXSX.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP08.PXSX.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP08.PXSX.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP08.PXSX.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP08.PXSX.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP08.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.RP08.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.RP08.UPRD, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP08.VDID, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.RP09, DeviceObj)    // (from opcode)
    External (_SB_.PC00.RP09.NFRP, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP09.PINI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP09.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP09.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP09.PPBA, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP09.PPS0, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP09.PPS3, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP09.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.RP09.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.RP09.PXSX.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP09.PXSX.CRFI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP09.PXSX.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP09.PXSX.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP09.PXSX.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP09.PXSX.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP09.PXSX.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP09.PXSX.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP09.PXSX.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP09.PXSX.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP09.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.RP09.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.RP09.TPRW, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP09.UPRD, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP09.VDID, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.RP10, DeviceObj)    // (from opcode)
    External (_SB_.PC00.RP10.PINI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP10.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP10.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP10.PPBA, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP10.PPS0, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP10.PPS3, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP10.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.RP10.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.RP10.PXSX.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP10.PXSX.CRFI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP10.PXSX.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP10.PXSX.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP10.PXSX.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP10.PXSX.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP10.PXSX.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP10.PXSX.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP10.PXSX.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP10.PXSX.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP10.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.RP10.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.RP10.UPRD, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP10.VDID, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.RP11, DeviceObj)    // (from opcode)
    External (_SB_.PC00.RP11.PINI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP11.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP11.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP11.PPBA, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP11.PPS0, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP11.PPS3, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP11.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.RP11.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.RP11.PXSX.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP11.PXSX.CRFI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP11.PXSX.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP11.PXSX.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP11.PXSX.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP11.PXSX.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP11.PXSX.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP11.PXSX.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP11.PXSX.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP11.PXSX.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP11.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.RP11.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.RP11.UPRD, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP11.VDID, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.RP12, DeviceObj)    // (from opcode)
    External (_SB_.PC00.RP12.PINI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP12.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP12.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP12.PPBA, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP12.PPS0, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP12.PPS3, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP12.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.RP12.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.RP12.PXSX.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP12.PXSX.CRFI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP12.PXSX.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP12.PXSX.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP12.PXSX.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP12.PXSX.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP12.PXSX.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP12.PXSX.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP12.PXSX.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP12.PXSX.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP12.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.RP12.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.RP12.UPRD, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP12.VDID, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.RP13, DeviceObj)    // (from opcode)
    External (_SB_.PC00.RP13.NFRP, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP13.PINI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP13.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP13.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP13.PPBA, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP13.PPS0, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP13.PPS3, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP13.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.RP13.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.RP13.PXSX.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP13.PXSX.CRFI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP13.PXSX.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP13.PXSX.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP13.PXSX.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP13.PXSX.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP13.PXSX.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP13.PXSX.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP13.PXSX.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP13.PXSX.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP13.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.RP13.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.RP13.TPRW, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP13.UPRD, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP13.VDID, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.RP14, DeviceObj)    // (from opcode)
    External (_SB_.PC00.RP14.PINI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP14.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP14.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP14.PPBA, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP14.PPS0, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP14.PPS3, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP14.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.RP14.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.RP14.PXSX.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP14.PXSX.CRFI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP14.PXSX.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP14.PXSX.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP14.PXSX.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP14.PXSX.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP14.PXSX.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP14.PXSX.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP14.PXSX.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP14.PXSX.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP14.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.RP14.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.RP14.UPRD, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP14.VDID, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.RP15, DeviceObj)    // (from opcode)
    External (_SB_.PC00.RP15.PINI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP15.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP15.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP15.PPBA, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP15.PPS0, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP15.PPS3, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP15.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.RP15.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.RP15.PXSX.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP15.PXSX.CRFI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP15.PXSX.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP15.PXSX.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP15.PXSX.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP15.PXSX.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP15.PXSX.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP15.PXSX.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP15.PXSX.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP15.PXSX.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP15.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.RP15.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.RP15.UPRD, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP15.VDID, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.RP16, DeviceObj)    // (from opcode)
    External (_SB_.PC00.RP16.PINI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP16.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP16.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP16.PPBA, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP16.PPS0, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP16.PPS3, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP16.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.RP16.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.RP16.PXSX.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP16.PXSX.CRFI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP16.PXSX.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP16.PXSX.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP16.PXSX.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP16.PXSX.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP16.PXSX.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP16.PXSX.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP16.PXSX.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP16.PXSX.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP16.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.RP16.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.RP16.UPRD, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP16.VDID, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.RP17, DeviceObj)    // (from opcode)
    External (_SB_.PC00.RP17.NFRP, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP17.PINI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP17.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP17.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP17.PPBA, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP17.PPS0, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP17.PPS3, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP17.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.RP17.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.RP17.PXSX.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP17.PXSX.CRFI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP17.PXSX.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP17.PXSX.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP17.PXSX.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP17.PXSX.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP17.PXSX.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP17.PXSX.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP17.PXSX.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP17.PXSX.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP17.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.RP17.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.RP17.TPRW, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP17.UPRD, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP17.VDID, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.RP18, DeviceObj)    // (from opcode)
    External (_SB_.PC00.RP18.PINI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP18.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP18.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP18.PPBA, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP18.PPS0, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP18.PPS3, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP18.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.RP18.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.RP18.PXSX.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP18.PXSX.CRFI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP18.PXSX.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP18.PXSX.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP18.PXSX.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP18.PXSX.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP18.PXSX.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP18.PXSX.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP18.PXSX.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP18.PXSX.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP18.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.RP18.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.RP18.UPRD, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP18.VDID, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.RP19, DeviceObj)    // (from opcode)
    External (_SB_.PC00.RP19.PINI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP19.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP19.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP19.PPBA, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP19.PPS0, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP19.PPS3, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP19.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.RP19.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.RP19.PXSX.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP19.PXSX.CRFI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP19.PXSX.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP19.PXSX.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP19.PXSX.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP19.PXSX.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP19.PXSX.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP19.PXSX.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP19.PXSX.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP19.PXSX.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP19.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.RP19.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.RP19.UPRD, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP19.VDID, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.RP20, DeviceObj)    // (from opcode)
    External (_SB_.PC00.RP20.PINI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP20.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP20.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP20.PPBA, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP20.PPS0, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP20.PPS3, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP20.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.RP20.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.RP20.PXSX.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP20.PXSX.CRFI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP20.PXSX.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP20.PXSX.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP20.PXSX.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP20.PXSX.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP20.PXSX.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP20.PXSX.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP20.PXSX.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP20.PXSX.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP20.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.RP20.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.RP20.UPRD, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP20.VDID, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.RP21, DeviceObj)    // (from opcode)
    External (_SB_.PC00.RP21.NFRP, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP21.PINI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP21.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP21.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP21.PPBA, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP21.PPS0, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP21.PPS3, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP21.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.RP21.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.RP21.PXSX.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP21.PXSX.CRFI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP21.PXSX.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP21.PXSX.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP21.PXSX.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP21.PXSX.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP21.PXSX.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP21.PXSX.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP21.PXSX.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP21.PXSX.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP21.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.RP21.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.RP21.TPRW, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP21.UPRD, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP21.VDID, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.RP22, DeviceObj)    // (from opcode)
    External (_SB_.PC00.RP22.PINI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP22.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP22.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP22.PPBA, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP22.PPS0, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP22.PPS3, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP22.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.RP22.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.RP22.PXSX.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP22.PXSX.CRFI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP22.PXSX.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP22.PXSX.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP22.PXSX.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP22.PXSX.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP22.PXSX.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP22.PXSX.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP22.PXSX.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP22.PXSX.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP22.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.RP22.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.RP22.UPRD, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP22.VDID, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.RP23, DeviceObj)    // (from opcode)
    External (_SB_.PC00.RP23.PINI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP23.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP23.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP23.PPBA, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP23.PPS0, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP23.PPS3, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP23.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.RP23.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.RP23.PXSX.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP23.PXSX.CRFI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP23.PXSX.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP23.PXSX.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP23.PXSX.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP23.PXSX.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP23.PXSX.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP23.PXSX.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP23.PXSX.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP23.PXSX.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP23.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.RP23.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.RP23.UPRD, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP23.VDID, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.RP24, DeviceObj)    // (from opcode)
    External (_SB_.PC00.RP24.PINI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP24.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP24.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP24.PPBA, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP24.PPS0, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP24.PPS3, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP24.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.RP24.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.RP24.PXSX.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP24.PXSX.CRFI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP24.PXSX.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP24.PXSX.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP24.PXSX.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP24.PXSX.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP24.PXSX.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP24.PXSX.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP24.PXSX.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP24.PXSX.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP24.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.RP24.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.RP24.UPRD, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP24.VDID, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.RP25, DeviceObj)    // (from opcode)
    External (_SB_.PC00.RP25.NFRP, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP25.PINI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP25.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP25.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP25.PPBA, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP25.PPS0, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP25.PPS3, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP25.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.RP25.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.RP25.PXSX.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP25.PXSX.CRFI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP25.PXSX.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP25.PXSX.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP25.PXSX.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP25.PXSX.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP25.PXSX.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP25.PXSX.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP25.PXSX.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP25.PXSX.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP25.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.RP25.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.RP25.UPRD, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP25.VDID, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.RP26, DeviceObj)    // (from opcode)
    External (_SB_.PC00.RP26.PINI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP26.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP26.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP26.PPBA, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP26.PPS0, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP26.PPS3, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP26.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.RP26.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.RP26.PXSX.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP26.PXSX.CRFI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP26.PXSX.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP26.PXSX.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP26.PXSX.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP26.PXSX.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP26.PXSX.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP26.PXSX.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP26.PXSX.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP26.PXSX.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP26.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.RP26.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.RP26.UPRD, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP26.VDID, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.RP27, DeviceObj)    // (from opcode)
    External (_SB_.PC00.RP27.PINI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP27.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP27.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP27.PPBA, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP27.PPS0, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP27.PPS3, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP27.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.RP27.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.RP27.PXSX.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP27.PXSX.CRFI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP27.PXSX.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP27.PXSX.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP27.PXSX.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP27.PXSX.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP27.PXSX.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP27.PXSX.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP27.PXSX.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP27.PXSX.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP27.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.RP27.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.RP27.UPRD, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP27.VDID, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.RP28, DeviceObj)    // (from opcode)
    External (_SB_.PC00.RP28.PINI, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP28.POFF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP28.PON_, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP28.PPBA, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP28.PPS0, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP28.PPS3, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP28.PRMV, IntObj)    // (from opcode)
    External (_SB_.PC00.RP28.PRTP, IntObj)    // (from opcode)
    External (_SB_.PC00.RP28.PXSX.BCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP28.PXSX.CRFI, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP28.PXSX.ISGX, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP28.PXSX.PAHC, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP28.PXSX.PIXX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP28.PXSX.PNVM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP28.PXSX.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP28.PXSX.SCCX, UnknownObj)    // (from opcode)
    External (_SB_.PC00.RP28.PXSX.WIST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP28.PXSX.WWST, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.RP28.RD3C, IntObj)    // (from opcode)
    External (_SB_.PC00.RP28.SLOT, IntObj)    // (from opcode)
    External (_SB_.PC00.RP28.UPRD, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.RP28.VDID, FieldUnitObj)    // (from opcode)
    External (_SB_.PC00.SAT0.PRT0, DeviceObj)    // (from opcode)
    External (_SB_.PC00.SAT0.PRT0.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.SAT0.PRT0.SPOF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.SAT0.PRT0.SPON, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.SAT0.PRT1, DeviceObj)    // (from opcode)
    External (_SB_.PC00.SAT0.PRT1.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.SAT0.PRT1.SPOF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.SAT0.PRT1.SPON, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.SAT0.PRT2, DeviceObj)    // (from opcode)
    External (_SB_.PC00.SAT0.PRT2.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.SAT0.PRT2.SPOF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.SAT0.PRT2.SPON, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.SAT0.PRT3, DeviceObj)    // (from opcode)
    External (_SB_.PC00.SAT0.PRT3.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.SAT0.PRT3.SPOF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.SAT0.PRT3.SPON, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.SAT0.PRT4, DeviceObj)    // (from opcode)
    External (_SB_.PC00.SAT0.PRT4.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.SAT0.PRT4.SPOF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.SAT0.PRT4.SPON, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.SAT0.PRT5, DeviceObj)    // (from opcode)
    External (_SB_.PC00.SAT0.PRT5.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.SAT0.PRT5.SPOF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.SAT0.PRT5.SPON, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.SAT0.PRT6, DeviceObj)    // (from opcode)
    External (_SB_.PC00.SAT0.PRT6.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.SAT0.PRT6.SPOF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.SAT0.PRT6.SPON, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.SAT0.PRT7, DeviceObj)    // (from opcode)
    External (_SB_.PC00.SAT0.PRT7.PRES, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.SAT0.PRT7.SPOF, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.SAT0.PRT7.SPON, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.SAT0.SATC, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.SAT0.SATD, MethodObj)    // 4 Arguments (from opcode)
    External (_SB_.PC00.SAT0.ZPOV, MethodObj)    // 3 Arguments (from opcode)
    External (_SB_.PC00.SWAK, MethodObj)    // 2 Arguments (from opcode)
    External (_SB_.PC00.TDM0, DeviceObj)    // (from opcode)
    External (_SB_.PC00.TDM0._STA, UnknownObj)    // (from opcode)
    External (_SB_.PC00.TDM0.SCME, UnknownObj)    // (from opcode)
    External (_SB_.PC00.TDM1, DeviceObj)    // (from opcode)
    External (_SB_.PC00.TDM1._STA, UnknownObj)    // (from opcode)
    External (_SB_.PC00.TDM1.SCME, UnknownObj)    // (from opcode)
    External (_SB_.PC00.THC0, DeviceObj)    // (from opcode)
    External (_SB_.PC00.THC0.CINI, MethodObj)    // 2 Arguments (from opcode)
    External (_SB_.PC00.THC1, DeviceObj)    // (from opcode)
    External (_SB_.PC00.THC1.CINI, MethodObj)    // 2 Arguments (from opcode)
    External (_SB_.PC00.TXHC, DeviceObj)    // (from opcode)
    External (_SB_.PC00.XDCI.XDAT, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.XHCI.DUAM, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.XHCI.PS0X, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.XHCI.PS3X, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.XHCI.PSLI, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.XHCI.PSLP, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.PC00.XHCI.RHUB.HS10.RDLY, UnknownObj)    // (from opcode)
    External (_SB_.PC00.XHCI.RHUB.HS14.RDLY, UnknownObj)    // (from opcode)
    External (_SB_.PC00.XHCI.RHUB.INIR, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.XHCI.RHUB.PS0X, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.XHCI.RHUB.PS2X, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PC00.XHCI.RHUB.PS3X, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PCI0.GFX0.DD02._BCM, MethodObj)    // Imported: 1 Arguments
    External (_SB_.PCI0.LPCB.H_EC.ECMD, MethodObj)    // Imported: 1 Arguments
    External (_SB_.PCI0.LPCB.H_EC.ECRD, MethodObj)    // Imported: 1 Arguments
    External (_SB_.PCI0.LPCB.H_EC.ECWT, MethodObj)    // Imported: 2 Arguments
    External (_SB_.PCI0.PEG0.PEGP.SGPO, MethodObj)    // Imported: 2 Arguments
    External (_SB_.PCI0.XHC_.RHUB.TPLD, MethodObj)    // Imported: 2 Arguments
    External (_SB_.POWS, UnknownObj)    // (from opcode)
    External (_SB_.PR00.LPSS, PkgObj)    // (from opcode)
    External (_SB_.PR00.TPSS, PkgObj)    // (from opcode)
    External (_SB_.PTHH.THEN, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PWRB, DeviceObj)    // (from opcode)
    External (_SB_.SGOV, MethodObj)    // 2 Arguments (from opcode)
    External (_SB_.TCWK, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.TPM_.PTS_, MethodObj)    // 1 Arguments (from opcode)
    External (_SB_.TRPD, UnknownObj)    // (from opcode)
    External (_SB_.TRPF, UnknownObj)    // (from opcode)
    External (_TZ_.ETMD, IntObj)    // (from opcode)
    External (_TZ_.TZ00, DeviceObj)    // (from opcode)
    External (AL6D, FieldUnitObj)    // (from opcode)
    External (BGIA, IntObj)    // Warning: Unknown object
    External (BGMA, IntObj)    // Warning: Unknown object
    External (BGMS, IntObj)    // Warning: Unknown object
    External (BPNT, MethodObj)    // 0 Arguments (from opcode)
    External (CNMT, UnknownObj)    // (from opcode)
    External (CRBI, UnknownObj)    // (from opcode)
    External (DDMS, MethodObj)    // 0 Arguments (from opcode)
    External (DGBA, UnknownObj)    // (from opcode)
    External (DGDX, UnknownObj)    // (from opcode)
    External (DIDX, UnknownObj)    // (from opcode)
    External (DIDY, UnknownObj)    // (from opcode)
    External (DME0, UnknownObj)    // (from opcode)
    External (DME1, UnknownObj)    // (from opcode)
    External (DPG1, UnknownObj)    // (from opcode)
    External (DPIW, UnknownObj)    // (from opcode)
    External (DPMS, FieldUnitObj)    // (from opcode)
    External (DSCE, IntObj)    // (from opcode)
    External (DTCM, MethodObj)    // 2 Arguments (from opcode)
    External (DTFS, UnknownObj)    // (from opcode)
    External (DTRT, UnknownObj)    // (from opcode)
    External (DUWS, UnknownObj)    // (from opcode)
    External (EPTU, FieldUnitObj)    // (from opcode)
    External (ESPC, UnknownObj)    // (from opcode)
    External (GPRV, MethodObj)    // 2 Arguments (from opcode)
    External (GSA1.MPTS, MethodObj)    // 1 Arguments (from opcode)
    External (GSA1.MWAK, MethodObj)    // 1 Arguments (from opcode)
    External (HBCL, FieldUnitObj)    // (from opcode)
    External (HBPL, FieldUnitObj)    // (from opcode)
    External (HGMD, UnknownObj)    // (from opcode)
    External (ISAR, MethodObj)    // 4 Arguments (from opcode)
    External (ITSP, IntObj)    // Warning: Unknown object
    External (KMOF, MethodObj)    // 0 Arguments (from opcode)
    External (M32B, IntObj)    // Warning: Unknown object
    External (M32L, IntObj)    // Warning: Unknown object
    External (M64B, IntObj)    // Warning: Unknown object
    External (M64L, IntObj)    // Warning: Unknown object
    External (MDBG, MethodObj)    // Imported: 1 Arguments
    External (ODBG, MethodObj)    // 1 Arguments (from opcode)
    External (P0WK, UnknownObj)    // (from opcode)
    External (P1WK, UnknownObj)    // (from opcode)
    External (P2WK, UnknownObj)    // (from opcode)
    External (P3WK, UnknownObj)    // (from opcode)
    External (PCHS, FieldUnitObj)    // (from opcode)
    External (PCHX, IntObj)    // (from opcode)
    External (PCRA, MethodObj)    // 3 Arguments (from opcode)
    External (PG3S, UnknownObj)    // (from opcode)
    External (PMRL, FieldUnitObj)    // (from opcode)
    External (PMSA, FieldUnitObj)    // (from opcode)
    External (PSON, UnknownObj)    // (from opcode)
    External (PTHM, FieldUnitObj)    // (from opcode)
    External (PU2C, UnknownObj)    // (from opcode)
    External (PU3C, UnknownObj)    // (from opcode)
    External (RPN0, IntObj)    // (from opcode)
    External (RPN1, IntObj)    // (from opcode)
    External (RPS0, IntObj)    // (from opcode)
    External (RPS1, IntObj)    // (from opcode)
    External (RTD3, FieldUnitObj)    // (from opcode)
    External (SIME, UnknownObj)    // (from opcode)
    External (SPNT, MethodObj)    // 0 Arguments (from opcode)
    External (SPTS, MethodObj)    // 1 Arguments (from opcode)
    External (STD3, FieldUnitObj)    // (from opcode)
    External (SWAK, MethodObj)    // 2 Arguments (from opcode)
    External (TBPE, IntObj)    // (from opcode)
    External (TCPN, UnknownObj)    // (from opcode)
    External (TDCE, UnknownObj)    // (from opcode)
    External (THCE, UnknownObj)    // (from opcode)
    External (TOFF, IntObj)    // (from opcode)
    External (TPTS, MethodObj)    // 1 Arguments (from opcode)
    External (TRE0, UnknownObj)    // (from opcode)
    External (TRE1, UnknownObj)    // (from opcode)
    External (TRE2, UnknownObj)    // (from opcode)
    External (TRE3, UnknownObj)    // (from opcode)
    External (TVCF, MethodObj)    // 4 Arguments (from opcode)
    External (UF0E, UnknownObj)    // (from opcode)
    External (UF1E, UnknownObj)    // (from opcode)
    External (ULTR, MethodObj)    // 1 Arguments (from opcode)
    External (VDSD, IntObj)    // (from opcode)
    External (VMCP, UnknownObj)    // (from opcode)
    External (VMDE, FieldUnitObj)    // (from opcode)
    External (VMR1, UnknownObj)    // (from opcode)
    External (VMR2, UnknownObj)    // (from opcode)
    External (VMR3, UnknownObj)    // (from opcode)
    External (VMR4, UnknownObj)    // (from opcode)
    External (XBAS, UnknownObj)    // (from opcode)
    External (ZPPB, FieldUnitObj)    // (from opcode)

    Name (IO1B, 0x0A00)
    Name (IO1L, 0x30)
    Name (IO2B, 0x0A30)
    Name (IO2L, 0x10)
    Name (IO3B, 0x0A40)
    Name (IO3L, 0x10)
    Name (SP1O, 0x2E)
    Name (IOES, Zero)
    Name (HMIO, 0x0A45)
    Name (MCHB, 0xFEDC0000)
    Name (MCHL, 0x00020000)
    Name (EGPB, 0xFEDA1000)
    Name (EGPL, 0x1000)
    Name (DMIB, 0xFEDA0000)
    Name (DMIL, 0x1000)
    Name (VTBS, 0xFED90000)
    Name (VTLN, 0x4000)
    Name (CPVD, Zero)
    Name (SMIP, 0xB2)
    Name (PMBA, 0x1800)
    Name (SMCR, 0x1830)
    Name (TCBR, 0xFED08000)
    Name (TCLT, 0x1000)
    Name (SMBL, 0x20)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (ITSW, 0xBD)
    Name (FMBL, One)
    Name (FDTP, 0x02)
    Name (FUPS, 0x04)
    Name (FUWS, 0x03)
    Name (FEMD, 0x04)
    Name (SPAD, Zero)
    Name (LPEN, Zero)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, One)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (MBEC, 0xFFFF)
    Name (PEBS, 0xC0000000)
    Name (PELN, 0x10000000)
    Name (CSMI, 0x61)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (TTPF, One)
    Name (TTDP, Zero)
    Name (TPMB, 0xFFFFFFFF)
    Name (TPBS, 0x1000)
    Name (TPMC, 0xFFFFFFFF)
    Name (TPCS, 0x1000)
    Name (TPMM, 0xFED40000)
    Name (FTPM, 0xFFFFFFFF)
    Name (PPIM, 0x39099F18)
    Name (PPIL, 0x1C)
    Name (AMDT, Zero)
    Name (TPMF, Zero)
    Name (PPIV, Zero)
    Name (DTP1, Zero)
    Name (LGMB, 0xFC00)
    Name (LGMS, 0x00010000)
    Name (UMAP, 0xDFFF)
    Name (UMP3, 0x03FF)
    Name (SANB, 0x39099C98)
    Name (SANL, 0x01B7)
    OperationRegion (SANV, SystemMemory, SANB, SANL)
    Field (SANV, AnyAcc, Lock, Preserve)
    {
        ASLB,   32, 
        IMON,   8, 
        IGDS,   8, 
        IBTT,   8, 
        IPAT,   8, 
        IPSC,   8, 
        IBIA,   8, 
        ISSC,   8, 
        IF1E,   8, 
        HVCO,   8, 
        GSMI,   8, 
        PAVP,   8, 
        CADL,   8, 
        CSTE,   16, 
        NSTE,   16, 
        NDID,   8, 
        DID1,   32, 
        DID2,   32, 
        DID3,   32, 
        DID4,   32, 
        DID5,   32, 
        DID6,   32, 
        DID7,   32, 
        DID8,   32, 
        DID9,   32, 
        DIDA,   32, 
        DIDB,   32, 
        DIDC,   32, 
        DIDD,   32, 
        DIDE,   32, 
        DIDF,   32, 
        DIDX,   32, 
        NXD1,   32, 
        NXD2,   32, 
        NXD3,   32, 
        NXD4,   32, 
        NXD5,   32, 
        NXD6,   32, 
        NXD7,   32, 
        NXD8,   32, 
        NXDX,   32, 
        LIDS,   8, 
        KSV0,   32, 
        KSV1,   8, 
        BRTL,   8, 
        ALSE,   8, 
        ALAF,   8, 
        LLOW,   8, 
        LHIH,   8, 
        ALFP,   8, 
        IPTP,   8, 
        EDPV,   8, 
        HGMD,   8, 
        HGFL,   8, 
        SGGP,   8, 
        HRE0,   8, 
        HRG0,   32, 
        HRA0,   8, 
        PWE0,   8, 
        PWG0,   32, 
        PWA0,   8, 
        P1GP,   8, 
        HRE1,   8, 
        HRG1,   32, 
        HRA1,   8, 
        PWE1,   8, 
        PWG1,   32, 
        PWA1,   8, 
        P2GP,   8, 
        HRE2,   8, 
        HRG2,   32, 
        HRA2,   8, 
        PWE2,   8, 
        PWG2,   32, 
        PWA2,   8, 
        P3GP,   8, 
        HRE3,   8, 
        HRG3,   32, 
        HRA3,   8, 
        PWE3,   8, 
        PWG3,   32, 
        PWA3,   8, 
        P3WK,   32, 
        DLPW,   16, 
        DLHR,   16, 
        EECP,   8, 
        XBAS,   32, 
        GBAS,   16, 
        NVGA,   32, 
        NVHA,   32, 
        AMDA,   32, 
        LTRX,   8, 
        OBFX,   8, 
        LTRY,   8, 
        OBFY,   8, 
        LTRZ,   8, 
        OBFZ,   8, 
        LTRW,   8, 
        OBFA,   8, 
        SMSL,   16, 
        SNSL,   16, 
        M64B,   64, 
        M64L,   64, 
        CPEX,   32, 
        M32B,   32, 
        M32L,   32, 
        P0WK,   32, 
        P1WK,   32, 
        P2WK,   32, 
        VTDS,   8, 
        VTB1,   32, 
        VTB2,   32, 
        VTB3,   32, 
        VTB4,   32, 
        VTB5,   32, 
        VTB6,   32, 
        VTB7,   32, 
        VE1V,   16, 
        VE2V,   16, 
        RPIN,   8, 
        RPBA,   32, 
        CTHM,   8, 
        SIME,   8, 
        THCE,   8, 
        TDCE,   8, 
        DME0,   8, 
        DME1,   8, 
        TRE0,   8, 
        TRE1,   8, 
        TRE2,   8, 
        TRE3,   8, 
        TPA0,   32, 
        TPA1,   32, 
        TPA2,   32, 
        TPA3,   32, 
        TCDS,   32, 
        TCIT,   8, 
        TCIR,   8, 
        TRTD,   8, 
        ITM0,   32, 
        ITM1,   32, 
        LTE0,   8, 
        LTE1,   8, 
        LTE2,   8, 
        LTE3,   8, 
        PSL0,   16, 
        PSL1,   16, 
        PSL2,   16, 
        PSL3,   16, 
        PNS0,   16, 
        PNS1,   16, 
        PNS2,   16, 
        PNS3,   16, 
        IMRY,   8, 
        TIVS,   8, 
        PG0E,   8, 
        PG1E,   8, 
        PG2E,   8, 
        PG3E,   8, 
        VMDE,   8, 
        DIDY,   32, 
        NXDY,   32, 
        SLTS,   8, 
        VMR1,   8, 
        VMR2,   8, 
        VMR3,   8, 
        VMR4,   8, 
        VMS0,   8, 
        VMCP,   8, 
        CPRT,   8, 
        CSLU,   32, 
        CSSP,   32, 
        MPGN,   8, 
        CMBM,   8, 
        DPMS,   8, 
        PMSA,   64, 
        PMRL,   64, 
        PBR1,   8, 
        PBR2,   8, 
        PBR3,   8, 
        PPA0,   32, 
        PPA1,   32, 
        PPA2,   32, 
        PPA3,   32, 
        REGO,   16, 
        WSCI,   8
    }

    OperationRegion (GNVS, SystemMemory, 0x38FED000, 0x0CE2)
    Field (GNVS, AnyAcc, Lock, Preserve)
    {
        OSYS,   16, 
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        SCIF,   8, 
        PRM2,   8, 
        PRM3,   8, 
        LCKF,   8, 
        PRM4,   8, 
        PRM5,   8, 
        PWRS,   8, 
        DBGS,   8, 
        THOF,   8, 
        ACT1,   8, 
        ACTT,   8, 
        PSVT,   8, 
        TC1V,   8, 
        TC2V,   8, 
        TSPV,   8, 
        CRTT,   8, 
        REVN,   8, 
        APIC,   8, 
        TCNT,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PPCM,   8, 
        PPMF,   32, 
        C67L,   8, 
        NATP,   8, 
        CMAP,   8, 
        CMBP,   8, 
        LPTP,   8, 
        FDCP,   8, 
        CMCP,   8, 
        CIRP,   8, 
        SMSC,   8, 
        W381,   8, 
        SMC1,   8, 
        EMAE,   8, 
        EMAP,   16, 
        EMAL,   16, 
        MEFE,   8, 
        DSTS,   8, 
        MORD,   8, 
        TCGP,   8, 
        PPRP,   32, 
        PPRQ,   8, 
        LPPR,   8, 
        IDEM,   8, 
        PLID,   8, 
        BTYP,   8, 
        OSCC,   8, 
        NEXP,   8, 
        SBV1,   8, 
        SBV2,   8, 
        ECON,   8, 
        DSEN,   8, 
        GPIC,   8, 
        CTYP,   8, 
        L01C,   8, 
        VFN0,   8, 
        VFN1,   8, 
        VFN2,   8, 
        VFN3,   8, 
        VFN4,   8, 
        VFN5,   8, 
        VFN6,   8, 
        VFN7,   8, 
        VFN8,   8, 
        VFN9,   8, 
        PNHM,   32, 
        TBAL,   32, 
        TBAH,   32, 
        TSOD,   8, 
        PFLV,   8, 
        BREV,   16, 
        PAMT,   8, 
        AC0F,   8, 
        AC1F,   8, 
        XTUB,   32, 
        XTUS,   32, 
        XMPB,   32, 
        DDRF,   8, 
        RTD3,   8, 
        PEP0,   8, 
        PEP3,   8, 
        DPTF,   8, 
        DCFE,   16, 
        SADE,   8, 
        FND1,   8, 
        AMBD,   8, 
        AMAT,   8, 
        AMPT,   8, 
        AMCT,   8, 
        AMHT,   8, 
        SKDE,   8, 
        SKAT,   8, 
        SKPT,   8, 
        SKCT,   8, 
        SKHT,   8, 
        EFDE,   8, 
        EFAT,   8, 
        EFPT,   8, 
        EFCT,   8, 
        EFHT,   8, 
        VRDE,   8, 
        VRAT,   8, 
        VRPT,   8, 
        VRCT,   8, 
        VRHT,   8, 
        DPAP,   8, 
        DPPP,   8, 
        DPCP,   8, 
        PIDE,   8, 
        PPSZ,   32, 
        Offset (0x9C), 
        CHEN,   8, 
        S0ID,   8, 
        CTDB,   8, 
        DKSM,   8, 
        SIO1,   16, 
        SIO2,   16, 
        SPBA,   16, 
        Offset (0x1F3), 
        PG3S,   8, 
        PWRE,   8, 
        Offset (0x1F7), 
        PPPR,   16, 
        PBPE,   8, 
        VSPE,   8, 
        RFIM,   8, 
        Offset (0x203), 
        XHPR,   8, 
        RIC0,   8, 
        GBSX,   8, 
        IUBE,   8, 
        IUCE,   8, 
        IUDE,   8, 
        ECNO,   8, 
        AUDD,   16, 
        IC0D,   16, 
        IC1D,   16, 
        IC1S,   16, 
        VRRD,   16, 
        PSCP,   8, 
        I20D,   16, 
        I21D,   16, 
        RCG0,   16, 
        RCG1,   16, 
        P2ME,   8, 
        P2MK,   8, 
        SSH0,   16, 
        SSL0,   16, 
        SSD0,   16, 
        FMH0,   16, 
        FML0,   16, 
        FMD0,   16, 
        FPH0,   16, 
        FPL0,   16, 
        FPD0,   16, 
        HSH0,   16, 
        HSL0,   16, 
        HSD0,   16, 
        Offset (0x23D), 
        SSH1,   16, 
        SSL1,   16, 
        SSD1,   16, 
        FMH1,   16, 
        FML1,   16, 
        FMD1,   16, 
        FPH1,   16, 
        FPL1,   16, 
        FPD1,   16, 
        HSH1,   16, 
        HSL1,   16, 
        HSD1,   16, 
        Offset (0x256), 
        SSH2,   16, 
        SSL2,   16, 
        SSD2,   16, 
        FMH2,   16, 
        FML2,   16, 
        FMD2,   16, 
        FPH2,   16, 
        FPL2,   16, 
        FPD2,   16, 
        HSH2,   16, 
        HSL2,   16, 
        HSD2,   16, 
        Offset (0x26F), 
        SSH3,   16, 
        SSL3,   16, 
        SSD3,   16, 
        FMH3,   16, 
        FML3,   16, 
        FMD3,   16, 
        FPH3,   16, 
        FPL3,   16, 
        FPD3,   16, 
        HSH3,   16, 
        HSL3,   16, 
        HSD3,   16, 
        Offset (0x288), 
        SSH4,   16, 
        SSL4,   16, 
        SSD4,   16, 
        FMH4,   16, 
        FML4,   16, 
        FMD4,   16, 
        FPH4,   16, 
        FPL4,   16, 
        FPD4,   16, 
        HSH4,   16, 
        HSL4,   16, 
        HSD4,   16, 
        Offset (0x2A1), 
        SSH5,   16, 
        SSL5,   16, 
        SSD5,   16, 
        FMH5,   16, 
        FML5,   16, 
        FMD5,   16, 
        FPH5,   16, 
        FPL5,   16, 
        FPD5,   16, 
        HSH5,   16, 
        HSL5,   16, 
        HSD5,   16, 
        Offset (0x2BA), 
        M0C0,   16, 
        M1C0,   16, 
        M0C1,   16, 
        M1C1,   16, 
        M0C2,   16, 
        M1C2,   16, 
        M0C3,   16, 
        M1C3,   16, 
        M0C4,   16, 
        M1C4,   16, 
        M0C5,   16, 
        M1C5,   16, 
        M0C6,   16, 
        M1C6,   16, 
        M0C7,   16, 
        M1C7,   16, 
        M0C8,   16, 
        M1C8,   16, 
        Offset (0x2DF), 
        M0C9,   16, 
        M1C9,   16, 
        M0CA,   16, 
        M1CA,   16, 
        M0CB,   16, 
        M1CB,   16, 
        Offset (0x2EC), 
        GIRQ,   32, 
        DMTP,   8, 
        DMTD,   8, 
        DMSH,   8, 
        SHSB,   8, 
        PLCS,   8, 
        PLVL,   16, 
        WWSD,   8, 
        CVSD,   8, 
        SSDD,   8, 
        INLD,   8, 
        IFAT,   8, 
        IFPT,   8, 
        IFCT,   8, 
        IFHT,   8, 
        USBH,   8, 
        BCV4,   8, 
        WTV0,   8, 
        WTV1,   8, 
        APFU,   8, 
        Offset (0x30A), 
        PEPC,   64, 
        VRSD,   16, 
        PB1E,   8, 
        GNID,   8, 
        Offset (0x320), 
        AUPL,   32, 
        Offset (0x327), 
        CHGE,   8, 
        AMC3,   8, 
        SKC3,   8, 
        EFC3,   8, 
        VRC3,   8, 
        IFC3,   8, 
        WGC3,   8, 
        ESPC,   8, 
        BATR,   8, 
        IN34,   8, 
        ECLP,   8, 
        MEMS,   8, 
        S1DE,   8, 
        S2DE,   8, 
        S3DE,   8, 
        S4DE,   8, 
        S5DE,   8, 
        S1S3,   8, 
        S2S3,   8, 
        S3S3,   8, 
        S4S3,   8, 
        S5S3,   8, 
        PSME,   8, 
        PDT1,   8, 
        PLM1,   32, 
        PTW1,   32, 
        DDT1,   8, 
        DDP1,   8, 
        DLI1,   16, 
        DPL1,   16, 
        DTW1,   32, 
        DMI1,   16, 
        DMA1,   16, 
        DMT1,   16, 
        WIFE,   8, 
        DOM1,   8, 
        LIM1,   16, 
        TIM1,   32, 
        TRD0,   8, 
        TRL0,   8, 
        TRD1,   8, 
        TRL1,   8, 
        WDM1,   8, 
        CID1,   16, 
        Offset (0x3FA), 
        APPE,   8, 
        SDS0,   8, 
        SDS1,   8, 
        SDS2,   8, 
        SDS3,   8, 
        SDS4,   8, 
        SDS5,   8, 
        SDS6,   8, 
        SDS7,   8, 
        SDS8,   8, 
        SDS9,   8, 
        SDSA,   8, 
        TPLT,   8, 
        TPLM,   8, 
        TPLB,   8, 
        TPLH,   16, 
        TPLS,   8, 
        TPDT,   8, 
        TPDM,   8, 
        TPDB,   8, 
        TPDH,   16, 
        TPDS,   8, 
        FPTT,   8, 
        FPTM,   8, 
        WTVX,   8, 
        WITX,   8, 
        GPTD,   8, 
        GDBT,   16, 
        UTKX,   8, 
        SPTD,   8, 
        Offset (0x42A), 
        ATLB,   32, 
        SDM0,   8, 
        SDM1,   8, 
        SDM2,   8, 
        SDM3,   8, 
        SDM4,   8, 
        SDM5,   8, 
        SDM6,   8, 
        SDM7,   8, 
        SDM8,   8, 
        SDM9,   8, 
        SDMA,   8, 
        SDMB,   8, 
        Offset (0x43B), 
        USTP,   8, 
        Offset (0x465), 
        GFPS,   32, 
        GFPI,   32, 
        WBBR,   32, 
        GBTK,   32, 
        GBTI,   32, 
        GPDI,   32, 
        GPLI,   32, 
        CL00,   8, 
        CL01,   8, 
        CL02,   8, 
        CL03,   8, 
        CL04,   8, 
        CL05,   8, 
        L0EN,   8, 
        L1EN,   8, 
        L2EN,   8, 
        L3EN,   8, 
        L4EN,   8, 
        L5EN,   8, 
        CDIV,   8, 
        C0VE,   8, 
        C0TP,   8, 
        C0CV,   8, 
        C0IC,   32, 
        C0GP,   8, 
        C0IB,   8, 
        C0IA,   16, 
        C0P0,   8, 
        C0P1,   8, 
        C0P2,   8, 
        C0P3,   8, 
        C0P4,   8, 
        C0P5,   8, 
        C0G0,   8, 
        C0G1,   8, 
        C0G2,   8, 
        C0G3,   8, 
        C0G4,   8, 
        C0G5,   8, 
        C0F0,   8, 
        C0F1,   8, 
        C0F2,   8, 
        C0F3,   8, 
        C0F4,   8, 
        C0F5,   8, 
        C0A0,   8, 
        C0A1,   8, 
        C0A2,   8, 
        C0A3,   8, 
        C0A4,   8, 
        C0A5,   8, 
        C0I0,   8, 
        C0I1,   8, 
        C0I2,   8, 
        C0I3,   8, 
        C0I4,   8, 
        C0I5,   8, 
        C0PL,   8, 
        C0W0,   8, 
        C0W1,   8, 
        C0W2,   8, 
        C0W3,   8, 
        C0SP,   8, 
        C0W4,   8, 
        C0W5,   8, 
        C0CS,   8, 
        C1VE,   8, 
        C1TP,   8, 
        C1CV,   8, 
        C1IC,   32, 
        C1GP,   8, 
        C1IB,   8, 
        C1IA,   16, 
        C1P0,   8, 
        C1P1,   8, 
        C1P2,   8, 
        C1P3,   8, 
        C1P4,   8, 
        C1P5,   8, 
        C1G0,   8, 
        C1G1,   8, 
        C1G2,   8, 
        C1G3,   8, 
        C1G4,   8, 
        C1G5,   8, 
        C1F0,   8, 
        C1F1,   8, 
        C1F2,   8, 
        C1F3,   8, 
        C1F4,   8, 
        C1F5,   8, 
        C1A0,   8, 
        C1A1,   8, 
        C1A2,   8, 
        C1A3,   8, 
        C1A4,   8, 
        C1A5,   8, 
        C1I0,   8, 
        C1I1,   8, 
        C1I2,   8, 
        C1I3,   8, 
        C1I4,   8, 
        C1I5,   8, 
        C1PL,   8, 
        C1W0,   8, 
        C1W1,   8, 
        C1W2,   8, 
        C1W3,   8, 
        C1SP,   8, 
        C1W4,   8, 
        C1W5,   8, 
        C1CS,   8, 
        C2VE,   8, 
        C2TP,   8, 
        C2CV,   8, 
        C2IC,   32, 
        C2GP,   8, 
        C2IB,   8, 
        C2IA,   16, 
        C2P0,   8, 
        C2P1,   8, 
        C2P2,   8, 
        C2P3,   8, 
        C2P4,   8, 
        C2P5,   8, 
        C2G0,   8, 
        C2G1,   8, 
        C2G2,   8, 
        C2G3,   8, 
        C2G4,   8, 
        C2G5,   8, 
        C2F0,   8, 
        C2F1,   8, 
        C2F2,   8, 
        C2F3,   8, 
        C2F4,   8, 
        C2F5,   8, 
        C2A0,   8, 
        C2A1,   8, 
        C2A2,   8, 
        C2A3,   8, 
        C2A4,   8, 
        C2A5,   8, 
        C2I0,   8, 
        C2I1,   8, 
        C2I2,   8, 
        C2I3,   8, 
        C2I4,   8, 
        C2I5,   8, 
        C2PL,   8, 
        C2W0,   8, 
        C2W1,   8, 
        C2W2,   8, 
        C2W3,   8, 
        C2SP,   8, 
        C2W4,   8, 
        C2W5,   8, 
        C2CS,   8, 
        C3VE,   8, 
        C3TP,   8, 
        C3CV,   8, 
        C3IC,   32, 
        C3GP,   8, 
        C3IB,   8, 
        C3IA,   16, 
        C3P0,   8, 
        C3P1,   8, 
        C3P2,   8, 
        C3P3,   8, 
        C3P4,   8, 
        C3P5,   8, 
        C3G0,   8, 
        C3G1,   8, 
        C3G2,   8, 
        C3G3,   8, 
        C3G4,   8, 
        C3G5,   8, 
        C3F0,   8, 
        C3F1,   8, 
        C3F2,   8, 
        C3F3,   8, 
        C3F4,   8, 
        C3F5,   8, 
        C3A0,   8, 
        C3A1,   8, 
        C3A2,   8, 
        C3A3,   8, 
        C3A4,   8, 
        C3A5,   8, 
        C3I0,   8, 
        C3I1,   8, 
        C3I2,   8, 
        C3I3,   8, 
        C3I4,   8, 
        C3I5,   8, 
        C3PL,   8, 
        C3W0,   8, 
        C3W1,   8, 
        C3W2,   8, 
        C3W3,   8, 
        C3SP,   8, 
        C3W4,   8, 
        C3W5,   8, 
        C3CS,   8, 
        C4VE,   8, 
        C4TP,   8, 
        C4CV,   8, 
        C4IC,   32, 
        C4GP,   8, 
        C4IB,   8, 
        C4IA,   16, 
        C4P0,   8, 
        C4P1,   8, 
        C4P2,   8, 
        C4P3,   8, 
        C4P4,   8, 
        C4P5,   8, 
        C4G0,   8, 
        C4G1,   8, 
        C4G2,   8, 
        C4G3,   8, 
        C4G4,   8, 
        C4G5,   8, 
        C4F0,   8, 
        C4F1,   8, 
        C4F2,   8, 
        C4F3,   8, 
        C4F4,   8, 
        C4F5,   8, 
        C4A0,   8, 
        C4A1,   8, 
        C4A2,   8, 
        C4A3,   8, 
        C4A4,   8, 
        C4A5,   8, 
        C4I0,   8, 
        C4I1,   8, 
        C4I2,   8, 
        C4I3,   8, 
        C4I4,   8, 
        C4I5,   8, 
        C4PL,   8, 
        C4W0,   8, 
        C4W1,   8, 
        C4W2,   8, 
        C4W3,   8, 
        C4SP,   8, 
        C4W4,   8, 
        C4W5,   8, 
        C4CS,   8, 
        C5VE,   8, 
        C5TP,   8, 
        C5CV,   8, 
        C5IC,   32, 
        C5GP,   8, 
        C5IB,   8, 
        C5IA,   16, 
        C5P0,   8, 
        C5P1,   8, 
        C5P2,   8, 
        C5P3,   8, 
        C5P4,   8, 
        C5P5,   8, 
        C5G0,   8, 
        C5G1,   8, 
        C5G2,   8, 
        C5G3,   8, 
        C5G4,   8, 
        C5G5,   8, 
        C5F0,   8, 
        C5F1,   8, 
        C5F2,   8, 
        C5F3,   8, 
        C5F4,   8, 
        C5F5,   8, 
        C5A0,   8, 
        C5A1,   8, 
        C5A2,   8, 
        C5A3,   8, 
        C5A4,   8, 
        C5A5,   8, 
        C5I0,   8, 
        C5I1,   8, 
        C5I2,   8, 
        C5I3,   8, 
        C5I4,   8, 
        C5I5,   8, 
        C5PL,   8, 
        C5W0,   8, 
        C5W1,   8, 
        C5W2,   8, 
        C5W3,   8, 
        C5SP,   8, 
        C5W4,   8, 
        C5W5,   8, 
        C5CS,   8, 
        L0SM,   8, 
        L0H0,   8, 
        L0H1,   8, 
        L0H2,   8, 
        L0H3,   8, 
        L0H4,   8, 
        L0H5,   8, 
        L0H6,   8, 
        L0H7,   8, 
        L0H8,   8, 
        L0PL,   8, 
        L0M0,   8, 
        L0M1,   8, 
        L0M2,   8, 
        L0M3,   8, 
        L0M4,   8, 
        L0M5,   8, 
        L0M6,   8, 
        L0M7,   8, 
        L0M8,   8, 
        L0M9,   8, 
        L0MA,   8, 
        L0MB,   8, 
        L0MC,   8, 
        L0MD,   8, 
        L0ME,   8, 
        L0MF,   8, 
        L0DI,   8, 
        L0BS,   8, 
        L0A0,   16, 
        L0A1,   16, 
        L0A2,   16, 
        L0A3,   16, 
        L0A4,   16, 
        L0A5,   16, 
        L0A6,   16, 
        L0A7,   16, 
        L0A8,   16, 
        L0A9,   16, 
        L0AA,   16, 
        L0AB,   16, 
        L0D0,   8, 
        L0D1,   8, 
        L0D2,   8, 
        L0D3,   8, 
        L0D4,   8, 
        L0D5,   8, 
        L0D6,   8, 
        L0D7,   8, 
        L0D8,   8, 
        L0D9,   8, 
        L0DA,   8, 
        L0DB,   8, 
        L0DV,   8, 
        L0CV,   8, 
        L0LU,   8, 
        L0NL,   8, 
        L0EE,   8, 
        L0VC,   8, 
        L0FS,   8, 
        L0LE,   8, 
        L0DG,   8, 
        L0CK,   32, 
        L0CL,   8, 
        L0PP,   8, 
        L0VR,   8, 
        L0FD,   8, 
        L1SM,   8, 
        L1H0,   8, 
        L1H1,   8, 
        L1H2,   8, 
        L1H3,   8, 
        L1H4,   8, 
        L1H5,   8, 
        L1H6,   8, 
        L1H7,   8, 
        L1H8,   8, 
        L1PL,   8, 
        L1M0,   8, 
        L1M1,   8, 
        L1M2,   8, 
        L1M3,   8, 
        L1M4,   8, 
        L1M5,   8, 
        L1M6,   8, 
        L1M7,   8, 
        L1M8,   8, 
        L1M9,   8, 
        L1MA,   8, 
        L1MB,   8, 
        L1MC,   8, 
        L1MD,   8, 
        L1ME,   8, 
        L1MF,   8, 
        L1DI,   8, 
        L1BS,   8, 
        L1A0,   16, 
        L1A1,   16, 
        L1A2,   16, 
        L1A3,   16, 
        L1A4,   16, 
        L1A5,   16, 
        L1A6,   16, 
        L1A7,   16, 
        L1A8,   16, 
        L1A9,   16, 
        L1AA,   16, 
        L1AB,   16, 
        L1D0,   8, 
        L1D1,   8, 
        L1D2,   8, 
        L1D3,   8, 
        L1D4,   8, 
        L1D5,   8, 
        L1D6,   8, 
        L1D7,   8, 
        L1D8,   8, 
        L1D9,   8, 
        L1DA,   8, 
        L1DB,   8, 
        L1DV,   8, 
        L1CV,   8, 
        L1LU,   8, 
        L1NL,   8, 
        L1EE,   8, 
        L1VC,   8, 
        L1FS,   8, 
        L1LE,   8, 
        L1DG,   8, 
        L1CK,   32, 
        L1CL,   8, 
        L1PP,   8, 
        L1VR,   8, 
        L1FD,   8, 
        L2SM,   8, 
        L2H0,   8, 
        L2H1,   8, 
        L2H2,   8, 
        L2H3,   8, 
        L2H4,   8, 
        L2H5,   8, 
        L2H6,   8, 
        L2H7,   8, 
        L2H8,   8, 
        L2PL,   8, 
        L2M0,   8, 
        L2M1,   8, 
        L2M2,   8, 
        L2M3,   8, 
        L2M4,   8, 
        L2M5,   8, 
        L2M6,   8, 
        L2M7,   8, 
        L2M8,   8, 
        L2M9,   8, 
        L2MA,   8, 
        L2MB,   8, 
        L2MC,   8, 
        L2MD,   8, 
        L2ME,   8, 
        L2MF,   8, 
        L2DI,   8, 
        L2BS,   8, 
        L2A0,   16, 
        L2A1,   16, 
        L2A2,   16, 
        L2A3,   16, 
        L2A4,   16, 
        L2A5,   16, 
        L2A6,   16, 
        L2A7,   16, 
        L2A8,   16, 
        L2A9,   16, 
        L2AA,   16, 
        L2AB,   16, 
        L2D0,   8, 
        L2D1,   8, 
        L2D2,   8, 
        L2D3,   8, 
        L2D4,   8, 
        L2D5,   8, 
        L2D6,   8, 
        L2D7,   8, 
        L2D8,   8, 
        L2D9,   8, 
        L2DA,   8, 
        L2DB,   8, 
        L2DV,   8, 
        L2CV,   8, 
        L2LU,   8, 
        L2NL,   8, 
        L2EE,   8, 
        L2VC,   8, 
        L2FS,   8, 
        L2LE,   8, 
        L2DG,   8, 
        L2CK,   32, 
        L2CL,   8, 
        L2PP,   8, 
        L2VR,   8, 
        L2FD,   8, 
        L3SM,   8, 
        L3H0,   8, 
        L3H1,   8, 
        L3H2,   8, 
        L3H3,   8, 
        L3H4,   8, 
        L3H5,   8, 
        L3H6,   8, 
        L3H7,   8, 
        L3H8,   8, 
        L3PL,   8, 
        L3M0,   8, 
        L3M1,   8, 
        L3M2,   8, 
        L3M3,   8, 
        L3M4,   8, 
        L3M5,   8, 
        L3M6,   8, 
        L3M7,   8, 
        L3M8,   8, 
        L3M9,   8, 
        L3MA,   8, 
        L3MB,   8, 
        L3MC,   8, 
        L3MD,   8, 
        L3ME,   8, 
        L3MF,   8, 
        L3DI,   8, 
        L3BS,   8, 
        L3A0,   16, 
        L3A1,   16, 
        L3A2,   16, 
        L3A3,   16, 
        L3A4,   16, 
        L3A5,   16, 
        L3A6,   16, 
        L3A7,   16, 
        L3A8,   16, 
        L3A9,   16, 
        L3AA,   16, 
        L3AB,   16, 
        L3D0,   8, 
        L3D1,   8, 
        L3D2,   8, 
        L3D3,   8, 
        L3D4,   8, 
        L3D5,   8, 
        L3D6,   8, 
        L3D7,   8, 
        L3D8,   8, 
        L3D9,   8, 
        L3DA,   8, 
        L3DB,   8, 
        L3DV,   8, 
        L3CV,   8, 
        L3LU,   8, 
        L3NL,   8, 
        L3EE,   8, 
        L3VC,   8, 
        L3FS,   8, 
        L3LE,   8, 
        L3DG,   8, 
        L3CK,   32, 
        L3CL,   8, 
        L3PP,   8, 
        L3VR,   8, 
        L3FD,   8, 
        L4SM,   8, 
        L4H0,   8, 
        L4H1,   8, 
        L4H2,   8, 
        L4H3,   8, 
        L4H4,   8, 
        L4H5,   8, 
        L4H6,   8, 
        L4H7,   8, 
        L4H8,   8, 
        L4PL,   8, 
        L4M0,   8, 
        L4M1,   8, 
        L4M2,   8, 
        L4M3,   8, 
        L4M4,   8, 
        L4M5,   8, 
        L4M6,   8, 
        L4M7,   8, 
        L4M8,   8, 
        L4M9,   8, 
        L4MA,   8, 
        L4MB,   8, 
        L4MC,   8, 
        L4MD,   8, 
        L4ME,   8, 
        L4MF,   8, 
        L4DI,   8, 
        L4BS,   8, 
        L4A0,   16, 
        L4A1,   16, 
        L4A2,   16, 
        L4A3,   16, 
        L4A4,   16, 
        L4A5,   16, 
        L4A6,   16, 
        L4A7,   16, 
        L4A8,   16, 
        L4A9,   16, 
        L4AA,   16, 
        L4AB,   16, 
        L4D0,   8, 
        L4D1,   8, 
        L4D2,   8, 
        L4D3,   8, 
        L4D4,   8, 
        L4D5,   8, 
        L4D6,   8, 
        L4D7,   8, 
        L4D8,   8, 
        L4D9,   8, 
        L4DA,   8, 
        L4DB,   8, 
        L4DV,   8, 
        L4CV,   8, 
        L4LU,   8, 
        L4NL,   8, 
        L4EE,   8, 
        L4VC,   8, 
        L4FS,   8, 
        L4LE,   8, 
        L4DG,   8, 
        L4CK,   32, 
        L4CL,   8, 
        L4PP,   8, 
        L4VR,   8, 
        L4FD,   8, 
        L5SM,   8, 
        L5H0,   8, 
        L5H1,   8, 
        L5H2,   8, 
        L5H3,   8, 
        L5H4,   8, 
        L5H5,   8, 
        L5H6,   8, 
        L5H7,   8, 
        L5H8,   8, 
        L5PL,   8, 
        L5M0,   8, 
        L5M1,   8, 
        L5M2,   8, 
        L5M3,   8, 
        L5M4,   8, 
        L5M5,   8, 
        L5M6,   8, 
        L5M7,   8, 
        L5M8,   8, 
        L5M9,   8, 
        L5MA,   8, 
        L5MB,   8, 
        L5MC,   8, 
        L5MD,   8, 
        L5ME,   8, 
        L5MF,   8, 
        L5DI,   8, 
        L5BS,   8, 
        L5A0,   16, 
        L5A1,   16, 
        L5A2,   16, 
        L5A3,   16, 
        L5A4,   16, 
        L5A5,   16, 
        L5A6,   16, 
        L5A7,   16, 
        L5A8,   16, 
        L5A9,   16, 
        L5AA,   16, 
        L5AB,   16, 
        L5D0,   8, 
        L5D1,   8, 
        L5D2,   8, 
        L5D3,   8, 
        L5D4,   8, 
        L5D5,   8, 
        L5D6,   8, 
        L5D7,   8, 
        L5D8,   8, 
        L5D9,   8, 
        L5DA,   8, 
        L5DB,   8, 
        L5DV,   8, 
        L5CV,   8, 
        L5LU,   8, 
        L5NL,   8, 
        L5EE,   8, 
        L5VC,   8, 
        L5FS,   8, 
        L5LE,   8, 
        L5DG,   8, 
        L5CK,   32, 
        L5CL,   8, 
        L5PP,   8, 
        L5VR,   8, 
        L5FD,   8, 
        F0FM,   8, 
        F0MS,   8, 
        F0M0,   8, 
        F0M1,   8, 
        F0M2,   8, 
        F0M3,   8, 
        F0M4,   8, 
        F0M5,   8, 
        F0M6,   8, 
        F0M7,   8, 
        F0M8,   8, 
        F0M9,   8, 
        F0MA,   8, 
        F0MB,   8, 
        F0MC,   8, 
        F0MD,   8, 
        F0ME,   8, 
        F0MF,   8, 
        F0BS,   8, 
        F0AB,   16, 
        F0GP,   8, 
        F0GG,   16, 
        F0AV,   8, 
        F0IV,   8, 
        F0OM,   8, 
        F1FM,   8, 
        F1MS,   8, 
        F1M0,   8, 
        F1M1,   8, 
        F1M2,   8, 
        F1M3,   8, 
        F1M4,   8, 
        F1M5,   8, 
        F1M6,   8, 
        F1M7,   8, 
        F1M8,   8, 
        F1M9,   8, 
        F1MA,   8, 
        F1MB,   8, 
        F1MC,   8, 
        F1MD,   8, 
        F1ME,   8, 
        F1MF,   8, 
        F1BS,   8, 
        F1AB,   16, 
        F1GP,   8, 
        F1GG,   16, 
        F1AV,   8, 
        F1IV,   8, 
        F1OM,   8, 
        F2FM,   8, 
        F2MS,   8, 
        F2M0,   8, 
        F2M1,   8, 
        F2M2,   8, 
        F2M3,   8, 
        F2M4,   8, 
        F2M5,   8, 
        F2M6,   8, 
        F2M7,   8, 
        F2M8,   8, 
        F2M9,   8, 
        F2MA,   8, 
        F2MB,   8, 
        F2MC,   8, 
        F2MD,   8, 
        F2ME,   8, 
        F2MF,   8, 
        F2BS,   8, 
        F2AB,   16, 
        F2GP,   8, 
        F2GG,   16, 
        F2AV,   8, 
        F2IV,   8, 
        F2OM,   8, 
        F3FM,   8, 
        F3MS,   8, 
        F3M0,   8, 
        F3M1,   8, 
        F3M2,   8, 
        F3M3,   8, 
        F3M4,   8, 
        F3M5,   8, 
        F3M6,   8, 
        F3M7,   8, 
        F3M8,   8, 
        F3M9,   8, 
        F3MA,   8, 
        F3MB,   8, 
        F3MC,   8, 
        F3MD,   8, 
        F3ME,   8, 
        F3MF,   8, 
        F3BS,   8, 
        F3AB,   16, 
        F3GP,   8, 
        F3GG,   16, 
        F3AV,   8, 
        F3IV,   8, 
        F3OM,   8, 
        F4FM,   8, 
        F4MS,   8, 
        F4M0,   8, 
        F4M1,   8, 
        F4M2,   8, 
        F4M3,   8, 
        F4M4,   8, 
        F4M5,   8, 
        F4M6,   8, 
        F4M7,   8, 
        F4M8,   8, 
        F4M9,   8, 
        F4MA,   8, 
        F4MB,   8, 
        F4MC,   8, 
        F4MD,   8, 
        F4ME,   8, 
        F4MF,   8, 
        F4BS,   8, 
        F4AB,   16, 
        F4GP,   8, 
        F4GG,   16, 
        F4AV,   8, 
        F4IV,   8, 
        F4OM,   8, 
        F5FM,   8, 
        F5MS,   8, 
        F5M0,   8, 
        F5M1,   8, 
        F5M2,   8, 
        F5M3,   8, 
        F5M4,   8, 
        F5M5,   8, 
        F5M6,   8, 
        F5M7,   8, 
        F5M8,   8, 
        F5M9,   8, 
        F5MA,   8, 
        F5MB,   8, 
        F5MC,   8, 
        F5MD,   8, 
        F5ME,   8, 
        F5MF,   8, 
        F5BS,   8, 
        F5AB,   16, 
        F5GP,   8, 
        F5GG,   16, 
        F5AV,   8, 
        F5IV,   8, 
        F5OM,   8, 
        ECR1,   8, 
        I2SC,   8, 
        I2SI,   32, 
        I2SB,   8, 
        ODV0,   8, 
        ODV1,   8, 
        ODV2,   8, 
        ODV3,   8, 
        ODV4,   8, 
        ODV5,   8, 
        UBCB,   32, 
        WIFC,   8, 
        Offset (0x860), 
        ADPM,   32, 
        AG1L,   64, 
        AG1H,   64, 
        AG2L,   64, 
        AG2H,   64, 
        AG3L,   64, 
        AG3H,   64, 
        HEFE,   8, 
        XDCE,   8, 
        STXE,   8, 
        ST10,   8, 
        ST11,   8, 
        ST12,   8, 
        ST13,   8, 
        ST14,   8, 
        ST15,   8, 
        ST16,   8, 
        ST17,   8, 
        ST18,   8, 
        ST19,   8, 
        ENVM,   8, 
        DHSP,   16, 
        DSSP,   16, 
        DSTP,   8, 
        STDE,   8, 
        STRS,   8, 
        ST20,   8, 
        ST21,   8, 
        ST22,   8, 
        ST23,   8, 
        ST24,   8, 
        ST25,   8, 
        ST26,   8, 
        ST27,   8, 
        ST28,   8, 
        ST29,   8, 
        ST30,   8, 
        ST31,   8, 
        ST32,   8, 
        ST33,   8, 
        ST34,   8, 
        ST35,   8, 
        ST36,   8, 
        ST37,   8, 
        ST38,   8, 
        ST39,   8, 
        ST40,   8, 
        ST41,   8, 
        ST42,   8, 
        ST43,   8, 
        ST44,   8, 
        ST45,   8, 
        ST46,   8, 
        ST47,   8, 
        ST48,   8, 
        ST49,   8, 
        SD11,   8, 
        SD12,   8, 
        SD13,   8, 
        SD14,   8, 
        SD15,   8, 
        SD16,   8, 
        SD21,   8, 
        SD22,   8, 
        SD23,   8, 
        SD24,   8, 
        SD25,   8, 
        SD26,   8, 
        SD31,   8, 
        SD32,   8, 
        SD33,   8, 
        SD34,   8, 
        SD35,   8, 
        SD36,   8, 
        Offset (0x902), 
        SDAA,   8, 
        SDAB,   8, 
        BTSE,   8, 
        BTBR,   8, 
        BED2,   8, 
        BED3,   8, 
        BTLE,   8, 
        BTL2,   8, 
        BTLL,   8, 
        Offset (0x90D), 
        ATDV,   8, 
        COEM,   8, 
        RTVM,   8, 
        USTC,   8, 
        HEB1,   32, 
        BATP,   8, 
        TSDB,   8, 
        EPTU,   8, 
        Offset (0x919), 
        RBY1,   8, 
        RBY2,   8, 
        SCSS,   8, 
        NCTC,   8, 
        NCTI,   8, 
        NCTH,   8, 
        HSIO,   8, 
        ZPOD,   8, 
        RGBC,   8, 
        DPTC,   8, 
        SRSP,   32, 
        CEDS,   8, 
        EHK3,   8, 
        EHK4,   8, 
        EHK5,   8, 
        EHK6,   8, 
        EHK7,   8, 
        EHK8,   8, 
        VBVP,   8, 
        VBVD,   8, 
        VBHB,   8, 
        VBRL,   8, 
        SMSS,   8, 
        VBST,   8, 
        ADAS,   8, 
        PPBG,   32, 
        AEAB,   8, 
        AHDB,   8, 
        ELPM,   32, 
        ELPS,   32, 
        UCMS,   8, 
        UCG1,   32, 
        UCG2,   32, 
        UCG3,   32, 
        UCG4,   32, 
        UTCE,   8, 
        Offset (0x969), 
        PCHE,   8, 
        Offset (0x96D), 
        UDGF,   8, 
        UDUP,   8, 
        DBGF,   8, 
        DBUP,   8, 
        TTUP,   8, 
        TP1T,   8, 
        TP1P,   8, 
        TP1D,   8, 
        TP2T,   8, 
        TP2P,   8, 
        TP2D,   8, 
        TP3T,   8, 
        TP3P,   8, 
        TP3D,   8, 
        TP4T,   8, 
        TP4P,   8, 
        TP4D,   8, 
        TP5T,   8, 
        TP5P,   8, 
        TP5D,   8, 
        TP6T,   8, 
        TP6P,   8, 
        TP6D,   8, 
        STAS,   8, 
        WRTO,   8, 
        PRST,   32, 
        WPRP,   8, 
        PUIS,   8, 
        PSWP,   32, 
        RPNB,   8, 
        POME,   8, 
        PSW2,   32, 
        RPN2,   8, 
        WFCP,   32, 
        PFCP,   8, 
        WBRS,   32, 
        PBRS,   8, 
        WWKP,   32, 
        GPLP,   32, 
        GPLR,   32, 
        GPI1,   32, 
        TPP1,   32, 
        TPR1,   32, 
        PPDI,   8, 
        PPLI,   8, 
        PPLP,   8, 
        PPLR,   8, 
        PPI1,   8, 
        PPP1,   8, 
        PPR1,   8, 
        PSPE,   32, 
        PPSP,   8, 
        PSPR,   32, 
        PPSR,   8, 
        PSP2,   32, 
        PS2P,   8, 
        PSR2,   32, 
        SR2P,   8, 
        WLWK,   32, 
        WLRP,   8, 
        SATP,   32, 
        STPP,   8, 
        SSDP,   32, 
        SDPP,   8, 
        SSDR,   32, 
        SDRP,   8, 
        SD2P,   32, 
        SDP1,   8, 
        SD2R,   32, 
        SDR1,   8, 
        SD5P,   32, 
        SDP5,   8, 
        SD5R,   32, 
        SDR5,   8, 
        DG2P,   32, 
        DGP2,   8, 
        DG2R,   32, 
        DGR2,   8, 
        DGWP,   32, 
        SXI1,   8, 
        SXI2,   8, 
        SXP1,   8, 
        SXP2,   8, 
        TSD0,   8, 
        WCLK,   8, 
        CWEF,   8, 
        CECV,   32, 
        WWRP,   8, 
        KMOW,   8, 
        WAGE,   8, 
        AGA1,   8, 
        AGA2,   8, 
        AGA3,   8, 
        AGA4,   8, 
        AGA5,   8, 
        AGB1,   8, 
        AGB2,   8, 
        AGB3,   8, 
        AGB4,   8, 
        AGB5,   8, 
        SGMM,   8, 
        SG00,   8, 
        SG01,   8, 
        SG02,   8, 
        SG03,   8, 
        SG04,   8, 
        SG05,   8, 
        SG06,   8, 
        SG07,   8, 
        SG08,   8, 
        SG09,   8, 
        SG10,   8, 
        SG11,   8, 
        SG12,   8, 
        SG13,   8, 
        SG14,   8, 
        SG15,   8, 
        SG16,   8, 
        SG17,   8, 
        SG18,   8, 
        ACSD,   8, 
        I5BS,   8, 
        DGVR,   32, 
        LPMR,   32, 
        SG19,   8, 
        SG20,   8, 
        SG21,   8, 
        P1PE,   32, 
        P1PP,   8, 
        P1RE,   32, 
        P1RP,   8, 
        P1WP,   32, 
        PRP1,   8, 
        P2PE,   32, 
        P2PP,   8, 
        P2RE,   32, 
        P2RP,   8, 
        P2WP,   32, 
        PRP2,   8, 
        PSP3,   32, 
        PS3P,   8, 
        PSR3,   32, 
        SR3P,   8, 
        PSW3,   32, 
        RPN3,   8, 
        SD3P,   32, 
        SDP3,   8, 
        SD3R,   32, 
        SDR3,   8, 
        SD4P,   32, 
        SDP4,   8, 
        SD4R,   32, 
        SDR4,   8, 
        XSMI,   32, 
        DUWS,   8, 
        ST50,   8, 
        ST51,   8, 
        ST52,   8, 
        ST53,   8, 
        ST54,   8, 
        ST55,   8, 
        ST56,   8, 
        ST57,   8, 
        ST58,   8, 
        ST59,   8, 
        ST5A,   8, 
        ST5B,   8, 
        ST60,   8, 
        ST61,   8, 
        ST62,   8, 
        ST63,   8, 
        ST64,   8, 
        ST65,   8, 
        ST66,   8, 
        ST67,   8, 
        ST68,   8, 
        ST69,   8, 
        ST6A,   8, 
        ST6B,   8, 
        ST70,   8, 
        ST71,   8, 
        ST72,   8, 
        ST73,   8, 
        ST74,   8, 
        ST75,   8, 
        ST76,   8, 
        ST77,   8, 
        ST78,   8, 
        ST79,   8, 
        ST7A,   8, 
        ST7B,   8, 
        ST80,   8, 
        ST81,   8, 
        ST82,   8, 
        ST83,   8, 
        ST84,   8, 
        ST85,   8, 
        ST86,   8, 
        ST87,   8, 
        ST88,   8, 
        ST89,   8, 
        ST8A,   8, 
        ST8B,   8, 
        SD17,   8, 
        SD18,   8, 
        SD19,   8, 
        SD27,   8, 
        SD28,   8, 
        SD29,   8, 
        SD37,   8, 
        SD38,   8, 
        SD39,   8, 
        AGA6,   8, 
        AGA7,   8, 
        AGA8,   8, 
        AGA9,   8, 
        AGAA,   8, 
        AGAB,   8, 
        AGB6,   8, 
        AGB7,   8, 
        AGB8,   8, 
        AGB9,   8, 
        AGBA,   8, 
        AGBB,   8, 
        UHBS,   32, 
        AXSU,   8, 
        AXMU,   8, 
        AXSR,   8, 
        AXMR,   8, 
        CD10,   8, 
        CD11,   8, 
        CD12,   8, 
        CD13,   8, 
        CD14,   8, 
        CD15,   8, 
        CD16,   8, 
        CD17,   8, 
        CD18,   8, 
        CD19,   8, 
        CD1A,   8, 
        CD20,   8, 
        CD21,   8, 
        CD22,   8, 
        CD23,   8, 
        CD24,   8, 
        CD25,   8, 
        CD26,   8, 
        CD27,   8, 
        CD28,   8, 
        CD29,   8, 
        CD2A,   8, 
        CD30,   8, 
        CD31,   8, 
        CD32,   8, 
        CD33,   8, 
        CD34,   8, 
        CD35,   8, 
        CD36,   8, 
        CD37,   8, 
        CD38,   8, 
        CD39,   8, 
        CD3A,   8, 
        CD3B,   8, 
        CD3C,   8, 
        CD3D,   8, 
        CD3E,   8, 
        CD3F,   8, 
        CD40,   8, 
        CD41,   8, 
        CD42,   8, 
        CD43,   8, 
        CD44,   8, 
        CD45,   8, 
        CD46,   8, 
        CD47,   8, 
        CD48,   8, 
        CD49,   8, 
        CD4A,   8, 
        CD4B,   8, 
        CD4C,   8, 
        CD4D,   8, 
        CD4E,   8, 
        CD4F,   8, 
        CD50,   8, 
        CD51,   8, 
        CD52,   8, 
        CD53,   8, 
        CD54,   8, 
        CD55,   8, 
        CD56,   8, 
        CD57,   8, 
        CD58,   8, 
        CD59,   8, 
        CD5A,   8, 
        CD5B,   8, 
        CD5C,   8, 
        CD5D,   8, 
        CD5E,   8, 
        CD5F,   8, 
        CD60,   8, 
        CD61,   8, 
        CD62,   8, 
        CD63,   8, 
        CD64,   8, 
        CD65,   8, 
        CD66,   8, 
        CD67,   8, 
        CD68,   8, 
        CD69,   8, 
        CD6A,   8, 
        CD6B,   8, 
        CD6C,   8, 
        CD6D,   8, 
        CD6E,   8, 
        CD6F,   8, 
        CD70,   8, 
        CD71,   8, 
        WPFA,   32, 
        WPFB,   32, 
        WPFC,   32, 
        WPFD,   32, 
        L0LC,   8, 
        L1LC,   8, 
        L2LC,   8, 
        L3LC,   8, 
        L4LC,   8, 
        L5LC,   8, 
        POVP,   32, 
        PSG1,   32, 
        PSG2,   32, 
        PPOE,   32, 
        FND2,   8, 
        FND3,   8, 
        S6DE,   8, 
        WTSE,   8, 
        WTLE,   8, 
        BL01,   16, 
        BL02,   16, 
        BL03,   16, 
        BL04,   16, 
        BL05,   16, 
        BL06,   16, 
        BL07,   16, 
        BL08,   16, 
        BL09,   16, 
        BL10,   16, 
        BL11,   16, 
        BL12,   16, 
        BL13,   16, 
        BL14,   16, 
        BL15,   16, 
        BL16,   16, 
        CVFS,   8, 
        CUPN,   8, 
        DGBA,   64, 
        DGOP,   32, 
        TILE,   8, 
        TIS0,   8, 
        TS0X,   8, 
        TIS4,   8, 
        TIS5,   8, 
        SLEC,   8, 
        LEDU,   16, 
        TAPM,   8, 
        STD3,   8, 
        PXDC,   8, 
        PXAC,   8, 
        PXWC,   8, 
        PXUC,   8, 
        PXFD,   8, 
        Offset (0xB97), 
        WWEN,   8, 
        WFFD,   8, 
        TN2B,   16, 
        TB2R,   16, 
        TR2P,   16, 
        TB2F,   16, 
        TFDI,   16, 
        TBTG,   16, 
        TBTP,   16, 
        LSWP,   32, 
        U4CM,   8, 
        CMSK,   8, 
        LP5E,   8, 
        CLCN,   8, 
        CLSA,   8, 
        TP7T,   8, 
        TP7P,   8, 
        TP7D,   8, 
        TP8T,   8, 
        TP8P,   8, 
        TP8D,   8, 
        TP9T,   8, 
        TP9P,   8, 
        TP9D,   8, 
        TPAT,   8, 
        TPAP,   8, 
        TPAD,   8, 
        TP1U,   8, 
        TP2U,   8, 
        TP3U,   8, 
        TP4U,   8, 
        TP5U,   8, 
        TP6U,   8, 
        TP7U,   8, 
        TP8U,   8, 
        TP9U,   8, 
        TPAU,   8, 
        FVWP,   32, 
        FVRE,   32, 
        FVRP,   8, 
        FVPE,   32, 
        FVPP,   8, 
        FVSP,   8, 
        RPFV,   8, 
        DPIW,   8, 
        DPG1,   32, 
        UDRS,   8, 
        U4SE,   8, 
        L0FI,   8, 
        L1FI,   8, 
        L2FI,   8, 
        L3FI,   8, 
        L4FI,   8, 
        L5FI,   8, 
        SSH6,   16, 
        SSL6,   16, 
        SSD6,   16, 
        FMH6,   16, 
        FML6,   16, 
        FMD6,   16, 
        FPH6,   16, 
        FPL6,   16, 
        FPD6,   16, 
        HSH6,   16, 
        HSL6,   16, 
        HSD6,   16, 
        M0CC,   16, 
        M1CC,   16, 
        SSH7,   16, 
        SSL7,   16, 
        SSD7,   16, 
        FMH7,   16, 
        FML7,   16, 
        FMD7,   16, 
        FPH7,   16, 
        FPL7,   16, 
        FPD7,   16, 
        HSH7,   16, 
        HSL7,   16, 
        HSD7,   16, 
        M0CD,   16, 
        M1CD,   16, 
        TR2B,   16, 
        ZPDA,   32, 
        ZDPR,   32, 
        ZDPW,   32, 
        ZDPP,   8, 
        WSID,   16, 
        WSTO,   16, 
        HUAR,   8, 
        BLEC,   8, 
        BLPD,   8, 
        BLPI,   8, 
        WFRC,   32, 
        WFUC,   32, 
        UNI4,   32, 
        WFIC,   32, 
        R8DC,   8, 
        OMP1,   32, 
        OM1P,   8, 
        OMR1,   32, 
        MR1P,   8, 
        OMW1,   32, 
        RPO1,   8, 
        OMP2,   32, 
        OM2P,   8, 
        OMR2,   32, 
        MR2P,   8, 
        OMW2,   32, 
        RPO2,   8, 
        WCEN,   8, 
        R8DS,   8, 
        WLBI,   8, 
        WHBI,   8, 
        SDGN,   8, 
        SD41,   8, 
        SD42,   8, 
        SD43,   8, 
        SD44,   8, 
        SD45,   8, 
        SD46,   8, 
        SD47,   8, 
        SD48,   8, 
        SD49,   8, 
        SD51,   8, 
        SD52,   8, 
        SD53,   8, 
        SD54,   8, 
        SD55,   8, 
        SD56,   8, 
        SD57,   8, 
        SD58,   8, 
        SD59,   8, 
        SD61,   8, 
        SD62,   8, 
        SD63,   8, 
        SD64,   8, 
        SD65,   8, 
        SD66,   8, 
        SD67,   8, 
        SD68,   8, 
        SD69,   8, 
        SD71,   8, 
        SD72,   8, 
        SD73,   8, 
        SD74,   8, 
        SD75,   8, 
        SD76,   8, 
        SD77,   8, 
        SD78,   8, 
        SD79,   8, 
        SD81,   8, 
        SD82,   8, 
        SD83,   8, 
        SD84,   8, 
        SD85,   8, 
        SD86,   8, 
        SD87,   8, 
        SD88,   8, 
        SD89,   8, 
        R8WR,   8, 
        WTSV,   32, 
        EDMX,   32, 
        DBRL,   8, 
        DNID,   8, 
        DGD1,   32, 
        DGD2,   32, 
        DGD3,   32, 
        DGD4,   32, 
        DGD5,   32, 
        DGD6,   32, 
        DGD7,   32, 
        DGD8,   32, 
        DGD9,   32, 
        DGDA,   32, 
        DGDB,   32, 
        DGDC,   32, 
        DGDD,   32, 
        DGDE,   32, 
        DGDF,   32, 
        DGDX,   32, 
        DGDS,   8, 
        VTCM,   8, 
        ZPPB,   8, 
        U4RP,   8
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0x0000)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    Name (UEMU, 0xFFFF)
    Name (CNVB, 0x3896C000)
    Name (CNVL, 0x0020)
    OperationRegion (CPNV, SystemMemory, CNVB, CNVL)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        NTPB,   8
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PD00, Package (0x2E)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }
        })
        Name (AR00, Package (0x48)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x02, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x03, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                Zero, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                One, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x02, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                Zero, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                One, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x02, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x03, 
                Zero, 
                0x2B
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                One, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x02, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x03, 
                Zero, 
                0x26
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                One, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                Zero, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                One, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x02, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x03, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                Zero, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                One, 
                Zero, 
                0x16
            }
        })
        Name (PD01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD21, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR21, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD22, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR22, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD23, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR23, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PD11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD12, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR12, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PD05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PD09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PD15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD16, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR16, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD17, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR17, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD18, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR18, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PD19, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR19, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD1A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR1A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD1B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR1B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD1C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR1C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PD1D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR1D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD1E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR1E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD1F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR1F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD20, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR20, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
    }

    Scope (_SB)
    {
        Device (PC00)
        {
            Name (_HID, EisaId ("PNP0A08"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03"))  // _CID: Compatible ID
            //Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00)
                }

                Return (PD00)
            }

            Device (PEG1)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR01)
                    }

                    Return (PD01)
                }

                Device (PEGP)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (PEG2)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR02)
                    }

                    Return (PD02)
                }

                Device (PEGP)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            If (LGreaterEqual (MPGN, 0x04))
            {
                Device (PEG3)
                {
                    Name (_ADR, 0x00010002)  // _ADR: Address
                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (PICM)
                        {
                            Return (AR03)
                        }

                        Return (PD03)
                    }

                    Device (PEGP)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }
                }
            }

            Device (PEG0)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04)
                    }

                    Return (PD04)
                }

                Device (PEGP)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (LPCB)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                Method (LPTS, 1, NotSerialized)
                {
                    Store (One, SLPX)
                    Store (One, SLPE)
                    If (PWBT)
                    {
                        Store (One, PBEN)
                    }
                }

                Method (LWAK, 1, NotSerialized)
                {
                    Store (Zero, SLPE)
                    If (PBEN)
                    {
                        Store (One, PWBT)
                        Store (Zero, PBEN)
                    }

                    If (NTPB)
                    {
                        Notify (PWRB, 0x02)
                    }
                }

                Name (PBEN, Zero)
                OperationRegion (SMIE, SystemIO, PMBA, 0x04)
                Field (SMIE, ByteAcc, NoLock, Preserve)
                {
                        ,   10, 
                    RTCS,   1, 
                        ,   3, 
                    PEXS,   1, 
                    WAKS,   1, 
                    Offset (0x03), 
                    PWBT,   1, 
                    Offset (0x04)
                }

                OperationRegion (SLPR, SystemIO, SMCR, 0x08)
                Field (SLPR, ByteAcc, NoLock, Preserve)
                {
                        ,   4, 
                    SLPE,   1, 
                        ,   31, 
                    SLPX,   1, 
                    Offset (0x08)
                }

                Device (SIO1)
                {
                    Name (_HID, EisaId ("PNP0C02"))  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y00)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y01)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y02)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y03)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (LAnd (LLess (SP1O, 0x03F0), LGreater (SP1O, 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PC00.LPCB.SIO1._Y00._MIN, GPI0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PC00.LPCB.SIO1._Y00._MAX, GPI1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PC00.LPCB.SIO1._Y00._LEN, GPIL)  // _LEN: Length
                            Store (SP1O, GPI0)
                            Store (SP1O, GPI1)
                            Store (0x02, GPIL)
                        }

                        If (IO1B)
                        {
                            CreateWordField (CRS, \_SB.PC00.LPCB.SIO1._Y01._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PC00.LPCB.SIO1._Y01._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PC00.LPCB.SIO1._Y01._LEN, GPL1)  // _LEN: Length
                            Store (IO1B, GP10)
                            Store (IO1B, GP11)
                            Store (IO1L, GPL1)
                        }

                        If (IO2B)
                        {
                            CreateWordField (CRS, \_SB.PC00.LPCB.SIO1._Y02._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PC00.LPCB.SIO1._Y02._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PC00.LPCB.SIO1._Y02._LEN, GPL2)  // _LEN: Length
                            Store (IO2B, GP20)
                            Store (IO2B, GP21)
                            Store (IO2L, GPL2)
                        }

                        If (IO3B)
                        {
                            CreateWordField (CRS, \_SB.PC00.LPCB.SIO1._Y03._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PC00.LPCB.SIO1._Y03._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PC00.LPCB.SIO1._Y03._LEN, GPL3)  // _LEN: Length
                            Store (IO3B, GP30)
                            Store (IO3B, GP31)
                            Store (IO3L, GPL3)
                        }

                        Return (CRS)
                    }

                    Name (DCAT, Package (0x15)
                    {
                        One, 
                        0x02, 
                        0x03, 
                        Zero, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x06, 
                        0xFF, 
                        0x0A, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF
                    })
                    Mutex (MUT0, 0x00)
                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (MUT0, 0xFFFF)
                        Store (0x87, INDX)
                        Store (One, INDX)
                        Store (0x55, INDX)
                        If (LEqual (SP1O, 0x2E))
                        {
                            Store (0x55, INDX)
                        }
                        Else
                        {
                            Store (0xAA, INDX)
                        }

                        Store (Arg0, LDN)
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        Store (0x02, INDX)
                        Store (0x02, DATA)
                        Release (MUT0)
                    }

                    Method (LPTM, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        And (OPT0, 0x02, Local0)
                        EXFG ()
                        Return (Local0)
                    }

                    OperationRegion (IOID, SystemIO, SP1O, 0x02)
                    Field (IOID, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x21), 
                        SCF1,   8, 
                        SCF2,   8, 
                        SCF3,   8, 
                        SCF4,   8, 
                        SCF5,   8, 
                        SCF6,   8, 
                        Offset (0x29), 
                        CKCF,   8, 
                        Offset (0x2D), 
                        CR2D,   8, 
                        Offset (0x30), 
                        ACTR,   8, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        IOH2,   8, 
                        IOL2,   8, 
                        Offset (0x70), 
                        INTR,   4, 
                        INTT,   4, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xE0), 
                        RGE0,   8, 
                        RGE1,   8, 
                        RGE2,   8, 
                        RGE3,   8, 
                        RGE4,   8, 
                        RGE5,   8, 
                        RGE6,   8, 
                        RGE7,   8, 
                        RGE8,   8, 
                        RGE9,   8, 
                        Offset (0xF0), 
                        OPT0,   8, 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8, 
                        OPT4,   8, 
                        OPT5,   8, 
                        OPT6,   8, 
                        OPT7,   8, 
                        OPT8,   8, 
                        OPT9,   8
                    }

                    OperationRegion (RNTR, SystemIO, IO2B, IO2L)
                    Field (RNTR, ByteAcc, NoLock, Preserve)
                    {
                        PMES,   8, 
                        Offset (0x04), 
                        PMEE,   1, 
                        Offset (0x05), 
                        Offset (0x08), 
                        PMS3,   8, 
                        PMS2,   8, 
                        PMS1,   8, 
                        Offset (0x0C), 
                        PME3,   8, 
                        PME2,   8, 
                        PME1,   8
                    }

                    Method (CGLD, 1, NotSerialized)
                    {
                        Return (DerefOf (Index (DCAT, Arg0)))
                    }

                    Method (DSTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Store (ACTR, Local0)
                        Or (ShiftLeft (IOAH, 0x08), IOAL, Local1)
                        EXFG ()
                        If (LEqual (Local0, 0xFF))
                        {
                            Return (Zero)
                        }

                        And (Local0, One, Local0)
                        If (LLess (Arg0, 0x10))
                        {
                            Or (IOST, ShiftLeft (Local0, Arg0), IOST)
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf (LLess (Arg0, 0x10))
                        {
                            If (And (ShiftLeft (One, Arg0), IOST))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            If (Local1)
                            {
                                Return (0x0D)
                            }

                            Return (Zero)
                        }
                    }

                    Method (DCNT, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        If (LAnd (LLess (DMCH, 0x04), LNotEqual (And (DMCH, 0x03, Local1), Zero)))
                        {
                            RDMA (Arg0, Arg1, Increment (Local1))
                        }

                        Store (Arg1, ACTR)
                        ShiftLeft (IOAH, 0x08, Local1)
                        Or (IOAL, Local1, Local1)
                        RRIO (Arg0, Arg1, Local1, 0x08)
                        EXFG ()
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y06)
                        IRQNoFlags (_Y04)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y05)
                            {}
                    })
                    CreateWordField (CRS1, \_SB.PC00.LPCB.SIO1._Y04._INT, IRQM)  // _INT: Interrupts
                    CreateByteField (CRS1, \_SB.PC00.LPCB.SIO1._Y05._DMA, DMAM)  // _DMA: Direct Memory Access
                    CreateWordField (CRS1, \_SB.PC00.LPCB.SIO1._Y06._MIN, IO11)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PC00.LPCB.SIO1._Y06._MAX, IO12)  // _MAX: Maximum Base Address
                    CreateByteField (CRS1, \_SB.PC00.LPCB.SIO1._Y06._LEN, LEN1)  // _LEN: Length
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y09)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y0A)
                        IRQNoFlags (_Y07)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y08)
                            {}
                    })
                    CreateWordField (CRS2, \_SB.PC00.LPCB.SIO1._Y07._INT, IRQE)  // _INT: Interrupts
                    CreateByteField (CRS2, \_SB.PC00.LPCB.SIO1._Y08._DMA, DMAE)  // _DMA: Direct Memory Access
                    CreateWordField (CRS2, \_SB.PC00.LPCB.SIO1._Y09._MIN, IO21)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PC00.LPCB.SIO1._Y09._MAX, IO22)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PC00.LPCB.SIO1._Y09._LEN, LEN2)  // _LEN: Length
                    CreateWordField (CRS2, \_SB.PC00.LPCB.SIO1._Y0A._MIN, IO31)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PC00.LPCB.SIO1._Y0A._MAX, IO32)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PC00.LPCB.SIO1._Y0A._LEN, LEN3)  // _LEN: Length
                    Method (DCRS, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        ShiftLeft (IOAH, 0x08, IO11)
                        Or (IOAL, IO11, IO11)
                        Store (IO11, IO12)
                        Store (0x08, LEN1)
                        If (INTR)
                        {
                            ShiftLeft (One, INTR, IRQM)
                        }
                        Else
                        {
                            Store (Zero, IRQM)
                        }

                        If (LOr (LGreater (DMCH, 0x03), LEqual (Arg1, Zero)))
                        {
                            Store (Zero, DMAM)
                        }
                        Else
                        {
                            And (DMCH, 0x03, Local1)
                            ShiftLeft (One, Local1, DMAM)
                        }

                        EXFG ()
                        Return (CRS1)
                    }

                    Method (DCR2, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        ShiftLeft (IOAH, 0x08, IO21)
                        Or (IOAL, IO21, IO21)
                        Store (IO21, IO22)
                        Store (0x08, LEN2)
                        ShiftLeft (IOH2, 0x08, IO31)
                        Or (IOL2, IO31, IO31)
                        Store (IO31, IO32)
                        Store (0x08, LEN3)
                        If (INTR)
                        {
                            ShiftLeft (One, INTR, IRQE)
                        }
                        Else
                        {
                            Store (Zero, IRQE)
                        }

                        If (LOr (LGreater (DMCH, 0x03), LEqual (Arg1, Zero)))
                        {
                            Store (Zero, DMAE)
                        }
                        Else
                        {
                            And (DMCH, 0x03, Local1)
                            ShiftLeft (One, Local1, DMAE)
                        }

                        EXFG ()
                        Return (CRS2)
                    }

                    Method (DSRS, 2, NotSerialized)
                    {
                        If (And (LEqual (Arg1, 0x02), LPTM (Arg1)))
                        {
                            DSR2 (Arg0, Arg1)
                        }
                        Else
                        {
                            CreateWordField (Arg0, 0x09, IRQM)
                            CreateByteField (Arg0, 0x0C, DMAM)
                            CreateWordField (Arg0, 0x02, IO11)
                            ENFG (CGLD (Arg1))
                            And (IO11, 0xFF, IOAL)
                            ShiftRight (IO11, 0x08, IOAH)
                            If (IRQM)
                            {
                                FindSetRightBit (IRQM, Local0)
                                Subtract (Local0, One, INTR)
                            }
                            Else
                            {
                                Store (Zero, INTR)
                            }

                            If (DMAM)
                            {
                                FindSetRightBit (DMAM, Local0)
                                Subtract (Local0, One, DMCH)
                            }
                            Else
                            {
                                Store (0x04, DMCH)
                            }

                            EXFG ()
                            DCNT (Arg1, One)
                            Store (Arg1, Local2)
                            If (LGreater (Local2, Zero))
                            {
                                Subtract (Local2, One, Local2)
                            }
                        }
                    }

                    Method (DSR2, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x11, IRQE)
                        CreateByteField (Arg0, 0x14, DMAE)
                        CreateWordField (Arg0, 0x02, IO21)
                        CreateWordField (Arg0, 0x0A, IO31)
                        ENFG (CGLD (Arg1))
                        And (IO21, 0xFF, IOAL)
                        ShiftRight (IO21, 0x08, IOAH)
                        And (IO31, 0xFF, IOL2)
                        ShiftRight (IO31, 0x08, IOH2)
                        If (IRQE)
                        {
                            FindSetRightBit (IRQE, Local0)
                            Subtract (Local0, One, INTR)
                        }
                        Else
                        {
                            Store (Zero, INTR)
                        }

                        If (DMAE)
                        {
                            FindSetRightBit (DMAE, Local0)
                            Subtract (Local0, One, DMCH)
                        }
                        Else
                        {
                            Store (0x04, DMCH)
                        }

                        EXFG ()
                        DCNT (Arg1, One)
                        Store (Arg1, Local2)
                        If (LGreater (Local2, Zero))
                        {
                            Subtract (Local2, One, Local2)
                        }
                    }

                    Name (PMFG, Zero)
                    Method (SIOS, 1, NotSerialized)
                    {
                        Store ("SIOS", Debug)
                        If (LNotEqual (0x05, Arg0))
                        {
                            ENFG (0x04)
                            Store (0xFF, OPT1)
                            If (KBFG)
                            {
                                Or (OPT0, 0x08, OPT0)
                            }
                            Else
                            {
                                And (OPT0, 0xF7, OPT0)
                            }

                            If (MSFG)
                            {
                                Or (OPT0, 0x10, OPT0)
                            }
                            Else
                            {
                                And (OPT0, 0xEF, OPT0)
                            }

                            And (0xBF, OPT2, Local0)
                            Store (Local0, OPT2)
                            Store (0x06, LDN)
                            Store (Zero, ACTR)
                            Store (0x05, LDN)
                            Store (Zero, ACTR)
                            EXFG ()
                        }
                    }

                    Method (SIOW, 1, NotSerialized)
                    {
                        Store ("SIOW", Debug)
                        ENFG (0x04)
                        Store (OPT1, PMFG)
                        Store (0xFF, OPT1)
                        And (OPT0, 0xE7, OPT0)
                        Or (0x40, OPT2, Local0)
                        Store (Local0, OPT2)
                        Store (0x06, LDN)
                        Store (One, ACTR)
                        Store (0x05, LDN)
                        Store (One, ACTR)
                        EXFG ()
                    }

                    Method (SIOH, 0, NotSerialized)
                    {
                        If (And (PMFG, 0x08)){}
                        If (And (PMFG, 0x10)){}
                    }
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303"))  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x05)
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (And (IOST, 0x0400))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            If (LEqual (UEMU, 0x5A5A))
                            {
                                If (LGreaterEqual (OSYS, 0x07DC))
                                {
                                    Return (Zero)
                                }
                                Else
                                {
                                    Return (0x0F)
                                }
                            }

                            Return (Zero)
                        }
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        Store (Arg0, KBFG)
                    }

                    Scope (\)
                    {
                        Name (KBFG, One)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (XPRW (0x1D, 0x03))
                    }
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F03"))  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x06)
                    Name (_CID, EisaId ("PNP0F13"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (And (IOST, 0x4000))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            If (LEqual (UEMU, 0x5A5A))
                            {
                                If (LGreaterEqual (OSYS, 0x07DC))
                                {
                                    Return (Zero)
                                }
                                Else
                                {
                                    Return (0x0F)
                                }
                            }

                            Return (Zero)
                        }
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (And (IOST, 0x0400))
                        {
                            Return (CRS1)
                        }
                        Else
                        {
                            Return (CRS2)
                        }
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IRQNoFlags ()
                                {12}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        Store (Arg0, MSFG)
                    }

                    Scope (\)
                    {
                        Name (MSFG, One)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (XPRW (0x1D, 0x03))
                    }
                }

                Device (UAR1)
                {
                    Name (_HID, EisaId ("PNP0501"))  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, One)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (^^SIO1.DSTA (Zero))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ^^SIO1.DCNT (Zero, Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (^^SIO1.DCRS (Zero, Zero))
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        ^^SIO1.DSRS (Arg0, Zero)
                    }

                    Name (_DDN, "COM1")  // _DDN: DOS Device Name
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        EndDependentFn ()
                    })
                }

                Device (HHMD)
                {
                    Name (_HID, EisaId ("PNP0C08"))  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (LDN, 0x04)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }

                Device (SGPI)
                {
                    Name (_HID, EisaId ("PNP0C08"))  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (LDN, 0x07)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (RP09)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0D)
                    }

                    Return (PD0D)
                }
            }

            Device (RP10)
            {
                Name (_ADR, 0x001D0001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0E)
                    }

                    Return (PD0E)
                }
            }

            Device (RP11)
            {
                Name (_ADR, 0x001D0002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0F)
                    }

                    Return (PD0F)
                }
            }

            Device (RP12)
            {
                Name (_ADR, 0x001D0003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR10)
                    }

                    Return (PD10)
                }
            }

            Device (RP13)
            {
                Name (_ADR, 0x001D0004)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR11)
                    }

                    Return (PD11)
                }
            }

            Device (RP14)
            {
                Name (_ADR, 0x001D0005)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR12)
                    }

                    Return (PD12)
                }
            }

            Device (RP15)
            {
                Name (_ADR, 0x001D0006)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR13)
                    }

                    Return (PD13)
                }
            }

            Device (RP16)
            {
                Name (_ADR, 0x001D0007)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR14)
                    }

                    Return (PD14)
                }
            }

            Device (RP01)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR05)
                    }

                    Return (PD05)
                }
            }

            Device (RP02)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR06)
                    }

                    Return (PD06)
                }
            }

            Device (RP03)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR07)
                    }

                    Return (PD07)
                }

                Device (D07A)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (RP04)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR08)
                    }

                    Return (PD08)
                }
            }

            Device (RP05)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR09)
                    }

                    Return (PD09)
                }
            }

            Device (RP06)
            {
                Name (_ADR, 0x001C0005)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0A)
                    }

                    Return (PD0A)
                }
            }

            Device (RP07)
            {
                Name (_ADR, 0x001C0006)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0B)
                    }

                    Return (PD0B)
                }
            }

            Device (RP08)
            {
                Name (_ADR, 0x001C0007)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0C)
                    }

                    Return (PD0C)
                }
            }

            Device (RP17)
            {
                Name (_ADR, 0x001B0000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR15)
                    }

                    Return (PD15)
                }
            }

            Device (RP18)
            {
                Name (_ADR, 0x001B0001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR16)
                    }

                    Return (PD16)
                }
            }

            Device (RP19)
            {
                Name (_ADR, 0x001B0002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR17)
                    }

                    Return (PD17)
                }
            }

            Device (RP20)
            {
                Name (_ADR, 0x001B0003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR18)
                    }

                    Return (PD18)
                }
            }

            Device (RP21)
            {
                Name (_ADR, 0x001B0004)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR19)
                    }

                    Return (PD19)
                }
            }

            Device (RP22)
            {
                Name (_ADR, 0x001B0005)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1A)
                    }

                    Return (PD1A)
                }
            }

            Device (RP23)
            {
                Name (_ADR, 0x001B0006)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1B)
                    }

                    Return (PD1B)
                }
            }

            Device (RP24)
            {
                Name (_ADR, 0x001B0007)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1C)
                    }

                    Return (PD1C)
                }
            }

            If (LEqual (LPEN, Zero))
            {
                Device (RP25)
                {
                    Name (_ADR, 0x001A0000)  // _ADR: Address
                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (PICM)
                        {
                            Return (AR1D)
                        }

                        Return (PD1D)
                    }
                }
            }

            If (LEqual (LPEN, Zero))
            {
                Device (RP26)
                {
                    Name (_ADR, 0x001A0001)  // _ADR: Address
                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (PICM)
                        {
                            Return (AR1E)
                        }

                        Return (PD1E)
                    }
                }
            }

            If (LEqual (LPEN, Zero))
            {
                Device (RP27)
                {
                    Name (_ADR, 0x001A0002)  // _ADR: Address
                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (PICM)
                        {
                            Return (AR1F)
                        }

                        Return (PD1F)
                    }
                }
            }

            If (LEqual (LPEN, Zero))
            {
                Device (RP28)
                {
                    Name (_ADR, 0x001A0003)  // _ADR: Address
                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (PICM)
                        {
                            Return (AR20)
                        }

                        Return (PD20)
                    }
                }
            }
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x06, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        Zero, 
        Zero, 
        Zero
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            \_SB.MPTS (Arg0)
            \_SB.TPM.TPTS (Arg0)
            \_SB.PC00.MC.NPTS (Arg0)
            RPTS (Arg0)
            \_SB.PC00.LPCB.SIO1.SIOS (Arg0)
            \_SB.PC00.LPCB.LPTS (Arg0)
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        \_SB.PC00.LPCB.LWAK (Arg0)
        \_SB.PC00.LPCB.SIO1.SIOW (Arg0)
        RWAK (Arg0)
        \_SB.PC00.MC.NWAK (Arg0)
        \_SB.MWAK (Arg0)
        Return (AM00)
    }

    Scope (_SB.PC00)
    {
        Device (MC)
        {
            Name (_ADR, Zero)  // _ADR: Address
            OperationRegion (HBUS, PCI_Config, Zero, 0x0100)
            Field (HBUS, DWordAcc, NoLock, Preserve)
            {
                Offset (0x40), 
                EPEN,   1, 
                    ,   11, 
                EPBR,   20, 
                Offset (0x48), 
                MHEN,   1, 
                    ,   14, 
                MHBR,   17, 
                Offset (0x50), 
                GCLK,   1, 
                Offset (0x54), 
                D0EN,   1, 
                D1F2,   1, 
                D1F1,   1, 
                D1F0,   1, 
                    ,   9, 
                D6F0,   1, 
                Offset (0x60), 
                PXEN,   1, 
                PXSZ,   3, 
                    ,   22, 
                PXBR,   6, 
                Offset (0x68), 
                DIEN,   1, 
                    ,   11, 
                DIBR,   20, 
                Offset (0x70), 
                    ,   20, 
                MEBR,   12, 
                Offset (0x80), 
                    ,   4, 
                PM0H,   2, 
                Offset (0x81), 
                PM1L,   2, 
                    ,   2, 
                PM1H,   2, 
                Offset (0x82), 
                PM2L,   2, 
                    ,   2, 
                PM2H,   2, 
                Offset (0x83), 
                PM3L,   2, 
                    ,   2, 
                PM3H,   2, 
                Offset (0x84), 
                PM4L,   2, 
                    ,   2, 
                PM4H,   2, 
                Offset (0x85), 
                PM5L,   2, 
                    ,   2, 
                PM5H,   2, 
                Offset (0x86), 
                PM6L,   2, 
                    ,   2, 
                PM6H,   2, 
                Offset (0x87), 
                Offset (0xA8), 
                    ,   20, 
                TUUD,   19, 
                Offset (0xBC), 
                    ,   20, 
                TLUD,   12, 
                Offset (0xC8), 
                    ,   7, 
                HTSE,   1
            }
        }

        Name (BUF0, ResourceTemplate ()
        {
            WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                0x0000,             // Granularity
                0x0000,             // Range Minimum
                0x00FF,             // Range Maximum
                0x0000,             // Translation Offset
                0x0100,             // Length
                ,, _Y0B)
            DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                0x00000000,         // Granularity
                0x00000000,         // Range Minimum
                0x00000CF7,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00000CF8,         // Length
                ,, , TypeStatic, DenseTranslation)
            IO (Decode16,
                0x0CF8,             // Range Minimum
                0x0CF8,             // Range Maximum
                0x01,               // Alignment
                0x08,               // Length
                )
            DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                0x00000000,         // Granularity
                0x00000D00,         // Range Minimum
                0x0000FFFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x0000F300,         // Length
                ,, , TypeStatic, DenseTranslation)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x00000000,         // Granularity
                0x000A0000,         // Range Minimum
                0x000BFFFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00020000,         // Length
                ,, , AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x00000000,         // Granularity
                0x000C0000,         // Range Minimum
                0x000C3FFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00004000,         // Length
                ,, _Y0C, AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x00000000,         // Granularity
                0x000C4000,         // Range Minimum
                0x000C7FFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00004000,         // Length
                ,, _Y0D, AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x00000000,         // Granularity
                0x000C8000,         // Range Minimum
                0x000CBFFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00004000,         // Length
                ,, _Y0E, AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x00000000,         // Granularity
                0x000CC000,         // Range Minimum
                0x000CFFFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00004000,         // Length
                ,, _Y0F, AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x00000000,         // Granularity
                0x000D0000,         // Range Minimum
                0x000D3FFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00004000,         // Length
                ,, _Y10, AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x00000000,         // Granularity
                0x000D4000,         // Range Minimum
                0x000D7FFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00004000,         // Length
                ,, _Y11, AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x00000000,         // Granularity
                0x000D8000,         // Range Minimum
                0x000DBFFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00004000,         // Length
                ,, _Y12, AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x00000000,         // Granularity
                0x000DC000,         // Range Minimum
                0x000DFFFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00004000,         // Length
                ,, _Y13, AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x00000000,         // Granularity
                0x000E0000,         // Range Minimum
                0x000E3FFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00004000,         // Length
                ,, _Y14, AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x00000000,         // Granularity
                0x000E4000,         // Range Minimum
                0x000E7FFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00004000,         // Length
                ,, _Y15, AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x00000000,         // Granularity
                0x000E8000,         // Range Minimum
                0x000EBFFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00004000,         // Length
                ,, _Y16, AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x00000000,         // Granularity
                0x000EC000,         // Range Minimum
                0x000EFFFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00004000,         // Length
                ,, _Y17, AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                0x00000000,         // Granularity
                0x000F0000,         // Range Minimum
                0x000FFFFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0x00010000,         // Length
                ,, _Y18, AddressRangeMemory, TypeStatic)
            DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                0x00000000,         // Granularity
                0x00000000,         // Range Minimum
                0xDFFFFFFF,         // Range Maximum
                0x00000000,         // Translation Offset
                0xE0000000,         // Length
                ,, _Y19, AddressRangeMemory, TypeStatic)
            QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                0x0000000000000000, // Granularity
                0x0000000000010000, // Range Minimum
                0x000000000001FFFF, // Range Maximum
                0x0000000000000000, // Translation Offset
                0x0000000000010000, // Length
                ,, _Y1A, AddressRangeMemory, TypeStatic)
        })
        Name (EP_B, Zero)
        Name (MH_B, Zero)
        Name (PC_B, Zero)
        Name (PC_L, Zero)
        Name (DM_B, Zero)
        Method (GEPB, 0, Serialized)
        {
            If (LEqual (EP_B, Zero))
            {
                ShiftLeft (^MC.EPBR, 0x0C, EP_B)
            }

            Return (EP_B)
        }

        Method (GMHB, 0, Serialized)
        {
            If (LEqual (MH_B, Zero))
            {
                ShiftLeft (^MC.MHBR, 0x0F, MH_B)
            }

            Return (MH_B)
        }

        Method (GPCB, 0, Serialized)
        {
            If (LEqual (PC_B, Zero))
            {
                ShiftLeft (^MC.PXBR, 0x1A, PC_B)
            }

            Return (PC_B)
        }

        Method (PC2M, 1, Serialized)
        {
            Store (GPCB (), Local0)
            Add (Local0, ShiftRight (And (Arg0, 0x001F0000), One), Local0)
            Add (Local0, ShiftLeft (And (Arg0, 0x07), 0x0C), Local0)
            Return (Local0)
        }

        Method (GPCL, 0, Serialized)
        {
            If (LEqual (PC_L, Zero))
            {
                If (LLess (^MC.PXSZ, 0x03))
                {
                    ShiftRight (0x10000000, ^MC.PXSZ, PC_L)
                }
                Else
                {
                    Store (0x10000000, PC_L)
                }
            }

            Return (PC_L)
        }

        Method (GDMB, 0, Serialized)
        {
            If (LEqual (DM_B, Zero))
            {
                ShiftLeft (^MC.DIBR, 0x0C, DM_B)
            }

            Return (DM_B)
        }

        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            Store (GPCL (), Local0)
            CreateWordField (BUF0, \_SB.PC00._Y0B._MAX, PBMX)  // _MAX: Maximum Base Address
            Store (Subtract (ShiftRight (Local0, 0x14), 0x02), PBMX)
            CreateWordField (BUF0, \_SB.PC00._Y0B._LEN, PBLN)  // _LEN: Length
            Store (Subtract (ShiftRight (Local0, 0x14), One), PBLN)
            If (CondRefOf (\VMDE))
            {
                If (LAnd (LEqual (VMDE, One), LGreater (PBMX, 0xE0)))
                {
                    Store (0xE0, PBMX)
                    Store (0xE1, PBLN)
                }
            }

            If (^MC.PM1L)
            {
                CreateDWordField (BUF0, \_SB.PC00._Y0C._LEN, C0LN)  // _LEN: Length
                Store (Zero, C0LN)
            }

            If (LEqual (^MC.PM1L, One))
            {
                CreateBitField (BUF0, \_SB.PC00._Y0C._RW, C0RW)  // _RW_: Read-Write Status
                Store (Zero, C0RW)
            }

            If (^MC.PM1H)
            {
                CreateDWordField (BUF0, \_SB.PC00._Y0D._LEN, C4LN)  // _LEN: Length
                Store (Zero, C4LN)
            }

            If (LEqual (^MC.PM1H, One))
            {
                CreateBitField (BUF0, \_SB.PC00._Y0D._RW, C4RW)  // _RW_: Read-Write Status
                Store (Zero, C4RW)
            }

            If (^MC.PM2L)
            {
                CreateDWordField (BUF0, \_SB.PC00._Y0E._LEN, C8LN)  // _LEN: Length
                Store (Zero, C8LN)
            }

            If (LEqual (^MC.PM2L, One))
            {
                CreateBitField (BUF0, \_SB.PC00._Y0E._RW, C8RW)  // _RW_: Read-Write Status
                Store (Zero, C8RW)
            }

            If (^MC.PM2H)
            {
                CreateDWordField (BUF0, \_SB.PC00._Y0F._LEN, CCLN)  // _LEN: Length
                Store (Zero, CCLN)
            }

            If (LEqual (^MC.PM2H, One))
            {
                CreateBitField (BUF0, \_SB.PC00._Y0F._RW, CCRW)  // _RW_: Read-Write Status
                Store (Zero, CCRW)
            }

            If (^MC.PM3L)
            {
                CreateDWordField (BUF0, \_SB.PC00._Y10._LEN, D0LN)  // _LEN: Length
                Store (Zero, D0LN)
            }

            If (LEqual (^MC.PM3L, One))
            {
                CreateBitField (BUF0, \_SB.PC00._Y10._RW, D0RW)  // _RW_: Read-Write Status
                Store (Zero, D0RW)
            }

            If (^MC.PM3H)
            {
                CreateDWordField (BUF0, \_SB.PC00._Y11._LEN, D4LN)  // _LEN: Length
                Store (Zero, D4LN)
            }

            If (LEqual (^MC.PM3H, One))
            {
                CreateBitField (BUF0, \_SB.PC00._Y11._RW, D4RW)  // _RW_: Read-Write Status
                Store (Zero, D4RW)
            }

            If (^MC.PM4L)
            {
                CreateDWordField (BUF0, \_SB.PC00._Y12._LEN, D8LN)  // _LEN: Length
                Store (Zero, D8LN)
            }

            If (LEqual (^MC.PM4L, One))
            {
                CreateBitField (BUF0, \_SB.PC00._Y12._RW, D8RW)  // _RW_: Read-Write Status
                Store (Zero, D8RW)
            }

            If (^MC.PM4H)
            {
                CreateDWordField (BUF0, \_SB.PC00._Y13._LEN, DCLN)  // _LEN: Length
                Store (Zero, DCLN)
            }

            If (LEqual (^MC.PM4H, One))
            {
                CreateBitField (BUF0, \_SB.PC00._Y13._RW, DCRW)  // _RW_: Read-Write Status
                Store (Zero, DCRW)
            }

            If (^MC.PM5L)
            {
                CreateDWordField (BUF0, \_SB.PC00._Y14._LEN, E0LN)  // _LEN: Length
                Store (Zero, E0LN)
            }

            If (LEqual (^MC.PM5L, One))
            {
                CreateBitField (BUF0, \_SB.PC00._Y14._RW, E0RW)  // _RW_: Read-Write Status
                Store (Zero, E0RW)
            }

            If (^MC.PM5H)
            {
                CreateDWordField (BUF0, \_SB.PC00._Y15._LEN, E4LN)  // _LEN: Length
                Store (Zero, E4LN)
            }

            If (LEqual (^MC.PM5H, One))
            {
                CreateBitField (BUF0, \_SB.PC00._Y15._RW, E4RW)  // _RW_: Read-Write Status
                Store (Zero, E4RW)
            }

            If (^MC.PM6L)
            {
                CreateDWordField (BUF0, \_SB.PC00._Y16._LEN, E8LN)  // _LEN: Length
                Store (Zero, E8LN)
            }

            If (LEqual (^MC.PM6L, One))
            {
                CreateBitField (BUF0, \_SB.PC00._Y16._RW, E8RW)  // _RW_: Read-Write Status
                Store (Zero, E8RW)
            }

            If (^MC.PM6H)
            {
                CreateDWordField (BUF0, \_SB.PC00._Y17._LEN, ECLN)  // _LEN: Length
                Store (Zero, ECLN)
            }

            If (LEqual (^MC.PM6H, One))
            {
                CreateBitField (BUF0, \_SB.PC00._Y17._RW, ECRW)  // _RW_: Read-Write Status
                Store (Zero, ECRW)
            }

            If (^MC.PM0H)
            {
                CreateDWordField (BUF0, \_SB.PC00._Y18._LEN, F0LN)  // _LEN: Length
                Store (Zero, F0LN)
            }

            If (LEqual (^MC.PM0H, One))
            {
                CreateBitField (BUF0, \_SB.PC00._Y18._RW, F0RW)  // _RW_: Read-Write Status
                Store (Zero, F0RW)
            }

            CreateDWordField (BUF0, \_SB.PC00._Y19._MIN, M1MN)  // _MIN: Minimum Base Address
            CreateDWordField (BUF0, \_SB.PC00._Y19._MAX, M1MX)  // _MAX: Maximum Base Address
            CreateDWordField (BUF0, \_SB.PC00._Y19._LEN, M1LN)  // _LEN: Length
            Store (M32L, M1LN)
            Store (M32B, M1MN)
            Subtract (Add (M1MN, M1LN), One, M1MX)
            If (LEqual (M64L, Zero))
            {
                CreateQWordField (BUF0, \_SB.PC00._Y1A._LEN, MSLN)  // _LEN: Length
                Store (Zero, MSLN)
            }
            Else
            {
                CreateQWordField (BUF0, \_SB.PC00._Y1A._LEN, M2LN)  // _LEN: Length
                CreateQWordField (BUF0, \_SB.PC00._Y1A._MIN, M2MN)  // _MIN: Minimum Base Address
                CreateQWordField (BUF0, \_SB.PC00._Y1A._MAX, M2MX)  // _MAX: Maximum Base Address
                Store (M64L, M2LN)
                Store (M64B, M2MN)
                Subtract (Add (M2MN, M2LN), One, M2MX)
            }

            Return (BUF0)
        }

        Name (GUID, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */)
        Name (SUPP, Zero)
        Name (CTRL, Zero)
        Name (XCNT, Zero)
        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            Store (Arg3, Local0)
            CreateDWordField (Local0, Zero, CDW1)
            CreateDWordField (Local0, 0x04, CDW2)
            CreateDWordField (Local0, 0x08, CDW3)
            If (LEqual (Arg0, GUID))
            {
                Store (CDW2, SUPP)
                Store (CDW3, CTRL)
                If (LNot (NEXP))
                {
                    And (CTRL, 0xFFFFFFF8, CTRL)
                }

                If (CondRefOf (ITSP))
                {
                    If (ITSP)
                    {
                        And (CTRL, 0xFFFFFFF7, CTRL)
                    }
                }

                If (Not (And (CDW1, One)))
                {
                    Store (CTRL, OSCC)
                    If (CondRefOf (SWAK))
                    {
                        SWAK (0xFFFF, Zero)
                    }
                }

                If (LNotEqual (Arg1, One))
                {
                    Or (CDW1, 0x08, CDW1)
                }

                If (LNotEqual (CDW3, CTRL))
                {
                    Or (CDW1, 0x10, CDW1)
                }

                Store (CTRL, CDW3)
                Store (CTRL, OSCC)
                Return (Local0)
            }
            Else
            {
                Or (CDW1, 0x04, CDW1)
                Return (Local0)
            }
        }

        Scope (\_SB.PC00)
        {
            Device (GFX0)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
            }

            Device (TCPU)
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (IPU0)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
            }

            Device (GNA0)
            {
                Name (_ADR, 0x00080000)  // _ADR: Address
            }
        }

        Scope (\)
        {
            Method (ADBG, 1, Serialized)
            {
                If (CondRefOf (ODBG))
                {
                    ODBG (Arg0)
                }

                Store (Arg0, Debug)
                If (CondRefOf (MDBG))
                {
                    Return (MDBG (Arg0))
                }

                Return (Zero)
            }
        }

        Scope (MC)
        {
            Name (PA0H, Zero)
            Name (PA1H, Zero)
            Name (PA1L, Zero)
            Name (PA2H, Zero)
            Name (PA2L, Zero)
            Name (PA3H, Zero)
            Name (PA3L, Zero)
            Name (PA4H, Zero)
            Name (PA4L, Zero)
            Name (PA5H, Zero)
            Name (PA5L, Zero)
            Name (PA6H, Zero)
            Name (PA6L, Zero)
            Name (PACP, Zero)
            Name (PAAC, Zero)
            OperationRegion (MCHR, SystemMemory, Add (GMHB (), 0x6100), 0x0100)
            Field (MCHR, ByteAcc, NoLock, Preserve)
            {
                Offset (0x28), 
                PGCP,   1, 
                Offset (0x30), 
                PWAC,   1
            }

            Method (NPTS, 1, NotSerialized)
            {
                Store (PM0H, PA0H)
                Store (PM1H, PA1H)
                Store (PM1L, PA1L)
                Store (PM2H, PA2H)
                Store (PM2L, PA2L)
                Store (PM3H, PA3H)
                Store (PM3L, PA3L)
                Store (PM4H, PA4H)
                Store (PM4L, PA4L)
                Store (PM5H, PA5H)
                Store (PM5L, PA5L)
                Store (PM6H, PA6H)
                Store (PM6L, PA6L)
                Store (PGCP, PACP)
                Store (PWAC, PAAC)
            }

            Method (NWAK, 1, NotSerialized)
            {
                Store (PA0H, PM0H)
                Store (PA1H, PM1H)
                Store (PA1L, PM1L)
                Store (PA2H, PM2H)
                Store (PA2L, PM2L)
                Store (PA3H, PM3H)
                Store (PA3L, PM3L)
                Store (PA4H, PM4H)
                Store (PA4L, PM4L)
                Store (PA5H, PM5H)
                Store (PA5L, PM5L)
                Store (PA6H, PM6H)
                Store (PA6L, PM6L)
                Store (PACP, PGCP)
                Store (PAAC, PWAC)
            }
        }
    }

    If (LEqual (ECR1, One))
    {
        Scope (_SB.PC00)
        {
            Name (PCIG, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */)
            Method (PCID, 4, Serialized)
            {
                If (LEqual (Arg0, PCIG))
                {
                    If (LGreaterEqual (Arg1, 0x03))
                    {
                        If (LEqual (Arg2, Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0x01, 0x03                                     
                            })
                        }

                        If (LEqual (Arg2, 0x08))
                        {
                            Return (One)
                        }

                        If (LEqual (Arg2, 0x09))
                        {
                            Return (Package (0x05)
                            {
                                0xC350, 
                                Ones, 
                                Ones, 
                                0xC350, 
                                Ones
                            })
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }
    }

    Scope (_SB.PC00)
    {
        Method (PCIC, 1, Serialized)
        {
            If (LEqual (ECR1, One))
            {
                If (LEqual (Arg0, PCIG))
                {
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (IICB, 2, Serialized)
        {
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Name (IIC0, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C0",
                            0x00, ResourceConsumer, _Y1B, Exclusive,
                            )
                    })
                    CreateWordField (IIC0, \_SB.PC00.IICB._Y1B._ADR, DAD0)  // _ADR: Address
                    Store (Arg0, DAD0)
                    Return (IIC0)
                }
                Case (One)
                {
                    Name (IIC1, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C1",
                            0x00, ResourceConsumer, _Y1C, Exclusive,
                            )
                    })
                    CreateWordField (IIC1, \_SB.PC00.IICB._Y1C._ADR, DAD1)  // _ADR: Address
                    Store (Arg0, DAD1)
                    Return (IIC1)
                }
                Case (0x02)
                {
                    Name (IIC2, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C2",
                            0x00, ResourceConsumer, _Y1D, Exclusive,
                            )
                    })
                    CreateWordField (IIC2, \_SB.PC00.IICB._Y1D._ADR, DAD2)  // _ADR: Address
                    Store (Arg0, DAD2)
                    Return (IIC2)
                }
                Case (0x03)
                {
                    Name (IIC3, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C3",
                            0x00, ResourceConsumer, _Y1E, Exclusive,
                            )
                    })
                    CreateWordField (IIC3, \_SB.PC00.IICB._Y1E._ADR, DAD3)  // _ADR: Address
                    Store (Arg0, DAD3)
                    Return (IIC3)
                }
                Case (0x04)
                {
                    Name (IIC4, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C4",
                            0x00, ResourceConsumer, _Y1F, Exclusive,
                            )
                    })
                    CreateWordField (IIC4, \_SB.PC00.IICB._Y1F._ADR, DAD4)  // _ADR: Address
                    Store (Arg0, DAD4)
                    Return (IIC4)
                }
                Case (0x05)
                {
                    Name (IIC5, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C5",
                            0x00, ResourceConsumer, _Y20, Exclusive,
                            )
                    })
                    CreateWordField (IIC5, \_SB.PC00.IICB._Y20._ADR, DAD5)  // _ADR: Address
                    Store (Arg0, DAD5)
                    Return (IIC5)
                }
                Case (0x06)
                {
                    Name (IIC6, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C6",
                            0x00, ResourceConsumer, _Y21, Exclusive,
                            )
                    })
                    CreateWordField (IIC6, \_SB.PC00.IICB._Y21._ADR, DAD6)  // _ADR: Address
                    Store (Arg0, DAD6)
                    Return (IIC6)
                }
                Case (0x07)
                {
                    Name (IIC7, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C7",
                            0x00, ResourceConsumer, _Y22, Exclusive,
                            )
                    })
                    CreateWordField (IIC7, \_SB.PC00.IICB._Y22._ADR, DAD7)  // _ADR: Address
                    Store (Arg0, DAD7)
                    Return (IIC7)
                }
                Default
                {
                    Return (Zero)
                }

            }
        }

        Method (VIIC, 2, Serialized)
        {
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Name (VI00, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.HS07.VIC0",
                            0x00, ResourceConsumer, _Y24, Exclusive,
                            )
                    })
                    Name (VI01, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.HS06.VIC0",
                            0x00, ResourceConsumer, _Y23, Exclusive,
                            )
                    })
                    Name (VI02, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.HS08.VIC0",
                            0x00, ResourceConsumer, _Y25, Exclusive,
                            )
                    })
                    Name (VI03, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.HS03.VIC0",
                            0x00, ResourceConsumer, _Y26, Exclusive,
                            )
                    })
                    If (LEqual (CUPN, 0x06))
                    {
                        CreateWordField (VI01, \_SB.PC00.VIIC._Y23._ADR, DAQ0)  // _ADR: Address
                        Store (Arg0, DAQ0)
                        Return (VI01)
                    }
                    ElseIf (LEqual (CUPN, 0x07))
                    {
                        CreateWordField (VI00, \_SB.PC00.VIIC._Y24._ADR, DAR0)  // _ADR: Address
                        Store (Arg0, DAR0)
                        Return (VI00)
                    }
                    ElseIf (LEqual (CUPN, 0x08))
                    {
                        CreateWordField (VI02, \_SB.PC00.VIIC._Y25._ADR, DAS0)  // _ADR: Address
                        Store (Arg0, DAS0)
                        Return (VI02)
                    }
                    ElseIf (LEqual (CUPN, 0x03))
                    {
                        CreateWordField (VI03, \_SB.PC00.VIIC._Y26._ADR, DAT0)  // _ADR: Address
                        Store (Arg0, DAT0)
                        Return (VI03)
                    }

                    Return (ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.HSXX.VIC0",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                }
                Case (One)
                {
                    Name (VI10, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.HS07.VIC1",
                            0x00, ResourceConsumer, _Y28, Exclusive,
                            )
                    })
                    Name (VI11, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.HS06.VIC1",
                            0x00, ResourceConsumer, _Y27, Exclusive,
                            )
                    })
                    Name (VI12, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.HS08.VIC1",
                            0x00, ResourceConsumer, _Y29, Exclusive,
                            )
                    })
                    Name (VI13, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.HS03.VIC1",
                            0x00, ResourceConsumer, _Y2A, Exclusive,
                            )
                    })
                    If (LEqual (CUPN, 0x06))
                    {
                        CreateWordField (VI11, \_SB.PC00.VIIC._Y27._ADR, DAQ1)  // _ADR: Address
                        Store (Arg0, DAQ1)
                        Return (VI11)
                    }
                    ElseIf (LEqual (CUPN, 0x07))
                    {
                        CreateWordField (VI10, \_SB.PC00.VIIC._Y28._ADR, DAR1)  // _ADR: Address
                        Store (Arg0, DAR1)
                        Return (VI10)
                    }
                    ElseIf (LEqual (CUPN, 0x08))
                    {
                        CreateWordField (VI12, \_SB.PC00.VIIC._Y29._ADR, DAS1)  // _ADR: Address
                        Store (Arg0, DAS1)
                        Return (VI12)
                    }
                    ElseIf (LEqual (CUPN, 0x03))
                    {
                        CreateWordField (VI13, \_SB.PC00.VIIC._Y2A._ADR, DAT1)  // _ADR: Address
                        Store (Arg0, DAT1)
                        Return (VI13)
                    }

                    Return (ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.HSXX.VIC1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                }
                Default
                {
                    Return (ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.XHCI.RHUB.HSXX.VICX",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                }

            }
        }

        Method (INTB, 3, Serialized)
        {
            Name (INTR, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y2B)
                {
                    0x00000000,
                }
            })
            CreateDWordField (INTR, \_SB.PC00.INTB._Y2B._INT, NUMI)  // _INT: Interrupts
            Store (INUM (Arg0), NUMI)
            CreateBitField (INTR, \_SB.PC00.INTB._Y2B._HE, LEVI)  // _HE_: High-Edge
            Store (Arg1, LEVI)
            CreateBitField (INTR, \_SB.PC00.INTB._Y2B._LL, ACTI)  // _LL_: Low Level
            Store (Arg2, ACTI)
            Return (INTR)
        }
    }

    Scope (_SB.PC00.LPCB)
    {
        Device (H_EC)
        {
            Name (_HID, EisaId ("PNP0C09"))  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Store (0x03, ^^^GFX0.CLID)
                Return (Zero)
            }

            Name (ECAV, Zero)
            Name (B1ST, 0x32)
            Name (B2ST, 0x36)
            Name (CFAN, 0x05)
            Name (CMDR, 0x3A)
            Name (DOCK, 0xFF)
            Name (PLMX, One)
            Name (PECH, 0x83)
            Name (PECL, 0x82)
            Name (PENV, 0x44)
            Name (PINV, 0x43)
            Name (PPSH, 0x42)
            Name (PPSL, 0x41)
            Name (PSTP, 0x45)
            Name (RPWR, 0x03)
            Name (LSTE, 0x06)
            Name (VPWR, 0x30)
            Name (DLED, 0x78)
            Name (SPT2, 0xC8)
            Name (IWCW, 0x04)
            Name (IWCR, 0x18)
            Name (PVOL, 0xE8)
            Name (PWRT, 0x4E)
            Method (ECRD, 1, Serialized)
            {
                Store (DerefOf (Arg0), Local0)
                Switch (ToInteger (Local0))
                {
                    Case (0x32)
                    {
                        Return (Zero)
                    }
                    Case (0x36)
                    {
                        Return (Zero)
                    }
                    Case (0x05)
                    {
                        Return (Zero)
                    }
                    Case (0x3A)
                    {
                        Return (Zero)
                    }
                    Case (0xFF)
                    {
                        Return (Zero)
                    }
                    Case (One)
                    {
                        Return (Zero)
                    }
                    Case (0x83)
                    {
                        Return (Zero)
                    }
                    Case (0x82)
                    {
                        Return (Zero)
                    }
                    Case (0x44)
                    {
                        Return (Zero)
                    }
                    Case (0x43)
                    {
                        Return (Zero)
                    }
                    Case (0x42)
                    {
                        Return (Zero)
                    }
                    Case (0x41)
                    {
                        Return (Zero)
                    }
                    Case (0x45)
                    {
                        Return (Zero)
                    }
                    Case (0x03)
                    {
                        Return (Zero)
                    }
                    Case (0x06)
                    {
                        Return (Zero)
                    }
                    Case (0x30)
                    {
                        Return (Zero)
                    }
                    Case (0x78)
                    {
                        Return (Zero)
                    }
                    Case (0xC8)
                    {
                        Return (Zero)
                    }
                    Case (0x04)
                    {
                        Return (Zero)
                    }
                    Case (0x18)
                    {
                        Return (Zero)
                    }
                    Case (0xE8)
                    {
                        Return (Zero)
                    }
                    Case (0x4E)
                    {
                        Return (Zero)
                    }

                }

                Return (Zero)
            }

            Method (ECWT, 2, Serialized)
            {
                Store (DerefOf (Arg0), Local0)
                Switch (ToInteger (Local0))
                {
                    Case (0x32)
                    {
                    }
                    Case (0x36)
                    {
                    }
                    Case (0x05)
                    {
                    }
                    Case (0x3A)
                    {
                    }
                    Case (0xFF)
                    {
                    }
                    Case (One)
                    {
                    }
                    Case (0x83)
                    {
                    }
                    Case (0x82)
                    {
                    }
                    Case (0x44)
                    {
                    }
                    Case (0x43)
                    {
                    }
                    Case (0x42)
                    {
                    }
                    Case (0x41)
                    {
                    }
                    Case (0x45)
                    {
                    }
                    Case (0x03)
                    {
                    }
                    Case (0x06)
                    {
                    }
                    Case (0x30)
                    {
                    }
                    Case (0x78)
                    {
                    }
                    Case (0xC8)
                    {
                    }
                    Case (0x04)
                    {
                    }
                    Case (0x18)
                    {
                    }
                    Case (0xE8)
                    {
                    }
                    Case (0x4E)
                    {
                    }

                }
            }

            Method (ECMD, 1, Serialized)
            {
            }

            Method (ECNT, 1, Serialized)
            {
            }

            Device (BAT0)
            {
                Name (_HID, EisaId ("PNP0C0A"))  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (Zero)
                }
            }

            Device (BAT1)
            {
                Name (_HID, EisaId ("PNP0C0A"))  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (Zero)
                }

                Method (_BST, 0, NotSerialized)  // _BST: Battery Status
                {
                    Return (BST1 ())
                }
            }

            Device (BAT2)
            {
                Name (_HID, EisaId ("PNP0C0A"))  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (Zero)
                }

                Method (_BST, 0, NotSerialized)  // _BST: Battery Status
                {
                    Return (BST2 ())
                }
            }
        }
    }

    Scope (\)
    {
        Field (GNVS, AnyAcc, Lock, Preserve)
        {
            Offset (0x20), 
            B1SC,   8, 
            Offset (0x23), 
            B1SS,   8
        }
    }

    Scope (\)
    {
        Field (GNVS, AnyAcc, Lock, Preserve)
        {
            Offset (0x21), 
            B2SC,   8, 
            Offset (0x24), 
            B2SS,   8
        }
    }

    Device (_SB.PC00.DOCK)
    {
        Name (_HID, "ABCD0000")  // _HID: Hardware ID
        Name (_CID, EisaId ("PNP0C15"))  // _CID: Compatible ID
        Name (_UID, 0x02)  // _UID: Unique ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            Return (Zero)
        }
    }

    Scope (_SB)
    {
        Method (PWPR, 0, Serialized)
        {
        }

        Method (PWRR, 0, Serialized)
        {
        }
    }

    Scope (_SB.PC00.LPCB.H_EC)
    {
        Device (LID0)
        {
            Name (_HID, EisaId ("PNP0C0D"))  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (Zero)
            }

            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                Return (One)
            }
        }
    }

    Name (SNVB, 0x38FF3000)
    Name (SNVL, 0x0008)
    OperationRegion (SBNV, SystemMemory, SNVB, SNVL)
    Field (SBNV, AnyAcc, Lock, Preserve)
    {
        PIRA,   8, 
        PIRB,   8, 
        PIRC,   8, 
        PIRD,   8, 
        PIRE,   8, 
        PIRF,   8, 
        PIRG,   8, 
        PIRH,   8
    }

    Scope (_SB)
    {
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                And (PIRA, 0x80, Local0)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLA, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {11}
                })
                CreateWordField (RTLA, One, IRQ0)
                Store (PIRA, IRQ0)
                Return (RTLA)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                Or (PIRA, 0x80, PIRA)
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Decrement (Local0)
                Store (Local0, PIRA)
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                And (PIRB, 0x80, Local0)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLB, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {10}
                })
                CreateWordField (RTLB, One, IRQ0)
                Store (PIRB, IRQ0)
                Return (RTLB)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                Or (PIRB, 0x80, PIRB)
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Decrement (Local0)
                Store (Local0, PIRB)
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                And (PIRC, 0x80, Local0)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLC, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {11}
                })
                CreateWordField (RTLC, One, IRQ0)
                Store (PIRC, IRQ0)
                Return (RTLC)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                Or (PIRC, 0x80, PIRC)
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Decrement (Local0)
                Store (Local0, PIRC)
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                And (PIRD, 0x80, Local0)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLD, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {11}
                })
                CreateWordField (RTLD, One, IRQ0)
                Store (PIRD, IRQ0)
                Return (RTLD)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                Or (PIRD, 0x80, PIRD)
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Decrement (Local0)
                Store (Local0, PIRD)
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                And (PIRE, 0x80, Local0)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLE, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {11}
                })
                CreateWordField (RTLE, One, IRQ0)
                Store (PIRE, IRQ0)
                Return (RTLE)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                Or (PIRE, 0x80, PIRE)
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Decrement (Local0)
                Store (Local0, PIRE)
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE)
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                And (PIRF, 0x80, Local0)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLF, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {11}
                })
                CreateWordField (RTLF, One, IRQ0)
                Store (PIRF, IRQ0)
                Return (RTLF)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                Or (PIRF, 0x80, PIRF)
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Decrement (Local0)
                Store (Local0, PIRF)
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF)
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                And (PIRG, 0x80, Local0)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLG, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {11}
                })
                CreateWordField (RTLG, One, IRQ0)
                Store (PIRG, IRQ0)
                Return (RTLG)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                Or (PIRG, 0x80, PIRG)
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Decrement (Local0)
                Store (Local0, PIRG)
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG)
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                And (PIRH, 0x80, Local0)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLH, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {11}
                })
                CreateWordField (RTLH, One, IRQ0)
                Store (PIRH, IRQ0)
                Return (RTLH)
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                Or (PIRH, 0x80, PIRH)
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Decrement (Local0)
                Store (Local0, PIRH)
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH)
            }
        }
    }

    OperationRegion (_SB.PC00.LPCB.LPCR, PCI_Config, 0x80, 0x04)
    Field (\_SB.PC00.LPCB.LPCR, ByteAcc, NoLock, Preserve)
    {
        CARN,   3, 
            ,   1, 
        CBDR,   3, 
        Offset (0x01), 
        LTDR,   2, 
            ,   2, 
        FDDR,   1, 
        Offset (0x02), 
        CALE,   1, 
        CBLE,   1, 
        LTLE,   1, 
        FDLE,   1, 
        Offset (0x03), 
        GLLE,   1, 
        GHLE,   1, 
        KCLE,   1, 
        MCLE,   1, 
        C1LE,   1, 
        C2LE,   1, 
        Offset (0x04)
    }

    Method (UXDV, 1, Serialized)
    {
        Store (0xFF, Local0)
        Switch (Add (Arg0, Zero))
        {
            Case (0x03F8)
            {
                Store (Zero, Local0)
            }
            Case (0x02F8)
            {
                Store (One, Local0)
            }
            Case (0x0220)
            {
                Store (0x02, Local0)
            }
            Case (0x0228)
            {
                Store (0x03, Local0)
            }
            Case (0x0238)
            {
                Store (0x04, Local0)
            }
            Case (0x02E8)
            {
                Store (0x05, Local0)
            }
            Case (0x0338)
            {
                Store (0x06, Local0)
            }
            Case (0x03E8)
            {
                Store (0x07, Local0)
            }

        }

        Return (Local0)
    }

    Method (RRIO, 4, Serialized)
    {
        Switch (Add (Arg0, Zero))
        {
            Case (Zero)
            {
                Store (Zero, CALE)
                Store (UXDV (Arg2), Local0)
                If (LNotEqual (Local0, 0xFF))
                {
                    Store (Local0, CARN)
                }

                If (Arg1)
                {
                    Store (One, CALE)
                }
            }
            Case (One)
            {
                Store (Zero, CBLE)
                Store (UXDV (Arg2), Local0)
                If (LNotEqual (Local0, 0xFF))
                {
                    Store (Local0, CBDR)
                }

                If (Arg1)
                {
                    Store (One, CBLE)
                }
            }
            Case (0x02)
            {
                Store (Zero, LTLE)
                If (LEqual (Arg2, 0x0378))
                {
                    Store (Zero, LTDR)
                }

                If (LEqual (Arg2, 0x0278))
                {
                    Store (One, LTDR)
                }

                If (LEqual (Arg2, 0x03BC))
                {
                    Store (0x02, LTDR)
                }

                If (Arg1)
                {
                    Store (One, LTLE)
                }
            }
            Case (0x03)
            {
                Store (Zero, FDLE)
                If (LEqual (Arg2, 0x03F0))
                {
                    Store (Zero, FDDR)
                }

                If (LEqual (Arg2, 0x0370))
                {
                    Store (One, FDDR)
                }

                If (Arg1)
                {
                    Store (One, FDLE)
                }
            }
            Case (0x08)
            {
                If (LEqual (Arg2, 0x0200))
                {
                    If (Arg1)
                    {
                        Store (One, GLLE)
                    }
                    Else
                    {
                        Store (Zero, GLLE)
                    }
                }

                If (LEqual (Arg2, 0x0208))
                {
                    If (Arg1)
                    {
                        Store (One, GHLE)
                    }
                    Else
                    {
                        Store (Zero, GHLE)
                    }
                }
            }
            Case (0x09)
            {
                If (LEqual (Arg2, 0x0200))
                {
                    If (Arg1)
                    {
                        Store (One, GLLE)
                    }
                    Else
                    {
                        Store (Zero, GLLE)
                    }
                }

                If (LEqual (Arg2, 0x0208))
                {
                    If (Arg1)
                    {
                        Store (One, GHLE)
                    }
                    Else
                    {
                        Store (Zero, GHLE)
                    }
                }
            }
            Case (0x0A)
            {
                If (LOr (LEqual (Arg2, 0x60), LEqual (Arg2, 0x64)))
                {
                    If (Arg1)
                    {
                        Store (One, KCLE)
                    }
                    Else
                    {
                        Store (Zero, KCLE)
                    }
                }
            }
            Case (0x0B)
            {
                If (LOr (LEqual (Arg2, 0x62), LEqual (Arg2, 0x66)))
                {
                    If (Arg1)
                    {
                        Store (One, MCLE)
                    }
                    Else
                    {
                        Store (Zero, MCLE)
                    }
                }
            }
            Case (0x0C)
            {
                If (LEqual (Arg2, 0x2E))
                {
                    If (Arg1)
                    {
                        Store (One, C1LE)
                    }
                    Else
                    {
                        Store (Zero, C1LE)
                    }
                }

                If (LEqual (Arg2, 0x4E))
                {
                    If (Arg1)
                    {
                        Store (One, C2LE)
                    }
                    Else
                    {
                        Store (Zero, C2LE)
                    }
                }
            }
            Case (0x0D)
            {
                If (LEqual (Arg2, 0x2E))
                {
                    If (Arg1)
                    {
                        Store (One, C1LE)
                    }
                    Else
                    {
                        Store (Zero, C1LE)
                    }
                }

                If (LEqual (Arg2, 0x4E))
                {
                    If (Arg1)
                    {
                        Store (One, C2LE)
                    }
                    Else
                    {
                        Store (Zero, C2LE)
                    }
                }
            }

        }
    }

    Method (RDMA, 3, NotSerialized)
    {
    }

    Scope (_SB)
    {
        Device (AWAC)
        {
            Name (_HID, "ACPI000E")  // _HID: Hardware ID
            Name (WAST, Zero)
            Name (WTTR, Zero)
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (XPRW (0x72, 0x04))
            }

            Mutex (RTCL, 0x00)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (LEqual (STAS, Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_GCP, 0, NotSerialized)  // _GCP: Get Capabilities
            {
                Return (0xB7)
            }

            OperationRegion (RTCM, SystemCMOS, Zero, 0x3F)
            Field (RTCM, ByteAcc, Lock, Preserve)
            {
                SEC,    8, 
                Offset (0x02), 
                MIN,    8, 
                Offset (0x04), 
                HOR,    8, 
                Offset (0x07), 
                DAY,    8, 
                MON,    8, 
                YEAR,   8, 
                REGA,   8, 
                Offset (0x32), 
                CNTY,   8
            }

            Method (_GRT, 0, Serialized)  // _GRT: Get Real Time
            {
                Name (BUFF, Buffer (0x10){})
                CreateWordField (BUFF, Zero, Y)
                CreateByteField (BUFF, 0x02, M)
                CreateByteField (BUFF, 0x03, D)
                CreateByteField (BUFF, 0x04, H)
                CreateByteField (BUFF, 0x05, MIN1)
                CreateByteField (BUFF, 0x06, S)
                CreateByteField (BUFF, 0x07, V)
                CreateWordField (BUFF, 0x0A, TZ)
                CreateByteField (BUFF, 0x0C, DL)
                Acquire (RTCL, 0xFFFF)
                Store (Zero, Local1)
                Name (TOUT, 0x000186A0)
                Divide (TOUT, 0x0A, , TOUT)
                While (LAnd (LAnd (REGA, 0x80), LLess (Local1, TOUT)))
                {
                    Stall (0x0A)
                    Add (Local1, 0x0A, Local1)
                }

                If (LGreaterEqual (Local1, TOUT))
                {
                    ADBG ("_GRT timeout fail")
                }

                FromBCD (YEAR, Local5)
                FromBCD (CNTY, Local6)
                Add (Multiply (Local6, 0x64), Local5, Y)
                FromBCD (MON, M)
                FromBCD (DAY, D)
                FromBCD (HOR, H)
                FromBCD (MIN, MIN1)
                FromBCD (SEC, S)
                Release (RTCL)
                Store (0x07FF, TZ)
                Store (Zero, DL)
                Store (One, V)
                Return (BUFF)
            }

            Method (_SRT, 1, NotSerialized)  // _SRT: Set Real Time
            {
                CreateWordField (Arg0, Zero, Y)
                CreateByteField (Arg0, 0x02, M)
                CreateByteField (Arg0, 0x03, D)
                CreateByteField (Arg0, 0x04, H)
                CreateByteField (Arg0, 0x05, MIN1)
                CreateByteField (Arg0, 0x06, S)
                Acquire (RTCL, 0xFFFF)
                Store (Zero, Local1)
                Name (TOUT, 0x000186A0)
                Divide (TOUT, 0x0A, , TOUT)
                While (LAnd (LAnd (REGA, 0x80), LLess (Local1, TOUT)))
                {
                    Stall (0x0A)
                    Add (Local1, 0x0A, Local1)
                }

                If (LGreaterEqual (Local1, TOUT))
                {
                    ADBG ("_SRT timeout fail")
                    Release (RTCL)
                    Return (0xFFFFFFFF)
                }

                Divide (Y, 0x64, Local5, Local4)
                ToBCD (Local4, CNTY)
                ToBCD (Local5, YEAR)
                ToBCD (M, MON)
                ToBCD (D, DAY)
                ToBCD (H, HOR)
                ToBCD (MIN1, MIN)
                ToBCD (S, SEC)
                Release (RTCL)
                Return (Zero)
            }

            Method (_GWS, 1, Serialized)  // _GWS: Get Wake Status
            {
                Store (Zero, Local0)
                If (LEqual (Arg0, Zero))
                {
                    If (LAnd (LEqual (ACWA, 0xFFFFFFFF), And (One, WTTR)))
                    {
                        Or (One, Local0, Local0)
                        XOr (One, WTTR, WTTR)
                    }
                }
                ElseIf (LAnd (LEqual (DCWA, 0xFFFFFFFF), And (0x02, WTTR)))
                {
                    Or (One, Local0, Local0)
                    XOr (0x02, WTTR, WTTR)
                }

                If (WAST)
                {
                    Or (0x02, Local0, Local0)
                    Store (Zero, WAST)
                }

                Return (Local0)
            }

            Method (_CWS, 1, NotSerialized)  // _CWS: Clear Wake Alarm Status
            {
                Return (Zero)
            }

            Method (_STP, 2, NotSerialized)  // _STP: Set Expired Timer Wake Policy
            {
                If (LEqual (Arg0, Zero))
                {
                    Store (Arg1, ACET)
                }
                Else
                {
                    Store (Arg1, DCET)
                }

                Return (Zero)
            }

            Method (_STV, 2, Serialized)  // _STV: Set Timer Value
            {
                If (LEqual (Arg0, Zero))
                {
                    Store (Arg1, ACWA)
                    Or (One, WTTR, WTTR)
                }
                Else
                {
                    Store (Arg1, DCWA)
                    Or (0x02, WTTR, WTTR)
                }

                Return (Zero)
            }

            Method (_TIP, 1, NotSerialized)  // _TIP: Expired Timer Wake Policy
            {
                If (LEqual (Arg0, Zero))
                {
                    Return (ACET)
                }
                Else
                {
                    Return (DCET)
                }
            }

            Method (_TIV, 1, NotSerialized)  // _TIV: Timer Values
            {
                If (LEqual (Arg0, Zero))
                {
                    Return (ACWA)
                }
                Else
                {
                    Return (DCWA)
                }
            }
        }
    }

    Scope (\)
    {
        Method (ASRT, 2, NotSerialized)
        {
            And (Arg0, 0xFF, Local1)
            While (One)
            {
                Store (0x09, Local0)
                P8XH (Zero, Local1)
                While (LGreater (Local0, Zero))
                {
                    P8XH (One, Local0)
                    Decrement (Local0)
                    Store (0x2710, Local2)
                    While (LGreater (Local2, Zero))
                    {
                        Stall (0x64)
                        Decrement (Local2)
                    }
                }

                P8XH (Zero, 0xB6)
                P8XH (One, 0xAD)
                Sleep (0xEA60)
            }
        }
    }

    Name (PNVB, 0x39099098)
    Name (PNVL, 0x0379)
    OperationRegion (PNVA, SystemMemory, PNVB, PNVL)
    Field (PNVA, AnyAcc, Lock, Preserve)
    {
        PCHS,   16, 
        PCHG,   16, 
        PSTP,   16, 
        RPA1,   32, 
        RPA2,   32, 
        RPA3,   32, 
        RPA4,   32, 
        RPA5,   32, 
        RPA6,   32, 
        RPA7,   32, 
        RPA8,   32, 
        RPA9,   32, 
        RPAA,   32, 
        RPAB,   32, 
        RPAC,   32, 
        RPAD,   32, 
        RPAE,   32, 
        RPAF,   32, 
        RPAG,   32, 
        RPAH,   32, 
        RPAI,   32, 
        RPAJ,   32, 
        RPAK,   32, 
        RPAL,   32, 
        RPAM,   32, 
        RPAN,   32, 
        RPAO,   32, 
        RPAP,   32, 
        RPAQ,   32, 
        RPAR,   32, 
        RPAS,   32, 
        NHLA,   64, 
        NHLL,   32, 
        ADFM,   32, 
        SWQ0,   8, 
        SWQ1,   8, 
        SWQ2,   8, 
        SWQ3,   8, 
        ACS0,   8, 
        ACS1,   8, 
        ACS2,   8, 
        ACS3,   8, 
        DAI0,   8, 
        DAI1,   8, 
        DAI2,   8, 
        DAI3,   8, 
        DOD0,   8, 
        DOD1,   8, 
        DOD2,   8, 
        DOD3,   8, 
        SWMC,   8, 
        XTAL,   32, 
        AFDF,   8, 
        SBRG,   32, 
        GEI0,   8, 
        GEI1,   8, 
        GEI2,   8, 
        GED0,   8, 
        GED1,   8, 
        GED2,   8, 
        PML1,   16, 
        PML2,   16, 
        PML3,   16, 
        PML4,   16, 
        PML5,   16, 
        PML6,   16, 
        PML7,   16, 
        PML8,   16, 
        PML9,   16, 
        PMLA,   16, 
        PMLB,   16, 
        PMLC,   16, 
        PMLD,   16, 
        PMLE,   16, 
        PMLF,   16, 
        PMLG,   16, 
        PMLH,   16, 
        PMLI,   16, 
        PMLJ,   16, 
        PMLK,   16, 
        PMLL,   16, 
        PMLM,   16, 
        PMLN,   16, 
        PMLO,   16, 
        PMLP,   16, 
        PMLQ,   16, 
        PMLR,   16, 
        PMLS,   16, 
        PNL1,   16, 
        PNL2,   16, 
        PNL3,   16, 
        PNL4,   16, 
        PNL5,   16, 
        PNL6,   16, 
        PNL7,   16, 
        PNL8,   16, 
        PNL9,   16, 
        PNLA,   16, 
        PNLB,   16, 
        PNLC,   16, 
        PNLD,   16, 
        PNLE,   16, 
        PNLF,   16, 
        PNLG,   16, 
        PNLH,   16, 
        PNLI,   16, 
        PNLJ,   16, 
        PNLK,   16, 
        PNLL,   16, 
        PNLM,   16, 
        PNLN,   16, 
        PNLO,   16, 
        PNLP,   16, 
        PNLQ,   16, 
        PNLR,   16, 
        PNLS,   16, 
        XHPC,   8, 
        XRPC,   8, 
        XSPC,   8, 
        XSPA,   8, 
        HPTB,   32, 
        HPTE,   8, 
        SM00,   8, 
        SM01,   8, 
        SM02,   8, 
        SM03,   8, 
        SM04,   8, 
        SM05,   8, 
        SM06,   8, 
        SC00,   64, 
        SC01,   64, 
        SC02,   64, 
        SC03,   64, 
        SC04,   64, 
        SC05,   64, 
        SC06,   64, 
        IM00,   8, 
        IM01,   8, 
        IM02,   8, 
        IM03,   8, 
        IM04,   8, 
        IM05,   8, 
        IM06,   8, 
        IM07,   8, 
        IC00,   64, 
        IC01,   64, 
        IC02,   64, 
        IC03,   64, 
        IC04,   64, 
        IC05,   64, 
        IC06,   64, 
        IC07,   64, 
        UM00,   8, 
        UM01,   8, 
        UM02,   8, 
        UM03,   8, 
        UM04,   8, 
        UM05,   8, 
        UM06,   8, 
        UC00,   64, 
        UC01,   64, 
        UC02,   64, 
        UC03,   64, 
        UC04,   64, 
        UC05,   64, 
        UC06,   64, 
        UD00,   8, 
        UD01,   8, 
        UD02,   8, 
        UD03,   8, 
        UD04,   8, 
        UD05,   8, 
        UD06,   8, 
        UP00,   8, 
        UP01,   8, 
        UP02,   8, 
        UP03,   8, 
        UP04,   8, 
        UP05,   8, 
        UP06,   8, 
        UI00,   8, 
        UI01,   8, 
        UI02,   8, 
        UI03,   8, 
        UI04,   8, 
        UI05,   8, 
        UI06,   8, 
        SGIR,   8, 
        GPHD,   8, 
        NIT1,   8, 
        NIT2,   8, 
        NIT3,   8, 
        NPM1,   8, 
        NPM2,   8, 
        NPM3,   8, 
        NPC1,   8, 
        NPC2,   8, 
        NPC3,   8, 
        NL11,   16, 
        NL12,   16, 
        NL13,   16, 
        ND21,   8, 
        ND22,   8, 
        ND23,   8, 
        ND11,   32, 
        ND12,   32, 
        ND13,   32, 
        NLR1,   16, 
        NLR2,   16, 
        NLR3,   16, 
        NLD1,   32, 
        NLD2,   32, 
        NLD3,   32, 
        NEA1,   16, 
        NEA2,   16, 
        NEA3,   16, 
        NEB1,   16, 
        NEB2,   16, 
        NEB3,   16, 
        NEC1,   16, 
        NEC2,   16, 
        NEC3,   16, 
        NRA1,   16, 
        NRA2,   16, 
        NRA3,   16, 
        NMB1,   32, 
        NMB2,   32, 
        NMB3,   32, 
        NMV1,   32, 
        NMV2,   32, 
        NMV3,   32, 
        NPB1,   32, 
        NPB2,   32, 
        NPB3,   32, 
        NPV1,   32, 
        NPV2,   32, 
        NPV3,   32, 
        NRP1,   32, 
        NRP2,   32, 
        NRP3,   32, 
        EMH4,   8, 
        EMDS,   8, 
        CSKU,   8, 
        ITA0,   16, 
        ITA1,   16, 
        ITA2,   16, 
        ITA3,   16, 
        ITS0,   8, 
        ITS1,   8, 
        ITS2,   8, 
        ITS3,   8, 
        PMBS,   16, 
        PWRM,   32, 
        CNVI,   8, 
        CBTC,   8, 
        CBTA,   8, 
        CVPR,   8, 
        CRFI,   8, 
        CRFP,   8, 
        PTHM,   8, 
        PSON,   8, 
        LTR1,   8, 
        LTR2,   8, 
        LTR3,   8, 
        LTR4,   8, 
        LTR5,   8, 
        LTR6,   8, 
        LTR7,   8, 
        LTR8,   8, 
        LTR9,   8, 
        LTRA,   8, 
        LTRB,   8, 
        LTRC,   8, 
        LTRD,   8, 
        LTRE,   8, 
        LTRF,   8, 
        LTRG,   8, 
        LTRH,   8, 
        LTRI,   8, 
        LTRJ,   8, 
        LTRK,   8, 
        LTRL,   8, 
        LTRM,   8, 
        LTRN,   8, 
        LTRO,   8, 
        LTRP,   8, 
        LTRQ,   8, 
        LTRR,   8, 
        LTRS,   8, 
        GBES,   8, 
        PPDS,   32, 
        EMCE,   8, 
        SDCE,   8, 
        TGEA,   8, 
        TGEB,   8, 
        CR00,   8, 
        CR01,   8, 
        CR02,   8, 
        CR03,   8, 
        CR04,   8, 
        CR05,   8, 
        CR06,   8, 
        CR07,   8, 
        CR08,   8, 
        CR09,   8, 
        CR10,   8, 
        CR11,   8, 
        CR12,   8, 
        CR13,   8, 
        CR14,   8, 
        CR15,   8, 
        CR16,   8, 
        CR17,   8, 
        TCOB,   16, 
        ICKP,   16, 
        PCNV,   16, 
        HBSL,   32, 
        PU2C,   8, 
        PU3C,   8, 
        SPPR,   8, 
        IPCC,   8, 
        CQ00,   8, 
        CQ01,   8, 
        CQ02,   8, 
        CQ03,   8, 
        CQ04,   8, 
        CQ05,   8, 
        CQ06,   8, 
        CQ07,   8, 
        CQ08,   8, 
        CQ09,   8, 
        CQ10,   8, 
        CQ11,   8, 
        CQ12,   8, 
        CQ13,   8, 
        CQ14,   8, 
        CQ15,   8, 
        CQ16,   8, 
        CQ17,   8, 
        TIN0,   32, 
        TIN1,   32, 
        TMD0,   16, 
        TMD1,   16, 
        UF0E,   8, 
        UF1E,   8, 
        UAOE,   8, 
        T010,   32, 
        T011,   32, 
        T020,   8, 
        T021,   8, 
        T030,   32, 
        T031,   32, 
        T040,   32, 
        T041,   32, 
        T050,   32, 
        T051,   32, 
        T060,   32, 
        T061,   32, 
        T070,   32, 
        T071,   32, 
        T080,   32, 
        T081,   32, 
        T090,   32, 
        T091,   32, 
        T0A0,   32, 
        T0A1,   32, 
        T0B0,   32, 
        T0B1,   32, 
        T0C0,   32, 
        T0C1,   32, 
        T0D0,   32, 
        T0D1,   32, 
        HBCL,   32, 
        HBPL,   32, 
        AL6D,   32, 
        T0E0,   32, 
        T0E1,   32
    }

    Scope (_SB)
    {
        Method (PSD3, 1, Serialized)
        {
            Store (Zero, Local0)
            If (LOr (LEqual (SIME, One), LNot (IMPS ())))
            {
                Return (Zero)
            }

            Switch (Add (Zero, Decrement (Arg0)))
            {
                Case (Zero)
                {
                    Store (One, RAA0)
                    While (LAnd (LEqual (APA0, Zero), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (One)
                {
                    Store (One, RAA1)
                    While (LAnd (LEqual (APA1, Zero), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x02)
                {
                    Store (One, RAA2)
                    While (LAnd (LEqual (APA2, Zero), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x03)
                {
                    Store (One, RAA3)
                    While (LAnd (LEqual (APA3, Zero), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x04)
                {
                    Store (One, RPB0)
                    While (LAnd (LEqual (APB0, Zero), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x05)
                {
                    Store (One, RPB1)
                    While (LAnd (LEqual (APB1, Zero), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x06)
                {
                    Store (One, RPB2)
                    While (LAnd (LEqual (APB2, Zero), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x07)
                {
                    Store (One, RPB3)
                    While (LAnd (LEqual (APB3, Zero), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x08)
                {
                    Store (One, RPC0)
                    While (LAnd (LEqual (APC0, Zero), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x09)
                {
                    Store (One, RPC1)
                    While (LAnd (LEqual (APC1, Zero), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x0A)
                {
                    Store (One, RPC2)
                    While (LAnd (LEqual (APC2, Zero), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x0B)
                {
                    Store (One, RPC3)
                    While (LAnd (LEqual (APC3, Zero), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x0C)
                {
                    Store (One, RPD0)
                    While (LAnd (LEqual (APD0, Zero), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x0D)
                {
                    Store (One, RPD1)
                    While (LAnd (LEqual (APD1, Zero), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x0E)
                {
                    Store (One, RPD2)
                    While (LAnd (LEqual (APD2, Zero), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x0F)
                {
                    Store (One, RPD3)
                    While (LAnd (LEqual (APD3, Zero), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x10)
                {
                    Store (One, RPE0)
                    While (LAnd (LEqual (APE0, Zero), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x11)
                {
                    Store (One, RPE1)
                    While (LAnd (LEqual (APE1, Zero), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x12)
                {
                    Store (One, RPE2)
                    While (LAnd (LEqual (APE2, Zero), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x13)
                {
                    Store (One, RPE3)
                    While (LAnd (LEqual (APE3, Zero), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }

            }

            If (LGreaterEqual (Local0, 0x2710))
            {
                ADBG ("Error: Timeout occurred")
            }
            
            Return (Zero)
        }

        Method (PSD0, 1, Serialized)
        {
            Store (Zero, Local0)
            If (LOr (LEqual (SIME, One), LNot (IMPS ())))
            {
                Return (Zero)
            }

            Switch (Add (Zero, Decrement (Arg0)))
            {
                Case (Zero)
                {
                    Store (Zero, RAA0)
                    While (LAnd (LEqual (APA0, One), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (One)
                {
                    Store (Zero, RAA1)
                    While (LAnd (LEqual (APA1, One), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x02)
                {
                    Store (Zero, RAA2)
                    While (LAnd (LEqual (APA2, One), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x03)
                {
                    Store (Zero, RAA3)
                    While (LAnd (LEqual (APA3, One), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x04)
                {
                    Store (Zero, RPB0)
                    While (LAnd (LEqual (APB0, One), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x05)
                {
                    Store (Zero, RPB1)
                    While (LAnd (LEqual (APB1, One), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x06)
                {
                    Store (Zero, RPB2)
                    While (LAnd (LEqual (APB2, One), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x07)
                {
                    Store (Zero, RPB3)
                    While (LAnd (LEqual (APB3, One), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x08)
                {
                    Store (Zero, RPC0)
                    While (LAnd (LEqual (APC0, One), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x09)
                {
                    Store (Zero, RPC1)
                    While (LAnd (LEqual (APC1, One), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x0A)
                {
                    Store (Zero, RPC2)
                    While (LAnd (LEqual (APC2, One), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x0B)
                {
                    Store (Zero, RPC3)
                    While (LAnd (LEqual (APC3, One), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x0C)
                {
                    Store (Zero, RPD0)
                    While (LAnd (LEqual (APD0, One), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x0D)
                {
                    Store (Zero, RPD1)
                    While (LAnd (LEqual (APD1, One), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x0E)
                {
                    Store (Zero, RPD2)
                    While (LAnd (LEqual (APD2, One), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x0F)
                {
                    Store (Zero, RPD3)
                    While (LAnd (LEqual (APD3, One), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x10)
                {
                    Store (Zero, RPE0)
                    While (LAnd (LEqual (APE0, One), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x11)
                {
                    Store (Zero, RPE1)
                    While (LAnd (LEqual (APE1, One), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x12)
                {
                    Store (Zero, RPE2)
                    While (LAnd (LEqual (APE2, One), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x13)
                {
                    Store (Zero, RPE3)
                    While (LAnd (LEqual (APE3, One), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }

            }

            If (LGreaterEqual (Local0, 0x2710))
            {
                ADBG ("Error: Timeout occurred")
            }
            
            Return (Zero)
        }

        Method (CSD3, 1, Serialized)
        {
            Store (Zero, Local0)
            If (LOr (LEqual (SIME, One), LNot (IMPS ())))
            {
                Return (Zero)
            }

            Switch (ToInteger (Arg0))
            {
                Case (0x14)
                {
                    Store (One, RSAT)
                    While (LAnd (LEqual (ASAT, Zero), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x15)
                {
                    Store (One, RGBE)
                    While (LAnd (LEqual (AGBE, Zero), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x16)
                {
                    Store (One, RXHC)
                    While (LAnd (LEqual (AXHC, Zero), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x17)
                {
                    Store (One, RXDC)
                    While (LAnd (LEqual (AXDC, Zero), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x18)
                {
                    Store (One, RUFS)
                    While (LAnd (LEqual (AUFS, Zero), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }

            }

            If (LGreaterEqual (Local0, 0x2710))
            {
                ADBG ("Error: Timeout occurred")
            }
            
            Return (Zero)
        }

        Method (CSD0, 1, Serialized)
        {
            Store (Zero, Local0)
            If (LOr (LEqual (SIME, One), LNot (IMPS ())))
            {
                Return (Zero)
            }

            Switch (ToInteger (Arg0))
            {
                Case (0x14)
                {
                    Store (Zero, RSAT)
                    While (LAnd (LEqual (ASAT, One), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x15)
                {
                    Store (Zero, RGBE)
                    While (LAnd (LEqual (AGBE, One), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x16)
                {
                    Store (Zero, RXHC)
                    While (LAnd (LEqual (AXHC, One), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x17)
                {
                    Store (Zero, RXDC)
                    While (LAnd (LEqual (AXDC, One), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }
                Case (0x18)
                {
                    Store (Zero, RUFS)
                    While (LAnd (LEqual (AUFS, One), LLess (Local0, 0x2710)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }

            }

            If (LGreaterEqual (Local0, 0x2710))
            {
                ADBG ("Error: Timeout occurred")
            }
            
            Return (Zero)
        }
    }

    Name (THMN, 0x48)
    Name (THCN, 0x0E)
    Name (CNPM, 0x80)
    Name (FMSN, 0x10)
    Scope (\)
    {
        Method (THDA, 2, Serialized)
        {
            Store (0xFE200000, Local0)
            Add (Local0, Multiply (0x40, Multiply (CNPM, Subtract (Arg0, FMSN))), Local0)
            Add (Local0, Multiply (0x40, Arg1), Local0)
            Return (Local0)
        }

        Method (STRD, 3, Serialized)
        {
            If (LGreater (Add (Arg1, Arg2), SizeOf (Arg0)))
            {
                Return (Zero)
            }

            ToBuffer (Arg0, Local3)
            Store (Zero, Local0)
            Store (Zero, Local1)
            While (LLess (Local1, Arg2))
            {
                Store (DerefOf (Index (Local3, Add (Arg1, Local1))), Local2)
                Add (Local0, ShiftLeft (Local2, Multiply (0x08, Local1)), Local0)
                Increment (Local1)
            }

            Return (Local0)
        }

        Method (THDS, 1, Serialized)
        {
            If (LEqual (PTHM, Zero))
            {
                Return (Zero)
            }
            ElseIf (LEqual (PTHM, One))
            {
                If (LNot (\_SB.PC00.PTHT.THEN ()))
                {
                    Return (Zero)
                }
            }
            ElseIf (LEqual (PTHM, 0x02))
            {
                If (LNot (\_SB.PTHH.THEN ()))
                {
                    Return (Zero)
                }
            }
            Else
            {
                Return (Zero)
            }

            Concatenate (Arg0, "\n", Local2)
            Store (SizeOf (Local2), Local0)
            Store (THDA (THMN, THCN), Local1)
            OperationRegion (THBA, SystemMemory, Local1, 0x40)
            Field (THBA, QWordAcc, NoLock, WriteAsZeros)
            {
                QO00,   64
            }

            Field (THBA, DWordAcc, NoLock, WriteAsZeros)
            {
                DO00,   32, 
                Offset (0x10), 
                DO10,   32, 
                Offset (0x30), 
                DO30,   32
            }

            Field (THBA, WordAcc, NoLock, WriteAsZeros)
            {
                WO00,   16
            }

            Field (THBA, ByteAcc, NoLock, WriteAsZeros)
            {
                BO00,   8
            }

            Store (0x01000242, DO10)
            Store (Local0, WO00)
            Store (Zero, Local6)
            Store (Local0, Local7)
            While (LGreaterEqual (Local7, 0x08))
            {
                Store (STRD (Local2, Local6, 0x08), QO00)
                Add (Local6, 0x08, Local6)
                Subtract (Local7, 0x08, Local7)
            }

            If (LGreaterEqual (Local7, 0x04))
            {
                Store (STRD (Local2, Local6, 0x04), DO00)
                Add (Local6, 0x04, Local6)
                Subtract (Local7, 0x04, Local7)
            }

            If (LGreaterEqual (Local7, 0x02))
            {
                Store (STRD (Local2, Local6, 0x02), WO00)
                Add (Local6, 0x02, Local6)
                Subtract (Local7, 0x02, Local7)
            }

            If (LGreaterEqual (Local7, One))
            {
                Store (STRD (Local2, Local6, One), BO00)
                Add (Local6, One, Local6)
                Subtract (Local7, One, Local7)
            }

            Store (Zero, DO30)
            
            Return (Zero)
        }

        Method (THDH, 1, Serialized)
        {
            THDS (ToHexString (Arg0))
        }

        Method (THDD, 1, Serialized)
        {
            THDS (ToDecimalString (Arg0))
        }
    }

    Name (PCHH, One)
    Name (PCHN, 0x03)
    Name (PCHL, 0x02)
    Name (PCHP, 0x05)
    Name (PCHM, 0x06)
    Name (PCHX, 0x04)
    Scope (_SB)
    {
        Method (PWAK, 1, NotSerialized)
        {
            If (LEqual (Arg0, 0x03))
            {
                S23W ()
            }
        }

        Name (HDAA, One)
        Name (DISA, One)
        Name (CIWF, One)
        Name (CIBT, One)
        Name (S23C, Zero)
        Method (S23W, 0, NotSerialized)
        {
            Store (One, HDAA)
            Store (One, DISA)
            Store (One, CIWF)
            Store (One, CIBT)
        }

        Method (DION, 0, NotSerialized)
        {
            S023 (One, One)
        }

        Method (DIOF, 0, NotSerialized)
        {
            S023 (One, Zero)
        }

        Method (S023, 2, Serialized)
        {
        }

        Device (PRRE)
        {
            Name (_HID, EisaId ("PNP0C02"))  // _HID: Hardware ID
            Name (_UID, "PCHRESV")  // _UID: Unique ID
            Name (_STA, 0x08)  // _STA: Status
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFE000000,         // Address Base
                        0x00020000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE04C000,         // Address Base
                        0x00004000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE050000,         // Address Base
                        0x00060000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE0D0000,         // Address Base
                        0x00030000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE200000,         // Address Base
                        0x00600000,         // Address Length
                        )
                    Memory32Fixed (ReadOnly,
                        0xFF000000,         // Address Base
                        0x01000000,         // Address Length
                        )
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y2C)
                })
                CreateWordField (BUF0, \_SB.PRRE._CRS._Y2C._MIN, AMIN)  // _MIN: Minimum Base Address
                CreateWordField (BUF0, \_SB.PRRE._CRS._Y2C._MAX, AMAX)  // _MAX: Maximum Base Address
                Store (PMBS, AMIN)
                Store (PMBS, AMAX)
                Name (SBR0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00690000,         // Address Length
                        _Y2D)
                })
                CreateDWordField (SBR0, \_SB.PRRE._CRS._Y2D._BAS, BAS0)  // _BAS: Base Address
                Store (SBRG, BAS0)
                ConcatenateResTemplate (BUF0, SBR0, Local0)
                If (LOr (LEqual (PCHS, PCHH), LEqual (PCHS, 0x04)))
                {
                    Name (SBRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y2E)
                    })
                    CreateDWordField (SBRS, \_SB.PRRE._CRS._Y2E._BAS, BAS1)  // _BAS: Base Address
                    CreateDWordField (SBRS, \_SB.PRRE._CRS._Y2E._LEN, LEN1)  // _LEN: Length
                    Store (Add (SBRG, 0x006C0000), BAS1)
                    Store (0x00010000, LEN1)
                    ConcatenateResTemplate (Local0, SBRS, Local1)
                }
                Else
                {
                    Name (SBRL, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y2F)
                    })
                    CreateDWordField (SBRL, \_SB.PRRE._CRS._Y2F._BAS, BAS2)  // _BAS: Base Address
                    CreateDWordField (SBRL, \_SB.PRRE._CRS._Y2F._LEN, LEN2)  // _LEN: Length
                    Store (Add (SBRG, 0x006B0000), BAS2)
                    Store (0x00020000, LEN2)
                    ConcatenateResTemplate (Local0, SBRL, Local1)
                }

                Name (SBRE, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y30)
                })
                CreateDWordField (SBRE, \_SB.PRRE._CRS._Y30._BAS, BAS3)  // _BAS: Base Address
                CreateDWordField (SBRE, \_SB.PRRE._CRS._Y30._LEN, LEN3)  // _LEN: Length
                Store (Add (SBRG, 0x006F0000), BAS3)
                If (LEqual (PCHS, 0x04))
                {
                    Store (Subtract (Add (SBRG, 0x10000000), BAS3), LEN3)
                }
                Else
                {
                    Store (Subtract (Add (SBRG, 0x01000000), BAS3), LEN3)
                }

                ConcatenateResTemplate (Local1, SBRE, Local2)
                Return (Local2)
            }
        }

        Device (IOTR)
        {
            Name (_HID, EisaId ("PNP0C02"))  // _HID: Hardware ID
            Name (_UID, "IoTraps")  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y31)
                })
                Name (BUF1, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y32)
                })
                Name (BUF2, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y33)
                })
                Name (BUF3, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y34)
                })
                CreateWordField (BUF0, \_SB.IOTR._CRS._Y31._MIN, AMI0)  // _MIN: Minimum Base Address
                CreateWordField (BUF0, \_SB.IOTR._CRS._Y31._MAX, AMA0)  // _MAX: Maximum Base Address
                CreateWordField (BUF1, \_SB.IOTR._CRS._Y32._MIN, AMI1)  // _MIN: Minimum Base Address
                CreateWordField (BUF1, \_SB.IOTR._CRS._Y32._MAX, AMA1)  // _MAX: Maximum Base Address
                CreateWordField (BUF2, \_SB.IOTR._CRS._Y33._MIN, AMI2)  // _MIN: Minimum Base Address
                CreateWordField (BUF2, \_SB.IOTR._CRS._Y33._MAX, AMA2)  // _MAX: Maximum Base Address
                CreateWordField (BUF3, \_SB.IOTR._CRS._Y34._MIN, AMI3)  // _MIN: Minimum Base Address
                CreateWordField (BUF3, \_SB.IOTR._CRS._Y34._MAX, AMA3)  // _MAX: Maximum Base Address
                Store (Zero, Local2)
                If (LEqual (ITS0, One))
                {
                    Store (ITA0, AMI0)
                    Store (ITA0, AMA0)
                    Store (BUF0, Local0)
                    Store (One, Local2)
                }

                If (LEqual (ITS1, One))
                {
                    Store (ITA1, AMI1)
                    Store (ITA1, AMA1)
                    If (LEqual (Local2, One))
                    {
                        ConcatenateResTemplate (BUF1, Local0, Local1)
                        Store (Local1, Local0)
                    }
                    Else
                    {
                        Store (BUF1, Local0)
                        Store (One, Local2)
                    }
                }

                If (LEqual (ITS2, One))
                {
                    Store (ITA2, AMI2)
                    Store (ITA2, AMA2)
                    If (LEqual (Local2, One))
                    {
                        ConcatenateResTemplate (BUF2, Local0, Local1)
                        Store (Local1, Local0)
                    }
                    Else
                    {
                        Store (BUF2, Local0)
                        Store (One, Local2)
                    }
                }

                If (LEqual (ITS3, One))
                {
                    Store (ITA3, AMI3)
                    Store (ITA3, AMA3)
                    If (LEqual (Local2, One))
                    {
                        ConcatenateResTemplate (BUF3, Local0, Local1)
                        Store (Local1, Local0)
                    }
                    Else
                    {
                        Store (BUF3, Local0)
                        Store (One, Local2)
                    }
                }

                If (LEqual (Local2, One))
                {
                    Return (Local0)
                }
                Else
                {
                    Return (Buffer (0x02)
                    {
                         0x79, 0x00                                     
                    })
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Name (TEMP, Zero)
        Scope (LPCB)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            OperationRegion (LPC, PCI_Config, Zero, 0x0100)
            Field (LPC, AnyAcc, NoLock, Preserve)
            {
                Offset (0x02), 
                CDID,   16, 
                Offset (0x08), 
                CRID,   8, 
                Offset (0x80), 
                IOD0,   8, 
                IOD1,   8, 
                Offset (0xA0), 
                    ,   9, 
                PRBL,   1, 
                Offset (0xDC), 
                    ,   2, 
                ESPI,   1
            }
        }

        Device (SBUS)
        {
            Name (_ADR, 0x001F0004)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }
    }

    Scope (\)
    {
        Name (TMOV, 0x0A)
        Method (TMVA, 1, Serialized)
        {
            Store (0x0A, TMOV)
            If (LGreater (Arg0, 0x0A))
            {
                Store (Arg0, TMOV)
            }
        }

        Method (IPCS, 7, Serialized)
        {
            Name (RPKG, Package (0x05)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            If (LGreater (Arg2, 0x10))
            {
                Store (One, Index (RPKG, Zero))
                Return (RPKG)
            }

            Store (Arg3, IWB0)
            Store (Arg4, IWB1)
            Store (Arg5, IWB2)
            Store (Arg6, IWB3)
            Store (Zero, Local0)
            Add (Local0, ShiftLeft (Arg0, Zero), Local0)
            Add (Local0, ShiftLeft (Arg1, 0x0C), Local0)
            Add (Local0, ShiftLeft (Arg2, 0x10), Local0)
            Store (Local0, CMDR)
            Store (Zero, Local0)
            Store (TMOV, Local1)
            While (One)
            {
                If (LOr (LNot (IBSY), LEqual (IERR, One)))
                {
                    Break
                }

                If (LGreater (Local0, Local1))
                {
                    Store (0x03, Index (RPKG, Zero))
                    Return (RPKG)
                }

                Sleep (One)
                Increment (Local0)
            }

            If (LEqual (IERR, One))
            {
                Store (0x02, Index (RPKG, Zero))
                Return (RPKG)
            }

            Store (IRB0, Index (RPKG, One))
            Store (IRB1, Index (RPKG, 0x02))
            Store (IRB2, Index (RPKG, 0x03))
            Store (IRB3, Index (RPKG, 0x04))
            Return (RPKG)
        }

        Method (ULTR, 1, Serialized)
        {
            Store (Arg0, LTRU)
        }

        Method (TCBS, 0, NotSerialized)
        {
            Return (TCOB)
        }

        OperationRegion (PMIO, SystemIO, PMBS, 0x80)
        Field (PMIO, ByteAcc, NoLock, Preserve)
        {
            Offset (0x01), 
            PBSS,   1, 
            Offset (0x40), 
                ,   17, 
            GPEC,   1, 
            Offset (0x6C), 
                ,   19, 
            CPWS,   1, 
            Offset (0x7C), 
                ,   18, 
            WAEN,   1, 
            CPWE,   1
        }

        OperationRegion (TCBA, SystemIO, TCBS (), 0x10)
        Field (TCBA, ByteAcc, NoLock, Preserve)
        {
            Offset (0x04), 
                ,   9, 
            CPSC,   1
        }

        OperationRegion (PWMR, SystemMemory, PWRM, 0x1E30)
        Field (PWMR, DWordAcc, NoLock, Preserve)
        {
            CMDR,   32, 
            IBSY,   1, 
            IERR,   1, 
                ,   1, 
                ,   1, 
            Offset (0x05), 
            Offset (0x06), 
            IERC,   8, 
            Offset (0x08), 
            Offset (0x80), 
            IWB0,   32, 
            IWB1,   32, 
            IWB2,   32, 
            IWB3,   32, 
            IRB0,   32, 
            IRB1,   32, 
            IRB2,   32, 
            IRB3,   32, 
            Offset (0x10D0), 
            RAA0,   1, 
            RAA1,   1, 
            RAA2,   1, 
            RAA3,   1, 
            RPB0,   1, 
            RPB1,   1, 
            RPB2,   1, 
            RPB3,   1, 
            RPC0,   1, 
            RPC1,   1, 
            RPC2,   1, 
            RPC3,   1, 
            RSAT,   1, 
            RGBE,   1, 
            RXHC,   1, 
            RXDC,   1, 
            RUFS,   1, 
            RPD0,   1, 
            RPD1,   1, 
            RPD2,   1, 
            RPD3,   1, 
            RPE0,   1, 
            RPE1,   1, 
            RPE2,   1, 
            RPE3,   1, 
            Offset (0x10D4), 
            APA0,   1, 
            APA1,   1, 
            APA2,   1, 
            APA3,   1, 
            APB0,   1, 
            APB1,   1, 
            APB2,   1, 
            APB3,   1, 
            APC0,   1, 
            APC1,   1, 
            APC2,   1, 
            APC3,   1, 
            ASAT,   1, 
            AGBE,   1, 
            AXHC,   1, 
            AXDC,   1, 
            AUFS,   1, 
            APD0,   1, 
            APD1,   1, 
            APD2,   1, 
            APD3,   1, 
            APE0,   1, 
            APE1,   1, 
            APE2,   1, 
            APE3,   1, 
            Offset (0x1800), 
            ACWA,   32, 
            DCWA,   32, 
            ACET,   32, 
            DCET,   32, 
            Offset (0x18E8), 
                ,   31, 
            CECE,   1, 
            Offset (0x1B0C), 
                ,   2, 
            ISAT,   1, 
                ,   18, 
            LTRU,   1, 
            Offset (0x1B1C), 
                ,   22, 
            XSQD,   1, 
            Offset (0x1BD0), 
                ,   31, 
            CPPM,   1, 
            Offset (0x1E20), 
            GBED,   1, 
            Offset (0x1E28), 
                ,   22, 
            SCFD,   1
        }

        Method (PSOC, 1, Serialized)
        {
            If (PSON)
            {
                If (Arg0)
                {
                    Store (One, CECE)
                }
                Else
                {
                    Store (Zero, CECE)
                }
            }
        }

        Method (PSOS, 0, NotSerialized)
        {
            If (CECE)
            {
                Return (One)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (CFAE, 1, NotSerialized)
        {
            If (DerefOf (Index (Arg0, Zero)))
            {
                ADBG ("CPPM Forced Alignment Disable")
                Store (Zero, CPPM)
                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
            Else
            {
                ADBG ("CPPM Forced Alignment Enable")
                Store (One, CPPM)
                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Method (IMPS, 0, NotSerialized)
        {
            If (LEqual (PCHS, 0x04))
            {
                Return (Zero)
            }
            Else
            {
                Return (One)
            }
        }
    }

    Scope (_SB.PC00)
    {
        Name (LTEN, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
    }

    If (LNotEqual (GBES, Zero))
    {
        Scope (_SB.PC00)
        {
            Device (GLAN)
            {
                Name (_ADR, 0x001F0006)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x6D, 0x04))
                }

                OperationRegion (LANR, PCI_Config, Zero, 0x0100)
                Field (LANR, ByteAcc, NoLock, Preserve)
                {
                    DVID,   16, 
                    Offset (0xCC), 
                    Offset (0xCD), 
                    PMEE,   1, 
                        ,   6, 
                    PMES,   1
                }

                Method (GPEH, 0, NotSerialized)
                {
                    If (LEqual (DVID, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (LEqual (PMES, One))
                    {
                        Notify (GLAN, 0x02)
                    }
                    
                    Return (Zero)
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (XHCI)
        {
            Name (_ADR, 0x00140000)  // _ADR: Address
            OperationRegion (XPRT, PCI_Config, Zero, 0x0100)
            Field (XPRT, AnyAcc, NoLock, Preserve)
            {
                DVID,   16, 
                Offset (0x10), 
                XADL,   32, 
                XADH,   32, 
                Offset (0x74), 
                Offset (0x75), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1, 
                Offset (0xA2), 
                    ,   2, 
                D3HE,   1
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                ADBG ("XHCI _DSM")
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                Return (0x03)
            }

            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x03)
            }

            Method (_S3W, 0, NotSerialized)  // _S3W: S3 Device Wake State
            {
                Return (0x03)
            }

            Method (_S4W, 0, NotSerialized)  // _S4W: S4 Device Wake State
            {
                Return (0x03)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x03)
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (CondRefOf (DUWS))
                {
                    Return (XPRW (0x6D, DUWS))
                }
                Else
                {
                    Return (XPRW (0x6D, 0x04))
                }
            }

            Method (GPEH, 0, NotSerialized)
            {
                If (LEqual (DVID, 0xFFFF))
                {
                    Return (Zero)
                }

                If (LEqual (PMES, One))
                {
                    Notify (XHCI, 0x02)
                }
                
                Return (Zero)
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (CondRefOf (\_SB.PC00.XHCI.RHUB.INIR))
                {
                    ^RHUB.INIR ()
                }
            }

            Method (USRA, 1, Serialized)
            {
                Return (Add (PU2C, Arg0))
            }

            Method (SSPA, 1, Serialized)
            {
                Return (Add (PU2C, Add (0x02, Arg0)))
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG ("XHCI D0")
                If (LEqual (DVID, 0xFFFF))
                {
                    Return (Zero)
                }

                If (CondRefOf (\_SB.PC00.XHCI.PS0X))
                {
                    PS0X ()
                }
                
                Return (Zero)
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG ("XHCI D3")
                If (LEqual (DVID, 0xFFFF))
                {
                    Return (Zero)
                }

                If (CondRefOf (\_SB.PC00.XHCI.PS3X))
                {
                    PS3X ()
                }
                
                Return (Zero)
            }

            Method (CUID, 1, Serialized)
            {
                If (LEqual (Arg0, ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71")))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Device (RHUB)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG ("XHCI RHUB PS0")
                    If (LEqual (DVID, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (\_SB.PC00.XHCI.RHUB.PS0X))
                    {
                        ADBG ("XHCI CSD0")
                        CSD0 (0x16)
                        PS0X ()
                    }
                    
                    Return (Zero)
                }

                Method (_PS2, 0, Serialized)  // _PS2: Power State 2
                {
                    ADBG ("XHCI RHUB PS2")
                    If (LEqual (DVID, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (\_SB.PC00.XHCI.RHUB.PS2X))
                    {
                        PS2X ()
                        ADBG ("XHCI CSD3")
                        CSD3 (0x16)
                    }
                    
                    Return (Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG ("XHCI RHUB PS3")
                    If (LEqual (DVID, 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (\_SB.PC00.XHCI.RHUB.PS3X))
                    {
                        PS3X ()
                        ADBG ("XHCI CSD3")
                        CSD3 (0x16)
                    }
                    
                    Return (Zero)
                }
            }
        }
    }

    If (CondRefOf (PU2C))
    {
        Scope (_SB.PC00.XHCI.RHUB)
        {
            If (LLessEqual (One, PU2C))
            {
                Device (HS01)
                {
                    Name (_ADR, One)  // _ADR: Address
                }
            }

            If (LLessEqual (0x02, PU2C))
            {
                Device (HS02)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }
            }

            If (LLessEqual (0x03, PU2C))
            {
                Device (HS03)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                }
            }

            If (LLessEqual (0x04, PU2C))
            {
                Device (HS04)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                }
            }

            If (LLessEqual (0x05, PU2C))
            {
                Device (HS05)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }
            }

            If (LLessEqual (0x06, PU2C))
            {
                Device (HS06)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }
            }

            If (LLessEqual (0x07, PU2C))
            {
                Device (HS07)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                }
            }

            If (LLessEqual (0x08, PU2C))
            {
                Device (HS08)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                }
            }

            If (LLessEqual (0x09, PU2C))
            {
                Device (HS09)
                {
                    Name (_ADR, 0x09)  // _ADR: Address
                }
            }

            If (LLessEqual (0x0A, PU2C))
            {
                Device (HS10)
                {
                    Name (_ADR, 0x0A)  // _ADR: Address
                }
            }

            If (LLessEqual (0x0B, PU2C))
            {
                Device (HS11)
                {
                    Name (_ADR, 0x0B)  // _ADR: Address
                }
            }

            If (LLessEqual (0x0C, PU2C))
            {
                Device (HS12)
                {
                    Name (_ADR, 0x0C)  // _ADR: Address
                }
            }

            If (LLessEqual (0x0D, PU2C))
            {
                Device (HS13)
                {
                    Name (_ADR, 0x0D)  // _ADR: Address
                }
            }

            If (LLessEqual (0x0E, PU2C))
            {
                Device (HS14)
                {
                    Name (_ADR, 0x0E)  // _ADR: Address
                }
            }

            Device (USR1)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (USRA (One))
                }
            }

            Device (USR2)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (USRA (0x02))
                }
            }
        }
    }

    If (CondRefOf (PU3C))
    {
        Scope (_SB.PC00.XHCI.RHUB)
        {
            If (LLessEqual (One, PU3C))
            {
                Device (SS01)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (SSPA (One))
                    }
                }
            }

            If (LLessEqual (0x02, PU3C))
            {
                Device (SS02)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (SSPA (0x02))
                    }
                }
            }

            If (LLessEqual (0x03, PU3C))
            {
                Device (SS03)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (SSPA (0x03))
                    }
                }
            }

            If (LLessEqual (0x04, PU3C))
            {
                Device (SS04)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (SSPA (0x04))
                    }
                }
            }

            If (LLessEqual (0x05, PU3C))
            {
                Device (SS05)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (SSPA (0x05))
                    }
                }
            }

            If (LLessEqual (0x06, PU3C))
            {
                Device (SS06)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (SSPA (0x06))
                    }
                }
            }

            If (LLessEqual (0x07, PU3C))
            {
                Device (SS07)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (SSPA (0x07))
                    }
                }
            }

            If (LLessEqual (0x08, PU3C))
            {
                Device (SS08)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (SSPA (0x08))
                    }
                }
            }

            If (LLessEqual (0x09, PU3C))
            {
                Device (SS09)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (SSPA (0x09))
                    }
                }
            }

            If (LLessEqual (0x0A, PU3C))
            {
                Device (SS10)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (SSPA (0x0A))
                    }
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (XDCI)
        {
            Name (_ADR, 0x00140001)  // _ADR: Address
            OperationRegion (OTGD, PCI_Config, Zero, 0x0100)
            Field (OTGD, DWordAcc, NoLock, Preserve)
            {
                DVID,   16, 
                Offset (0x10), 
                XDCB,   64
            }

            Field (OTGD, ByteAcc, NoLock, Preserve)
            {
                Offset (0x84), 
                D0I3,   2, 
                Offset (0x85), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Method (XDBA, 0, NotSerialized)
            {
                Return (And (XDCB, 0xFFFFFFFFFFFFFF00))
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                ADBG ("XDCI DSM")
                If (LEqual (Arg0, ToUUID ("732b85d5-b7a7-4a1b-9ba0-4bbd00ffd511")))
                {
                    If (LEqual (Arg1, One))
                    {
                        Method (SPPS, 2, Serialized)
                        {
                            OperationRegion (XDBW, SystemMemory, XDBA (), 0x00110000)
                            Field (XDBW, WordAcc, NoLock, Preserve)
                            {
                                Offset (0x10F810), 
                                Offset (0x10F811), 
                                U2CP,   2, 
                                U3CP,   2, 
                                Offset (0x10F818), 
                                PUPS,   2, 
                                    ,   1, 
                                PURC,   1, 
                                Offset (0x10F81A), 
                                Offset (0x10F81C), 
                                    ,   3, 
                                UXPE,   2, 
                                Offset (0x10F81E)
                            }

                            Store (Arg0, Local1)
                            Store (Arg1, Local2)
                            If (LEqual (Local1, Zero))
                            {
                                ADBG ("PMU D0")
                                Store (Zero, UXPE)
                                Store (Zero, Local0)
                                While (LLess (Local0, 0x0A))
                                {
                                    Stall (0x64)
                                    Increment (Local0)
                                }

                                Store (Zero, PUPS)
                                Store (Zero, Local0)
                                While (LLess (Local0, 0x07D0))
                                {
                                    Stall (0x64)
                                    If (LAnd (LEqual (U2CP, Zero), LEqual (U3CP, Zero)))
                                    {
                                        Break
                                    }

                                    Increment (Local0)
                                }

                                If (LNotEqual (U2CP, Zero))
                                {
                                    ADBG ("U2 not in D0")
                                }

                                If (LNotEqual (U3CP, Zero))
                                {
                                    ADBG ("U3 not in D0")
                                }

                                Return (Zero)
                            }

                            If (LEqual (Local1, 0x03))
                            {
                                ADBG ("PMU D3")
                                If (LNotEqual (U2CP, Zero))
                                {
                                    ADBG ("U2 not in D0")
                                }

                                If (LNotEqual (U3CP, Zero))
                                {
                                    ADBG ("U3 not in D0")
                                }

                                Store (0x03, PUPS)
                                Store (Zero, Local0)
                                While (LLess (Local0, 0x07D0))
                                {
                                    Stall (0x64)
                                    If (LAnd (LEqual (U2CP, 0x03), LEqual (U3CP, 0x03)))
                                    {
                                        Break
                                    }

                                    Increment (Local0)
                                }

                                If (LNotEqual (U2CP, 0x03))
                                {
                                    ADBG ("U2 not in D3")
                                }

                                If (LNotEqual (U3CP, 0x03))
                                {
                                    ADBG ("U3 not in D3")
                                }

                                Store (Local2, UXPE)
                                Return (Zero)
                            }

                            Return (Zero)
                        }

                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                ADBG ("XDCI Fn0")
                                Return (Buffer (0x02)
                                {
                                     0xB3, 0x03                                     
                                })
                            }
                            Case (One)
                            {
                                ADBG ("XDCI Fn1")
                                Return (One)
                            }
                            Case (0x04)
                            {
                                ADBG ("XDCI Fn4")
                                Store (DerefOf (Index (Arg3, Zero)), Local1)
                                ADBG (Local1)
                                SPPS (Local1, Zero)
                            }
                            Case (0x05)
                            {
                                ADBG ("XDCI Fn5")
                                If (CondRefOf (XDAT))
                                {
                                    If (LEqual (XDAT (), One))
                                    {
                                        ADBG ("USB Attach")
                                        Notify (XDCI, 0x80)
                                    }
                                    Else
                                    {
                                        ADBG ("USB Detach")
                                        Notify (XDCI, 0x81)
                                    }
                                }

                                Return (Zero)
                            }
                            Case (0x07)
                            {
                                ADBG ("XDCI Fn7")
                                OperationRegion (XD22, SystemMemory, XDBA (), 0x00110000)
                                Field (XD22, WordAcc, NoLock, Preserve)
                                {
                                    Offset (0x10F818), 
                                    P2PS,   2, 
                                    Offset (0x10F81A)
                                }

                                Store (P2PS, Local0)
                                Return (Local0)
                            }
                            Case (0x08)
                            {
                                ADBG ("XDCI Fn8")
                                Return (One)
                            }
                            Case (0x09)
                            {
                                ADBG ("XDCI Fn9")
                                OperationRegion (XGCT, SystemMemory, XDBA (), 0x00110000)
                                Field (XGCT, WordAcc, NoLock, Preserve)
                                {
                                    Offset (0xC110), 
                                    GCTL,   32
                                }

                                And (PPDS, 0xFFF80000, Local1)
                                ShiftRight (Local1, 0x13, Local1)
                                ADBG (Concatenate ("PCH XDCI: Func9 Return Val = ", ToHexString (Local1)))
                                Return (Local1)
                            }

                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Name (_DDN, "ICL PCH XDCI controller")  // _DDN: DOS Device Name
            Name (_STR, Unicode ("ICL PCH XDCI controller"))  // _STR: Description String
            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x03)
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (XPRW (0x6D, 0x04))
            }

            Method (GPEH, 0, NotSerialized)
            {
                If (LEqual (DVID, 0xFFFF))
                {
                    Return (Zero)
                }

                If (LEqual (PMES, One))
                {
                    Notify (XDCI, 0x02)
                }
                
                Return (Zero)
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (HDAS)
        {
            Name (_ADR, 0x001F0003)  // _ADR: Address
            OperationRegion (HDAR, PCI_Config, Zero, 0x0100)
            Field (HDAR, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x54), 
                Offset (0x55), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (XPRW (0x6D, 0x04))
            }

            Method (GPEH, 0, NotSerialized)
            {
                If (LEqual (VDID, 0xFFFFFFFF))
                {
                    Return (Zero)
                }

                If (LEqual (PMES, One))
                {
                    Notify (HDAS, 0x02)
                }
                
                Return (Zero)
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                S023 (Zero, One)
                If (CondRefOf (\_SB.PC00.HDAS.PS0X))
                {
                    PS0X ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                S023 (Zero, Zero)
                If (CondRefOf (\_SB.PC00.HDAS.PS3X))
                {
                    PS3X ()
                }
            }

            Name (NBUF, ResourceTemplate ()
            {
                QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadOnly,
                    0x0000000000000001, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y35, AddressRangeACPI, TypeStatic)
            })
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                CreateQWordField (NBUF, \_SB.PC00.HDAS._Y35._MIN, NBAS)  // _MIN: Minimum Base Address
                CreateQWordField (NBUF, \_SB.PC00.HDAS._Y35._MAX, NMAS)  // _MAX: Maximum Base Address
                CreateQWordField (NBUF, \_SB.PC00.HDAS._Y35._LEN, NLEN)  // _LEN: Length
                Store (NHLA, NBAS)
                Add (NHLA, Subtract (NHLL, One), NMAS)
                Store (NHLL, NLEN)
            }

            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "nhlt-version", 
                        "1.8-0"
                    }
                }
            })
        }

        Scope (HDAS)
        {
            Device (IDA)
            {
                Name (_ADR, 0x10000000)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If (LEqual (Arg0, ToUUID ("a69f886e-6ceb-4594-a41f-7b5dce24c553")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x4F                                           
                                })
                            }
                            Case (One)
                            {
                                Return (NBUF)
                            }
                            Case (0x02)
                            {
                                Return (ADFM)
                            }
                            Case (0x03)
                            {
                                If (CondRefOf (\_SB.PC00.HDAS.PPMS))
                                {
                                    Return (PPMS (Arg3))
                                }

                                Return (Zero)
                            }
                            Case (0x06)
                            {
                                Return (XTAL)
                            }
                            Default
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }

                        }
                    }

                    If (CondRefOf (HIWC))
                    {
                        If (HIWC (Arg0))
                        {
                            If (CondRefOf (HIDW))
                            {
                                Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }

        Scope (HDAS.IDA)
        {
            Device (SNDW)
            {
                Name (_ADR, 0x40000000)  // _ADR: Address
                Name (_CID, Package (0x02)  // _CID: Compatible ID
                {
                    "PRP00001", 
                    "PNP0A05"
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Method (QCFG, 3, NotSerialized)
                {
                    Store (Arg1, Index (DerefOf (Index (DerefOf (Index (Arg0, One)), Zero)), One))
                    Store (Arg2, Index (DerefOf (Index (DerefOf (Index (Arg0, One)), 0x04)), One))
                }

                Method (XCFG, 2, NotSerialized)
                {
                    If (LEqual (Arg1, 0x016E3600))
                    {
                        Store (0x016E3600, Local0)
                        Store (0x005B8D80, Local1)
                        Store (0x7D, Local2)
                        Store (0x02, Local3)
                    }
                    ElseIf (LEqual (Arg1, 0x0249F000))
                    {
                        Store (0x0249F000, Local0)
                        Store (0x00493E00, Local1)
                        Store (0x32, Local2)
                        Store (0x04, Local3)
                    }
                    ElseIf (LEqual (Arg1, 0x0124F800))
                    {
                        Store (0x0124F800, Local0)
                        Store (0x00493E00, Local1)
                        Store (0x32, Local2)
                        Store (0x04, Local3)
                    }
                    Else
                    {
                        Store (Zero, Local0)
                        Store (Zero, Local1)
                        Store (Zero, Local2)
                        Store (Zero, Local3)
                    }

                    Store (Local0, Index (DerefOf (Index (DerefOf (Index (Arg0, One)), One)), One))
                    Store (Local1, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (Arg0, One)), 0x07)), One)), Zero))
                    Store (Local2, Index (DerefOf (Index (DerefOf (Index (Arg0, One)), 0x09)), One))
                    Store (Local3, Index (DerefOf (Index (DerefOf (Index (Arg0, One)), 0x0A)), One))
                }

                Method (DCFG, 3, NotSerialized)
                {
                    Store (Arg1, Index (DerefOf (Index (DerefOf (Index (Arg0, One)), 0x02)), One))
                    Store (Arg2, Index (DerefOf (Index (DerefOf (Index (Arg0, One)), 0x03)), One))
                }

                Method (SDWU, 1, NotSerialized)
                {
                    Store (Arg0, Index (DerefOf (Index (DerefOf (Index (_DSD, One)), One)), One))
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    SDWU (SWMC)
                    QCFG (LNK0, SWQ0, ACS0)
                    QCFG (LNK1, SWQ1, ACS1)
                    QCFG (LNK2, SWQ2, ACS2)
                    QCFG (LNK3, SWQ3, ACS3)
                    XCFG (LNK0, XTAL)
                    XCFG (LNK1, XTAL)
                    XCFG (LNK2, XTAL)
                    XCFG (LNK3, XTAL)
                    DCFG (LNK0, DAI0, DOD0)
                    DCFG (LNK1, DAI1, DOD1)
                    DCFG (LNK2, DAI2, DOD2)
                    DCFG (LNK3, DAI3, DOD3)
                }

                Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x02)
                    {
                        Package (0x02)
                        {
                            "mipi-sdw-sw-interface-revision", 
                            0x00010000
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-master-count", 
                            0x04
                        }
                    }, 

                    ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                    Package (0x04)
                    {
                        Package (0x02)
                        {
                            "mipi-sdw-link-0-subproperties", 
                            "LNK0"
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-link-1-subproperties", 
                            "LNK1"
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-link-2-subproperties", 
                            "LNK2"
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-link-3-subproperties", 
                            "LNK3"
                        }
                    }
                })
                Name (LNK0, Package (0x02)
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x0D)
                    {
                        Package (0x02)
                        {
                            "intel-quirk-mask", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-ip-clock", 
                            0x0249F000
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-doais", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-dods", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-autonomous-clock-stop", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode0-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode1-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-frequencies-supported", 
                            Package (0x01)
                            {
                                0x00493E00
                            }
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-rate", 
                            0xBB80
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-row-size", 
                            0x32
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-col-size", 
                            0x04
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-dynamic-frame-shape", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-command-error-threshold", 
                            0x10
                        }
                    }
                })
                Name (LNK1, Package (0x02)
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x0D)
                    {
                        Package (0x02)
                        {
                            "intel-quirk-mask", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-ip-clock", 
                            0x0249F000
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-doais", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-dods", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-autonomous-clock-stop", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode0-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode1-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-frequencies-supported", 
                            Package (0x01)
                            {
                                0x00493E00
                            }
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-rate", 
                            0xBB80
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-row-size", 
                            0x32
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-col-size", 
                            0x04
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-dynamic-frame-shape", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-command-error-threshold", 
                            0x10
                        }
                    }
                })
                Name (LNK2, Package (0x02)
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x0D)
                    {
                        Package (0x02)
                        {
                            "intel-quirk-mask", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-ip-clock", 
                            0x0249F000
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-doais", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-dods", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-autonomous-clock-stop", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode0-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode1-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-frequencies-supported", 
                            Package (0x01)
                            {
                                0x00493E00
                            }
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-rate", 
                            0xBB80
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-row-size", 
                            0x32
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-col-size", 
                            0x04
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-dynamic-frame-shape", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-command-error-threshold", 
                            0x10
                        }
                    }
                })
                Name (LNK3, Package (0x02)
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x0D)
                    {
                        Package (0x02)
                        {
                            "intel-quirk-mask", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-ip-clock", 
                            0x0249F000
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-doais", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-dods", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "intel-autonomous-clock-stop", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode0-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode1-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-frequencies-supported", 
                            Package (0x01)
                            {
                                0x00493E00
                            }
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-rate", 
                            0xBB80
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-row-size", 
                            0x32
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-col-size", 
                            0x04
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-dynamic-frame-shape", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-command-error-threshold", 
                            0x10
                        }
                    }
                })
            }
        }

        If (LNotEqual (UAOE, Zero))
        {
            Scope (HDAS.IDA)
            {
                Device (UAOL)
                {
                    Name (_ADR, 0x50000000)  // _ADR: Address
                    Name (_CID, Package (0x02)  // _CID: Compatible ID
                    {
                        "PRP00001", 
                        "PNP0A05"
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0B)
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        ADBG ("UAOL _DSM")
                        If (LEqual (Arg0, ToUUID ("2e60aefc-1ba8-467a-b8cc-5727b98cecb7")))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                           
                                    })
                                }
                                Case (One)
                                {
                                    Return (CFAE (Arg3))
                                }

                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }

                    Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "uaol-ctrl-count", 
                                0x02
                            }
                        }, 

                        ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                        Package (0x02)
                        {
                            Package (0x02)
                            {
                                "uaol-descriptor-0", 
                                "UAO0"
                            }, 

                            Package (0x02)
                            {
                                "uaol-descriptor-1", 
                                "UAO1"
                            }
                        }
                    })
                    Name (UAO0, Package (0x02)
                    {
                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x03)
                        {
                            Package (0x02)
                            {
                                "uaol-instance-number", 
                                Zero
                            }, 

                            Package (0x02)
                            {
                                "bdf-routing-enabled", 
                                Zero
                            }, 

                            Package (0x02)
                            {
                                "peer-integrated-controller-identifier", 
                                0x98ED
                            }
                        }
                    })
                    Name (UAO1, Package (0x02)
                    {
                        ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                        Package (0x03)
                        {
                            Package (0x02)
                            {
                                "uaol-instance-number", 
                                One
                            }, 

                            Package (0x02)
                            {
                                "bdf-routing-enabled", 
                                Zero
                            }, 

                            Package (0x02)
                            {
                                "peer-integrated-controller-identifier", 
                                0xABCD
                            }
                        }
                    })
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Scope (\_SB.PC00)
        {
            Method (SOD3, 3, Serialized)
            {
                OperationRegion (ICB1, SystemMemory, Add (GPCB (), Arg0), 0x88)
                If (Arg1)
                {
                    Field (ICB1, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x84), 
                        PMEC,   8
                    }

                    Store (0x03, PMEC)
                    Or (PMEC, Zero, PMEC)
                }

                If (LAnd (Arg1, Arg2))
                {
                    Field (ICB1, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x10), 
                        BAR0,   64
                    }

                    Store (Zero, BAR0)
                }
            }
        }

        Method (I2CH, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, Arg0, 0x20)
            Field (ICB1, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                BAR0,   64, 
                BAR1,   64
            }

            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y36)
            })
            Name (BUF1, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y37)
            })
            CreateDWordField (BUF0, \_SB.PC00.I2CH._Y36._BAS, ADR0)  // _BAS: Base Address
            CreateDWordField (BUF1, \_SB.PC00.I2CH._Y37._BAS, ADR1)  // _BAS: Base Address
            Store (And (BAR0, 0xFFFFFFFFFFFFF000), ADR0)
            Store (And (BAR1, 0xFFFFFFFFFFFFF000), ADR1)
            ConcatenateResTemplate (BUF0, BUF1, Local0)
            Return (Local0)
        }

        Device (I2C0)
        {
            If (LEqual (IM00, 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC00))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If (LEqual (IM00, One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC00, Zero, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (LOr (LEqual (IM00, One), LEqual (IM00, Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00150000)
                }
            }
        }

        Device (I2C1)
        {
            If (LEqual (IM01, 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC01))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If (LEqual (IM01, One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC01, Zero, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (LOr (LEqual (IM01, One), LEqual (IM01, Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00150001)
                }
            }
        }

        Device (I2C2)
        {
            If (LEqual (IM02, 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC02))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If (LEqual (IM02, One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC02, Zero, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (LOr (LEqual (IM02, One), LEqual (IM02, Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00150002)
                }
            }
        }

        Device (I2C3)
        {
            If (LEqual (IM03, 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC03))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If (LEqual (IM03, One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC03, Zero, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (LOr (LEqual (IM03, One), LEqual (IM03, Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00150003)
                }
            }
        }

        Device (I2C4)
        {
            If (LEqual (IM04, 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC04))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If (LEqual (IM04, One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC04, Zero, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (LOr (LEqual (IM04, One), LEqual (IM04, Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00190000)
                }
            }
        }

        Device (I2C5)
        {
            If (LEqual (IM05, 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC05))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If (LEqual (IM05, One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC05, Zero, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (LOr (LEqual (IM05, One), LEqual (IM05, Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00190001)
                }
            }
        }

        Device (I2C6)
        {
            If (LEqual (IM06, 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC06))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If (LEqual (IM06, One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC06, Zero, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (LOr (LEqual (IM06, One), LEqual (IM06, Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00100000)
                }
            }
        }

        Device (I2C7)
        {
            If (LEqual (IM07, 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (I2CH (IC07))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If (LEqual (IM07, One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (IC07, Zero, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (LOr (LEqual (IM07, One), LEqual (IM07, Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00100001)
                }
            }
        }

        Method (SPIH, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, Arg0, 0x20)
            Field (ICB1, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                BAR0,   64, 
                BAR1,   64
            }

            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y38)
            })
            Name (BUF1, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y39)
            })
            CreateDWordField (BUF0, \_SB.PC00.SPIH._Y38._BAS, ADR0)  // _BAS: Base Address
            CreateDWordField (BUF1, \_SB.PC00.SPIH._Y39._BAS, ADR1)  // _BAS: Base Address
            Store (And (BAR0, 0xFFFFFFFFFFFFF000), ADR0)
            Store (And (BAR1, 0xFFFFFFFFFFFFF000), ADR1)
            ConcatenateResTemplate (BUF0, BUF1, Local0)
            Return (Local0)
        }

        Device (SPI0)
        {
            If (LEqual (SM00, 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (SPIH (SC00))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If (LEqual (SM00, One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (SC00, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (LOr (LEqual (SM00, One), LEqual (SM00, Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x001E0002)
                }
            }
        }

        Device (SPI1)
        {
            If (LEqual (SM01, 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (SPIH (SC01))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If (LEqual (SM01, One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (SC01, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (LOr (LEqual (SM01, One), LEqual (SM01, Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x001E0003)
                }
            }
        }

        Device (SPI2)
        {
            If (LEqual (SM02, 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (SPIH (SC02))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If (LEqual (SM02, One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (SC02, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (LOr (LEqual (SM02, One), LEqual (SM02, Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00120006)
                }
            }
        }

        Device (SPI3)
        {
            If (LEqual (SM03, 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (SPIH (SC03))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If (LEqual (SM03, One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (SC03, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (LOr (LEqual (SM03, One), LEqual (SM03, Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00130000)
                }
            }
        }

        Device (SPI4)
        {
            If (LEqual (SM04, 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (SPIH (SC04))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If (LEqual (SM04, One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (SC04, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (LOr (LEqual (SM04, One), LEqual (SM04, Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00130001)
                }
            }
        }

        Device (SPI5)
        {
            If (LEqual (SM05, 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (SPIH (SC05))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If (LEqual (SM05, One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (SC05, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (LOr (LEqual (SM05, One), LEqual (SM05, Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00130002)
                }
            }
        }

        Device (SPI6)
        {
            If (LEqual (SM06, 0x02))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (SPIH (SC06))
                }

                Name (_STA, 0x08)  // _STA: Status
            }

            If (LEqual (SM06, One))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    SOD3 (SC06, One, One)
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }
            }

            If (LOr (LEqual (SM06, One), LEqual (SM06, Zero)))
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return (0x00130003)
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Method (UDSM, 1, Serialized)
        {
            If (LEqual (Arg0, ToUUID ("f7af8347-a966-49fe-9022-7a9deeebdb27")))
            {
                Return (One)
            }

            Return (Zero)
        }

        Method (UDMA, 2, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Return (Buffer (0x08)
                    {
                         0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                    })
                }
                Case (One)
                {
                    Return (ToInteger (Arg1))
                }

            }

            Return (Buffer (0x08)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
            })
        }
    }

    Scope (_SB)
    {
        Device (URSC)
        {
            Name (_HID, EisaId ("PNP0C02"))  // _HID: Hardware ID
            Name (_STA, 0x03)  // _STA: Status
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (UARB, 2, Serialized)
            {
                If (LOr (LEqual (Arg0, 0x02), LEqual (Arg0, 0x03)))
                {
                    OperationRegion (UACF, SystemMemory, Arg1, 0x20)
                    Field (UACF, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x10), 
                        BAR0,   64, 
                        BAR1,   64
                    }

                    Name (BUF1, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000FF8,         // Address Length
                            _Y3A)
                    })
                    Name (BUF2, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00001000,         // Address Length
                            _Y3B)
                    })
                    CreateDWordField (BUF1, \_SB.URSC.UARB._Y3A._BAS, ADR1)  // _BAS: Base Address
                    CreateDWordField (BUF2, \_SB.URSC.UARB._Y3B._BAS, ADR2)  // _BAS: Base Address
                    Store (And (BAR0, 0xFFFFFFFFFFFFF000), Local1)
                    Store (Add (Local1, 0x08), ADR1)
                    Store (And (BAR1, 0xFFFFFFFFFFFFF000), ADR2)
                    ConcatenateResTemplate (BUF1, BUF2, Local0)
                    Return (Local0)
                }

                Return (Buffer (0x02)
                {
                     0x79, 0x00                                     
                })
            }
        }

        Method (UARH, 2, Serialized)
        {
            OperationRegion (UACF, SystemMemory, Arg0, 0x18)
            Field (UACF, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                BAR0,   64
            }

            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000008,         // Address Length
                    _Y3C)
            })
            Name (IBUF, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y3D)
                {
                    0x00000014,
                }
            })
            CreateDWordField (BUF0, \_SB.UARH._Y3C._BAS, ADR0)  // _BAS: Base Address
            CreateDWordField (IBUF, \_SB.UARH._Y3D._INT, IRQN)  // _INT: Interrupts
            Store (And (BAR0, 0xFFFFFFFFFFFFF000), Local0)
            Store (Local0, ADR0)
            Store (Arg1, IRQN)
            ConcatenateResTemplate (BUF0, IBUF, Local1)
            Return (Local1)
        }

        Method (UAPG, 3, Serialized)
        {
            If (LNotEqual (Arg1, 0x02))
            {
                Return (Arg1)
            }

            OperationRegion (UACF, SystemMemory, Arg2, 0x18)
            Field (UACF, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                BAR0,   64
            }

            OperationRegion (UAB0, SystemMemory, And (BAR0, 0xFFFFFFFFFFFFF000), 0x10)
            Field (UAB0, ByteAcc, Lock, Preserve)
            {
                DLL,    8, 
                DLH,    8, 
                FCR,    8, 
                LCR,    8
            }

            Store (LCR, Local0)
            If (LAnd (Local0, 0x7F))
            {
                Return (Zero)
            }

            Return (One)
        }

        Method (UHID, 1, Serialized)
        {
            If (LEqual (Arg0, 0x03))
            {
                Return (0x0105D041)
            }

            Return (0x020CD041)
        }

        Method (UPS3, 2, Serialized)
        {
            If (LEqual (Arg0, One))
            {
                OperationRegion (UACF, SystemMemory, Arg1, 0x88)
                Field (UACF, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    BAR0,   64
                }

                Field (UACF, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    PMEC,   8
                }

                OperationRegion (UAB0, SystemMemory, And (BAR0, 0xFFFFFFFFFFFFF000), 0x82)
                Field (UAB0, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x81), 
                    PPRR,   8
                }

                Store (Zero, PPRR)
                Store (0x03, PMEC)
                Or (PMEC, Zero, PMEC)
            }
        }

        Method (UPS0, 2, Serialized)
        {
            If (LEqual (Arg0, One))
            {
                OperationRegion (UACF, SystemMemory, Arg1, 0x88)
                Field (UACF, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    BAR0,   64
                }

                Field (UACF, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    PMEC,   8
                }

                Store (Zero, PMEC)
                Or (PMEC, Zero, PMEC)
                OperationRegion (UAB0, SystemMemory, And (BAR0, 0xFFFFFFFFFFFFF000), 0x82)
                Field (UAB0, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x81), 
                    PPRR,   8
                }

                Store (0x07, PPRR)
            }
        }

        Method (UPSC, 1, Serialized)
        {
            OperationRegion (UACF, SystemMemory, Add (Arg0, 0x84), 0x04)
            Field (UACF, ByteAcc, NoLock, Preserve)
            {
                PMEC,   8
            }

            Return (And (PMEC, 0x03))
        }
    }

    Scope (_SB.URSC)
    {
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            Store (UARB (UM00, UC00), Local0)
            ConcatenateResTemplate (Local0, UARB (UM01, UC01), Local1)
            Store (Local1, Local0)
            ConcatenateResTemplate (Local0, UARB (UM02, UC02), Local1)
            Store (Local1, Local0)
            ConcatenateResTemplate (Local0, UARB (UM03, UC03), Local1)
            Store (Local1, Local0)
            ConcatenateResTemplate (Local0, UARB (UM04, UC04), Local1)
            Store (Local1, Local0)
            ConcatenateResTemplate (Local0, UARB (UM05, UC05), Local1)
            Store (Local1, Local0)
            ConcatenateResTemplate (Local0, UARB (UM06, UC06), Local1)
            Store (Local1, Local0)
            Return (Local0)
        }
    }

    Scope (_SB.PC00)
    {
        Device (UA00)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (UDSM (Arg0))
                {
                    Return (UDMA (Arg2, UD00))
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (0x001E0000)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SOD3 (UC00, One, One)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }
        }
    }

    Scope (_SB)
    {
        If (LOr (LEqual (UM00, 0x02), LEqual (UM00, 0x03)))
        {
            Device (UAH0)
            {
                Name (_DDN, "SerialIoUart0")  // _DDN: DOS Device Name
                Name (_UID, "SerialIoUart0")  // _UID: Unique ID
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return (UHID (UM00))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (UARH (UC00, UI00))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (LEqual (UM00, 0x03))
                    {
                        If (LEqual (UP00, 0x02))
                        {
                            Store (UAPG (UM00, UP00, UC00), UP00)
                        }

                        Return (0x0F)
                    }

                    Return (0x08)
                }

                If (LEqual (UM00, 0x03))
                {
                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        Return (UPSC (UC00))
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        UPS3 (UP00, UC00)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        UPS0 (UP00, UC00)
                    }
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (UA01)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (UDSM (Arg0))
                {
                    Return (UDMA (Arg2, UD01))
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (0x001E0001)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SOD3 (UC01, One, One)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }
        }
    }

    Scope (_SB)
    {
        If (LOr (LEqual (UM01, 0x02), LEqual (UM01, 0x03)))
        {
            Device (UAH1)
            {
                Name (_DDN, "SerialIoUart1")  // _DDN: DOS Device Name
                Name (_UID, "SerialIoUart1")  // _UID: Unique ID
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return (UHID (UM01))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (UARH (UC01, UI01))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (LEqual (UM01, 0x03))
                    {
                        If (LEqual (UP01, 0x02))
                        {
                            Store (UAPG (UM01, UP01, UC01), UP01)
                        }

                        Return (0x0F)
                    }

                    Return (0x08)
                }

                If (LEqual (UM01, 0x03))
                {
                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        Return (UPSC (UC01))
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        UPS3 (UP01, UC01)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        UPS0 (UP01, UC01)
                    }
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (UA02)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (UDSM (Arg0))
                {
                    Return (UDMA (Arg2, UD02))
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (0x00190002)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SOD3 (UC02, One, One)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }
        }
    }

    Scope (_SB)
    {
        If (LOr (LEqual (UM02, 0x02), LEqual (UM02, 0x03)))
        {
            Device (UAH2)
            {
                Name (_DDN, "SerialIoUart2")  // _DDN: DOS Device Name
                Name (_UID, "SerialIoUart2")  // _UID: Unique ID
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return (UHID (UM02))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (UARH (UC02, UI02))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (LEqual (UM02, 0x03))
                    {
                        If (LEqual (UP02, 0x02))
                        {
                            Store (UAPG (UM02, UP02, UC02), UP02)
                        }

                        Return (0x0F)
                    }

                    Return (0x08)
                }

                If (LEqual (UM02, 0x03))
                {
                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        Return (UPSC (UC02))
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        UPS3 (UP02, UC02)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        UPS0 (UP02, UC02)
                    }
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (UA03)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (UDSM (Arg0))
                {
                    Return (UDMA (Arg2, UD03))
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (0x00110000)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SOD3 (UC03, One, One)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }
        }
    }

    Scope (_SB)
    {
        If (LOr (LEqual (UM03, 0x02), LEqual (UM03, 0x03)))
        {
            Device (UAH3)
            {
                Name (_DDN, "SerialIoUart3")  // _DDN: DOS Device Name
                Name (_UID, "SerialIoUart3")  // _UID: Unique ID
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return (UHID (UM03))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (UARH (UC03, UI03))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (LEqual (UM03, 0x03))
                    {
                        If (LEqual (UP03, 0x02))
                        {
                            Store (UAPG (UM03, UP03, UC03), UP03)
                        }

                        Return (0x0F)
                    }

                    Return (0x08)
                }

                If (LEqual (UM03, 0x03))
                {
                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        Return (UPSC (UC03))
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        UPS3 (UP03, UC03)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        UPS0 (UP03, UC03)
                    }
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (UA04)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (UDSM (Arg0))
                {
                    Return (UDMA (Arg2, UD04))
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (0x00110001)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SOD3 (UC04, One, One)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }
        }
    }

    Scope (_SB)
    {
        If (LOr (LEqual (UM04, 0x02), LEqual (UM04, 0x03)))
        {
            Device (UAH4)
            {
                Name (_DDN, "SerialIoUart4")  // _DDN: DOS Device Name
                Name (_UID, "SerialIoUart4")  // _UID: Unique ID
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return (UHID (UM04))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (UARH (UC04, UI04))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (LEqual (UM04, 0x03))
                    {
                        If (LEqual (UP04, 0x02))
                        {
                            Store (UAPG (UM04, UP04, UC04), UP04)
                        }

                        Return (0x0F)
                    }

                    Return (0x08)
                }

                If (LEqual (UM04, 0x03))
                {
                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        Return (UPSC (UC04))
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        UPS3 (UP04, UC04)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        UPS0 (UP04, UC04)
                    }
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (UA05)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (UDSM (Arg0))
                {
                    Return (UDMA (Arg2, UD05))
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (0x00110002)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SOD3 (UC05, One, One)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }
        }
    }

    Scope (_SB)
    {
        If (LOr (LEqual (UM05, 0x02), LEqual (UM05, 0x03)))
        {
            Device (UAH5)
            {
                Name (_DDN, "SerialIoUart5")  // _DDN: DOS Device Name
                Name (_UID, "SerialIoUart5")  // _UID: Unique ID
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return (UHID (UM05))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (UARH (UC05, UI05))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (LEqual (UM05, 0x03))
                    {
                        If (LEqual (UP05, 0x02))
                        {
                            Store (UAPG (UM05, UP05, UC05), UP05)
                        }

                        Return (0x0F)
                    }

                    Return (0x08)
                }

                If (LEqual (UM05, 0x03))
                {
                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        Return (UPSC (UC05))
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        UPS3 (UP05, UC05)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        UPS0 (UP05, UC05)
                    }
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (UA06)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (UDSM (Arg0))
                {
                    Return (UDMA (Arg2, UD06))
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (0x00110003)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SOD3 (UC06, One, One)
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }
        }
    }

    Scope (_SB)
    {
        If (LOr (LEqual (UM06, 0x02), LEqual (UM06, 0x03)))
        {
            Device (UAH6)
            {
                Name (_DDN, "SerialIoUart6")  // _DDN: DOS Device Name
                Name (_UID, "SerialIoUart6")  // _UID: Unique ID
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Return (UHID (UM06))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (UARH (UC06, UI06))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (LEqual (UM06, 0x03))
                    {
                        If (LEqual (UP06, 0x02))
                        {
                            Store (UAPG (UM06, UP06, UC06), UP06)
                        }

                        Return (0x0F)
                    }

                    Return (0x08)
                }

                If (LEqual (UM06, 0x03))
                {
                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        Return (UPSC (UC06))
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        UPS3 (UP06, UC06)
                    }

                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        UPS0 (UP06, UC06)
                    }
                }
            }
        }
    }

    Scope (_SB)
    {
        Device (GPI0)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                If (LEqual (GPHD, One))
                {
                    Return ("PNP0C02")
                }

                If (LEqual (PCHG, 0x09))
                {
                    Return ("INTC1085")
                }
                Else
                {
                    Return ("INTC1056")
                }
            }

            Name (LINK, "\\_SB.GPI0")
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBFS, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y3E)
                    {
                        0x0000000E,
                    }
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y3F)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y40)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y41)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y42)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y43)
                })
                CreateDWordField (RBFS, \_SB.GPI0._CRS._Y3E._INT, INTH)  // _INT: Interrupts
                Store (SGIR, INTH)
                CreateDWordField (RBFS, \_SB.GPI0._CRS._Y3F._BAS, CMH0)  // _BAS: Base Address
                Store (Add (SBRG, 0x006E0000), CMH0)
                CreateDWordField (RBFS, \_SB.GPI0._CRS._Y40._BAS, CMH1)  // _BAS: Base Address
                Store (Add (SBRG, 0x006D0000), CMH1)
                CreateDWordField (RBFS, \_SB.GPI0._CRS._Y41._BAS, CMH3)  // _BAS: Base Address
                Store (Add (SBRG, 0x006B0000), CMH3)
                CreateDWordField (RBFS, \_SB.GPI0._CRS._Y42._BAS, CMH4)  // _BAS: Base Address
                Store (Add (SBRG, 0x006A0000), CMH4)
                CreateDWordField (RBFS, \_SB.GPI0._CRS._Y43._BAS, CMH5)  // _BAS: Base Address
                Store (Add (SBRG, 0x00690000), CMH5)
                Return (RBFS)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (LEqual (GPHD, One))
                {
                    Return (0x08)
                }

                Return (0x0F)
            }
        }
    }

    Scope (_SB)
    {
        Name (GPCS, Package (0x12)
        {
            Package (0x09)
            {
                0x006E0000, 
                0x19, 
                0x0700, 
                0x0150, 
                0xA0, 
                0x0240, 
                0x0110, 
                0x0114, 
                Zero
            }, 

            Package (0x09)
            {
                0x006E0000, 
                0x17, 
                0x0890, 
                0x0154, 
                0xB0, 
                0x0244, 
                0x0118, 
                0x011C, 
                0x20
            }, 

            Package (0x09)
            {
                0x006E0000, 
                0x0C, 
                0x0A00, 
                0x0158, 
                0xBC, 
                0x0248, 
                0x0120, 
                0x0124, 
                0xA0
            }, 

            Package (0x09)
            {
                0x006E0000, 
                0x1B, 
                0x0AC0, 
                0x015C, 
                0xC4, 
                0x024C, 
                0x0128, 
                0x012C, 
                0x60
            }, 

            Package (0x09)
            {
                0x006E0000, 
                0x08, 
                0x0C70, 
                0x0160, 
                0xD4, 
                0x0250, 
                0x0130, 
                0x0134, 
                0x80
            }, 

            Package (0x09)
            {
                0x006D0000, 
                0x18, 
                0x0700, 
                0x0150, 
                0xA0, 
                0x0240, 
                0x0110, 
                0x0114, 
                0xA0
            }, 

            Package (0x09)
            {
                0x006D0000, 
                0x08, 
                0x0880, 
                0x0154, 
                0xAC, 
                0x0244, 
                0x0118, 
                0x011C, 
                0xC0
            }, 

            Package (0x09)
            {
                0x006D0000, 
                0x18, 
                0x0900, 
                0x0158, 
                0xB0, 
                0x0248, 
                0x0120, 
                0x0124, 
                0xE0
            }, 

            Package (0x09)
            {
                0x006C0000, 
                0x11, 
                0x0700, 
                0x0150, 
                0xA0, 
                0x0240, 
                0x0110, 
                0x0114, 
                Zero
            }, 

            Package (0x09)
            {
                0x006B0000, 
                0x09, 
                0x0700, 
                0x0150, 
                0xA0, 
                0x0240, 
                0x0110, 
                0x0114, 
                Zero
            }, 

            Package (0x09)
            {
                0x006B0000, 
                0x10, 
                0x0790, 
                0x0154, 
                0xA8, 
                0x0244, 
                0x0118, 
                0x011C, 
                0x0100
            }, 

            Package (0x09)
            {
                0x006B0000, 
                0x18, 
                0x0890, 
                0x0158, 
                0xB0, 
                0x0248, 
                0x0120, 
                0x0124, 
                0x0120
            }, 

            Package (0x09)
            {
                0x006B0000, 
                0x54, 
                0x0A10, 
                0x015C, 
                0xBC, 
                0x024C, 
                0x0128, 
                0x012C, 
                0x73
            }, 

            Package (0x09)
            {
                0x006A0000, 
                0x08, 
                0x0700, 
                0x0150, 
                0xA0, 
                0x0240, 
                0x0110, 
                0x0114, 
                0x0140
            }, 

            Package (0x09)
            {
                0x006A0000, 
                0x17, 
                0x0780, 
                0x0154, 
                0xA4, 
                0x0244, 
                0x0118, 
                0x011C, 
                0x0160
            }, 

            Package (0x09)
            {
                0x006A0000, 
                0x0F, 
                0x08F0, 
                0x0158, 
                0xB0, 
                0x0248, 
                0x0120, 
                0x0124, 
                0x0180
            }, 

            Package (0x09)
            {
                0x006A0000, 
                0x18, 
                0x09E0, 
                0x015C, 
                0xB8, 
                0x024C, 
                0x0128, 
                0x012C, 
                0x01A0
            }, 

            Package (0x09)
            {
                0x00690000, 
                0x19, 
                0x0700, 
                0x0150, 
                0xA0, 
                0x0240, 
                0x0110, 
                0x0114, 
                0x01C0
            }
        })
        Name (RXEV, Package (0x12)
        {
            Buffer (0x19){}, 
            Buffer (0x17){}, 
            Buffer (0x0C){}, 
            Buffer (0x1B){}, 
            Buffer (0x08){}, 
            Buffer (0x18){}, 
            Buffer (0x08){}, 
            Buffer (0x18){}, 
            Buffer (0x11){}, 
            Buffer (0x09){}, 
            Buffer (0x10){}, 
            Buffer (0x18){}, 
            Buffer (0x54){}, 
            Buffer (0x08){}, 
            Buffer (0x17){}, 
            Buffer (0x0F){}, 
            Buffer (0x18){}, 
            Buffer (0x19){}
        })
    }

    Scope (_SB)
    {
        Method (GINF, 2, NotSerialized)
        {
            Return (DerefOf (Index (DerefOf (Index (GPCS, Arg0)), Arg1)))
        }

        Method (GMXG, 0, NotSerialized)
        {
            Return (0x13)
        }
    }

    Scope (_SB)
    {
        Method (GADR, 2, NotSerialized)
        {
            Store (Add (GINF (Arg0, Zero), SBRG), Local0)
            Store (GINF (Arg0, Arg1), Local1)
            Return (Add (Local0, Local1))
        }

        Method (GNUM, 1, NotSerialized)
        {
            Store (GNMB (Arg0), Local0)
            Store (GGRP (Arg0), Local1)
            Return (Add (GINF (Local1, 0x08), Local0))
        }

        Method (INUM, 1, NotSerialized)
        {
            Return (And (GPC1 (Arg0), 0x7F))
        }

        Method (GGRP, 1, Serialized)
        {
            ShiftRight (And (Arg0, 0x00FF0000), 0x10, Local0)
            Return (Local0)
        }

        Method (GNMB, 1, Serialized)
        {
            Return (And (Arg0, 0xFFFF))
        }

        Method (GGPE, 1, NotSerialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (ShiftRight (Local1, 0x05), Local2)
            If (LNot (Or (Or (LAnd (LEqual (GEI0, Local0), LEqual (GED0, Local2)), LAnd (LEqual (GEI1, Local0), LEqual (GED1, Local2))), LAnd (LEqual (GEI2, Local0), LEqual (GED2, Local2)))))
            {
                Return (0x6F)
            }
            Else
            {
                If (LAnd (LEqual (GEI0, Local0), LEqual (GED0, Local2)))
                {
                    Store (Zero, Local3)
                }
                ElseIf (LAnd (LEqual (GEI1, Local0), LEqual (GED1, Local2)))
                {
                    Store (One, Local3)
                }
                ElseIf (LAnd (LEqual (GEI2, Local0), LEqual (GED2, Local2)))
                {
                    Store (0x02, Local3)
                }
                Else
                {
                    BreakPoint
                    Return (Zero)
                }

                Return (Add (Multiply (Subtract (Local3, Local2), 0x20), Local1))
            }
        }

        Method (GPC0, 1, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (GADR (Local0, 0x02), Multiply (Local1, 0x10)), Local2)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (TEMP)
        }

        Method (SPC0, 2, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (GADR (Local0, 0x02), Multiply (Local1, 0x10)), Local2)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Store (Arg1, TEMP)
        }

        Method (GPC1, 1, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (Add (GADR (Local0, 0x02), Multiply (Local1, 0x10)), 0x04), Local2)
            OperationRegion (PDW1, SystemMemory, Local2, 0x04)
            Field (PDW1, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (TEMP)
        }

        Method (SPC1, 2, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (Add (GADR (Local0, 0x02), Multiply (Local1, 0x10)), 0x04), Local2)
            OperationRegion (PDW1, SystemMemory, Local2, 0x04)
            Field (PDW1, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Store (Arg1, TEMP)
        }

        Method (SRXO, 2, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (GADR (Local0, 0x02), Multiply (Local1, 0x10)), Local2)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   28, 
                TEMP,   1, 
                Offset (0x04)
            }

            Store (Arg1, TEMP)
        }

        Method (GGIV, 1, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (GADR (Local0, 0x02), Multiply (Local1, 0x10)), Local2)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   1, 
                TEMP,   1, 
                Offset (0x04)
            }

            Return (TEMP)
        }

        Method (GGOV, 1, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (GADR (Local0, 0x02), Multiply (Local1, 0x10)), Local2)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   1, 
                Offset (0x04)
            }

            Return (TEMP)
        }

        Method (SGOV, 2, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (GADR (Local0, 0x02), Multiply (Local1, 0x10)), Local2)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   1, 
                Offset (0x04)
            }

            Store (Arg1, TEMP)
        }

        Method (GGII, 1, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (GADR (Local0, 0x02), Multiply (Local1, 0x10)), Local2)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   23, 
                TEMP,   1, 
                Offset (0x04)
            }

            Return (TEMP)
        }

        Method (SGII, 2, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (GADR (Local0, 0x02), Multiply (Local1, 0x10)), Local2)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   23, 
                TEMP,   1, 
                Offset (0x04)
            }

            Store (Arg1, TEMP)
        }

        Method (GPMV, 1, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (GADR (Local0, 0x02), Multiply (Local1, 0x10)), Local2)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   3, 
                Offset (0x04)
            }

            Return (TEMP)
        }

        Method (SPMV, 2, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (GADR (Local0, 0x02), Multiply (Local1, 0x10)), Local2)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   3, 
                Offset (0x04)
            }

            Store (Arg1, TEMP)
        }

        Method (GHPO, 1, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Add (GADR (Local0, 0x03), Multiply (ShiftRight (Local1, 0x05), 0x04), Local3)
            And (Local1, 0x1F, Local4)
            OperationRegion (PREG, SystemMemory, Local3, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (And (ShiftRight (TEMP, Local4), One))
        }

        Method (SHPO, 2, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Add (GADR (Local0, 0x03), Multiply (ShiftRight (Local1, 0x05), 0x04), Local3)
            And (Local1, 0x1F, Local4)
            OperationRegion (PREG, SystemMemory, Local3, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            If (Arg1)
            {
                Or (TEMP, ShiftLeft (One, Local4), TEMP)
            }
            Else
            {
                And (TEMP, Not (ShiftLeft (One, Local4)), TEMP)
            }
        }

        Method (GGPO, 1, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (GADR (Local0, 0x04), Multiply (ShiftRight (Local1, 0x03), 0x04)), Local2)
            OperationRegion (PREG, SystemMemory, Local2, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (And (ShiftRight (TEMP, Multiply (And (Local1, 0x07), 0x04)), 0x03))
        }

        Method (SGRA, 2, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (GADR (Local0, 0x02), Multiply (Local1, 0x10)), Local2)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   20, 
                TEMP,   1, 
                Offset (0x04)
            }

            Store (Arg1, TEMP)
        }

        Method (SGWP, 2, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (Add (GADR (Local0, 0x02), Multiply (Local1, 0x10)), 0x04), Local2)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   4, 
                Offset (0x04)
            }

            Store (Arg1, TEMP)
        }

        Method (CAGS, 1, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (ShiftRight (Local1, 0x05), Local4)
            If (LNot (Or (Or (LAnd (LEqual (GEI0, Local0), LEqual (GED0, Local4)), LAnd (LEqual (GEI1, Local0), LEqual (GED1, Local4))), LAnd (LEqual (GEI2, Local0), LEqual (GED2, Local4)))))
            {
                Store (GADR (Local0, 0x05), Local3)
                If (LNotEqual (And (Local3, 0xFFFF), 0xFFFF))
                {
                    OperationRegion (GPPX, SystemMemory, Add (Local3, Multiply (Local4, 0x04)), 0x04)
                    Field (GPPX, AnyAcc, NoLock, Preserve)
                    {
                        STSX,   32
                    }

                    ShiftLeft (One, Mod (Local1, 0x20), Local2)
                    Store (Local2, STSX)
                }
            }
        }

        Method (ISME, 1, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (ShiftRight (Local1, 0x05), Local4)
            If (LNot (LNot (Or (Or (LAnd (LEqual (GEI0, Local0), LEqual (GED0, Local4)), LAnd (LEqual (GEI1, Local0), LEqual (GED1, Local4))), LAnd (LEqual (GEI2, Local0), LEqual (GED2, Local4))))))
            {
                Return (Zero)
            }

            If (LEqual (And (GADR (Local0, 0x05), 0xFFFF), 0xFFFF))
            {
                Return (Zero)
            }

            Add (GADR (Local0, 0x05), Multiply (Local4, 0x04), Local2)
            And (Local1, 0x1F, Local3)
            OperationRegion (GPPX, SystemMemory, Local2, 0x24)
            Field (GPPX, AnyAcc, NoLock, Preserve)
            {
                STSX,   32, 
                Offset (0x20), 
                GENX,   32
            }

            Return (And (ShiftRight (And (STSX, GENX), Local3), One))
        }

        Method (DIPI, 1, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (GADR (Local0, 0x02), Multiply (Local1, 0x10)), Local2)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   9, 
                RDIS,   1, 
                    ,   15, 
                RCFG,   2, 
                Offset (0x04)
            }

            If (LNotEqual (RCFG, 0x02))
            {
                Store (RCFG, Index (DerefOf (Index (RXEV, Local0)), Local1))
                Store (0x02, RCFG)
                Store (One, RDIS)
            }
        }

        Method (UIPI, 1, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (GADR (Local0, 0x02), Multiply (Local1, 0x10)), Local2)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   9, 
                RDIS,   1, 
                    ,   15, 
                RCFG,   2, 
                Offset (0x04)
            }

            Store (DerefOf (Index (DerefOf (Index (RXEV, Local0)), Local1)), Local3)
            If (LNotEqual (Local3, 0x02))
            {
                Store (Zero, RDIS)
                Store (Local3, RCFG)
            }
        }

        Method (GRXE, 2, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (Add (GADR (Local0, 0x02), Multiply (Local1, 0x10)), Local2)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   25, 
                RCFG,   2, 
                Offset (0x04)
            }

            Store (Arg1, RCFG)
        }

        Method (GLOC, 2, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (GADR (Local0, 0x06), Local2)
            OperationRegion (PREG, SystemMemory, Local2, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (And (ShiftRight (TEMP, Local1), One))
        }

        Method (GLOT, 2, Serialized)
        {
            Store (GGRP (Arg0), Local0)
            Store (GNMB (Arg0), Local1)
            Store (GADR (Local0, 0x07), Local2)
            OperationRegion (PREG, SystemMemory, Local2, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (And (ShiftRight (TEMP, Local1), One))
        }
    }

    Scope (_SB.PC00)
    {
        Method (OCPD, 0, Serialized)
        {
            PCRA (0x50, 0x4020, Zero)
            PCRA (0x50, 0x4820, Zero)
            PCRA (0x50, 0x5C20, Zero)
            PCRA (0x50, 0x5820, Zero)
            PCRA (0x50, 0x1078, Zero)
        }

        If (LEqual (UF0E, One))
        {
            Device (PUF0)
            {
                Name (_ADR, 0x00120005)  // _ADR: Address
                Name (_DDN, "Intel(R) UFS Controller 0")  // _DDN: DOS Device Name
                OperationRegion (SCSR, PCI_Config, Zero, 0x0100)
                Field (SCSR, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    PSTA,   32, 
                    Offset (0xA2), 
                        ,   2, 
                    PGEN,   1
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    Store (Zero, PGEN)
                    And (PSTA, 0xFFFFFFFC, PSTA)
                    Store (PSTA, TEMP)
                    ULTR (Zero)
                    OCPD ()
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ULTR (One)
                    Store (One, PGEN)
                }

                Device (CARD)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }
            }
        }

        If (LEqual (UF1E, One))
        {
            Device (PUF1)
            {
                Name (_ADR, 0x00120007)  // _ADR: Address
                Name (_DDN, "Intel(R) UFS Controller 1")  // _DDN: DOS Device Name
                OperationRegion (SCSR, PCI_Config, Zero, 0x0100)
                Field (SCSR, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x84), 
                    PSTA,   32, 
                    Offset (0xA2), 
                        ,   2, 
                    PGEN,   1
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    Store (Zero, PGEN)
                    And (PSTA, 0xFFFFFFFC, PSTA)
                    Store (PSTA, TEMP)
                    ULTR (Zero)
                    OCPD ()
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ULTR (One)
                    Store (One, PGEN)
                }

                Device (CARD)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (CNVW)
        {
            Name (_ADR, 0x00140003)  // _ADR: Address
            Name (RSTT, Zero)
            Name (PRRS, Zero)
            OperationRegion (CWAR, SystemMemory, Add (GPCB (), 0x000A3000), 0x0100)
            Field (CWAR, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                    ,   1, 
                WMSE,   1, 
                WBME,   1, 
                Offset (0x10), 
                WBR0,   64, 
                Offset (0x44), 
                    ,   28, 
                WFLR,   1, 
                Offset (0x48), 
                    ,   15, 
                WIFR,   1, 
                Offset (0xCC), 
                WPMS,   32
            }

            Field (CWAR, ByteAcc, NoLock, Preserve)
            {
                Offset (0xCC), 
                Offset (0xCD), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x03)
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (XPRW (0x6D, 0x04))
            }

            Method (GPEH, 0, NotSerialized)
            {
                If (LEqual (VDID, 0xFFFFFFFF))
                {
                    Return (Zero)
                }

                If (LEqual (PMES, One))
                {
                    Notify (CNVW, 0x02)
                }
                
                Return (Zero)
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (LNotEqual (VDID, 0xFFFFFFFF))
                {
                    S023 (0x02, One)
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (LNotEqual (VDID, 0xFFFFFFFF))
                {
                    Store (PCRR (PCNV, 0x8100), Local0)
                    If (LEqual (And (Local0, 0x7F), 0x4C))
                    {
                        S023 (0x02, Zero)
                    }
                }
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
            }

            Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
            {
                WRST
            })
        }

        Method (CNIP, 0, NotSerialized)
        {
            If (LOr (LNotEqual (^CNVW.VDID, 0xFFFFFFFF), LEqual (CRFP, One)))
            {
                Return (One)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (SBTE, 1, Serialized)
        {
            If (LNotEqual (GBTP (), Zero))
            {
                Store (GBTP (), Local0)
                SGOV (Local0, Arg0)
                S023 (0x03, Arg0)
            }
        }

        Method (GBTE, 0, NotSerialized)
        {
            If (LNotEqual (GBTP (), Zero))
            {
                Store (GBTP (), Local0)
                Return (GGOV (Local0))
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (AOLX, 0, NotSerialized)
        {
            Name (AODS, Package (0x03)
            {
                Zero, 
                0x12, 
                Zero
            })
            If (LEqual (CBTA, One))
            {
                Store (One, Index (AODS, 0x02))
            }

            Return (AODS)
        }
    }

    Scope (_SB)
    {
        Method (GBTP, 0, Serialized)
        {
            If (LOr (LEqual (PCHS, 0x05), LEqual (PCHS, 0x03)))
            {
                Return (0x090A0000)
            }
            ElseIf (LEqual (PCHS, 0x04))
            {
                Return (0x08030000)
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    If (LAnd (\_SB.PC00.CNIP (), LEqual (CBTC, One)))
    {
        If (LOr (LEqual (PCHS, 0x02), LOr (LEqual (PCHS, 0x05), LEqual (PCHS, 0x03))))
        {
            Scope (_SB.PC00.XHCI.RHUB.HS10)
            {
                Method (AOLD, 0, NotSerialized)
                {
                    Return (AOLX ())
                }
            }
        }
        ElseIf (LOr (LEqual (PCHS, One), LEqual (PCHS, 0x04)))
        {
            Scope (_SB.PC00.XHCI.RHUB.HS14)
            {
                Method (AOLD, 0, NotSerialized)
                {
                    Return (AOLX ())
                }
            }
        }
    }

    Scope (_SB.PC00.CNVW)
    {
        Name (PLRB, Zero)
        PowerResource (WRST, 0x05, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (One)
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
            }

            Method (_RST, 0, NotSerialized)  // _RST: Device Reset
            {
                Store (Acquire (CNMT, 0x03E8), Local0)
                If (LEqual (Local0, Zero))
                {
                    CFLR ()
                    Store (One, PRRS)
                    If (LAnd (CondRefOf (\_SB.PC00.CNVW.RSTT), LEqual (RSTT, One)))
                    {
                        If (LEqual (PCHS, 0x04))
                        {
                            Store (0x44, PLRB)
                        }
                        Else
                        {
                            Store (0x80, PLRB)
                        }

                        If (LEqual (And (PCRR (PCNV, PLRB), 0x02), Zero))
                        {
                            If (LEqual (GBTR (), One))
                            {
                                BTRK (Zero)
                                Sleep (0x69)
                                Store (One, Local2)
                            }

                            PCRO (PCNV, PLRB, 0x03)
                            Sleep (0x0A)
                            Store (PCRR (PCNV, PLRB), Local1)
                            If (LAnd (LEqual (And (Local1, 0x02), Zero), And (Local1, 0x04)))
                            {
                                Store (0x02, PRRS)
                                If (LEqual (Local2, One))
                                {
                                    BTRK (One)
                                    Sleep (0x69)
                                }
                            }
                            Else
                            {
                                Store (0x04, PRRS)
                            }
                        }
                        Else
                        {
                            Store (0x03, PRRS)
                        }
                    }

                    Release (CNMT)
                }
            }
        }

        Method (CFLR, 0, NotSerialized)
        {
            If (LEqual (WFLR, One))
            {
                Store (One, WIFR)
            }
        }
    }

    Scope (_SB.PC00)
    {
        Name (SIPV, Zero)
        Method (GSIP, 0, NotSerialized)
        {
            If (LOr (LEqual (PCHS, 0x05), LEqual (PCHS, 0x03)))
            {
                Return (0x0E)
            }
            Else
            {
                Return (0x11)
            }
        }

        Scope (RP01)
        {
            Name (SLOT, One)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Store (LTR1, LTEN)
                Store (PML1, LMSL)
                Store (PNL1, LNSL)
                If (And (HBSL, One))
                {
                    Store (One, HBCS)
                }

                If (LAnd (CondRefOf (VMR1), CondRefOf (VMDE)))
                {
                    If (LAnd (LEqual (VMDE, One), LNotEqual (And (VMR1, One), Zero)))
                    {
                        Store (One, PRMV)
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP01))
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP01.PRMV))
                            {
                                If (LEqual (PRMV, One))
                                {
                                    Store (STD3, RD3C)
                                }
                            }

                            If (LOr (^PXSX.PNVM (), ^PXSX.PAHC ()))
                            {
                                Store (STD3, RD3C)
                            }
                        }
                    }
                }
            }

            Store (GSIP (), SIPV)
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If (LLess (SIPV, 0x10))
                {
                    If (LNotEqual (NCB7, One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf (LNotEqual (SCB0, One))
                {
                    Return (Zero)
                }

                Store (One, L23R)
                Store (Zero, Local0)
                While (L23R)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (Zero, NCB7)
                }
                Else
                {
                    Store (Zero, SCB0)
                }

                Store (Zero, Local0)
                While (LEqual (LASX, Zero))
                {
                    If (LGreater (Local0, 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }
                
                Return (Zero)
            }

            Method (DL23, 0, Serialized)
            {
                Store (One, L23E)
                Sleep (0x10)
                Store (Zero, Local0)
                While (L23E)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (One, NCB7)
                }
                Else
                {
                    Store (One, SCB0)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If (LEqual (VDID, 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                     
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (One, FUN0)
                                If (LNotEqual (LTEN, Zero))
                                {
                                    Store (One, FUN6)
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }
                            }

                            If (LGreaterEqual (Arg1, 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Store (One, FUNA)
                                }

                                If (CondRefOf (UPRD))
                                {
                                    Store (One, FUNB)
                                }
                            }

                            Return (OPTS)
                        }
                        Case (0x06)
                        {
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, Zero))
                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 0x02))
                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                Return (LTRV)
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x06))
                        {
                            If (LEqual (PIXX, One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x08))
                        {
                            If (LEqual (PIXX, 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If (LEqual (DVID, 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If (LEqual (BCCX, 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If (LNotEqual (STD3, Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If (LOr (PAHC (), PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                {
                    Notify (PXSX, 0x02)
                    Store (One, PMSX)
                    Store (One, PSPX)
                }
            }
        }

        Scope (RP02)
        {
            Name (SLOT, 0x02)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Store (LTR2, LTEN)
                Store (PML2, LMSL)
                Store (PNL2, LNSL)
                If (And (HBSL, One))
                {
                    Store (One, HBCS)
                }

                If (LAnd (CondRefOf (VMR1), CondRefOf (VMDE)))
                {
                    If (LAnd (LEqual (VMDE, One), LNotEqual (And (VMR1, 0x02), Zero)))
                    {
                        Store (One, PRMV)
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP02))
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP02.PRMV))
                            {
                                If (LEqual (PRMV, One))
                                {
                                    Store (STD3, RD3C)
                                }
                            }

                            If (LOr (^PXSX.PNVM (), ^PXSX.PAHC ()))
                            {
                                Store (STD3, RD3C)
                            }
                        }
                    }
                }
            }

            Store (GSIP (), SIPV)
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If (LLess (SIPV, 0x10))
                {
                    If (LNotEqual (NCB7, One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf (LNotEqual (SCB0, One))
                {
                    Return (Zero)
                }

                Store (One, L23R)
                Store (Zero, Local0)
                While (L23R)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (Zero, NCB7)
                }
                Else
                {
                    Store (Zero, SCB0)
                }

                Store (Zero, Local0)
                While (LEqual (LASX, Zero))
                {
                    If (LGreater (Local0, 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }
                
                Return (Zero)
            }

            Method (DL23, 0, Serialized)
            {
                Store (One, L23E)
                Sleep (0x10)
                Store (Zero, Local0)
                While (L23E)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (One, NCB7)
                }
                Else
                {
                    Store (One, SCB0)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If (LEqual (VDID, 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                     
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (One, FUN0)
                                If (LNotEqual (LTEN, Zero))
                                {
                                    Store (One, FUN6)
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }
                            }

                            If (LGreaterEqual (Arg1, 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Store (One, FUNA)
                                }

                                If (CondRefOf (UPRD))
                                {
                                    Store (One, FUNB)
                                }
                            }

                            Return (OPTS)
                        }
                        Case (0x06)
                        {
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, Zero))
                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 0x02))
                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                Return (LTRV)
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x06))
                        {
                            If (LEqual (PIXX, One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x08))
                        {
                            If (LEqual (PIXX, 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If (LEqual (DVID, 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If (LEqual (BCCX, 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If (LNotEqual (STD3, Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If (LOr (PAHC (), PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                {
                    Notify (PXSX, 0x02)
                    Store (One, PMSX)
                    Store (One, PSPX)
                }
            }
        }

        Scope (RP03)
        {
            Name (SLOT, 0x03)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Store (LTR3, LTEN)
                Store (PML3, LMSL)
                Store (PNL3, LNSL)
                If (And (HBSL, One))
                {
                    Store (One, HBCS)
                }

                If (LAnd (CondRefOf (VMR1), CondRefOf (VMDE)))
                {
                    If (LAnd (LEqual (VMDE, One), LNotEqual (And (VMR1, 0x04), Zero)))
                    {
                        Store (One, PRMV)
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP03))
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP03.PRMV))
                            {
                                If (LEqual (PRMV, One))
                                {
                                    Store (STD3, RD3C)
                                }
                            }

                            If (LOr (^PXSX.PNVM (), ^PXSX.PAHC ()))
                            {
                                Store (STD3, RD3C)
                            }
                        }
                    }
                }
            }

            Store (GSIP (), SIPV)
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If (LLess (SIPV, 0x10))
                {
                    If (LNotEqual (NCB7, One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf (LNotEqual (SCB0, One))
                {
                    Return (Zero)
                }

                Store (One, L23R)
                Store (Zero, Local0)
                While (L23R)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (Zero, NCB7)
                }
                Else
                {
                    Store (Zero, SCB0)
                }

                Store (Zero, Local0)
                While (LEqual (LASX, Zero))
                {
                    If (LGreater (Local0, 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }
                
                Return (Zero)
            }

            Method (DL23, 0, Serialized)
            {
                Store (One, L23E)
                Sleep (0x10)
                Store (Zero, Local0)
                While (L23E)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (One, NCB7)
                }
                Else
                {
                    Store (One, SCB0)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If (LEqual (VDID, 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                     
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (One, FUN0)
                                If (LNotEqual (LTEN, Zero))
                                {
                                    Store (One, FUN6)
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }
                            }

                            If (LGreaterEqual (Arg1, 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Store (One, FUNA)
                                }

                                If (CondRefOf (UPRD))
                                {
                                    Store (One, FUNB)
                                }
                            }

                            Return (OPTS)
                        }
                        Case (0x06)
                        {
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, Zero))
                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 0x02))
                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                Return (LTRV)
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x06))
                        {
                            If (LEqual (PIXX, One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x08))
                        {
                            If (LEqual (PIXX, 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If (LEqual (DVID, 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If (LEqual (BCCX, 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If (LNotEqual (STD3, Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If (LOr (PAHC (), PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                {
                    Notify (PXSX, 0x02)
                    Store (One, PMSX)
                    Store (One, PSPX)
                }
            }
        }

        Scope (RP04)
        {
            Name (SLOT, 0x04)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Store (LTR4, LTEN)
                Store (PML4, LMSL)
                Store (PNL4, LNSL)
                If (And (HBSL, One))
                {
                    Store (One, HBCS)
                }

                If (LAnd (CondRefOf (VMR1), CondRefOf (VMDE)))
                {
                    If (LAnd (LEqual (VMDE, One), LNotEqual (And (VMR1, 0x08), Zero)))
                    {
                        Store (One, PRMV)
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP04))
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP04.PRMV))
                            {
                                If (LEqual (PRMV, One))
                                {
                                    Store (STD3, RD3C)
                                }
                            }

                            If (LOr (^PXSX.PNVM (), ^PXSX.PAHC ()))
                            {
                                Store (STD3, RD3C)
                            }
                        }
                    }
                }
            }

            Store (GSIP (), SIPV)
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If (LLess (SIPV, 0x10))
                {
                    If (LNotEqual (NCB7, One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf (LNotEqual (SCB0, One))
                {
                    Return (Zero)
                }

                Store (One, L23R)
                Store (Zero, Local0)
                While (L23R)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (Zero, NCB7)
                }
                Else
                {
                    Store (Zero, SCB0)
                }

                Store (Zero, Local0)
                While (LEqual (LASX, Zero))
                {
                    If (LGreater (Local0, 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }
                
                Return (Zero)
            }

            Method (DL23, 0, Serialized)
            {
                Store (One, L23E)
                Sleep (0x10)
                Store (Zero, Local0)
                While (L23E)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (One, NCB7)
                }
                Else
                {
                    Store (One, SCB0)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If (LEqual (VDID, 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                     
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (One, FUN0)
                                If (LNotEqual (LTEN, Zero))
                                {
                                    Store (One, FUN6)
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }
                            }

                            If (LGreaterEqual (Arg1, 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Store (One, FUNA)
                                }

                                If (CondRefOf (UPRD))
                                {
                                    Store (One, FUNB)
                                }
                            }

                            Return (OPTS)
                        }
                        Case (0x06)
                        {
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, Zero))
                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 0x02))
                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                Return (LTRV)
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x06))
                        {
                            If (LEqual (PIXX, One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x08))
                        {
                            If (LEqual (PIXX, 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If (LEqual (DVID, 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If (LEqual (BCCX, 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If (LNotEqual (STD3, Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If (LOr (PAHC (), PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                {
                    Notify (PXSX, 0x02)
                    Store (One, PMSX)
                    Store (One, PSPX)
                }
            }
        }

        Scope (RP05)
        {
            Name (SLOT, 0x05)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Store (LTR5, LTEN)
                Store (PML5, LMSL)
                Store (PNL5, LNSL)
                If (And (HBSL, 0x02))
                {
                    Store (One, HBCS)
                }

                If (LAnd (CondRefOf (VMR1), CondRefOf (VMDE)))
                {
                    If (LAnd (LEqual (VMDE, One), LNotEqual (And (VMR1, 0x10), Zero)))
                    {
                        Store (One, PRMV)
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP05))
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP05.PRMV))
                            {
                                If (LEqual (PRMV, One))
                                {
                                    Store (STD3, RD3C)
                                }
                            }

                            If (LOr (^PXSX.PNVM (), ^PXSX.PAHC ()))
                            {
                                Store (STD3, RD3C)
                            }
                        }
                    }
                }
            }

            Store (GSIP (), SIPV)
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If (LLess (SIPV, 0x10))
                {
                    If (LNotEqual (NCB7, One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf (LNotEqual (SCB0, One))
                {
                    Return (Zero)
                }

                Store (One, L23R)
                Store (Zero, Local0)
                While (L23R)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (Zero, NCB7)
                }
                Else
                {
                    Store (Zero, SCB0)
                }

                Store (Zero, Local0)
                While (LEqual (LASX, Zero))
                {
                    If (LGreater (Local0, 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }
                
                Return (Zero)
            }

            Method (DL23, 0, Serialized)
            {
                Store (One, L23E)
                Sleep (0x10)
                Store (Zero, Local0)
                While (L23E)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (One, NCB7)
                }
                Else
                {
                    Store (One, SCB0)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If (LEqual (VDID, 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                     
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (One, FUN0)
                                If (LNotEqual (LTEN, Zero))
                                {
                                    Store (One, FUN6)
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }
                            }

                            If (LGreaterEqual (Arg1, 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Store (One, FUNA)
                                }

                                If (CondRefOf (UPRD))
                                {
                                    Store (One, FUNB)
                                }
                            }

                            Return (OPTS)
                        }
                        Case (0x06)
                        {
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, Zero))
                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 0x02))
                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                Return (LTRV)
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x06))
                        {
                            If (LEqual (PIXX, One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x08))
                        {
                            If (LEqual (PIXX, 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If (LEqual (DVID, 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If (LEqual (BCCX, 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If (LNotEqual (STD3, Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If (LOr (PAHC (), PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                {
                    Notify (PXSX, 0x02)
                    Store (One, PMSX)
                    Store (One, PSPX)
                }
            }
        }

        Scope (RP06)
        {
            Name (SLOT, 0x06)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Store (LTR6, LTEN)
                Store (PML6, LMSL)
                Store (PNL6, LNSL)
                If (And (HBSL, 0x02))
                {
                    Store (One, HBCS)
                }

                If (LAnd (CondRefOf (VMR1), CondRefOf (VMDE)))
                {
                    If (LAnd (LEqual (VMDE, One), LNotEqual (And (VMR1, 0x20), Zero)))
                    {
                        Store (One, PRMV)
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP06))
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP06.PRMV))
                            {
                                If (LEqual (PRMV, One))
                                {
                                    Store (STD3, RD3C)
                                }
                            }

                            If (LOr (^PXSX.PNVM (), ^PXSX.PAHC ()))
                            {
                                Store (STD3, RD3C)
                            }
                        }
                    }
                }
            }

            Store (GSIP (), SIPV)
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If (LLess (SIPV, 0x10))
                {
                    If (LNotEqual (NCB7, One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf (LNotEqual (SCB0, One))
                {
                    Return (Zero)
                }

                Store (One, L23R)
                Store (Zero, Local0)
                While (L23R)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (Zero, NCB7)
                }
                Else
                {
                    Store (Zero, SCB0)
                }

                Store (Zero, Local0)
                While (LEqual (LASX, Zero))
                {
                    If (LGreater (Local0, 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }
                
                Return (Zero)
            }

            Method (DL23, 0, Serialized)
            {
                Store (One, L23E)
                Sleep (0x10)
                Store (Zero, Local0)
                While (L23E)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (One, NCB7)
                }
                Else
                {
                    Store (One, SCB0)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If (LEqual (VDID, 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                     
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (One, FUN0)
                                If (LNotEqual (LTEN, Zero))
                                {
                                    Store (One, FUN6)
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }
                            }

                            If (LGreaterEqual (Arg1, 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Store (One, FUNA)
                                }

                                If (CondRefOf (UPRD))
                                {
                                    Store (One, FUNB)
                                }
                            }

                            Return (OPTS)
                        }
                        Case (0x06)
                        {
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, Zero))
                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 0x02))
                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                Return (LTRV)
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x06))
                        {
                            If (LEqual (PIXX, One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x08))
                        {
                            If (LEqual (PIXX, 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If (LEqual (DVID, 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If (LEqual (BCCX, 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If (LNotEqual (STD3, Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If (LOr (PAHC (), PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                {
                    Notify (PXSX, 0x02)
                    Store (One, PMSX)
                    Store (One, PSPX)
                }
            }
        }

        Scope (RP07)
        {
            Name (SLOT, 0x07)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Store (LTR7, LTEN)
                Store (PML7, LMSL)
                Store (PNL7, LNSL)
                If (And (HBSL, 0x02))
                {
                    Store (One, HBCS)
                }

                If (LAnd (CondRefOf (VMR1), CondRefOf (VMDE)))
                {
                    If (LAnd (LEqual (VMDE, One), LNotEqual (And (VMR1, 0x40), Zero)))
                    {
                        Store (One, PRMV)
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP07))
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP07.PRMV))
                            {
                                If (LEqual (PRMV, One))
                                {
                                    Store (STD3, RD3C)
                                }
                            }

                            If (LOr (^PXSX.PNVM (), ^PXSX.PAHC ()))
                            {
                                Store (STD3, RD3C)
                            }
                        }
                    }
                }
            }

            Store (GSIP (), SIPV)
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If (LLess (SIPV, 0x10))
                {
                    If (LNotEqual (NCB7, One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf (LNotEqual (SCB0, One))
                {
                    Return (Zero)
                }

                Store (One, L23R)
                Store (Zero, Local0)
                While (L23R)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (Zero, NCB7)
                }
                Else
                {
                    Store (Zero, SCB0)
                }

                Store (Zero, Local0)
                While (LEqual (LASX, Zero))
                {
                    If (LGreater (Local0, 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }
                
                Return (Zero)
            }

            Method (DL23, 0, Serialized)
            {
                Store (One, L23E)
                Sleep (0x10)
                Store (Zero, Local0)
                While (L23E)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (One, NCB7)
                }
                Else
                {
                    Store (One, SCB0)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If (LEqual (VDID, 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                     
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (One, FUN0)
                                If (LNotEqual (LTEN, Zero))
                                {
                                    Store (One, FUN6)
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }
                            }

                            If (LGreaterEqual (Arg1, 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Store (One, FUNA)
                                }

                                If (CondRefOf (UPRD))
                                {
                                    Store (One, FUNB)
                                }
                            }

                            Return (OPTS)
                        }
                        Case (0x06)
                        {
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, Zero))
                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 0x02))
                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                Return (LTRV)
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x06))
                        {
                            If (LEqual (PIXX, One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x08))
                        {
                            If (LEqual (PIXX, 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If (LEqual (DVID, 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If (LEqual (BCCX, 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If (LNotEqual (STD3, Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If (LOr (PAHC (), PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                {
                    Notify (PXSX, 0x02)
                    Store (One, PMSX)
                    Store (One, PSPX)
                }
            }
        }

        Scope (RP08)
        {
            Name (SLOT, 0x08)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Store (LTR8, LTEN)
                Store (PML8, LMSL)
                Store (PNL8, LNSL)
                If (And (HBSL, 0x02))
                {
                    Store (One, HBCS)
                }

                If (LAnd (CondRefOf (VMR1), CondRefOf (VMDE)))
                {
                    If (LAnd (LEqual (VMDE, One), LNotEqual (And (VMR1, 0x80), Zero)))
                    {
                        Store (One, PRMV)
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP08))
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP08.PRMV))
                            {
                                If (LEqual (PRMV, One))
                                {
                                    Store (STD3, RD3C)
                                }
                            }

                            If (LOr (^PXSX.PNVM (), ^PXSX.PAHC ()))
                            {
                                Store (STD3, RD3C)
                            }
                        }
                    }
                }
            }

            Store (GSIP (), SIPV)
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If (LLess (SIPV, 0x10))
                {
                    If (LNotEqual (NCB7, One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf (LNotEqual (SCB0, One))
                {
                    Return (Zero)
                }

                Store (One, L23R)
                Store (Zero, Local0)
                While (L23R)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (Zero, NCB7)
                }
                Else
                {
                    Store (Zero, SCB0)
                }

                Store (Zero, Local0)
                While (LEqual (LASX, Zero))
                {
                    If (LGreater (Local0, 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }
                
                Return (Zero)
            }

            Method (DL23, 0, Serialized)
            {
                Store (One, L23E)
                Sleep (0x10)
                Store (Zero, Local0)
                While (L23E)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (One, NCB7)
                }
                Else
                {
                    Store (One, SCB0)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If (LEqual (VDID, 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                     
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (One, FUN0)
                                If (LNotEqual (LTEN, Zero))
                                {
                                    Store (One, FUN6)
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }
                            }

                            If (LGreaterEqual (Arg1, 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Store (One, FUNA)
                                }

                                If (CondRefOf (UPRD))
                                {
                                    Store (One, FUNB)
                                }
                            }

                            Return (OPTS)
                        }
                        Case (0x06)
                        {
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, Zero))
                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 0x02))
                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                Return (LTRV)
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x06))
                        {
                            If (LEqual (PIXX, One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x08))
                        {
                            If (LEqual (PIXX, 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If (LEqual (DVID, 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If (LEqual (BCCX, 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If (LNotEqual (STD3, Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If (LOr (PAHC (), PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                {
                    Notify (PXSX, 0x02)
                    Store (One, PMSX)
                    Store (One, PSPX)
                }
            }
        }

        Scope (RP09)
        {
            Name (SLOT, 0x09)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Store (LTR9, LTEN)
                Store (PML9, LMSL)
                Store (PNL9, LNSL)
                If (And (HBSL, 0x04))
                {
                    Store (One, HBCS)
                }

                If (LAnd (CondRefOf (VMR2), CondRefOf (VMDE)))
                {
                    If (LAnd (LEqual (VMDE, One), LNotEqual (And (VMR2, One), Zero)))
                    {
                        Store (One, PRMV)
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP09))
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP09.PRMV))
                            {
                                If (LEqual (PRMV, One))
                                {
                                    Store (STD3, RD3C)
                                }
                            }

                            If (LOr (^PXSX.PNVM (), ^PXSX.PAHC ()))
                            {
                                Store (STD3, RD3C)
                            }
                        }
                    }
                }
            }

            Store (GSIP (), SIPV)
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If (LLess (SIPV, 0x10))
                {
                    If (LNotEqual (NCB7, One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf (LNotEqual (SCB0, One))
                {
                    Return (Zero)
                }

                Store (One, L23R)
                Store (Zero, Local0)
                While (L23R)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (Zero, NCB7)
                }
                Else
                {
                    Store (Zero, SCB0)
                }

                Store (Zero, Local0)
                While (LEqual (LASX, Zero))
                {
                    If (LGreater (Local0, 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }
                
                Return (Zero)
            }

            Method (DL23, 0, Serialized)
            {
                Store (One, L23E)
                Sleep (0x10)
                Store (Zero, Local0)
                While (L23E)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (One, NCB7)
                }
                Else
                {
                    Store (One, SCB0)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If (LEqual (VDID, 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                     
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (One, FUN0)
                                If (LNotEqual (LTEN, Zero))
                                {
                                    Store (One, FUN6)
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }
                            }

                            If (LGreaterEqual (Arg1, 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Store (One, FUNA)
                                }

                                If (CondRefOf (UPRD))
                                {
                                    Store (One, FUNB)
                                }
                            }

                            Return (OPTS)
                        }
                        Case (0x06)
                        {
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, Zero))
                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 0x02))
                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                Return (LTRV)
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x06))
                        {
                            If (LEqual (PIXX, One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x08))
                        {
                            If (LEqual (PIXX, 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If (LEqual (DVID, 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If (LEqual (BCCX, 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If (LNotEqual (STD3, Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If (LOr (PAHC (), PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                {
                    Notify (PXSX, 0x02)
                    Store (One, PMSX)
                    Store (One, PSPX)
                }
            }
        }

        Scope (RP10)
        {
            Name (SLOT, 0x0A)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Store (LTRA, LTEN)
                Store (PMLA, LMSL)
                Store (PNLA, LNSL)
                If (And (HBSL, 0x04))
                {
                    Store (One, HBCS)
                }

                If (LAnd (CondRefOf (VMR2), CondRefOf (VMDE)))
                {
                    If (LAnd (LEqual (VMDE, One), LNotEqual (And (VMR2, 0x02), Zero)))
                    {
                        Store (One, PRMV)
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP10))
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP10.PRMV))
                            {
                                If (LEqual (PRMV, One))
                                {
                                    Store (STD3, RD3C)
                                }
                            }

                            If (LOr (^PXSX.PNVM (), ^PXSX.PAHC ()))
                            {
                                Store (STD3, RD3C)
                            }
                        }
                    }
                }
            }

            Store (GSIP (), SIPV)
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If (LLess (SIPV, 0x10))
                {
                    If (LNotEqual (NCB7, One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf (LNotEqual (SCB0, One))
                {
                    Return (Zero)
                }

                Store (One, L23R)
                Store (Zero, Local0)
                While (L23R)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (Zero, NCB7)
                }
                Else
                {
                    Store (Zero, SCB0)
                }

                Store (Zero, Local0)
                While (LEqual (LASX, Zero))
                {
                    If (LGreater (Local0, 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }
                
                Return (Zero)
            }

            Method (DL23, 0, Serialized)
            {
                Store (One, L23E)
                Sleep (0x10)
                Store (Zero, Local0)
                While (L23E)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (One, NCB7)
                }
                Else
                {
                    Store (One, SCB0)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If (LEqual (VDID, 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                     
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (One, FUN0)
                                If (LNotEqual (LTEN, Zero))
                                {
                                    Store (One, FUN6)
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }
                            }

                            If (LGreaterEqual (Arg1, 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Store (One, FUNA)
                                }

                                If (CondRefOf (UPRD))
                                {
                                    Store (One, FUNB)
                                }
                            }

                            Return (OPTS)
                        }
                        Case (0x06)
                        {
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, Zero))
                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 0x02))
                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                Return (LTRV)
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x06))
                        {
                            If (LEqual (PIXX, One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x08))
                        {
                            If (LEqual (PIXX, 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If (LEqual (DVID, 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If (LEqual (BCCX, 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If (LNotEqual (STD3, Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If (LOr (PAHC (), PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                {
                    Notify (PXSX, 0x02)
                    Store (One, PMSX)
                    Store (One, PSPX)
                }
            }
        }

        Scope (RP11)
        {
            Name (SLOT, 0x0B)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Store (LTRB, LTEN)
                Store (PMLB, LMSL)
                Store (PNLB, LNSL)
                If (And (HBSL, 0x04))
                {
                    Store (One, HBCS)
                }

                If (LAnd (CondRefOf (VMR2), CondRefOf (VMDE)))
                {
                    If (LAnd (LEqual (VMDE, One), LNotEqual (And (VMR2, 0x04), Zero)))
                    {
                        Store (One, PRMV)
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP11))
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP11.PRMV))
                            {
                                If (LEqual (PRMV, One))
                                {
                                    Store (STD3, RD3C)
                                }
                            }

                            If (LOr (^PXSX.PNVM (), ^PXSX.PAHC ()))
                            {
                                Store (STD3, RD3C)
                            }
                        }
                    }
                }
            }

            Store (GSIP (), SIPV)
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If (LLess (SIPV, 0x10))
                {
                    If (LNotEqual (NCB7, One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf (LNotEqual (SCB0, One))
                {
                    Return (Zero)
                }

                Store (One, L23R)
                Store (Zero, Local0)
                While (L23R)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (Zero, NCB7)
                }
                Else
                {
                    Store (Zero, SCB0)
                }

                Store (Zero, Local0)
                While (LEqual (LASX, Zero))
                {
                    If (LGreater (Local0, 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }
                
                Return (Zero)
            }

            Method (DL23, 0, Serialized)
            {
                Store (One, L23E)
                Sleep (0x10)
                Store (Zero, Local0)
                While (L23E)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (One, NCB7)
                }
                Else
                {
                    Store (One, SCB0)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If (LEqual (VDID, 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                     
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (One, FUN0)
                                If (LNotEqual (LTEN, Zero))
                                {
                                    Store (One, FUN6)
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }
                            }

                            If (LGreaterEqual (Arg1, 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Store (One, FUNA)
                                }

                                If (CondRefOf (UPRD))
                                {
                                    Store (One, FUNB)
                                }
                            }

                            Return (OPTS)
                        }
                        Case (0x06)
                        {
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, Zero))
                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 0x02))
                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                Return (LTRV)
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x06))
                        {
                            If (LEqual (PIXX, One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x08))
                        {
                            If (LEqual (PIXX, 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If (LEqual (DVID, 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If (LEqual (BCCX, 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If (LNotEqual (STD3, Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If (LOr (PAHC (), PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                {
                    Notify (PXSX, 0x02)
                    Store (One, PMSX)
                    Store (One, PSPX)
                }
            }
        }

        Scope (RP12)
        {
            Name (SLOT, 0x0C)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Store (LTRC, LTEN)
                Store (PMLC, LMSL)
                Store (PNLC, LNSL)
                If (And (HBSL, 0x04))
                {
                    Store (One, HBCS)
                }

                If (LAnd (CondRefOf (VMR2), CondRefOf (VMDE)))
                {
                    If (LAnd (LEqual (VMDE, One), LNotEqual (And (VMR2, 0x08), Zero)))
                    {
                        Store (One, PRMV)
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP12))
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP12.PRMV))
                            {
                                If (LEqual (PRMV, One))
                                {
                                    Store (STD3, RD3C)
                                }
                            }

                            If (LOr (^PXSX.PNVM (), ^PXSX.PAHC ()))
                            {
                                Store (STD3, RD3C)
                            }
                        }
                    }
                }
            }

            Store (GSIP (), SIPV)
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If (LLess (SIPV, 0x10))
                {
                    If (LNotEqual (NCB7, One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf (LNotEqual (SCB0, One))
                {
                    Return (Zero)
                }

                Store (One, L23R)
                Store (Zero, Local0)
                While (L23R)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (Zero, NCB7)
                }
                Else
                {
                    Store (Zero, SCB0)
                }

                Store (Zero, Local0)
                While (LEqual (LASX, Zero))
                {
                    If (LGreater (Local0, 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }
                
                Return (Zero)
            }

            Method (DL23, 0, Serialized)
            {
                Store (One, L23E)
                Sleep (0x10)
                Store (Zero, Local0)
                While (L23E)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (One, NCB7)
                }
                Else
                {
                    Store (One, SCB0)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If (LEqual (VDID, 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                     
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (One, FUN0)
                                If (LNotEqual (LTEN, Zero))
                                {
                                    Store (One, FUN6)
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }
                            }

                            If (LGreaterEqual (Arg1, 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Store (One, FUNA)
                                }

                                If (CondRefOf (UPRD))
                                {
                                    Store (One, FUNB)
                                }
                            }

                            Return (OPTS)
                        }
                        Case (0x06)
                        {
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, Zero))
                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 0x02))
                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                Return (LTRV)
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x06))
                        {
                            If (LEqual (PIXX, One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x08))
                        {
                            If (LEqual (PIXX, 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If (LEqual (DVID, 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If (LEqual (BCCX, 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If (LNotEqual (STD3, Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If (LOr (PAHC (), PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                {
                    Notify (PXSX, 0x02)
                    Store (One, PMSX)
                    Store (One, PSPX)
                }
            }
        }

        Scope (RP13)
        {
            Name (SLOT, 0x0D)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Store (LTRD, LTEN)
                Store (PMLD, LMSL)
                Store (PNLD, LNSL)
                If (And (HBSL, 0x08))
                {
                    Store (One, HBCS)
                }

                If (LAnd (CondRefOf (VMR2), CondRefOf (VMDE)))
                {
                    If (LAnd (LEqual (VMDE, One), LNotEqual (And (VMR2, 0x10), Zero)))
                    {
                        Store (One, PRMV)
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP13))
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP13.PRMV))
                            {
                                If (LEqual (PRMV, One))
                                {
                                    Store (STD3, RD3C)
                                }
                            }

                            If (LOr (^PXSX.PNVM (), ^PXSX.PAHC ()))
                            {
                                Store (STD3, RD3C)
                            }
                        }
                    }
                }
            }

            Store (GSIP (), SIPV)
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If (LLess (SIPV, 0x10))
                {
                    If (LNotEqual (NCB7, One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf (LNotEqual (SCB0, One))
                {
                    Return (Zero)
                }

                Store (One, L23R)
                Store (Zero, Local0)
                While (L23R)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (Zero, NCB7)
                }
                Else
                {
                    Store (Zero, SCB0)
                }

                Store (Zero, Local0)
                While (LEqual (LASX, Zero))
                {
                    If (LGreater (Local0, 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }
                
                Return (Zero)
            }

            Method (DL23, 0, Serialized)
            {
                Store (One, L23E)
                Sleep (0x10)
                Store (Zero, Local0)
                While (L23E)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (One, NCB7)
                }
                Else
                {
                    Store (One, SCB0)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If (LEqual (VDID, 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                     
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (One, FUN0)
                                If (LNotEqual (LTEN, Zero))
                                {
                                    Store (One, FUN6)
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }
                            }

                            If (LGreaterEqual (Arg1, 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Store (One, FUNA)
                                }

                                If (CondRefOf (UPRD))
                                {
                                    Store (One, FUNB)
                                }
                            }

                            Return (OPTS)
                        }
                        Case (0x06)
                        {
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, Zero))
                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 0x02))
                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                Return (LTRV)
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x06))
                        {
                            If (LEqual (PIXX, One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x08))
                        {
                            If (LEqual (PIXX, 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If (LEqual (DVID, 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If (LEqual (BCCX, 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If (LNotEqual (STD3, Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If (LOr (PAHC (), PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                {
                    Notify (PXSX, 0x02)
                    Store (One, PMSX)
                    Store (One, PSPX)
                }
            }
        }

        Scope (RP14)
        {
            Name (SLOT, 0x0E)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Store (LTRE, LTEN)
                Store (PMLE, LMSL)
                Store (PNLE, LNSL)
                If (And (HBSL, 0x08))
                {
                    Store (One, HBCS)
                }

                If (LAnd (CondRefOf (VMR2), CondRefOf (VMDE)))
                {
                    If (LAnd (LEqual (VMDE, One), LNotEqual (And (VMR2, 0x20), Zero)))
                    {
                        Store (One, PRMV)
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP14))
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP14.PRMV))
                            {
                                If (LEqual (PRMV, One))
                                {
                                    Store (STD3, RD3C)
                                }
                            }

                            If (LOr (^PXSX.PNVM (), ^PXSX.PAHC ()))
                            {
                                Store (STD3, RD3C)
                            }
                        }
                    }
                }
            }

            Store (GSIP (), SIPV)
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If (LLess (SIPV, 0x10))
                {
                    If (LNotEqual (NCB7, One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf (LNotEqual (SCB0, One))
                {
                    Return (Zero)
                }

                Store (One, L23R)
                Store (Zero, Local0)
                While (L23R)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (Zero, NCB7)
                }
                Else
                {
                    Store (Zero, SCB0)
                }

                Store (Zero, Local0)
                While (LEqual (LASX, Zero))
                {
                    If (LGreater (Local0, 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }
                
                Return (Zero)
            }

            Method (DL23, 0, Serialized)
            {
                Store (One, L23E)
                Sleep (0x10)
                Store (Zero, Local0)
                While (L23E)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (One, NCB7)
                }
                Else
                {
                    Store (One, SCB0)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If (LEqual (VDID, 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                     
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (One, FUN0)
                                If (LNotEqual (LTEN, Zero))
                                {
                                    Store (One, FUN6)
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }
                            }

                            If (LGreaterEqual (Arg1, 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Store (One, FUNA)
                                }

                                If (CondRefOf (UPRD))
                                {
                                    Store (One, FUNB)
                                }
                            }

                            Return (OPTS)
                        }
                        Case (0x06)
                        {
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, Zero))
                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 0x02))
                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                Return (LTRV)
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x06))
                        {
                            If (LEqual (PIXX, One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x08))
                        {
                            If (LEqual (PIXX, 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If (LEqual (DVID, 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If (LEqual (BCCX, 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If (LNotEqual (STD3, Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If (LOr (PAHC (), PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                {
                    Notify (PXSX, 0x02)
                    Store (One, PMSX)
                    Store (One, PSPX)
                }
            }
        }

        Scope (RP15)
        {
            Name (SLOT, 0x0F)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Store (LTRF, LTEN)
                Store (PMLF, LMSL)
                Store (PNLF, LNSL)
                If (And (HBSL, 0x08))
                {
                    Store (One, HBCS)
                }

                If (LAnd (CondRefOf (VMR2), CondRefOf (VMDE)))
                {
                    If (LAnd (LEqual (VMDE, One), LNotEqual (And (VMR2, 0x40), Zero)))
                    {
                        Store (One, PRMV)
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP15))
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP15.PRMV))
                            {
                                If (LEqual (PRMV, One))
                                {
                                    Store (STD3, RD3C)
                                }
                            }

                            If (LOr (^PXSX.PNVM (), ^PXSX.PAHC ()))
                            {
                                Store (STD3, RD3C)
                            }
                        }
                    }
                }
            }

            Store (GSIP (), SIPV)
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If (LLess (SIPV, 0x10))
                {
                    If (LNotEqual (NCB7, One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf (LNotEqual (SCB0, One))
                {
                    Return (Zero)
                }

                Store (One, L23R)
                Store (Zero, Local0)
                While (L23R)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (Zero, NCB7)
                }
                Else
                {
                    Store (Zero, SCB0)
                }

                Store (Zero, Local0)
                While (LEqual (LASX, Zero))
                {
                    If (LGreater (Local0, 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }
                
                Return (Zero)
            }

            Method (DL23, 0, Serialized)
            {
                Store (One, L23E)
                Sleep (0x10)
                Store (Zero, Local0)
                While (L23E)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (One, NCB7)
                }
                Else
                {
                    Store (One, SCB0)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If (LEqual (VDID, 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                     
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (One, FUN0)
                                If (LNotEqual (LTEN, Zero))
                                {
                                    Store (One, FUN6)
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }
                            }

                            If (LGreaterEqual (Arg1, 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Store (One, FUNA)
                                }

                                If (CondRefOf (UPRD))
                                {
                                    Store (One, FUNB)
                                }
                            }

                            Return (OPTS)
                        }
                        Case (0x06)
                        {
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, Zero))
                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 0x02))
                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                Return (LTRV)
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x06))
                        {
                            If (LEqual (PIXX, One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x08))
                        {
                            If (LEqual (PIXX, 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If (LEqual (DVID, 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If (LEqual (BCCX, 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If (LNotEqual (STD3, Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If (LOr (PAHC (), PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                {
                    Notify (PXSX, 0x02)
                    Store (One, PMSX)
                    Store (One, PSPX)
                }
            }
        }

        Scope (RP16)
        {
            Name (SLOT, 0x10)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Store (LTRG, LTEN)
                Store (PMLG, LMSL)
                Store (PNLG, LNSL)
                If (And (HBSL, 0x08))
                {
                    Store (One, HBCS)
                }

                If (LAnd (CondRefOf (VMR2), CondRefOf (VMDE)))
                {
                    If (LAnd (LEqual (VMDE, One), LNotEqual (And (VMR2, 0x80), Zero)))
                    {
                        Store (One, PRMV)
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP16))
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP16.PRMV))
                            {
                                If (LEqual (PRMV, One))
                                {
                                    Store (STD3, RD3C)
                                }
                            }

                            If (LOr (^PXSX.PNVM (), ^PXSX.PAHC ()))
                            {
                                Store (STD3, RD3C)
                            }
                        }
                    }
                }
            }

            Store (GSIP (), SIPV)
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If (LLess (SIPV, 0x10))
                {
                    If (LNotEqual (NCB7, One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf (LNotEqual (SCB0, One))
                {
                    Return (Zero)
                }

                Store (One, L23R)
                Store (Zero, Local0)
                While (L23R)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (Zero, NCB7)
                }
                Else
                {
                    Store (Zero, SCB0)
                }

                Store (Zero, Local0)
                While (LEqual (LASX, Zero))
                {
                    If (LGreater (Local0, 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }
                
                Return (Zero)
            }

            Method (DL23, 0, Serialized)
            {
                Store (One, L23E)
                Sleep (0x10)
                Store (Zero, Local0)
                While (L23E)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (One, NCB7)
                }
                Else
                {
                    Store (One, SCB0)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If (LEqual (VDID, 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                     
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (One, FUN0)
                                If (LNotEqual (LTEN, Zero))
                                {
                                    Store (One, FUN6)
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }
                            }

                            If (LGreaterEqual (Arg1, 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Store (One, FUNA)
                                }

                                If (CondRefOf (UPRD))
                                {
                                    Store (One, FUNB)
                                }
                            }

                            Return (OPTS)
                        }
                        Case (0x06)
                        {
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, Zero))
                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 0x02))
                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                Return (LTRV)
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x06))
                        {
                            If (LEqual (PIXX, One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x08))
                        {
                            If (LEqual (PIXX, 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If (LEqual (DVID, 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If (LEqual (BCCX, 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If (LNotEqual (STD3, Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If (LOr (PAHC (), PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                {
                    Notify (PXSX, 0x02)
                    Store (One, PMSX)
                    Store (One, PSPX)
                }
            }
        }

        Scope (RP17)
        {
            Name (SLOT, 0x11)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Store (LTRH, LTEN)
                Store (PMLH, LMSL)
                Store (PNLH, LNSL)
                If (And (HBSL, 0x10))
                {
                    Store (One, HBCS)
                }

                If (LAnd (CondRefOf (VMR3), CondRefOf (VMDE)))
                {
                    If (LAnd (LEqual (VMDE, One), LNotEqual (And (VMR3, One), Zero)))
                    {
                        Store (One, PRMV)
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP17))
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP17.PRMV))
                            {
                                If (LEqual (PRMV, One))
                                {
                                    Store (STD3, RD3C)
                                }
                            }

                            If (LOr (^PXSX.PNVM (), ^PXSX.PAHC ()))
                            {
                                Store (STD3, RD3C)
                            }
                        }
                    }
                }
            }

            Store (GSIP (), SIPV)
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If (LLess (SIPV, 0x10))
                {
                    If (LNotEqual (NCB7, One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf (LNotEqual (SCB0, One))
                {
                    Return (Zero)
                }

                Store (One, L23R)
                Store (Zero, Local0)
                While (L23R)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (Zero, NCB7)
                }
                Else
                {
                    Store (Zero, SCB0)
                }

                Store (Zero, Local0)
                While (LEqual (LASX, Zero))
                {
                    If (LGreater (Local0, 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }
                
                Return (Zero)
            }

            Method (DL23, 0, Serialized)
            {
                Store (One, L23E)
                Sleep (0x10)
                Store (Zero, Local0)
                While (L23E)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (One, NCB7)
                }
                Else
                {
                    Store (One, SCB0)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If (LEqual (VDID, 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                     
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (One, FUN0)
                                If (LNotEqual (LTEN, Zero))
                                {
                                    Store (One, FUN6)
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }
                            }

                            If (LGreaterEqual (Arg1, 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Store (One, FUNA)
                                }

                                If (CondRefOf (UPRD))
                                {
                                    Store (One, FUNB)
                                }
                            }

                            Return (OPTS)
                        }
                        Case (0x06)
                        {
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, Zero))
                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 0x02))
                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                Return (LTRV)
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x06))
                        {
                            If (LEqual (PIXX, One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x08))
                        {
                            If (LEqual (PIXX, 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If (LEqual (DVID, 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If (LEqual (BCCX, 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If (LNotEqual (STD3, Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If (LOr (PAHC (), PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                {
                    Notify (PXSX, 0x02)
                    Store (One, PMSX)
                    Store (One, PSPX)
                }
            }
        }

        Scope (RP18)
        {
            Name (SLOT, 0x12)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Store (LTRI, LTEN)
                Store (PMLI, LMSL)
                Store (PNLI, LNSL)
                If (And (HBSL, 0x10))
                {
                    Store (One, HBCS)
                }

                If (LAnd (CondRefOf (VMR3), CondRefOf (VMDE)))
                {
                    If (LAnd (LEqual (VMDE, One), LNotEqual (And (VMR3, 0x02), Zero)))
                    {
                        Store (One, PRMV)
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP18))
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP18.PRMV))
                            {
                                If (LEqual (PRMV, One))
                                {
                                    Store (STD3, RD3C)
                                }
                            }

                            If (LOr (^PXSX.PNVM (), ^PXSX.PAHC ()))
                            {
                                Store (STD3, RD3C)
                            }
                        }
                    }
                }
            }

            Store (GSIP (), SIPV)
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If (LLess (SIPV, 0x10))
                {
                    If (LNotEqual (NCB7, One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf (LNotEqual (SCB0, One))
                {
                    Return (Zero)
                }

                Store (One, L23R)
                Store (Zero, Local0)
                While (L23R)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (Zero, NCB7)
                }
                Else
                {
                    Store (Zero, SCB0)
                }

                Store (Zero, Local0)
                While (LEqual (LASX, Zero))
                {
                    If (LGreater (Local0, 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }
                
                Return (Zero)
            }

            Method (DL23, 0, Serialized)
            {
                Store (One, L23E)
                Sleep (0x10)
                Store (Zero, Local0)
                While (L23E)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (One, NCB7)
                }
                Else
                {
                    Store (One, SCB0)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If (LEqual (VDID, 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                     
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (One, FUN0)
                                If (LNotEqual (LTEN, Zero))
                                {
                                    Store (One, FUN6)
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }
                            }

                            If (LGreaterEqual (Arg1, 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Store (One, FUNA)
                                }

                                If (CondRefOf (UPRD))
                                {
                                    Store (One, FUNB)
                                }
                            }

                            Return (OPTS)
                        }
                        Case (0x06)
                        {
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, Zero))
                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 0x02))
                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                Return (LTRV)
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x06))
                        {
                            If (LEqual (PIXX, One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x08))
                        {
                            If (LEqual (PIXX, 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If (LEqual (DVID, 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If (LEqual (BCCX, 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If (LNotEqual (STD3, Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If (LOr (PAHC (), PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                {
                    Notify (PXSX, 0x02)
                    Store (One, PMSX)
                    Store (One, PSPX)
                }
            }
        }

        Scope (RP19)
        {
            Name (SLOT, 0x13)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Store (LTRJ, LTEN)
                Store (PMLJ, LMSL)
                Store (PNLJ, LNSL)
                If (And (HBSL, 0x10))
                {
                    Store (One, HBCS)
                }

                If (LAnd (CondRefOf (VMR3), CondRefOf (VMDE)))
                {
                    If (LAnd (LEqual (VMDE, One), LNotEqual (And (VMR3, 0x04), Zero)))
                    {
                        Store (One, PRMV)
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP19))
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP19.PRMV))
                            {
                                If (LEqual (PRMV, One))
                                {
                                    Store (STD3, RD3C)
                                }
                            }

                            If (LOr (^PXSX.PNVM (), ^PXSX.PAHC ()))
                            {
                                Store (STD3, RD3C)
                            }
                        }
                    }
                }
            }

            Store (GSIP (), SIPV)
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If (LLess (SIPV, 0x10))
                {
                    If (LNotEqual (NCB7, One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf (LNotEqual (SCB0, One))
                {
                    Return (Zero)
                }

                Store (One, L23R)
                Store (Zero, Local0)
                While (L23R)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (Zero, NCB7)
                }
                Else
                {
                    Store (Zero, SCB0)
                }

                Store (Zero, Local0)
                While (LEqual (LASX, Zero))
                {
                    If (LGreater (Local0, 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }
                
                Return (Zero)
            }

            Method (DL23, 0, Serialized)
            {
                Store (One, L23E)
                Sleep (0x10)
                Store (Zero, Local0)
                While (L23E)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (One, NCB7)
                }
                Else
                {
                    Store (One, SCB0)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If (LEqual (VDID, 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                     
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (One, FUN0)
                                If (LNotEqual (LTEN, Zero))
                                {
                                    Store (One, FUN6)
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }
                            }

                            If (LGreaterEqual (Arg1, 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Store (One, FUNA)
                                }

                                If (CondRefOf (UPRD))
                                {
                                    Store (One, FUNB)
                                }
                            }

                            Return (OPTS)
                        }
                        Case (0x06)
                        {
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, Zero))
                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 0x02))
                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                Return (LTRV)
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x06))
                        {
                            If (LEqual (PIXX, One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x08))
                        {
                            If (LEqual (PIXX, 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If (LEqual (DVID, 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If (LEqual (BCCX, 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If (LNotEqual (STD3, Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If (LOr (PAHC (), PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                {
                    Notify (PXSX, 0x02)
                    Store (One, PMSX)
                    Store (One, PSPX)
                }
            }
        }

        Scope (RP20)
        {
            Name (SLOT, 0x14)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Store (LTRK, LTEN)
                Store (PMLK, LMSL)
                Store (PNLK, LNSL)
                If (And (HBSL, 0x10))
                {
                    Store (One, HBCS)
                }

                If (LAnd (CondRefOf (VMR3), CondRefOf (VMDE)))
                {
                    If (LAnd (LEqual (VMDE, One), LNotEqual (And (VMR3, 0x08), Zero)))
                    {
                        Store (One, PRMV)
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP20))
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP20.PRMV))
                            {
                                If (LEqual (PRMV, One))
                                {
                                    Store (STD3, RD3C)
                                }
                            }

                            If (LOr (^PXSX.PNVM (), ^PXSX.PAHC ()))
                            {
                                Store (STD3, RD3C)
                            }
                        }
                    }
                }
            }

            Store (GSIP (), SIPV)
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If (LLess (SIPV, 0x10))
                {
                    If (LNotEqual (NCB7, One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf (LNotEqual (SCB0, One))
                {
                    Return (Zero)
                }

                Store (One, L23R)
                Store (Zero, Local0)
                While (L23R)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (Zero, NCB7)
                }
                Else
                {
                    Store (Zero, SCB0)
                }

                Store (Zero, Local0)
                While (LEqual (LASX, Zero))
                {
                    If (LGreater (Local0, 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }
                
                Return (Zero)
            }

            Method (DL23, 0, Serialized)
            {
                Store (One, L23E)
                Sleep (0x10)
                Store (Zero, Local0)
                While (L23E)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (One, NCB7)
                }
                Else
                {
                    Store (One, SCB0)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If (LEqual (VDID, 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                     
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (One, FUN0)
                                If (LNotEqual (LTEN, Zero))
                                {
                                    Store (One, FUN6)
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }
                            }

                            If (LGreaterEqual (Arg1, 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Store (One, FUNA)
                                }

                                If (CondRefOf (UPRD))
                                {
                                    Store (One, FUNB)
                                }
                            }

                            Return (OPTS)
                        }
                        Case (0x06)
                        {
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, Zero))
                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 0x02))
                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                Return (LTRV)
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x06))
                        {
                            If (LEqual (PIXX, One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x08))
                        {
                            If (LEqual (PIXX, 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If (LEqual (DVID, 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If (LEqual (BCCX, 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If (LNotEqual (STD3, Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If (LOr (PAHC (), PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                {
                    Notify (PXSX, 0x02)
                    Store (One, PMSX)
                    Store (One, PSPX)
                }
            }
        }

        Scope (RP21)
        {
            Name (SLOT, 0x15)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Store (LTRL, LTEN)
                Store (PMLL, LMSL)
                Store (PNLL, LNSL)
                If (And (HBSL, 0x20))
                {
                    Store (One, HBCS)
                }

                If (LAnd (CondRefOf (VMR3), CondRefOf (VMDE)))
                {
                    If (LAnd (LEqual (VMDE, One), LNotEqual (And (VMR3, 0x10), Zero)))
                    {
                        Store (One, PRMV)
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP21))
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP21.PRMV))
                            {
                                If (LEqual (PRMV, One))
                                {
                                    Store (STD3, RD3C)
                                }
                            }

                            If (LOr (^PXSX.PNVM (), ^PXSX.PAHC ()))
                            {
                                Store (STD3, RD3C)
                            }
                        }
                    }
                }
            }

            Store (GSIP (), SIPV)
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If (LLess (SIPV, 0x10))
                {
                    If (LNotEqual (NCB7, One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf (LNotEqual (SCB0, One))
                {
                    Return (Zero)
                }

                Store (One, L23R)
                Store (Zero, Local0)
                While (L23R)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (Zero, NCB7)
                }
                Else
                {
                    Store (Zero, SCB0)
                }

                Store (Zero, Local0)
                While (LEqual (LASX, Zero))
                {
                    If (LGreater (Local0, 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }
                
                Return (Zero)
            }

            Method (DL23, 0, Serialized)
            {
                Store (One, L23E)
                Sleep (0x10)
                Store (Zero, Local0)
                While (L23E)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (One, NCB7)
                }
                Else
                {
                    Store (One, SCB0)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If (LEqual (VDID, 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                     
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (One, FUN0)
                                If (LNotEqual (LTEN, Zero))
                                {
                                    Store (One, FUN6)
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }
                            }

                            If (LGreaterEqual (Arg1, 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Store (One, FUNA)
                                }

                                If (CondRefOf (UPRD))
                                {
                                    Store (One, FUNB)
                                }
                            }

                            Return (OPTS)
                        }
                        Case (0x06)
                        {
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, Zero))
                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 0x02))
                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                Return (LTRV)
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x06))
                        {
                            If (LEqual (PIXX, One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x08))
                        {
                            If (LEqual (PIXX, 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If (LEqual (DVID, 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If (LEqual (BCCX, 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If (LNotEqual (STD3, Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If (LOr (PAHC (), PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                {
                    Notify (PXSX, 0x02)
                    Store (One, PMSX)
                    Store (One, PSPX)
                }
            }
        }

        Scope (RP22)
        {
            Name (SLOT, 0x16)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Store (LTRM, LTEN)
                Store (PMLM, LMSL)
                Store (PNLM, LNSL)
                If (And (HBSL, 0x20))
                {
                    Store (One, HBCS)
                }

                If (LAnd (CondRefOf (VMR3), CondRefOf (VMDE)))
                {
                    If (LAnd (LEqual (VMDE, One), LNotEqual (And (VMR3, 0x20), Zero)))
                    {
                        Store (One, PRMV)
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP22))
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP22.PRMV))
                            {
                                If (LEqual (PRMV, One))
                                {
                                    Store (STD3, RD3C)
                                }
                            }

                            If (LOr (^PXSX.PNVM (), ^PXSX.PAHC ()))
                            {
                                Store (STD3, RD3C)
                            }
                        }
                    }
                }
            }

            Store (GSIP (), SIPV)
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If (LLess (SIPV, 0x10))
                {
                    If (LNotEqual (NCB7, One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf (LNotEqual (SCB0, One))
                {
                    Return (Zero)
                }

                Store (One, L23R)
                Store (Zero, Local0)
                While (L23R)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (Zero, NCB7)
                }
                Else
                {
                    Store (Zero, SCB0)
                }

                Store (Zero, Local0)
                While (LEqual (LASX, Zero))
                {
                    If (LGreater (Local0, 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }
                
                Return (Zero)
            }

            Method (DL23, 0, Serialized)
            {
                Store (One, L23E)
                Sleep (0x10)
                Store (Zero, Local0)
                While (L23E)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (One, NCB7)
                }
                Else
                {
                    Store (One, SCB0)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If (LEqual (VDID, 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                     
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (One, FUN0)
                                If (LNotEqual (LTEN, Zero))
                                {
                                    Store (One, FUN6)
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }
                            }

                            If (LGreaterEqual (Arg1, 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Store (One, FUNA)
                                }

                                If (CondRefOf (UPRD))
                                {
                                    Store (One, FUNB)
                                }
                            }

                            Return (OPTS)
                        }
                        Case (0x06)
                        {
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, Zero))
                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 0x02))
                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                Return (LTRV)
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x06))
                        {
                            If (LEqual (PIXX, One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x08))
                        {
                            If (LEqual (PIXX, 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If (LEqual (DVID, 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If (LEqual (BCCX, 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If (LNotEqual (STD3, Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If (LOr (PAHC (), PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                {
                    Notify (PXSX, 0x02)
                    Store (One, PMSX)
                    Store (One, PSPX)
                }
            }
        }

        Scope (RP23)
        {
            Name (SLOT, 0x17)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Store (LTRN, LTEN)
                Store (PMLN, LMSL)
                Store (PNLN, LNSL)
                If (And (HBSL, 0x20))
                {
                    Store (One, HBCS)
                }

                If (LAnd (CondRefOf (VMR3), CondRefOf (VMDE)))
                {
                    If (LAnd (LEqual (VMDE, One), LNotEqual (And (VMR3, 0x40), Zero)))
                    {
                        Store (One, PRMV)
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP23))
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP23.PRMV))
                            {
                                If (LEqual (PRMV, One))
                                {
                                    Store (STD3, RD3C)
                                }
                            }

                            If (LOr (^PXSX.PNVM (), ^PXSX.PAHC ()))
                            {
                                Store (STD3, RD3C)
                            }
                        }
                    }
                }
            }

            Store (GSIP (), SIPV)
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If (LLess (SIPV, 0x10))
                {
                    If (LNotEqual (NCB7, One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf (LNotEqual (SCB0, One))
                {
                    Return (Zero)
                }

                Store (One, L23R)
                Store (Zero, Local0)
                While (L23R)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (Zero, NCB7)
                }
                Else
                {
                    Store (Zero, SCB0)
                }

                Store (Zero, Local0)
                While (LEqual (LASX, Zero))
                {
                    If (LGreater (Local0, 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }
                
                Return (Zero)
            }

            Method (DL23, 0, Serialized)
            {
                Store (One, L23E)
                Sleep (0x10)
                Store (Zero, Local0)
                While (L23E)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (One, NCB7)
                }
                Else
                {
                    Store (One, SCB0)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If (LEqual (VDID, 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                     
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (One, FUN0)
                                If (LNotEqual (LTEN, Zero))
                                {
                                    Store (One, FUN6)
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }
                            }

                            If (LGreaterEqual (Arg1, 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Store (One, FUNA)
                                }

                                If (CondRefOf (UPRD))
                                {
                                    Store (One, FUNB)
                                }
                            }

                            Return (OPTS)
                        }
                        Case (0x06)
                        {
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, Zero))
                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 0x02))
                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                Return (LTRV)
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x06))
                        {
                            If (LEqual (PIXX, One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x08))
                        {
                            If (LEqual (PIXX, 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If (LEqual (DVID, 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If (LEqual (BCCX, 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If (LNotEqual (STD3, Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If (LOr (PAHC (), PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                {
                    Notify (PXSX, 0x02)
                    Store (One, PMSX)
                    Store (One, PSPX)
                }
            }
        }

        Scope (RP24)
        {
            Name (SLOT, 0x18)
            Name (LTEN, Zero)
            Name (LMSL, Zero)
            Name (LNSL, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Store (LTRO, LTEN)
                Store (PMLO, LMSL)
                Store (PNLO, LNSL)
                If (And (HBSL, 0x20))
                {
                    Store (One, HBCS)
                }

                If (LAnd (CondRefOf (VMR3), CondRefOf (VMDE)))
                {
                    If (LAnd (LEqual (VMDE, One), LNotEqual (And (VMR3, 0x80), Zero)))
                    {
                        Store (One, PRMV)
                    }
                }

                If (PRES ())
                {
                    If (CondRefOf (PINI))
                    {
                        PINI ()
                    }
                }

                If (CondRefOf (\_SB.PC00.RP24))
                {
                    If (LNotEqual (VDID, 0xFFFFFFFF))
                    {
                        If (CondRefOf (\STD3))
                        {
                            If (CondRefOf (\_SB.PC00.RP24.PRMV))
                            {
                                If (LEqual (PRMV, One))
                                {
                                    Store (STD3, RD3C)
                                }
                            }

                            If (LOr (^PXSX.PNVM (), ^PXSX.PAHC ()))
                            {
                                Store (STD3, RD3C)
                            }
                        }
                    }
                }
            }

            Store (GSIP (), SIPV)
            Name (PRTP, 0x02)
            OperationRegion (PXCS, SystemMemory, PC2M (_ADR), 0x0480)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE0), 
                SCB0,   1, 
                    ,   6, 
                NCB7,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x328), 
                    ,   19, 
                LNKS,   4
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (L23D, 0, Serialized)
            {
                If (LLess (SIPV, 0x10))
                {
                    If (LNotEqual (NCB7, One))
                    {
                        Return (Zero)
                    }
                }
                ElseIf (LNotEqual (SCB0, One))
                {
                    Return (Zero)
                }

                Store (One, L23R)
                Store (Zero, Local0)
                While (L23R)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (Zero, NCB7)
                }
                Else
                {
                    Store (Zero, SCB0)
                }

                Store (Zero, Local0)
                While (LEqual (LASX, Zero))
                {
                    If (LGreater (Local0, 0x08))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }
                
                Return (Zero)
            }

            Method (DL23, 0, Serialized)
            {
                Store (One, L23E)
                Sleep (0x10)
                Store (Zero, Local0)
                While (L23E)
                {
                    If (LGreater (Local0, 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Increment (Local0)
                }

                If (LLess (SIPV, 0x10))
                {
                    Store (One, NCB7)
                }
                Else
                {
                    Store (One, SCB0)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HBCS, Zero)
            Name (PRMV, Zero)
            Name (RD3C, 0x02)
            Method (PRES, 0, NotSerialized)
            {
                If (LEqual (VDID, 0xFFFFFFFF))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (OPTS, Buffer (0x02)
                            {
                                 0x00, 0x00                                     
                            })
                            CreateBitField (OPTS, Zero, FUN0)
                            CreateBitField (OPTS, 0x06, FUN6)
                            CreateBitField (OPTS, 0x08, FUN8)
                            CreateBitField (OPTS, 0x09, FUN9)
                            CreateBitField (OPTS, 0x0A, FUNA)
                            CreateBitField (OPTS, 0x0B, FUNB)
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (One, FUN0)
                                If (LNotEqual (LTEN, Zero))
                                {
                                    Store (One, FUN6)
                                }

                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Store (One, FUN8)
                                            Store (One, FUN9)
                                        }
                                    }
                                }
                            }

                            If (LGreaterEqual (Arg1, 0x04))
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Store (One, FUNA)
                                }

                                If (CondRefOf (UPRD))
                                {
                                    Store (One, FUNB)
                                }
                            }

                            Return (OPTS)
                        }
                        Case (0x06)
                        {
                            If (LGreaterEqual (Arg1, 0x02))
                            {
                                Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, Zero))
                                Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 0x02))
                                Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                Return (LTRV)
                            }
                        }
                        Case (0x08)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (One)
                                    }
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If (CondRefOf (ECR1))
                            {
                                If (LEqual (ECR1, One))
                                {
                                    If (LGreaterEqual (Arg1, 0x03))
                                    {
                                        Return (Package (0x05)
                                        {
                                            0xC350, 
                                            Ones, 
                                            Ones, 
                                            0xC350, 
                                            Ones
                                        })
                                    }
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (CondRefOf (PPBA))
                            {
                                Return (PPBA (Arg3))
                            }
                        }
                        Case (0x0B)
                        {
                            If (CondRefOf (UPRD))
                            {
                                Return (UPRD (Arg3))
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                Field (PCCX, ByteAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x09), 
                    PIXX,   8, 
                    SCCX,   8, 
                    BCCX,   8
                }

                Method (PAHC, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x06))
                        {
                            If (LEqual (PIXX, One))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PNVM, 0, Serialized)
                {
                    If (LEqual (BCCX, One))
                    {
                        If (LEqual (SCCX, 0x08))
                        {
                            If (LEqual (PIXX, 0x02))
                            {
                                Return (One)
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (PRES, 0, Serialized)
                {
                    If (LEqual (DVID, 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (ISGX, 0, Serialized)
                {
                    If (LEqual (BCCX, 0x03))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                If (CondRefOf (\STD3))
                {
                    If (LNotEqual (STD3, Zero))
                    {
                        Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                        {
                            If (LOr (PAHC (), PNVM ()))
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            One
                                        }
                                    }
                                })
                            }
                            Else
                            {
                                Return (Package (0x02)
                                {
                                    ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                    Package (0x01)
                                    {
                                        Package (0x02)
                                        {
                                            "StorageD3Enable", 
                                            Zero
                                        }
                                    }
                                })
                            }
                        }
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (XPRW (0x69, 0x04))
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (CondRefOf (PPS0))
                {
                    PPS0 ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (CondRefOf (PPS3))
                {
                    PPS3 ()
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                {
                    Notify (PXSX, 0x02)
                    Store (One, PMSX)
                    Store (One, PSPX)
                }
            }
        }

        If (LEqual (PCHS, 0x04))
        {
            Scope (RP25)
            {
                Name (SLOT, 0x19)
                Name (LTEN, Zero)
                Name (LMSL, Zero)
                Name (LNSL, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (LTRP, LTEN)
                    Store (PMLP, LMSL)
                    Store (PNLP, LNSL)
                    If (And (HBSL, 0x40))
                    {
                        Store (One, HBCS)
                    }

                    If (LAnd (CondRefOf (VMR4), CondRefOf (VMDE)))
                    {
                        If (LAnd (LEqual (VMDE, One), LNotEqual (And (VMR4, One), Zero)))
                        {
                            Store (One, PRMV)
                        }
                    }

                    If (PRES ())
                    {
                        If (CondRefOf (PINI))
                        {
                            PINI ()
                        }
                    }

                    If (CondRefOf (\_SB.PC00.RP25))
                    {
                        If (LNotEqual (VDID, 0xFFFFFFFF))
                        {
                            If (CondRefOf (\STD3))
                            {
                                If (CondRefOf (\_SB.PC00.RP25.PRMV))
                                {
                                    If (LEqual (PRMV, One))
                                    {
                                        Store (STD3, RD3C)
                                    }
                                }

                                If (LOr (^PXSX.PNVM (), ^PXSX.PAHC ()))
                                {
                                    Store (STD3, RD3C)
                                }
                            }
                        }
                    }
                }

                Store (GSIP (), SIPV)
                Name (PRTP, 0x02)
                OperationRegion (PXCS, SystemMemory, PC2M (_ADR), 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                    SCB0,   1, 
                        ,   6, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x328), 
                        ,   19, 
                    LNKS,   4
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If (LLess (SIPV, 0x10))
                    {
                        If (LNotEqual (NCB7, One))
                        {
                            Return (Zero)
                        }
                    }
                    ElseIf (LNotEqual (SCB0, One))
                    {
                        Return (Zero)
                    }

                    Store (One, L23R)
                    Store (Zero, Local0)
                    While (L23R)
                    {
                        If (LGreater (Local0, 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Increment (Local0)
                    }

                    If (LLess (SIPV, 0x10))
                    {
                        Store (Zero, NCB7)
                    }
                    Else
                    {
                        Store (Zero, SCB0)
                    }

                    Store (Zero, Local0)
                    While (LEqual (LASX, Zero))
                    {
                        If (LGreater (Local0, 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Increment (Local0)
                    }
                    
                    Return (Zero)
                }

                Method (DL23, 0, Serialized)
                {
                    Store (One, L23E)
                    Sleep (0x10)
                    Store (Zero, Local0)
                    While (L23E)
                    {
                        If (LGreater (Local0, 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Increment (Local0)
                    }

                    If (LLess (SIPV, 0x10))
                    {
                        Store (One, NCB7)
                    }
                    Else
                    {
                        Store (One, SCB0)
                    }
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (HBCS, Zero)
                Name (PRMV, Zero)
                Name (RD3C, 0x02)
                Method (PRES, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                     
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                CreateBitField (OPTS, 0x0A, FUNA)
                                CreateBitField (OPTS, 0x0B, FUNB)
                                If (LGreaterEqual (Arg1, 0x02))
                                {
                                    Store (One, FUN0)
                                    If (LNotEqual (LTEN, Zero))
                                    {
                                        Store (One, FUN6)
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If (LEqual (ECR1, One))
                                        {
                                            If (LGreaterEqual (Arg1, 0x03))
                                            {
                                                Store (One, FUN8)
                                                Store (One, FUN9)
                                            }
                                        }
                                    }
                                }

                                If (LGreaterEqual (Arg1, 0x04))
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        Store (One, FUNA)
                                    }

                                    If (CondRefOf (UPRD))
                                    {
                                        Store (One, FUNB)
                                    }
                                }

                                Return (OPTS)
                            }
                            Case (0x06)
                            {
                                If (LGreaterEqual (Arg1, 0x02))
                                {
                                    Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, Zero))
                                    Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                    Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 0x02))
                                    Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                    Return (LTRV)
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }
                            Case (0x0A)
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Return (PPBA (Arg3))
                                }
                            }
                            Case (0x0B)
                            {
                                If (CondRefOf (UPRD))
                                {
                                    Return (UPRD (Arg3))
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                    Field (PCCX, ByteAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x09), 
                        PIXX,   8, 
                        SCCX,   8, 
                        BCCX,   8
                    }

                    Method (PAHC, 0, Serialized)
                    {
                        If (LEqual (BCCX, One))
                        {
                            If (LEqual (SCCX, 0x06))
                            {
                                If (LEqual (PIXX, One))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PNVM, 0, Serialized)
                    {
                        If (LEqual (BCCX, One))
                        {
                            If (LEqual (SCCX, 0x08))
                            {
                                If (LEqual (PIXX, 0x02))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PRES, 0, Serialized)
                    {
                        If (LEqual (DVID, 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (ISGX, 0, Serialized)
                    {
                        If (LEqual (BCCX, 0x03))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    If (CondRefOf (\STD3))
                    {
                        If (LNotEqual (STD3, Zero))
                        {
                            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                            {
                                If (LOr (PAHC (), PNVM ()))
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                One
                                            }
                                        }
                                    })
                                }
                                Else
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                Zero
                                            }
                                        }
                                    })
                                }
                            }
                        }
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (XPRW (0x69, 0x04))
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If (CondRefOf (PPS0))
                    {
                        PPS0 ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If (CondRefOf (PPS3))
                    {
                        PPS3 ()
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                    {
                        Notify (PXSX, 0x02)
                        Store (One, PMSX)
                        Store (One, PSPX)
                    }
                }
            }

            Scope (RP26)
            {
                Name (SLOT, 0x1A)
                Name (LTEN, Zero)
                Name (LMSL, Zero)
                Name (LNSL, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (LTRQ, LTEN)
                    Store (PMLQ, LMSL)
                    Store (PNLQ, LNSL)
                    If (And (HBSL, 0x40))
                    {
                        Store (One, HBCS)
                    }

                    If (LAnd (CondRefOf (VMR4), CondRefOf (VMDE)))
                    {
                        If (LAnd (LEqual (VMDE, One), LNotEqual (And (VMR4, 0x02), Zero)))
                        {
                            Store (One, PRMV)
                        }
                    }

                    If (PRES ())
                    {
                        If (CondRefOf (PINI))
                        {
                            PINI ()
                        }
                    }

                    If (CondRefOf (\_SB.PC00.RP26))
                    {
                        If (LNotEqual (VDID, 0xFFFFFFFF))
                        {
                            If (CondRefOf (\STD3))
                            {
                                If (CondRefOf (\_SB.PC00.RP26.PRMV))
                                {
                                    If (LEqual (PRMV, One))
                                    {
                                        Store (STD3, RD3C)
                                    }
                                }

                                If (LOr (^PXSX.PNVM (), ^PXSX.PAHC ()))
                                {
                                    Store (STD3, RD3C)
                                }
                            }
                        }
                    }
                }

                Store (GSIP (), SIPV)
                Name (PRTP, 0x02)
                OperationRegion (PXCS, SystemMemory, PC2M (_ADR), 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                    SCB0,   1, 
                        ,   6, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x328), 
                        ,   19, 
                    LNKS,   4
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If (LLess (SIPV, 0x10))
                    {
                        If (LNotEqual (NCB7, One))
                        {
                            Return (Zero)
                        }
                    }
                    ElseIf (LNotEqual (SCB0, One))
                    {
                        Return (Zero)
                    }

                    Store (One, L23R)
                    Store (Zero, Local0)
                    While (L23R)
                    {
                        If (LGreater (Local0, 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Increment (Local0)
                    }

                    If (LLess (SIPV, 0x10))
                    {
                        Store (Zero, NCB7)
                    }
                    Else
                    {
                        Store (Zero, SCB0)
                    }

                    Store (Zero, Local0)
                    While (LEqual (LASX, Zero))
                    {
                        If (LGreater (Local0, 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Increment (Local0)
                    }
                    
                    Return (Zero)
                }

                Method (DL23, 0, Serialized)
                {
                    Store (One, L23E)
                    Sleep (0x10)
                    Store (Zero, Local0)
                    While (L23E)
                    {
                        If (LGreater (Local0, 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Increment (Local0)
                    }

                    If (LLess (SIPV, 0x10))
                    {
                        Store (One, NCB7)
                    }
                    Else
                    {
                        Store (One, SCB0)
                    }
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (HBCS, Zero)
                Name (PRMV, Zero)
                Name (RD3C, 0x02)
                Method (PRES, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                     
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                CreateBitField (OPTS, 0x0A, FUNA)
                                CreateBitField (OPTS, 0x0B, FUNB)
                                If (LGreaterEqual (Arg1, 0x02))
                                {
                                    Store (One, FUN0)
                                    If (LNotEqual (LTEN, Zero))
                                    {
                                        Store (One, FUN6)
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If (LEqual (ECR1, One))
                                        {
                                            If (LGreaterEqual (Arg1, 0x03))
                                            {
                                                Store (One, FUN8)
                                                Store (One, FUN9)
                                            }
                                        }
                                    }
                                }

                                If (LGreaterEqual (Arg1, 0x04))
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        Store (One, FUNA)
                                    }

                                    If (CondRefOf (UPRD))
                                    {
                                        Store (One, FUNB)
                                    }
                                }

                                Return (OPTS)
                            }
                            Case (0x06)
                            {
                                If (LGreaterEqual (Arg1, 0x02))
                                {
                                    Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, Zero))
                                    Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                    Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 0x02))
                                    Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                    Return (LTRV)
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }
                            Case (0x0A)
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Return (PPBA (Arg3))
                                }
                            }
                            Case (0x0B)
                            {
                                If (CondRefOf (UPRD))
                                {
                                    Return (UPRD (Arg3))
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                    Field (PCCX, ByteAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x09), 
                        PIXX,   8, 
                        SCCX,   8, 
                        BCCX,   8
                    }

                    Method (PAHC, 0, Serialized)
                    {
                        If (LEqual (BCCX, One))
                        {
                            If (LEqual (SCCX, 0x06))
                            {
                                If (LEqual (PIXX, One))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PNVM, 0, Serialized)
                    {
                        If (LEqual (BCCX, One))
                        {
                            If (LEqual (SCCX, 0x08))
                            {
                                If (LEqual (PIXX, 0x02))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PRES, 0, Serialized)
                    {
                        If (LEqual (DVID, 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (ISGX, 0, Serialized)
                    {
                        If (LEqual (BCCX, 0x03))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    If (CondRefOf (\STD3))
                    {
                        If (LNotEqual (STD3, Zero))
                        {
                            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                            {
                                If (LOr (PAHC (), PNVM ()))
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                One
                                            }
                                        }
                                    })
                                }
                                Else
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                Zero
                                            }
                                        }
                                    })
                                }
                            }
                        }
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (XPRW (0x69, 0x04))
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If (CondRefOf (PPS0))
                    {
                        PPS0 ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If (CondRefOf (PPS3))
                    {
                        PPS3 ()
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                    {
                        Notify (PXSX, 0x02)
                        Store (One, PMSX)
                        Store (One, PSPX)
                    }
                }
            }

            Scope (RP27)
            {
                Name (SLOT, 0x1B)
                Name (LTEN, Zero)
                Name (LMSL, Zero)
                Name (LNSL, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (LTRR, LTEN)
                    Store (PMLR, LMSL)
                    Store (PNLR, LNSL)
                    If (And (HBSL, 0x40))
                    {
                        Store (One, HBCS)
                    }

                    If (LAnd (CondRefOf (VMR4), CondRefOf (VMDE)))
                    {
                        If (LAnd (LEqual (VMDE, One), LNotEqual (And (VMR4, 0x04), Zero)))
                        {
                            Store (One, PRMV)
                        }
                    }

                    If (PRES ())
                    {
                        If (CondRefOf (PINI))
                        {
                            PINI ()
                        }
                    }

                    If (CondRefOf (\_SB.PC00.RP27))
                    {
                        If (LNotEqual (VDID, 0xFFFFFFFF))
                        {
                            If (CondRefOf (\STD3))
                            {
                                If (CondRefOf (\_SB.PC00.RP27.PRMV))
                                {
                                    If (LEqual (PRMV, One))
                                    {
                                        Store (STD3, RD3C)
                                    }
                                }

                                If (LOr (^PXSX.PNVM (), ^PXSX.PAHC ()))
                                {
                                    Store (STD3, RD3C)
                                }
                            }
                        }
                    }
                }

                Store (GSIP (), SIPV)
                Name (PRTP, 0x02)
                OperationRegion (PXCS, SystemMemory, PC2M (_ADR), 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                    SCB0,   1, 
                        ,   6, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x328), 
                        ,   19, 
                    LNKS,   4
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If (LLess (SIPV, 0x10))
                    {
                        If (LNotEqual (NCB7, One))
                        {
                            Return (Zero)
                        }
                    }
                    ElseIf (LNotEqual (SCB0, One))
                    {
                        Return (Zero)
                    }

                    Store (One, L23R)
                    Store (Zero, Local0)
                    While (L23R)
                    {
                        If (LGreater (Local0, 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Increment (Local0)
                    }

                    If (LLess (SIPV, 0x10))
                    {
                        Store (Zero, NCB7)
                    }
                    Else
                    {
                        Store (Zero, SCB0)
                    }

                    Store (Zero, Local0)
                    While (LEqual (LASX, Zero))
                    {
                        If (LGreater (Local0, 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Increment (Local0)
                    }
                    
                    Return (Zero)
                }

                Method (DL23, 0, Serialized)
                {
                    Store (One, L23E)
                    Sleep (0x10)
                    Store (Zero, Local0)
                    While (L23E)
                    {
                        If (LGreater (Local0, 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Increment (Local0)
                    }

                    If (LLess (SIPV, 0x10))
                    {
                        Store (One, NCB7)
                    }
                    Else
                    {
                        Store (One, SCB0)
                    }
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (HBCS, Zero)
                Name (PRMV, Zero)
                Name (RD3C, 0x02)
                Method (PRES, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                     
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                CreateBitField (OPTS, 0x0A, FUNA)
                                CreateBitField (OPTS, 0x0B, FUNB)
                                If (LGreaterEqual (Arg1, 0x02))
                                {
                                    Store (One, FUN0)
                                    If (LNotEqual (LTEN, Zero))
                                    {
                                        Store (One, FUN6)
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If (LEqual (ECR1, One))
                                        {
                                            If (LGreaterEqual (Arg1, 0x03))
                                            {
                                                Store (One, FUN8)
                                                Store (One, FUN9)
                                            }
                                        }
                                    }
                                }

                                If (LGreaterEqual (Arg1, 0x04))
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        Store (One, FUNA)
                                    }

                                    If (CondRefOf (UPRD))
                                    {
                                        Store (One, FUNB)
                                    }
                                }

                                Return (OPTS)
                            }
                            Case (0x06)
                            {
                                If (LGreaterEqual (Arg1, 0x02))
                                {
                                    Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, Zero))
                                    Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                    Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 0x02))
                                    Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                    Return (LTRV)
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }
                            Case (0x0A)
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Return (PPBA (Arg3))
                                }
                            }
                            Case (0x0B)
                            {
                                If (CondRefOf (UPRD))
                                {
                                    Return (UPRD (Arg3))
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                    Field (PCCX, ByteAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x09), 
                        PIXX,   8, 
                        SCCX,   8, 
                        BCCX,   8
                    }

                    Method (PAHC, 0, Serialized)
                    {
                        If (LEqual (BCCX, One))
                        {
                            If (LEqual (SCCX, 0x06))
                            {
                                If (LEqual (PIXX, One))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PNVM, 0, Serialized)
                    {
                        If (LEqual (BCCX, One))
                        {
                            If (LEqual (SCCX, 0x08))
                            {
                                If (LEqual (PIXX, 0x02))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PRES, 0, Serialized)
                    {
                        If (LEqual (DVID, 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (ISGX, 0, Serialized)
                    {
                        If (LEqual (BCCX, 0x03))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    If (CondRefOf (\STD3))
                    {
                        If (LNotEqual (STD3, Zero))
                        {
                            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                            {
                                If (LOr (PAHC (), PNVM ()))
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                One
                                            }
                                        }
                                    })
                                }
                                Else
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                Zero
                                            }
                                        }
                                    })
                                }
                            }
                        }
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (XPRW (0x69, 0x04))
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If (CondRefOf (PPS0))
                    {
                        PPS0 ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If (CondRefOf (PPS3))
                    {
                        PPS3 ()
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                    {
                        Notify (PXSX, 0x02)
                        Store (One, PMSX)
                        Store (One, PSPX)
                    }
                }
            }

            Scope (RP28)
            {
                Name (SLOT, 0x1C)
                Name (LTEN, Zero)
                Name (LMSL, Zero)
                Name (LNSL, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (LTRS, LTEN)
                    Store (PMLS, LMSL)
                    Store (PNLS, LNSL)
                    If (And (HBSL, 0x40))
                    {
                        Store (One, HBCS)
                    }

                    If (LAnd (CondRefOf (VMR4), CondRefOf (VMDE)))
                    {
                        If (LAnd (LEqual (VMDE, One), LNotEqual (And (VMR4, 0x08), Zero)))
                        {
                            Store (One, PRMV)
                        }
                    }

                    If (PRES ())
                    {
                        If (CondRefOf (PINI))
                        {
                            PINI ()
                        }
                    }

                    If (CondRefOf (\_SB.PC00.RP28))
                    {
                        If (LNotEqual (VDID, 0xFFFFFFFF))
                        {
                            If (CondRefOf (\STD3))
                            {
                                If (CondRefOf (\_SB.PC00.RP28.PRMV))
                                {
                                    If (LEqual (PRMV, One))
                                    {
                                        Store (STD3, RD3C)
                                    }
                                }

                                If (LOr (^PXSX.PNVM (), ^PXSX.PAHC ()))
                                {
                                    Store (STD3, RD3C)
                                }
                            }
                        }
                    }
                }

                Store (GSIP (), SIPV)
                Name (PRTP, 0x02)
                OperationRegion (PXCS, SystemMemory, PC2M (_ADR), 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                        ,   3, 
                    LDIS,   1, 
                    Offset (0x51), 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xA4), 
                    D3HT,   2, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                    SCB0,   1, 
                        ,   6, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x328), 
                        ,   19, 
                    LNKS,   4
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If (LLess (SIPV, 0x10))
                    {
                        If (LNotEqual (NCB7, One))
                        {
                            Return (Zero)
                        }
                    }
                    ElseIf (LNotEqual (SCB0, One))
                    {
                        Return (Zero)
                    }

                    Store (One, L23R)
                    Store (Zero, Local0)
                    While (L23R)
                    {
                        If (LGreater (Local0, 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Increment (Local0)
                    }

                    If (LLess (SIPV, 0x10))
                    {
                        Store (Zero, NCB7)
                    }
                    Else
                    {
                        Store (Zero, SCB0)
                    }

                    Store (Zero, Local0)
                    While (LEqual (LASX, Zero))
                    {
                        If (LGreater (Local0, 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Increment (Local0)
                    }
                    
                    Return (Zero)
                }

                Method (DL23, 0, Serialized)
                {
                    Store (One, L23E)
                    Sleep (0x10)
                    Store (Zero, Local0)
                    While (L23E)
                    {
                        If (LGreater (Local0, 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Increment (Local0)
                    }

                    If (LLess (SIPV, 0x10))
                    {
                        Store (One, NCB7)
                    }
                    Else
                    {
                        Store (One, SCB0)
                    }
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (HBCS, Zero)
                Name (PRMV, Zero)
                Name (RD3C, 0x02)
                Method (PRES, 0, NotSerialized)
                {
                    If (LEqual (VDID, 0xFFFFFFFF))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (LEqual (Arg0, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                     
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                CreateBitField (OPTS, 0x0A, FUNA)
                                CreateBitField (OPTS, 0x0B, FUNB)
                                If (LGreaterEqual (Arg1, 0x02))
                                {
                                    Store (One, FUN0)
                                    If (LNotEqual (LTEN, Zero))
                                    {
                                        Store (One, FUN6)
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If (LEqual (ECR1, One))
                                        {
                                            If (LGreaterEqual (Arg1, 0x03))
                                            {
                                                Store (One, FUN8)
                                                Store (One, FUN9)
                                            }
                                        }
                                    }
                                }

                                If (LGreaterEqual (Arg1, 0x04))
                                {
                                    If (CondRefOf (PPBA))
                                    {
                                        Store (One, FUNA)
                                    }

                                    If (CondRefOf (UPRD))
                                    {
                                        Store (One, FUNB)
                                    }
                                }

                                Return (OPTS)
                            }
                            Case (0x06)
                            {
                                If (LGreaterEqual (Arg1, 0x02))
                                {
                                    Store (And (ShiftRight (LMSL, 0x0A), 0x07), Index (LTRV, Zero))
                                    Store (And (LMSL, 0x03FF), Index (LTRV, One))
                                    Store (And (ShiftRight (LNSL, 0x0A), 0x07), Index (LTRV, 0x02))
                                    Store (And (LNSL, 0x03FF), Index (LTRV, 0x03))
                                    Return (LTRV)
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If (LEqual (ECR1, One))
                                    {
                                        If (LGreaterEqual (Arg1, 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }
                            Case (0x0A)
                            {
                                If (CondRefOf (PPBA))
                                {
                                    Return (PPBA (Arg3))
                                }
                            }
                            Case (0x0B)
                            {
                                If (CondRefOf (UPRD))
                                {
                                    Return (UPRD (Arg3))
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCCX, PCI_Config, Zero, 0x10)
                    Field (PCCX, ByteAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x09), 
                        PIXX,   8, 
                        SCCX,   8, 
                        BCCX,   8
                    }

                    Method (PAHC, 0, Serialized)
                    {
                        If (LEqual (BCCX, One))
                        {
                            If (LEqual (SCCX, 0x06))
                            {
                                If (LEqual (PIXX, One))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PNVM, 0, Serialized)
                    {
                        If (LEqual (BCCX, One))
                        {
                            If (LEqual (SCCX, 0x08))
                            {
                                If (LEqual (PIXX, 0x02))
                                {
                                    Return (One)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (PRES, 0, Serialized)
                    {
                        If (LEqual (DVID, 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (ISGX, 0, Serialized)
                    {
                        If (LEqual (BCCX, 0x03))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    If (CondRefOf (\STD3))
                    {
                        If (LNotEqual (STD3, Zero))
                        {
                            Method (_DSD, 0, NotSerialized)  // _DSD: Device-Specific Data
                            {
                                If (LOr (PAHC (), PNVM ()))
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                One
                                            }
                                        }
                                    })
                                }
                                Else
                                {
                                    Return (Package (0x02)
                                    {
                                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                                        Package (0x01)
                                        {
                                            Package (0x02)
                                            {
                                                "StorageD3Enable", 
                                                Zero
                                            }
                                        }
                                    })
                                }
                            }
                        }
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (XPRW (0x69, 0x04))
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If (CondRefOf (PPS0))
                    {
                        PPS0 ()
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If (CondRefOf (PPS3))
                    {
                        PPS3 ()
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), LEqual (PMSX, One)))
                    {
                        Notify (PXSX, 0x02)
                        Store (One, PMSX)
                        Store (One, PSPX)
                    }
                }
            }
        }
    }

    Scope (_SB)
    {
        Device (ICLK)
        {
            Name (_HID, EisaId ("PNP0C02"))  // _HID: Hardware ID
            Name (_UID, "ISCLK")  // _UID: Unique ID
            OperationRegion (CKOR, SystemMemory, Add (SBRG, Add (ShiftLeft (ICKP, 0x10), 0x8000)), 0x40)
            Field (CKOR, AnyAcc, Lock, Preserve)
            {
                CLK0,   8, 
                Offset (0x0C), 
                CLK1,   8, 
                Offset (0x18), 
                CLK2,   8, 
                Offset (0x24), 
                CLK3,   8, 
                Offset (0x30), 
                CLK4,   8, 
                Offset (0x3C), 
                CLK5,   8
            }

            Method (NCLK, 0, NotSerialized)
            {
                If (LEqual (PCHS, PCHP))
                {
                    Return (0x06)
                }
                ElseIf (LEqual (PCHS, PCHN))
                {
                    Return (0x04)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (CLKC, 2, Serialized)
            {
                If (LAnd (LLess (Arg0, NCLK ()), LEqual (PCHS, PCHP)))
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            Store (CLK0, Local0)
                            Store (Or (And (Local0, 0xFFFFFFFFFFFFFFFD), ShiftLeft (Arg1, One)), CLK0)
                        }
                        Case (One)
                        {
                            Store (CLK1, Local0)
                            Store (Or (And (Local0, 0xFFFFFFFFFFFFFFFD), ShiftLeft (Arg1, One)), CLK1)
                        }
                        Case (0x02)
                        {
                            Store (CLK2, Local0)
                            Store (Or (And (Local0, 0xFFFFFFFFFFFFFFFD), ShiftLeft (Arg1, One)), CLK2)
                        }
                        Case (0x03)
                        {
                            Store (CLK3, Local0)
                            Store (Or (And (Local0, 0xFFFFFFFFFFFFFFFD), ShiftLeft (Arg1, One)), CLK3)
                        }
                        Case (0x04)
                        {
                            Store (CLK4, Local0)
                            Store (Or (And (Local0, 0xFFFFFFFFFFFFFFFD), ShiftLeft (Arg1, One)), CLK4)
                        }
                        Case (0x05)
                        {
                            Store (CLK5, Local0)
                            Store (Or (And (Local0, 0xFFFFFFFFFFFFFFFD), ShiftLeft (Arg1, One)), CLK5)
                        }

                    }
                }
                ElseIf (LAnd (LLess (Arg0, NCLK ()), LEqual (PCHS, PCHN)))
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            Store (CLK0, Local0)
                            Store (Or (And (Local0, 0xFFFFFFFFFFFFFFFD), ShiftLeft (Arg1, One)), CLK0)
                        }
                        Case (One)
                        {
                            Store (CLK1, Local0)
                            Store (Or (And (Local0, 0xFFFFFFFFFFFFFFFD), ShiftLeft (Arg1, One)), CLK1)
                        }
                        Case (0x02)
                        {
                            Store (CLK2, Local0)
                            Store (Or (And (Local0, 0xFFFFFFFFFFFFFFFD), ShiftLeft (Arg1, One)), CLK2)
                        }
                        Case (0x03)
                        {
                            Store (CLK3, Local0)
                            Store (Or (And (Local0, 0xFFFFFFFFFFFFFFFD), ShiftLeft (Arg1, One)), CLK3)
                        }

                    }
                }
            }

            Method (CLKF, 2, Serialized)
            {
                If (LAnd (LLess (Arg0, NCLK ()), LEqual (PCHS, PCHP)))
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            Store (CLK0, Local0)
                            Store (Or (And (Local0, 0xFFFFFFFFFFFFFFFE), Arg1), CLK0)
                        }
                        Case (One)
                        {
                            Store (CLK1, Local0)
                            Store (Or (And (Local0, 0xFFFFFFFFFFFFFFFE), Arg1), CLK1)
                        }
                        Case (0x02)
                        {
                            Store (CLK2, Local0)
                            Store (Or (And (Local0, 0xFFFFFFFFFFFFFFFE), Arg1), CLK2)
                        }
                        Case (0x03)
                        {
                            Store (CLK3, Local0)
                            Store (Or (And (Local0, 0xFFFFFFFFFFFFFFFE), Arg1), CLK3)
                        }
                        Case (0x04)
                        {
                            Store (CLK4, Local0)
                            Store (Or (And (Local0, 0xFFFFFFFFFFFFFFFE), Arg1), CLK4)
                        }
                        Case (0x05)
                        {
                            Store (CLK5, Local0)
                            Store (Or (And (Local0, 0xFFFFFFFFFFFFFFFE), Arg1), CLK5)
                        }

                    }
                }
                ElseIf (LAnd (LLess (Arg0, NCLK ()), LEqual (PCHS, PCHN)))
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            Store (CLK0, Local0)
                            Store (Or (And (Local0, 0xFFFFFFFFFFFFFFFE), Arg1), CLK0)
                        }
                        Case (One)
                        {
                            Store (CLK1, Local0)
                            Store (Or (And (Local0, 0xFFFFFFFFFFFFFFFE), Arg1), CLK1)
                        }
                        Case (0x02)
                        {
                            Store (CLK2, Local0)
                            Store (Or (And (Local0, 0xFFFFFFFFFFFFFFFE), Arg1), CLK2)
                        }
                        Case (0x03)
                        {
                            Store (CLK3, Local0)
                            Store (Or (And (Local0, 0xFFFFFFFFFFFFFFFE), Arg1), CLK3)
                        }

                    }
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x03)
            }
        }
    }

    Scope (\)
    {
        Method (MCUI, 2, Serialized)
        {
            Name (PRPI, Zero)
            ShiftLeft (One, Arg0, Local0)
            ShiftLeft (Arg1, Arg0, Local1)
            Store (CTRP (Arg0), PRPI)
            If (LLess (PRPI, 0x1C))
            {
                ShiftLeft (One, PRPI, Local2)
                ShiftLeft (Arg1, PRPI, Local3)
            }
            Else
            {
                ShiftLeft (One, PRPI, Local2)
                ShiftLeft (Arg1, PRPI, Local3)
                ShiftLeft (Local2, 0x18, Local2)
                ShiftLeft (Local3, 0x18, Local3)
            }

            ADBG ("Calling IPCS method with command V_PMC_PWRM_IPC_SRC_CLK_PORT_MAPPING_CMD")
            ADBG (Concatenate ("Local0 =", Local0))
            ADBG (Concatenate ("Local1 =", Local1))
            ADBG (Concatenate ("Local2 =", Local2))
            ADBG (Concatenate ("Local3 =", Local3))
            IPCS (0xAC, Zero, 0x10, Local0, Local1, Local2, Local3)
        }

        Method (SPCO, 2, Serialized)
        {
            ADBG ("Calling SPCO method to configure PCIe ClkReq Override")
            Name (CLKU, Zero)
            If (LNotEqual (IPCC, Zero))
            {
                ADBG ("Calling TMVA method to restore IPC1 Command Timeout default Value 10ms")
                TMVA (0x0A)
                MCUI (Arg0, Arg1)
            }
            Else
            {
                Store (CTRP (Arg0), CLKU)
                If (LEqual (Arg1, One))
                {
                    If (LGreater (Arg0, 0x06))
                    {
                        Add (Arg0, One, Local1)
                        Subtract (Local1, 0x07, Local1)
                        PCRO (0xAD, 0x8084, ShiftLeft (One, Local1))
                    }
                    Else
                    {
                        Add (Arg0, 0x02, Local1)
                        PCRO (0xAD, 0x8080, ShiftLeft (One, Local1))
                    }
                }
                ElseIf (LGreater (Arg0, 0x06))
                {
                    Add (Arg0, One, Local1)
                    Subtract (Local1, 0x07, Local1)
                    PCRA (0xAD, 0x8084, Not (ShiftLeft (One, Local1)))
                }
                Else
                {
                    Add (Arg0, 0x02, Local1)
                    PCRA (0xAD, 0x8080, Not (ShiftLeft (One, Local1)))
                }
            }
        }

        Method (SPCX, 3, Serialized)
        {
            ADBG ("Calling SPCX method to configure PCIe ClkReq Override")
            If (LNotEqual (IPCC, Zero))
            {
                ADBG ("Calling TMVA method to override IPC1 Command Timeout Value")
                TMVA (Arg2)
                MCUI (Arg0, Arg1)
            }
            Else
            {
                SPCO (Arg0, Arg1)
            }
        }

        Method (HBCM, 2, Serialized)
        {
            ADBG ("mask/unmask Hybrid Partner CLKREQ")
            Name (HPRI, Zero)
            Store (Arg0, HPRI)
            If (LLess (HPRI, 0x1C))
            {
                ShiftLeft (One, HPRI, Local0)
                ShiftLeft (Arg1, HPRI, Local1)
            }
            Else
            {
                Store (Zero, Local0)
                Store (Zero, Local1)
            }

            ADBG ("Calling IPCS method for Hybrid Partner with command V_PMC_PWRM_IPC_SRC_CLK_PORT_MAPPING_CMD")
            ADBG (Concatenate ("Port number of Hybrid Partner =", HPRI))
            ADBG (Concatenate ("Local0 of Hybrid Partner =", Local0))
            ADBG (Concatenate ("Local1 of Hybrid Partner =", Local1))
            IPCS (0xAC, Zero, 0x10, Zero, Zero, Local0, Local1)
        }

        Method (CTRP, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Return (CR00)
                }
                Case (One)
                {
                    Return (CR01)
                }
                Case (0x02)
                {
                    Return (CR02)
                }
                Case (0x03)
                {
                    Return (CR03)
                }
                Case (0x04)
                {
                    Return (CR04)
                }
                Case (0x05)
                {
                    Return (CR05)
                }
                Case (0x06)
                {
                    Return (CR06)
                }
                Case (0x07)
                {
                    Return (CR07)
                }
                Case (0x08)
                {
                    Return (CR08)
                }
                Case (0x09)
                {
                    Return (CR09)
                }
                Case (0x0A)
                {
                    Return (CR10)
                }
                Case (0x0B)
                {
                    Return (CR11)
                }
                Case (0x0C)
                {
                    Return (CR12)
                }
                Case (0x0D)
                {
                    Return (CR13)
                }
                Case (0x0E)
                {
                    Return (CR14)
                }
                Case (0x0F)
                {
                    Return (CR15)
                }
                Case (0x10)
                {
                    Return (CR16)
                }
                Case (0x11)
                {
                    Return (CR17)
                }
                Default
                {
                    Return (0xFF)
                }

            }
        }

        Method (CTRQ, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Return (CQ00)
                }
                Case (One)
                {
                    Return (CQ01)
                }
                Case (0x02)
                {
                    Return (CQ02)
                }
                Case (0x03)
                {
                    Return (CQ03)
                }
                Case (0x04)
                {
                    Return (CQ04)
                }
                Case (0x05)
                {
                    Return (CQ05)
                }
                Case (0x06)
                {
                    Return (CQ06)
                }
                Case (0x07)
                {
                    Return (CQ07)
                }
                Case (0x08)
                {
                    Return (CQ08)
                }
                Case (0x09)
                {
                    Return (CQ09)
                }
                Case (0x0A)
                {
                    Return (CQ10)
                }
                Case (0x0B)
                {
                    Return (CQ11)
                }
                Case (0x0C)
                {
                    Return (CQ12)
                }
                Case (0x0D)
                {
                    Return (CQ13)
                }
                Case (0x0E)
                {
                    Return (CQ14)
                }
                Case (0x0F)
                {
                    Return (CQ15)
                }
                Case (0x10)
                {
                    Return (CQ16)
                }
                Case (0x11)
                {
                    Return (CQ17)
                }
                Default
                {
                    Return (0xFF)
                }

            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (SAT0)
        {
            Name (_ADR, 0x00170000)  // _ADR: Address
            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (LOr (LEqual (PCHS, PCHP), LEqual (PCHS, PCHN)))
                {
                    If (LNot (SCFD))
                    {
                        CSD0 (0x14)
                    }
                }

                Store (Zero, ISAT)
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                Store (One, ISAT)
                If (LOr (LEqual (PCHS, PCHP), LEqual (PCHS, PCHN)))
                {
                    CSD3 (0x14)
                }
            }

            If (CondRefOf (\STD3))
            {
                If (LNotEqual (STD3, Zero))
                {
                    Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                    {
                        ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                        Package (0x01)
                        {
                            Package (0x02)
                            {
                                "StorageD3Enable", 
                                One
                            }
                        }
                    })
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (LAnd (CondRefOf (SATC), CondRefOf (SATD)))
                {
                    If (SATC (Arg0))
                    {
                        Return (SATD (Arg0, Arg1, Arg2, Arg3))
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x03)
            }

            Device (PRT0)
            {
                Name (_ADR, 0xFFFF)  // _ADR: Address
                Method (PRES, 0, NotSerialized)
                {
                    If (And (SPPR, One))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PRT1)
            {
                Name (_ADR, 0x0001FFFF)  // _ADR: Address
                Method (PRES, 0, NotSerialized)
                {
                    If (And (SPPR, 0x02))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x0002FFFF)  // _ADR: Address
                Method (PRES, 0, NotSerialized)
                {
                    If (And (SPPR, 0x04))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x0003FFFF)  // _ADR: Address
                Method (PRES, 0, NotSerialized)
                {
                    If (And (SPPR, 0x08))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PRT4)
            {
                Name (_ADR, 0x0004FFFF)  // _ADR: Address
                Method (PRES, 0, NotSerialized)
                {
                    If (And (SPPR, 0x10))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PRT5)
            {
                Name (_ADR, 0x0005FFFF)  // _ADR: Address
                Method (PRES, 0, NotSerialized)
                {
                    If (And (SPPR, 0x20))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PRT6)
            {
                Name (_ADR, 0x0006FFFF)  // _ADR: Address
                Method (PRES, 0, NotSerialized)
                {
                    If (And (SPPR, 0x40))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Device (PRT7)
            {
                Name (_ADR, 0x0007FFFF)  // _ADR: Address
                Method (PRES, 0, NotSerialized)
                {
                    If (And (SPPR, 0x80))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }
    }

    Scope (_SB.PC00)
    {
        Method (TINT, 1, Serialized)
        {
            Name (TINR, ResourceTemplate ()
            {
                GpioInt (Level, ActiveLow, ExclusiveAndWake, PullUp, 0x0000,
                    "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0000
                    }
            })
            CreateWordField (TINR, 0x17, INT1)
            Store (GNUM (Arg0), INT1)
            Return (TINR)
        }

        Device (THC0)
        {
            Name (_ADR, 0x00100006)  // _ADR: Address
            Name (RSTL, Zero)
            OperationRegion (THCR, PCI_Config, Zero, 0x0100)
            Field (THCR, ByteAcc, NoLock, Preserve)
            {
                VDID,   32
            }

            If (LNotEqual (VDID, 0xFFFFFFFF))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If (LEqual (TMD0, One))
                    {
                        If (LEqual (Arg0, ToUUID ("6e2ac436-0fcf-41af-a265-b32a220dcfab")))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x7F                                           
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x00                                           
                                            })
                                        }

                                    }
                                }
                                Case (One)
                                {
                                    ADBG ("THC THC_INPUT_REPORT_HEADER_ADDRESS")
                                    Return (ToInteger (T040))
                                }
                                Case (0x02)
                                {
                                    ADBG ("THC THC_INPUT_REPORT_BODY_ADDRESS")
                                    Return (ToInteger (T050))
                                }
                                Case (0x03)
                                {
                                    ADBG ("THC THC_OUTPUT_REPORT_ADDRESS")
                                    Return (ToInteger (T060))
                                }
                                Case (0x04)
                                {
                                    ADBG ("THC THC_READ_OPCODE")
                                    Name (BUF4, Buffer (One){})
                                    Store (ToBuffer (T070), Local0)
                                    Store (DerefOf (Index (Local0, Zero)), Index (BUF4, Zero))
                                    Return (BUF4)
                                }
                                Case (0x05)
                                {
                                    ADBG ("THC THC_WRITE_OPCODE")
                                    Name (BUF5, Buffer (One){})
                                    Store (ToBuffer (T080), Local1)
                                    Store (DerefOf (Index (Local1, Zero)), Index (BUF5, Zero))
                                    Return (BUF5)
                                }
                                Case (0x06)
                                {
                                    ADBG ("THC THC_FLAGS")
                                    Return (ToInteger (T090))
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                           
                                    })
                                }

                            }

                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }

                        If (LEqual (Arg0, ToUUID ("300d35b7-ac20-413e-8e9c-92e4dafd0afe")))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                           
                                    })
                                }
                                Case (One)
                                {
                                    ADBG ("THC THC_CONNECTION_SPEED")
                                    Return (ToInteger (T030))
                                }
                                Case (0x02)
                                {
                                    ADBG ("THC THC_LIMIT_PACKET_SIZE")
                                    Return (ToInteger (T0C0))
                                }
                                Case (0x03)
                                {
                                    ADBG ("THC THC_PERFORMANCE_LIMITATION")
                                    Return (ToInteger (T0D0))
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                           
                                    })
                                }

                            }
                        }
                    }

                    If (LEqual (Arg0, ToUUID ("84005682-5b71-41a4-8d66-8130f787a138")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Case (One)
                            {
                                ADBG ("THC THC_ACTIVE_LTR")
                                Return (ToInteger (T0A0))
                            }
                            Case (0x02)
                            {
                                ADBG ("THC THC_IDLE_LTR")
                                Return (ToInteger (T0B0))
                            }
                            Default
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }

                        }
                    }

                    Return (Buffer (Zero){})
                }

                If (LNotEqual (TIN0, Zero))
                {
                    Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                }

                If (LNotEqual (TIN0, Zero))
                {
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Return (TINT (TIN0))
                    }
                }

                If (LEqual (TMD0, One))
                {
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        ADBG ("THC _INI")
                        SHPO (T010, One)
                        SPMV (T010, Zero)
                        SPC0 (T010, Or (0x42000200, And (Not (And (T020, One)), One)))
                        If (CondRefOf (^CINI))
                        {
                            CINI (T010, T0E0)
                        }
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        ADBG ("THC _RST")
                        While (LEqual (RSTL, One))
                        {
                            Sleep (0x0A)
                        }

                        Store (One, RSTL)
                        SGOV (T010, And (T020, One))
                        Sleep (T0E0)
                        SGOV (T010, And (Not (And (T020, One)), One))
                        Store (Zero, RSTL)
                    }
                }
            }
        }

        Device (THC1)
        {
            Name (_ADR, 0x00100007)  // _ADR: Address
            Name (RSTL, Zero)
            OperationRegion (THCR, PCI_Config, Zero, 0x0100)
            Field (THCR, ByteAcc, NoLock, Preserve)
            {
                VDID,   32
            }

            If (LNotEqual (VDID, 0xFFFFFFFF))
            {
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If (LEqual (TMD1, One))
                    {
                        If (LEqual (Arg0, ToUUID ("6e2ac436-0fcf-41af-a265-b32a220dcfab")))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (0x02)
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x7F                                           
                                            })
                                        }
                                        Default
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x00                                           
                                            })
                                        }

                                    }
                                }
                                Case (One)
                                {
                                    ADBG ("THC THC_INPUT_REPORT_HEADER_ADDRESS")
                                    Return (ToInteger (T041))
                                }
                                Case (0x02)
                                {
                                    ADBG ("THC THC_INPUT_REPORT_BODY_ADDRESS")
                                    Return (ToInteger (T051))
                                }
                                Case (0x03)
                                {
                                    ADBG ("THC THC_OUTPUT_REPORT_ADDRESS")
                                    Return (ToInteger (T061))
                                }
                                Case (0x04)
                                {
                                    ADBG ("THC THC_READ_OPCODE")
                                    Name (BUF4, Buffer (One){})
                                    Store (ToBuffer (T071), Local0)
                                    Store (DerefOf (Index (Local0, Zero)), Index (BUF4, Zero))
                                    Return (BUF4)
                                }
                                Case (0x05)
                                {
                                    ADBG ("THC THC_WRITE_OPCODE")
                                    Name (BUF5, Buffer (One){})
                                    Store (ToBuffer (T081), Local1)
                                    Store (DerefOf (Index (Local1, Zero)), Index (BUF5, Zero))
                                    Return (BUF5)
                                }
                                Case (0x06)
                                {
                                    ADBG ("THC THC_FLAGS")
                                    Return (ToInteger (T091))
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                           
                                    })
                                }

                            }

                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }

                        If (LEqual (Arg0, ToUUID ("300d35b7-ac20-413e-8e9c-92e4dafd0afe")))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                           
                                    })
                                }
                                Case (One)
                                {
                                    ADBG ("THC THC_CONNECTION_SPEED")
                                    Return (ToInteger (T031))
                                }
                                Case (0x02)
                                {
                                    ADBG ("THC THC_LIMIT_PACKET_SIZE")
                                    Return (ToInteger (T0C1))
                                }
                                Case (0x03)
                                {
                                    ADBG ("THC THC_PERFORMANCE_LIMITATION")
                                    Return (ToInteger (T0D1))
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                           
                                    })
                                }

                            }
                        }
                    }

                    If (LEqual (Arg0, ToUUID ("84005682-5b71-41a4-8d66-8130f787a138")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Case (One)
                            {
                                ADBG ("THC THC_ACTIVE_LTR")
                                Return (ToInteger (T0A1))
                            }
                            Case (0x02)
                            {
                                ADBG ("THC THC_IDLE_LTR")
                                Return (ToInteger (T0B1))
                            }
                            Default
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }

                        }
                    }

                    Return (Buffer (Zero){})
                }

                If (LNotEqual (TIN1, Zero))
                {
                    Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                }

                If (LNotEqual (TIN1, Zero))
                {
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Return (TINT (TIN1))
                    }
                }

                If (LEqual (TMD1, One))
                {
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        ADBG ("THC _INI")
                        SHPO (T011, One)
                        SPMV (T011, Zero)
                        SPC0 (T011, Or (0x42000200, And (Not (And (T021, One)), One)))
                        If (CondRefOf (^CINI))
                        {
                            CINI (T011, T0E1)
                        }
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        ADBG ("THC _RST")
                        While (LEqual (RSTL, One))
                        {
                            Sleep (0x0A)
                        }

                        Store (One, RSTL)
                        SGOV (T011, And (T021, One))
                        Sleep (T0E1)
                        SGOV (T011, And (Not (And (T021, One)), One))
                        Store (Zero, RSTL)
                    }
                }
            }
        }
    }

    Scope (\)
    {
        Method (PCRR, 2, Serialized)
        {
            And (Arg1, 0xFFFF, Local1)
            ShiftLeft (And (Arg1, 0x000F0000), 0x08, Local2)
            Add (ShiftLeft (Arg0, 0x10), Local1, Local0)
            Add (Add (Local2, Local0), SBRG, Local0)
            OperationRegion (PCR0, SystemMemory, Local0, 0x04)
            Field (PCR0, DWordAcc, Lock, Preserve)
            {
                DAT0,   32
            }

            Return (DAT0)
        }

        Method (PCRW, 3, Serialized)
        {
            And (Arg1, 0xFFFF, Local1)
            ShiftLeft (And (Arg1, 0x000F0000), 0x08, Local2)
            Add (ShiftLeft (Arg0, 0x10), Local1, Local0)
            Add (Add (Local2, Local0), SBRG, Local0)
            OperationRegion (PCR0, SystemMemory, Local0, 0x04)
            Field (PCR0, DWordAcc, Lock, Preserve)
            {
                DAT0,   32
            }

            Store (Arg2, DAT0)
        }

        Method (PCRO, 3, Serialized)
        {
            Store (PCRR (Arg0, Arg1), Local0)
            Store (Or (Local0, Arg2), Local1)
            PCRW (Arg0, Arg1, Local1)
        }

        Method (PCRA, 3, Serialized)
        {
            Store (PCRR (Arg0, Arg1), Local0)
            Store (And (Local0, Arg2), Local1)
            PCRW (Arg0, Arg1, Local1)
        }

        Method (PCAO, 4, Serialized)
        {
            Store (PCRR (Arg0, Arg1), Local0)
            Store (Or (And (Local0, Arg2), Arg3), Local1)
            PCRW (Arg0, Arg1, Local1)
        }
    }

    Scope (_SB.PC00)
    {
        Device (ISHD)
        {
            Name (_ADR, 0x00120000)  // _ADR: Address
        }
    }

    Scope (_SB.PC00)
    {
        Device (HECI)
        {
            Name (_ADR, 0x00160000)  // _ADR: Address
            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (CondRefOf (HIWC))
                {
                    If (HIWC (Arg0))
                    {
                        If (CondRefOf (HIDW))
                        {
                            Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (HEC3)
        {
            Name (_ADR, 0x00160004)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (PTHT)
        {
            Name (_ADR, 0x001F0007)  // _ADR: Address
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (LEqual (PTHM, One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            OperationRegion (PTHR, PCI_Config, Zero, 0x20)
            Field (PTHR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                MTBL,   32, 
                MTBH,   32
            }

            Method (THEN, 0, Serialized)
            {
                OperationRegion (RMTB, SystemMemory, Add (ShiftLeft (MTBH, 0x20), And (MTBL, 0xFFF00000)), 0x0100)
                Field (RMTB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0xE8), 
                    BTTH,   1
                }

                If (LEqual (BTTH, One))
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB)
    {
        Device (PTHH)
        {
            Name (_HID, "INTC1001")  // _HID: Hardware ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (LEqual (PTHM, 0x02))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                Memory32Fixed (ReadWrite,
                    0xFE100000,         // Address Base
                    0x00100000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFD800000,         // Address Base
                    0x00800000,         // Address Length
                    )
            })
            OperationRegion (MTBR, SystemMemory, 0xFE100000, 0x0100)
            Field (MTBR, AnyAcc, NoLock, Preserve)
            {
                Offset (0xE8), 
                BHTH,   1
            }

            Method (THEN, 0, Serialized)
            {
                If (LEqual (BHTH, One))
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.PC00.LPCB)
    {
    }

    Name (ECUP, One)
    Mutex (EHLD, 0x00)
    Mutex (MUTX, 0x00)
    Mutex (OSUM, 0x00)
    Mutex (WWMT, 0x00)
    Mutex (CNMT, 0x00)
    Event (WFEV)
    OperationRegion (PRT0, SystemIO, 0x80, 0x02)
    Field (PRT0, WordAcc, Lock, Preserve)
    {
        P80B,   16
    }

    Name (P80T, Zero)
    Method (D8XH, 2, Serialized)
    {
        If (LEqual (Arg0, Zero))
        {
            Store (Or (And (P80T, 0xFF00), Arg1), P80T)
        }

        If (LEqual (Arg0, One))
        {
            Store (Or (And (P80T, 0xFF), ShiftLeft (Arg1, 0x08)), P80T)
        }

        Store (P80T, P80B)
    }

    Method (P8XH, 2, Serialized)
    {
        If (CondRefOf (MDBG))
        {
            D8XH (Arg0, Arg1)
        }
    }

    OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
    Field (SPRT, ByteAcc, Lock, Preserve)
    {
        SSMP,   8
    }

    Name (AM00, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        Store (Arg0, GPIC)
        Store (Arg0, PICM)
    }

    Method (RPTS, 1, NotSerialized)
    {
        D8XH (Zero, Arg0)
        D8XH (One, Zero)
        If (CondRefOf (\DTFS))
        {
            If (LEqual (DTFS, One))
            {
                Reset (WFEV)
                If (LEqual (DTRT, One))
                {
                    Store (Zero, Local0)
                    While (LLess (Local0, TCPN))
                    {
                        Store (TVCF (Local0, Zero, 0x04, TOFF), TOFF)
                        Increment (Local0)
                    }
                }
            }
        }

        If (CondRefOf (\_SB.PC00.PEG1.DHDW))
        {
            \_SB.PC00.PEG1.DHDW ()
        }

        If (LEqual (Arg0, 0x03))
        {
            Store (CPWE, CWEF)
        }
        ElseIf (LOr (LEqual (Arg0, 0x04), LEqual (Arg0, 0x05)))
        {
            If (LEqual (PG3S, One))
            {
                If (CondRefOf (\_SB.PC00.LPCB.H_EC.UTEC))
                {
                    \_SB.PC00.LPCB.H_EC.UTEC (Zero, ACWA)
                    \_SB.PC00.LPCB.H_EC.UTEC (One, DCWA)
                    \_SB.PC00.LPCB.H_EC.UTEC (0x02, ACET)
                    \_SB.PC00.LPCB.H_EC.UTEC (0x03, DCET)
                }
            }
        }

        If (CondRefOf (\_SB.TPM.PTS))
        {
            \_SB.TPM.PTS (Arg0)
        }

        SPTS (Arg0)
        If (CondRefOf (\DTFS))
        {
            If (LEqual (DTFS, One))
            {
                If (CondRefOf (TPTS))
                {
                    TPTS (Arg0)
                }
            }
        }

        If (LEqual (Arg0, 0x04))
        {
            If (CondRefOf (KMOF))
            {
                KMOF ()
            }
        }

        If (LNotEqual (PPOE, Zero))
        {
            If (CondRefOf (\_SB.PC00.XHCI.PSLP))
            {
                \_SB.PC00.XHCI.PSLP (Arg0)
            }
            Else
            {
            }
        }
    }

    Method (PBCL, 0, NotSerialized)
    {
        Return (Package (0x67)
        {
            0x50, 
            0x32, 
            Zero, 
            One, 
            0x02, 
            0x03, 
            0x04, 
            0x05, 
            0x06, 
            0x07, 
            0x08, 
            0x09, 
            0x0A, 
            0x0B, 
            0x0C, 
            0x0D, 
            0x0E, 
            0x0F, 
            0x10, 
            0x11, 
            0x12, 
            0x13, 
            0x14, 
            0x15, 
            0x16, 
            0x17, 
            0x18, 
            0x19, 
            0x1A, 
            0x1B, 
            0x1C, 
            0x1D, 
            0x1E, 
            0x1F, 
            0x20, 
            0x21, 
            0x22, 
            0x23, 
            0x24, 
            0x25, 
            0x26, 
            0x27, 
            0x28, 
            0x29, 
            0x2A, 
            0x2B, 
            0x2C, 
            0x2D, 
            0x2E, 
            0x2F, 
            0x30, 
            0x31, 
            0x32, 
            0x33, 
            0x34, 
            0x35, 
            0x36, 
            0x37, 
            0x38, 
            0x39, 
            0x3A, 
            0x3B, 
            0x3C, 
            0x3D, 
            0x3E, 
            0x3F, 
            0x40, 
            0x41, 
            0x42, 
            0x43, 
            0x44, 
            0x45, 
            0x46, 
            0x47, 
            0x48, 
            0x49, 
            0x4A, 
            0x4B, 
            0x4C, 
            0x4D, 
            0x4E, 
            0x4F, 
            0x50, 
            0x51, 
            0x52, 
            0x53, 
            0x54, 
            0x55, 
            0x56, 
            0x57, 
            0x58, 
            0x59, 
            0x5A, 
            0x5B, 
            0x5C, 
            0x5D, 
            0x5E, 
            0x5F, 
            0x60, 
            0x61, 
            0x62, 
            0x63, 
            0x64
        })
    }

    Method (RWAK, 1, Serialized)
    {
        D8XH (One, 0xAB)
        ADBG ("_WAK")
        Name (RPWM, Zero)
        If (LEqual (DSTS, Zero))
        {
            Store (Zero, RPWM)
        }
        Else
        {
            Store (0x0180, RPWM)
        }

        SWAK (Arg0, RPWM)
        If (LEqual (Arg0, 0x03))
        {
            If (LEqual (Zero, ACTT))
            {
                If (LEqual (ECON, One))
                {
                    \_SB.PC00.LPCB.H_EC.ECWT (Zero, RefOf (\_SB.PC00.LPCB.H_EC.CFAN))
                }
            }
        }

        If (LOr (LEqual (Arg0, 0x03), LEqual (Arg0, 0x04)))
        {
            If (And (GBSX, 0x40))
            {
                \_SB.PC00.GFX0.IUEH (0x06)
            }

            If (And (GBSX, 0x80))
            {
                \_SB.PC00.GFX0.IUEH (0x07)
            }

            If (CondRefOf (\DTFS))
            {
                If (LEqual (DTFS, One))
                {
                    Acquire (OSUM, 0xFFFF)
                    If (CondRefOf (\_GPE.DTIN))
                    {
                        \_GPE.DTIN ()
                    }

                    Release (OSUM)
                }
            }

            If (CondRefOf (\DTFS))
            {
                If (LEqual (DTFS, One))
                {
                    If (CondRefOf (\_SB.PC00.RP01.NFRP))
                    {
                        \_SB.PC00.RP01.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP05.NFRP))
                    {
                        \_SB.PC00.RP05.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP09.NFRP))
                    {
                        \_SB.PC00.RP09.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP13.NFRP))
                    {
                        \_SB.PC00.RP13.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP17.NFRP))
                    {
                        \_SB.PC00.RP17.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP21.NFRP))
                    {
                        \_SB.PC00.RP21.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP25.NFRP))
                    {
                        \_SB.PC00.RP25.NFRP ()
                    }
                }
            }

            If (CondRefOf (\_SB.PC00.TXHC))
            {
                \_SB.TCWK (Arg0)
            }
        }

        If (CondRefOf (\DTFS))
        {
            If (LEqual (DTFS, One))
            {
                Signal (WFEV)
            }
        }

        Return (Package (0x02)
        {
            Zero, 
            Zero
        })
    }

    Method (GETB, 3, Serialized)
    {
        Multiply (Arg0, 0x08, Local0)
        Multiply (Arg1, 0x08, Local1)
        CreateField (Arg2, Local0, Local1, TBF3)
        Return (TBF3)
    }

    Method (BPNT, 0, NotSerialized)
    {
        If (LEqual (ECON, One))
        {
            Notify (\_SB.PC00.LPCB.H_EC.BAT0, 0x81)
            Notify (\_SB.PC00.LPCB.H_EC.BAT1, 0x81)
            Notify (\_SB.PC00.LPCB.H_EC.BAT2, 0x81)
        }

        If (LEqual (DPTF, One))
        {
            Notify (\_SB.IETM, 0x86)
            If (LAnd (LEqual (ECON, One), LEqual (CHGE, One)))
            {
                Notify (\_SB.PC00.LPCB.H_EC.CHRG, 0x80)
            }
        }
    }

    OperationRegion (CPWR, SystemMemory, Add (\_SB.PC00.GMHB (), 0x5000), 0x1000)
    Field (CPWR, ByteAcc, NoLock, Preserve)
    {
        Offset (0x938), 
        PWRU,   4, 
        Offset (0x9A0), 
        PPL1,   15, 
        PL1E,   1, 
        CLP1,   1
    }

    Name (CLMP, Zero)
    Name (PLEN, Zero)
    Name (PLSV, 0x8000)
    Name (CSEM, Zero)
    Method (SPL1, 0, Serialized)
    {
        Name (PPUU, Zero)
        If (LEqual (CSEM, One))
        {
            Return (Zero)
        }

        Store (One, CSEM)
        Store (PPL1, PLSV)
        Store (PL1E, PLEN)
        Store (CLP1, CLMP)
        If (LEqual (PWRU, Zero))
        {
            Store (One, PPUU)
        }
        Else
        {
            ShiftLeft (Decrement (PWRU), 0x02, PPUU)
        }

        Multiply (PLVL, PPUU, Local0)
        Divide (Local0, 0x03E8, , Local1)
        Store (Local1, PPL1)
        Store (One, PL1E)
        Store (One, CLP1)
        
        Return (Zero)
    }

    Method (RPL1, 0, Serialized)
    {
        Store (PLSV, PPL1)
        Store (PLEN, PL1E)
        Store (CLMP, CLP1)
        Store (Zero, CSEM)
    }

    Name (UAMS, Zero)
    Name (GLCK, Zero)
    Method (GUAM, 1, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                If (LEqual (GLCK, One))
                {
                    Store (Zero, GLCK)
                    P8XH (Zero, 0xE1)
                    P8XH (One, 0xAB)
                    If (PSCP)
                    {
                        If (CondRefOf (\_SB.PR00._PPC))
                        {
                            Store (Zero, \_SB.CPPC)
                            SPNT ()
                            BPNT ()
                        }
                    }

                    If (PLCS)
                    {
                        RPL1 ()
                    }
                }
            }
            Case (One)
            {
                If (LEqual (GLCK, Zero))
                {
                    Store (One, GLCK)
                    P8XH (Zero, 0xE0)
                    P8XH (One, Zero)
                    If (PSCP)
                    {
                        If (LAnd (CondRefOf (\_SB.PR00._PSS), CondRefOf (\_SB.PR00._PPC)))
                        {
                            SPNT ()
                            BPNT ()
                        }
                    }

                    If (PLCS)
                    {
                        SPL1 ()
                    }
                }
            }
            Default
            {
                Return (Zero)
            }

        }

        Store (LAnd (Arg0, LNot (PWRS)), UAMS)
        P_CS ()
        
        Return (Zero)
    }

    Method (P_CS, 0, Serialized)
    {
        If (CondRefOf (\_SB.PC00.PAUD.PUAM))
        {
            \_SB.PC00.PAUD.PUAM ()
        }

        If (LEqual (OSYS, 0x07DC))
        {
            If (CondRefOf (\_SB.PC00.XHCI.DUAM))
            {
                \_SB.PC00.XHCI.DUAM ()
            }
        }
    }

    Method (TRAP, 2, Serialized)
    {
        Store (Arg1, SMIF)
        If (LEqual (Arg0, 0x04))
        {
            Store (Zero, \_SB.TRPF)
        }

        Return (SMIF)
    }

    Scope (_SB.PC00)
    {
        Method (PTMA, 0, NotSerialized)
        {
            Return (BGMA)
        }

        Method (PTMS, 0, NotSerialized)
        {
            Return (BGMS)
        }

        Method (PTIA, 0, NotSerialized)
        {
            Return (BGIA)
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            If (CondRefOf (\DTFS))
            {
                If (LEqual (DTFS, One))
                {
                    If (CondRefOf (\_SB.PC00.RP01.NFRP))
                    {
                        ^RP01.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP05.NFRP))
                    {
                        ^RP05.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP09.NFRP))
                    {
                        ^RP09.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP13.NFRP))
                    {
                        ^RP13.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP17.NFRP))
                    {
                        ^RP17.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP21.NFRP))
                    {
                        ^RP21.NFRP ()
                    }

                    If (CondRefOf (\_SB.PC00.RP25.NFRP))
                    {
                        ^RP25.NFRP ()
                    }

                    Store (Zero, Local0)
                    While (LLess (Local0, TCPN))
                    {
                        Store (TVCF (Local0, One, 0x04, TBPE), TBPE)
                        Increment (Local0)
                    }
                }
            }

            Store (0x03E8, OSYS)
            If (CondRefOf (\_OSI))
            {
                If (_OSI ("Windows 2001"))
                {
                    Store (0x07D1, OSYS)
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    Store (0x07D1, OSYS)
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    Store (0x07D2, OSYS)
                }

                If (_OSI ("Windows 2001.1"))
                {
                    Store (0x07D3, OSYS)
                }

                If (_OSI ("Windows 2006"))
                {
                    Store (0x07D6, OSYS)
                }

                If (_OSI ("Windows 2009"))
                {
                    Store (0x07D9, OSYS)
                }

                If (_OSI ("Windows 2012"))
                {
                    Store (0x07DC, OSYS)
                }

                If (_OSI ("Windows 2013"))
                {
                    Store (0x07DD, OSYS)
                }

                If (_OSI ("Windows 2015"))
                {
                    Store (0x07DF, OSYS)
                }
            }

            If (CondRefOf (\DTFS))
            {
                If (LEqual (DTFS, One))
                {
                    Acquire (OSUM, 0xFFFF)
                    If (CondRefOf (\_GPE.DTIN))
                    {
                        \_GPE.DTIN ()
                    }

                    Release (OSUM)
                    Signal (WFEV)
                }
            }
        }
    }

    Scope (\)
    {
        Name (PICM, Zero)
        Name (PRWP, Package (0x02)
        {
            Zero, 
            Zero
        })
        Method (XPRW, 2, NotSerialized)
        {
            Store (Arg0, Index (PRWP, Zero))
            Store (ShiftLeft (SS1, One), Local0)
            Or (Local0, ShiftLeft (SS2, 0x02), Local0)
            Or (Local0, ShiftLeft (SS3, 0x03), Local0)
            Or (Local0, ShiftLeft (SS4, 0x04), Local0)
            If (And (ShiftLeft (One, Arg1), Local0))
            {
                Store (Arg1, Index (PRWP, One))
            }
            Else
            {
                ShiftRight (Local0, One, Local0)
                FindSetLeftBit (Local0, Index (PRWP, One))
            }

            Return (PRWP)
        }
    }

    Scope (_SB)
    {
        Name (OSU4, Zero)
        Name (OSCM, 0xFF)
        If (LEqual (U4SE, One))
        {
            OperationRegion (CSIO, SystemIO, 0x72, 0x02)
            Field (CSIO, ByteAcc, NoLock, Preserve)
            {
                IO72,   8, 
                IO73,   8
            }

            Method (WCMP, 1, Serialized)
            {
                Store (0xF2, IO72)
                Store (Arg0, IO73)
            }
        }

        Method (DOCM, 0, Serialized)
        {
            If (LEqual (U4SE, Zero))
            {
                Return (0xFF)
            }

            Store (0xFF, Local0)
            Store (Zero, OSCM)
            ADBG (Concatenate ("DOCM: Enabled host router mask on platform = ", ToHexString (CMSK)))
            If (CondRefOf (\DTCM))
            {
                Store (DTCM (OSU4, U4CM), Local1)
                If (LNotEqual (Local1, 0xFF))
                {
                    ADBG (Concatenate ("DOCM: Apply CM mode to dTBT successfully, CM mode = ", ToHexString (Local1)))
                    Store (Local1, OSCM)
                    Store (Zero, Local0)
                }
            }
            Else
            {
                ADBG ("DTCM is not present!")
            }

            If (LEqual (Local0, 0xFF))
            {
                ADBG ("DOCM: CM mode is not applied to any host router, native USB4 capability is not supported")
            }

            If (LEqual (And (U4CM, 0x70), 0x20))
            {
                WCMP (OSCM)
            }

            Return (Local0)
        }

        Method (U4FN, 2, Serialized)
        {
            ADBG (Concatenate ("U4FN: _OSC STS = ", ToHexString (Arg0)))
            ADBG (Concatenate ("U4FN: _OSC CAP = ", ToHexString (Arg1)))
            If (LEqual (U4SE, Zero))
            {
                If (LEqual (And (U4CM, 0x07), One))
                {
                    ADBG ("U4FN: Platform only support SW CM")
                    Store (One, OSCM)
                    If (CondRefOf (DSCE))
                    {
                        ADBG ("U4FN: DSCE is present")
                        Store (One, DSCE)
                    }

                    Return (Zero)
                }
                Else
                {
                    Store (Zero, OSCM)
                    If (And (Arg1, 0x00040000))
                    {
                        ADBG ("U4FN: USB4 capability bit should be cleared since platform doesn\'t support")
                        Return (0xFF)
                    }
                    Else
                    {
                        ADBG ("U4FN: OS and platform doesn\'t support native USB4")
                        Return (Zero)
                    }
                }
            }
            Else
            {
                Store (Zero, Local0)
                If (And (Arg1, 0x00040000))
                {
                    Store (One, OSU4)
                }
                Else
                {
                    Store (Zero, OSU4)
                }

                If (LEqual (And (U4CM, 0x70), Zero))
                {
                    If (LEqual (OSU4, One))
                    {
                        ADBG ("U4FN: Platform doesn\'t support SW CM, clear USB4 capability bit")
                        Store (0xFF, Local0)
                    }
                    Else
                    {
                        ADBG ("U4FN: OS and platform only support FW CM")
                        Store (Zero, Local0)
                    }

                    Return (Local0)
                }

                If (LEqual (And (Arg0, One), Zero))
                {
                    Store (DOCM (), Local1)
                    If (LAnd (LEqual (OSU4, One), LEqual (Local1, 0xFF)))
                    {
                        Store (0xFF, Local0)
                    }
                }
                ElseIf (LAnd (LEqual (OSU4, One), LEqual (OSCM, Zero)))
                {
                    ADBG ("U4FN: Native USB4 capability bit should be cleared since FW CM is applied for OS")
                    Store (0xFF, Local0)
                }

                Return (Local0)
            }
        }
    }

    Scope (_SB)
    {
        Name (OSCI, Zero)
        Name (OSCO, Zero)
        Name (OSCP, Zero)
        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            ADBG ("_OSC")
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            If (LEqual (Arg0, ToUUID ("0811b06e-4a27-44f9-8d60-3cbbc22e7b48") /* Platform-wide Capabilities */))
            {
                If (CondRefOf (DDMS))
                {
                    DDMS ()
                }
                Else
                {
                }

                If (LEqual (Arg1, One))
                {
                    Store (CAP0, OSCP)
                    If (And (CAP0, 0x04))
                    {
                        Store (0x04, OSCO)
                        If (LNotEqual (And (HGMD, 0x0F), 0x02))
                        {
                            If (LEqual (RTD3, Zero))
                            {
                                And (CAP0, 0xFFFFFFFB, CAP0)
                                Or (STS0, 0x10, STS0)
                            }
                        }
                    }

                    If (LEqual (U4FN (STS0, CAP0), 0xFF))
                    {
                        ADBG ("_OSC: Native USB4 capability bit is cleared")
                        And (CAP0, 0xFFFBFFFF, CAP0)
                        Or (STS0, 0x10, STS0)
                    }
                }
                Else
                {
                    And (STS0, 0xFFFFFF00, STS0)
                    Or (STS0, 0x0A, STS0)
                }
            }
            ElseIf (LEqual (Arg0, ToUUID ("23a0d13a-26ab-486c-9c5f-0ffa525a575a")))
            {
                If (LEqual (OSCM, One))
                {
                    CreateDWordField (Arg3, 0x08, CTRL)
                    If (LEqual (Arg1, One))
                    {
                        If (And (CTRL, 0xFFFFFFF0))
                        {
                            And (CTRL, 0x0F, CTRL)
                            Or (STS0, 0x10, STS0)
                        }

                        If (LEqual (EPTU, Zero))
                        {
                            And (CTRL, 0x0B, CTRL)
                            Or (STS0, 0x10, STS0)
                        }
                    }
                    Else
                    {
                        And (STS0, 0xFFFFFF00, STS0)
                        Or (STS0, 0x0A, STS0)
                    }
                }
                Else
                {
                    And (STS0, 0xFFFFFF00, STS0)
                    Or (STS0, 0x06, STS0)
                }
            }
            Else
            {
                And (STS0, 0xFFFFFF00, STS0)
                Or (STS0, 0x06, STS0)
            }

            Return (Arg3)
        }
    }

    Scope (_SB)
    {
        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E"))  // _HID: Hardware ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Scope (_SB.PC00.I2C0)
    {
        Device (PA01)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, "I2C0&PA01")  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x07)
                            {
                                0x27, 
                                0x28, 
                                0x29, 
                                0x2B, 
                                0x2C, 
                                0x30, 
                                0x35
                            }

)
                        {
                            Return (0x0F)
                        }
                        Case (Package (0x01)
                            {
                                0x39
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C0",
                        0x00, ResourceConsumer, _Y44, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C0.PA01._CRS._Y44._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x07)
                        {
                            0x27, 
                            0x28, 
                            0x29, 
                            0x2B, 
                            0x2C, 
                            0x30, 
                            0x35
                        }

)
                    {
                        Store (0x10, BADR)
                    }
                    Case (Package (0x01)
                        {
                            0x39
                        }

)
                    {
                        Store (0x10, BADR)
                    }
                    Default
                    {
                        Store (Zero, BADR)
                    }

                }

                Return (RBUF)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LNotEqual (Arg0, ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09")))
                {
                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                           
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x03)
                        {
                            Package (0x08)
                            {
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero
                            }, 

                            Package (0x08)
                            {
                                "VCCIN_AUX_PH1", 
                                0x02, 
                                "VCCIN_AUX_PH2", 
                                0x02, 
                                "V12S_CPU_VCCIN_AUX_VIN", 
                                0x05, 
                                "V3P3DX_PCH_SSD1", 
                                0x0A
                            }, 

                            Package (0x08)
                            {
                                "CPU_VCCINAUX1", 
                                0x02, 
                                "CPU_VCCINAUX2", 
                                0x02, 
                                "SYSTEM_VCCINAUX_INPUT", 
                                0x05, 
                                "STORAGE_PCH_SSD", 
                                0x0A
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x07)
                                {
                                    0x27, 
                                    0x28, 
                                    0x29, 
                                    0x2B, 
                                    0x2C, 
                                    0x30, 
                                    0x35
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, One)))
                            }
                            Case (Package (0x01)
                                {
                                    0x39
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, 0x02)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG1, Zero)))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x07D0, 
                                0x07D0, 
                                0x1388, 
                                0x2710
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x07)
                                {
                                    0x27, 
                                    0x28, 
                                    0x29, 
                                    0x2B, 
                                    0x2C, 
                                    0x30, 
                                    0x35
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Case (Package (0x01)
                                {
                                    0x39
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG2, Zero)))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3)
                    }
                    Case (0x04)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4)
                    }
                    Case (0x05)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5)
                    }
                    Case (0x06)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6)
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (PA02)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, "I2C0&PA02")  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x07)
                            {
                                0x27, 
                                0x28, 
                                0x29, 
                                0x2B, 
                                0x2C, 
                                0x30, 
                                0x35
                            }

)
                        {
                            Return (0x0F)
                        }
                        Case (Package (0x01)
                            {
                                0x39
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C0",
                        0x00, ResourceConsumer, _Y45, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C0.PA02._CRS._Y45._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x07)
                        {
                            0x27, 
                            0x28, 
                            0x29, 
                            0x2B, 
                            0x2C, 
                            0x30, 
                            0x35
                        }

)
                    {
                        Store (0x12, BADR)
                    }
                    Case (Package (0x01)
                        {
                            0x39
                        }

)
                    {
                        Store (0x12, BADR)
                    }
                    Default
                    {
                        Store (Zero, BADR)
                    }

                }

                Return (RBUF)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LNotEqual (Arg0, ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09")))
                {
                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                           
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x03)
                        {
                            Package (0x08)
                            {
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero
                            }, 

                            Package (0x08)
                            {
                                "VCCCORE_VIN", 
                                0x02, 
                                "VCCGT_VIN", 
                                0x02, 
                                "VCCCORE_PH1", 
                                One, 
                                "VCCCORE_PH2", 
                                One
                            }, 

                            Package (0x08)
                            {
                                "SYSTEM_VCCCORE_INPUT", 
                                0x02, 
                                "SYSTEM_VCCGT_INPUT", 
                                0x02, 
                                "CPU_VCCCORE1", 
                                One, 
                                "CPU_VCCCORE2", 
                                One
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x07)
                                {
                                    0x27, 
                                    0x28, 
                                    0x29, 
                                    0x2B, 
                                    0x2C, 
                                    0x30, 
                                    0x35
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, One)))
                            }
                            Case (Package (0x01)
                                {
                                    0x39
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, 0x02)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG1, Zero)))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x07D0, 
                                0x07D0, 
                                0x03E8, 
                                0x03E8
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x07)
                                {
                                    0x27, 
                                    0x28, 
                                    0x29, 
                                    0x2B, 
                                    0x2C, 
                                    0x30, 
                                    0x35
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Case (Package (0x01)
                                {
                                    0x39
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG2, Zero)))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3)
                    }
                    Case (0x04)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4)
                    }
                    Case (0x05)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5)
                    }
                    Case (0x06)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6)
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (PA03)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, "I2C0&PA03")  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x07)
                            {
                                0x27, 
                                0x28, 
                                0x29, 
                                0x2B, 
                                0x2C, 
                                0x30, 
                                0x35
                            }

)
                        {
                            Return (0x0F)
                        }
                        Case (Package (0x01)
                            {
                                0x39
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C0",
                        0x00, ResourceConsumer, _Y46, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C0.PA03._CRS._Y46._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x07)
                        {
                            0x27, 
                            0x28, 
                            0x29, 
                            0x2B, 
                            0x2C, 
                            0x30, 
                            0x35
                        }

)
                    {
                        Store (0x14, BADR)
                    }
                    Case (Package (0x01)
                        {
                            0x39
                        }

)
                    {
                        Store (0x14, BADR)
                    }
                    Default
                    {
                        Store (Zero, BADR)
                    }

                }

                Return (RBUF)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LNotEqual (Arg0, ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09")))
                {
                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                           
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x03)
                        {
                            Package (0x08)
                            {
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero
                            }, 

                            Package (0x08)
                            {
                                "VCCCORE_PH3", 
                                One, 
                                "VCCCORE_PH4", 
                                One, 
                                "VCCCORE_PH5", 
                                One, 
                                "VCCCORE_PH6", 
                                One
                            }, 

                            Package (0x08)
                            {
                                "CPU_VCCCORE3", 
                                One, 
                                "CPU_VCCCORE4", 
                                One, 
                                "CPU_VCCCORE5", 
                                One, 
                                "CPU_VCCCORE6", 
                                One
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x07)
                                {
                                    0x27, 
                                    0x28, 
                                    0x29, 
                                    0x2B, 
                                    0x2C, 
                                    0x30, 
                                    0x35
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, One)))
                            }
                            Case (Package (0x01)
                                {
                                    0x39
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, 0x02)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG1, Zero)))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x03E8, 
                                0x03E8, 
                                0x03E8, 
                                0x03E8
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x07)
                                {
                                    0x27, 
                                    0x28, 
                                    0x29, 
                                    0x2B, 
                                    0x2C, 
                                    0x30, 
                                    0x35
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Case (Package (0x01)
                                {
                                    0x39
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG2, Zero)))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3)
                    }
                    Case (0x04)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4)
                    }
                    Case (0x05)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5)
                    }
                    Case (0x06)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6)
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (PA04)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, "I2C0&PA04")  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x07)
                            {
                                0x27, 
                                0x28, 
                                0x29, 
                                0x2B, 
                                0x2C, 
                                0x30, 
                                0x35
                            }

)
                        {
                            Return (0x0F)
                        }
                        Case (Package (0x01)
                            {
                                0x39
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C0",
                        0x00, ResourceConsumer, _Y47, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C0.PA04._CRS._Y47._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x07)
                        {
                            0x27, 
                            0x28, 
                            0x29, 
                            0x2B, 
                            0x2C, 
                            0x30, 
                            0x35
                        }

)
                    {
                        Store (0x16, BADR)
                    }
                    Case (Package (0x01)
                        {
                            0x39
                        }

)
                    {
                        Store (0x16, BADR)
                    }
                    Default
                    {
                        Store (Zero, BADR)
                    }

                }

                Return (RBUF)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LNotEqual (Arg0, ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09")))
                {
                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                           
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x03)
                        {
                            Package (0x08)
                            {
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero
                            }, 

                            Package (0x08)
                            {
                                "VCCCORE_PH7", 
                                One, 
                                "VCCCORE_PH8", 
                                One, 
                                "VCCGT", 
                                One, 
                                "V0P82A_PCH", 
                                0x02
                            }, 

                            Package (0x08)
                            {
                                "CPU_VCCCORE7", 
                                One, 
                                "CPU_VCCCORE8", 
                                One, 
                                "CPU_VCCGT", 
                                One, 
                                "PCH_V0P82A", 
                                0x02
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x07)
                                {
                                    0x27, 
                                    0x28, 
                                    0x29, 
                                    0x2B, 
                                    0x2C, 
                                    0x30, 
                                    0x35
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, One)))
                            }
                            Case (Package (0x01)
                                {
                                    0x39
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, 0x02)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG1, Zero)))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x03E8, 
                                0x03E8, 
                                0x03E8, 
                                0x07D0
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x07)
                                {
                                    0x27, 
                                    0x28, 
                                    0x29, 
                                    0x2B, 
                                    0x2C, 
                                    0x30, 
                                    0x35
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Case (Package (0x01)
                                {
                                    0x39
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG2, Zero)))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3)
                    }
                    Case (0x04)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4)
                    }
                    Case (0x05)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5)
                    }
                    Case (0x06)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6)
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (PA05)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, "I2C0&PA05")  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x07)
                            {
                                0x27, 
                                0x28, 
                                0x29, 
                                0x2B, 
                                0x2C, 
                                0x30, 
                                0x35
                            }

)
                        {
                            Return (0x0F)
                        }
                        Case (Package (0x01)
                            {
                                0x39
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C0",
                        0x00, ResourceConsumer, _Y48, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C0.PA05._CRS._Y48._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x07)
                        {
                            0x27, 
                            0x28, 
                            0x29, 
                            0x2B, 
                            0x2C, 
                            0x30, 
                            0x35
                        }

)
                    {
                        Store (0x18, BADR)
                    }
                    Case (Package (0x01)
                        {
                            0x39
                        }

)
                    {
                        Store (0x18, BADR)
                    }
                    Default
                    {
                        Store (Zero, BADR)
                    }

                }

                Return (RBUF)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LNotEqual (Arg0, ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09")))
                {
                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                           
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x03)
                        {
                            Package (0x08)
                            {
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero
                            }, 

                            Package (0x08)
                            {
                                "V5P0DX_SSD", 
                                0x05, 
                                "V1P05A_CPU", 
                                0x05, 
                                "VCCPRIM_1P8", 
                                0x16, 
                                "VCCPDSW_3P3", 
                                0x16
                            }, 

                            Package (0x08)
                            {
                                "STORAGE_SATA", 
                                0x05, 
                                "CPU_V1P05A", 
                                0x05, 
                                "PCH_VCCPRIM_1P8", 
                                0x16, 
                                "PCH_VCCPDSW_3P3", 
                                0x16
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x07)
                                {
                                    0x27, 
                                    0x28, 
                                    0x29, 
                                    0x2B, 
                                    0x2C, 
                                    0x30, 
                                    0x35
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, One)))
                            }
                            Case (Package (0x01)
                                {
                                    0x39
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, 0x02)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG1, Zero)))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x1388, 
                                0x1388, 
                                0x55F0, 
                                0x55F0
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x07)
                                {
                                    0x27, 
                                    0x28, 
                                    0x29, 
                                    0x2B, 
                                    0x2C, 
                                    0x30, 
                                    0x35
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Case (Package (0x01)
                                {
                                    0x39
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG2, Zero)))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3)
                    }
                    Case (0x04)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4)
                    }
                    Case (0x05)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5)
                    }
                    Case (0x06)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6)
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (PA06)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, "I2C0&PA06")  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x07)
                            {
                                0x27, 
                                0x28, 
                                0x29, 
                                0x2B, 
                                0x2C, 
                                0x30, 
                                0x35
                            }

)
                        {
                            Return (0x0F)
                        }
                        Case (Package (0x01)
                            {
                                0x39
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C0",
                        0x00, ResourceConsumer, _Y49, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C0.PA06._CRS._Y49._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x07)
                        {
                            0x27, 
                            0x28, 
                            0x29, 
                            0x2B, 
                            0x2C, 
                            0x30, 
                            0x35
                        }

)
                    {
                        Store (0x1A, BADR)
                    }
                    Case (Package (0x01)
                        {
                            0x39
                        }

)
                    {
                        Store (0x1A, BADR)
                    }
                    Default
                    {
                        Store (Zero, BADR)
                    }

                }

                Return (RBUF)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LNotEqual (Arg0, ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09")))
                {
                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                           
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x03)
                        {
                            Package (0x08)
                            {
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero
                            }, 

                            Package (0x08)
                            {
                                "V5DSW", 
                                0x0A, 
                                "V5S", 
                                0x02, 
                                "V3P3S", 
                                0x02, 
                                "V12S", 
                                0x02
                            }, 

                            Package (0x08)
                            {
                                "SYSTEM_V5DSW", 
                                0x0A, 
                                "SYSTEM_V5S", 
                                0x02, 
                                "SYSTEM_V3P3S", 
                                0x02, 
                                "SYSTEM_V12S", 
                                0x02
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x07)
                                {
                                    0x27, 
                                    0x28, 
                                    0x29, 
                                    0x2B, 
                                    0x2C, 
                                    0x30, 
                                    0x35
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, One)))
                            }
                            Case (Package (0x01)
                                {
                                    0x39
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, 0x02)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG1, Zero)))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x2710, 
                                0x07D0, 
                                0x07D0, 
                                0x07D0
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x07)
                                {
                                    0x27, 
                                    0x28, 
                                    0x29, 
                                    0x2B, 
                                    0x2C, 
                                    0x30, 
                                    0x35
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Case (Package (0x01)
                                {
                                    0x39
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG2, Zero)))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3)
                    }
                    Case (0x04)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4)
                    }
                    Case (0x05)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5)
                    }
                    Case (0x06)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6)
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (PA07)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, "I2C0&PA07")  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x07)
                            {
                                0x27, 
                                0x28, 
                                0x29, 
                                0x2B, 
                                0x2C, 
                                0x30, 
                                0x35
                            }

)
                        {
                            Return (0x0F)
                        }
                        Case (Package (0x01)
                            {
                                0x39
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C0",
                        0x00, ResourceConsumer, _Y4A, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C0.PA07._CRS._Y4A._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x07)
                        {
                            0x27, 
                            0x28, 
                            0x29, 
                            0x2B, 
                            0x2C, 
                            0x30, 
                            0x35
                        }

)
                    {
                        Store (0x1C, BADR)
                    }
                    Case (Package (0x01)
                        {
                            0x39
                        }

)
                    {
                        Store (0x1C, BADR)
                    }
                    Default
                    {
                        Store (Zero, BADR)
                    }

                }

                Return (RBUF)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LNotEqual (Arg0, ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09")))
                {
                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                           
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x05)
                        {
                            Package (0x08)
                            {
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero
                            }, 

                            Package (0x08)
                            {
                                "V3P3DX_CPU_SSD", 
                                0x0A, 
                                "", 
                                Zero, 
                                "VCCDD2_CPU", 
                                0x02, 
                                "VPP", 
                                0x0A
                            }, 

                            Package (0x08)
                            {
                                "V3P3DX_CPU_SSD", 
                                0x0A, 
                                "", 
                                Zero, 
                                "VCCDD2_CPU", 
                                0x05, 
                                "V5DUAL_DDR5", 
                                0x02
                            }, 

                            Package (0x08)
                            {
                                "V3P3DX_CPU_SSD", 
                                0x0A, 
                                "", 
                                Zero, 
                                "VCCDD2_CPU", 
                                0x05, 
                                "VDDQ", 
                                0x02
                            }, 

                            Package (0x08)
                            {
                                "STORAGE_CPU_SSD", 
                                0x0A, 
                                "", 
                                Zero, 
                                "CPU_DRAM_VCCDD2", 
                                0x05, 
                                "DRAM_VIN_BULK", 
                                0x02
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x03)
                                {
                                    0x27, 
                                    0x28, 
                                    0x29
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, One)))
                            }
                            Case (Package (0x03)
                                {
                                    0x2B, 
                                    0x2C, 
                                    0x30
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, 0x02)))
                            }
                            Case (Package (0x01)
                                {
                                    0x35
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, 0x03)))
                            }
                            Case (Package (0x01)
                                {
                                    0x39
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, 0x04)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG1, Zero)))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (PKG2, Package (0x05)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x2710, 
                                Zero, 
                                0x07D0, 
                                0x2710
                            }, 

                            Package (0x04)
                            {
                                0x2710, 
                                Zero, 
                                0x1388, 
                                0x07D0
                            }, 

                            Package (0x04)
                            {
                                0x2710, 
                                Zero, 
                                0x1388, 
                                0x07D0
                            }, 

                            Package (0x04)
                            {
                                0x2710, 
                                Zero, 
                                0x1388, 
                                0x07D0
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x03)
                                {
                                    0x27, 
                                    0x28, 
                                    0x29
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Case (Package (0x03)
                                {
                                    0x2B, 
                                    0x2C, 
                                    0x30
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, 0x02)))
                            }
                            Case (Package (0x01)
                                {
                                    0x35
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, 0x03)))
                            }
                            Case (Package (0x01)
                                {
                                    0x39
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, 0x04)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG2, Zero)))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3)
                    }
                    Case (0x04)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4)
                    }
                    Case (0x05)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5)
                    }
                    Case (0x06)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6)
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (PM01)
        {
            Name (_HID, "MCHP1940")  // _HID: Hardware ID
            Name (_UID, "I2C0&PM01")  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x01)
                            {
                                0x3E
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C0",
                        0x00, ResourceConsumer, _Y4B, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C0.PM01._CRS._Y4B._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x01)
                        {
                            0x3E
                        }

)
                    {
                        Store (0x10, BADR)
                    }
                    Default
                    {
                        Store (Zero, BADR)
                    }

                }

                Return (RBUF)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LNotEqual (Arg0, ToUUID ("721f1534-5d27-4b60-9df4-41a3c4b7da3a")))
                {
                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0xFF                                           
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x02)
                        {
                            Package (0x04)
                            {
                                "", 
                                "", 
                                "", 
                                ""
                            }, 

                            Package (0x04)
                            {
                                "CPU_VCCINAUX1", 
                                "CPU_VCCINAUX2", 
                                "CPU_VCCCORE1", 
                                "CPU_VCCCORE2"
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3E
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG1, Zero)))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x07D0, 
                                0x07D0, 
                                0x03E8, 
                                0x03E8
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3E
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG2, Zero)))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3)
                    }
                    Case (0x04)
                    {
                        Name (BUF4, Package (0x08)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Return (BUF4)
                    }
                    Case (0x05)
                    {
                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5)
                    }
                    Case (0x06)
                    {
                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6)
                    }
                    Case (0x07)
                    {
                        Name (BUF7, Package (0x04)
                        {
                            0x03E8, 
                            0x03E8, 
                            0x03E8, 
                            0x03E8
                        })
                        Return (BUF7)
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (PM02)
        {
            Name (_HID, "MCHP1940")  // _HID: Hardware ID
            Name (_UID, "I2C0&PM02")  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x01)
                            {
                                0x3E
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C0",
                        0x00, ResourceConsumer, _Y4C, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C0.PM02._CRS._Y4C._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x01)
                        {
                            0x3E
                        }

)
                    {
                        Store (0x14, BADR)
                    }
                    Default
                    {
                        Store (Zero, BADR)
                    }

                }

                Return (RBUF)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LNotEqual (Arg0, ToUUID ("721f1534-5d27-4b60-9df4-41a3c4b7da3a")))
                {
                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0xFF                                           
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x02)
                        {
                            Package (0x04)
                            {
                                "", 
                                "", 
                                "", 
                                ""
                            }, 

                            Package (0x04)
                            {
                                "CPU_VCCCORE3", 
                                "CPU_VCCCORE4", 
                                "CPU_VCCCORE5", 
                                "CPU_VCCCORE6"
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3E
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG1, Zero)))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x03E8, 
                                0x03E8, 
                                0x03E8, 
                                0x03E8
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3E
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG2, Zero)))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3)
                    }
                    Case (0x04)
                    {
                        Name (BUF4, Package (0x08)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Return (BUF4)
                    }
                    Case (0x05)
                    {
                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5)
                    }
                    Case (0x06)
                    {
                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6)
                    }
                    Case (0x07)
                    {
                        Name (BUF7, Package (0x04)
                        {
                            0x03E8, 
                            0x03E8, 
                            0x03E8, 
                            0x03E8
                        })
                        Return (BUF7)
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (PM03)
        {
            Name (_HID, "MCHP1940")  // _HID: Hardware ID
            Name (_UID, "I2C0&PM03")  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x01)
                            {
                                0x3E
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C0",
                        0x00, ResourceConsumer, _Y4D, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C0.PM03._CRS._Y4D._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x01)
                        {
                            0x3E
                        }

)
                    {
                        Store (0x16, BADR)
                    }
                    Default
                    {
                        Store (Zero, BADR)
                    }

                }

                Return (RBUF)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LNotEqual (Arg0, ToUUID ("721f1534-5d27-4b60-9df4-41a3c4b7da3a")))
                {
                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0xFF                                           
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x02)
                        {
                            Package (0x04)
                            {
                                "", 
                                "", 
                                "", 
                                ""
                            }, 

                            Package (0x04)
                            {
                                "CPU_VCCCORE7", 
                                "STORAGE_PCH_SSD", 
                                "CPU_VCCGT", 
                                "PCH_V0P82A"
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3E
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG1, Zero)))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x03E8, 
                                0x1388, 
                                0x03E8, 
                                0x07D0
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3E
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG2, Zero)))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3)
                    }
                    Case (0x04)
                    {
                        Name (BUF4, Package (0x08)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Return (BUF4)
                    }
                    Case (0x05)
                    {
                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5)
                    }
                    Case (0x06)
                    {
                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6)
                    }
                    Case (0x07)
                    {
                        Name (BUF7, Package (0x04)
                        {
                            0x03E8, 
                            0x03E8, 
                            0x03E8, 
                            0x03E8
                        })
                        Return (BUF7)
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (PM04)
        {
            Name (_HID, "MCHP1940")  // _HID: Hardware ID
            Name (_UID, "I2C0&PM04")  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x01)
                            {
                                0x3E
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C0",
                        0x00, ResourceConsumer, _Y4E, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C0.PM04._CRS._Y4E._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x01)
                        {
                            0x3E
                        }

)
                    {
                        Store (0x18, BADR)
                    }
                    Default
                    {
                        Store (Zero, BADR)
                    }

                }

                Return (RBUF)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LNotEqual (Arg0, ToUUID ("721f1534-5d27-4b60-9df4-41a3c4b7da3a")))
                {
                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0xFF                                           
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x02)
                        {
                            Package (0x04)
                            {
                                "", 
                                "", 
                                "", 
                                ""
                            }, 

                            Package (0x04)
                            {
                                "STORAGE_SATA", 
                                "CPU_V1P05A", 
                                "PCH_VCCPRIM_1P8", 
                                "PCH_VCCPDSW_3P3"
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3E
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG1, Zero)))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x1388, 
                                0x1388, 
                                0x55F0, 
                                0x55F0
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3E
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG2, Zero)))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3)
                    }
                    Case (0x04)
                    {
                        Name (BUF4, Package (0x08)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Return (BUF4)
                    }
                    Case (0x05)
                    {
                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5)
                    }
                    Case (0x06)
                    {
                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6)
                    }
                    Case (0x07)
                    {
                        Name (BUF7, Package (0x04)
                        {
                            0x03E8, 
                            0x03E8, 
                            0x03E8, 
                            0x03E8
                        })
                        Return (BUF7)
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (PM05)
        {
            Name (_HID, "MCHP1940")  // _HID: Hardware ID
            Name (_UID, "I2C0&PM05")  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x01)
                            {
                                0x3E
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C0",
                        0x00, ResourceConsumer, _Y4F, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C0.PM05._CRS._Y4F._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x01)
                        {
                            0x3E
                        }

)
                    {
                        Store (0x1A, BADR)
                    }
                    Default
                    {
                        Store (Zero, BADR)
                    }

                }

                Return (RBUF)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LNotEqual (Arg0, ToUUID ("721f1534-5d27-4b60-9df4-41a3c4b7da3a")))
                {
                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0xFF                                           
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x02)
                        {
                            Package (0x04)
                            {
                                "", 
                                "", 
                                "", 
                                ""
                            }, 

                            Package (0x04)
                            {
                                "SYSTEM_V5DSW", 
                                "SYSTEM_V5S", 
                                "SYSTEM_V3P3S", 
                                "SYSTEM_V12S"
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3E
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG1, Zero)))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x2710, 
                                0x07D0, 
                                0x07D0, 
                                0x07D0
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3E
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG2, Zero)))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3)
                    }
                    Case (0x04)
                    {
                        Name (BUF4, Package (0x08)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Return (BUF4)
                    }
                    Case (0x05)
                    {
                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5)
                    }
                    Case (0x06)
                    {
                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6)
                    }
                    Case (0x07)
                    {
                        Name (BUF7, Package (0x04)
                        {
                            0x03E8, 
                            0x03E8, 
                            0x03E8, 
                            0x03E8
                        })
                        Return (BUF7)
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (PM06)
        {
            Name (_HID, "MCHP1940")  // _HID: Hardware ID
            Name (_UID, "I2C0&PM06")  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x01)
                            {
                                0x3E
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C0",
                        0x00, ResourceConsumer, _Y50, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C0.PM06._CRS._Y50._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x01)
                        {
                            0x3E
                        }

)
                    {
                        Store (0x1C, BADR)
                    }
                    Default
                    {
                        Store (Zero, BADR)
                    }

                }

                Return (RBUF)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LNotEqual (Arg0, ToUUID ("721f1534-5d27-4b60-9df4-41a3c4b7da3a")))
                {
                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0xFF                                           
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x02)
                        {
                            Package (0x04)
                            {
                                "", 
                                "", 
                                "", 
                                ""
                            }, 

                            Package (0x04)
                            {
                                "STORAGE_CPU_SSD", 
                                "DRAM_VPP", 
                                "CPU_VCCDD2", 
                                "DRAM_VDD2"
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3E
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG1, Zero)))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x1388, 
                                0x2710, 
                                0x07D0, 
                                0x07D0
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3E
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG2, Zero)))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3)
                    }
                    Case (0x04)
                    {
                        Name (BUF4, Package (0x08)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Return (BUF4)
                    }
                    Case (0x05)
                    {
                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5)
                    }
                    Case (0x06)
                    {
                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6)
                    }
                    Case (0x07)
                    {
                        Name (BUF7, Package (0x04)
                        {
                            0x03E8, 
                            0x03E8, 
                            0x03E8, 
                            0x03E8
                        })
                        Return (BUF7)
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }
    }

    Scope (_SB.PC00.I2C3)
    {
        Device (PA01)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, "I2C3&PA01")  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x01)
                            {
                                0x2F
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C3",
                        0x00, ResourceConsumer, _Y51, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C3.PA01._CRS._Y51._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x01)
                        {
                            0x2F
                        }

)
                    {
                        Store (0x20, BADR)
                    }
                    Default
                    {
                        Store (Zero, BADR)
                    }

                }

                Return (RBUF)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LNotEqual (Arg0, ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09")))
                {
                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                           
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x02)
                        {
                            Package (0x08)
                            {
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero
                            }, 

                            Package (0x08)
                            {
                                "VBATA_VCCGT_GPU", 
                                0x05, 
                                "VBATA_VCCSAMC_GPU", 
                                0x05, 
                                "VBATA_DGPU", 
                                0x05, 
                                "VBATA_VDD_GDDR6_GPU", 
                                0x05
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x2F
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG1, Zero)))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x1388, 
                                0x1388, 
                                0x1388, 
                                0x1388
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x2F
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG2, Zero)))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3)
                    }
                    Case (0x04)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4)
                    }
                    Case (0x05)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5)
                    }
                    Case (0x06)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6)
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (PA02)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, "I2C3&PA02")  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x01)
                            {
                                0x2F
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C3",
                        0x00, ResourceConsumer, _Y52, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C3.PA02._CRS._Y52._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x01)
                        {
                            0x2F
                        }

)
                    {
                        Store (0x22, BADR)
                    }
                    Default
                    {
                        Store (Zero, BADR)
                    }

                }

                Return (RBUF)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LNotEqual (Arg0, ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09")))
                {
                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                           
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x02)
                        {
                            Package (0x08)
                            {
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero
                            }, 

                            Package (0x08)
                            {
                                "VBATA_VCCIN", 
                                0x05, 
                                "VBATA_VCCIN_AUX", 
                                0x05, 
                                "VBATA_VCCGT", 
                                0x05, 
                                "V5A_DDR5", 
                                0x02
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x2F
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG1, Zero)))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x1388, 
                                0x1388, 
                                0x1388, 
                                0x07D0
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x2F
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG2, Zero)))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3)
                    }
                    Case (0x04)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4)
                    }
                    Case (0x05)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5)
                    }
                    Case (0x06)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6)
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (PA03)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, "I2C3&PA03")  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x01)
                            {
                                0x2F
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C3",
                        0x00, ResourceConsumer, _Y53, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C3.PA03._CRS._Y53._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x01)
                        {
                            0x2F
                        }

)
                    {
                        Store (0x24, BADR)
                    }
                    Default
                    {
                        Store (Zero, BADR)
                    }

                }

                Return (RBUF)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LNotEqual (Arg0, ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09")))
                {
                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                           
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x02)
                        {
                            Package (0x08)
                            {
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero
                            }, 

                            Package (0x08)
                            {
                                "V3P3DX_PCH_SSD1", 
                                0x0A, 
                                "V3P3DX_CPU_SSD", 
                                0x0A, 
                                "VBATTERY", 
                                0x05, 
                                "V3P3A_WWAN", 
                                0x0A
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x2F
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG1, Zero)))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x2710, 
                                0x2710, 
                                0x1388, 
                                0x2710
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x2F
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG2, Zero)))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3)
                    }
                    Case (0x04)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4)
                    }
                    Case (0x05)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5)
                    }
                    Case (0x06)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6)
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (PA04)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, "I2C3&PA04")  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x01)
                            {
                                0x2F
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C3",
                        0x00, ResourceConsumer, _Y54, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C3.PA04._CRS._Y54._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x01)
                        {
                            0x2F
                        }

)
                    {
                        Store (0x26, BADR)
                    }
                    Default
                    {
                        Store (Zero, BADR)
                    }

                }

                Return (RBUF)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LNotEqual (Arg0, ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09")))
                {
                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                           
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x02)
                        {
                            Package (0x08)
                            {
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero
                            }, 

                            Package (0x08)
                            {
                                "V3P3_SLOTE", 
                                0x0A, 
                                "V3P3_LAN", 
                                0x0A, 
                                "V3P3DX_EDP", 
                                0x0A, 
                                "VCC_EDP_BKLT", 
                                0x0A
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x2F
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG1, Zero)))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x2710, 
                                0x2710, 
                                0x2710, 
                                0x2710
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x2F
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG2, Zero)))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3)
                    }
                    Case (0x04)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4)
                    }
                    Case (0x05)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5)
                    }
                    Case (0x06)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6)
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }
    }

    Scope (_SB.PC00.I2C5)
    {
        Device (PA01)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, "I2C5&PA01")  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x01)
                            {
                                0x3B
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C5",
                        0x00, ResourceConsumer, _Y55, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C5.PA01._CRS._Y55._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x01)
                        {
                            0x3B
                        }

)
                    {
                        Store (0x10, BADR)
                    }
                    Default
                    {
                        Store (Zero, BADR)
                    }

                }

                Return (RBUF)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LNotEqual (Arg0, ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09")))
                {
                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                           
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x02)
                        {
                            Package (0x08)
                            {
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero
                            }, 

                            Package (0x08)
                            {
                                "AUDIO_V1P8", 
                                0x0A, 
                                "AUDIO_V5", 
                                0x0A, 
                                "AUDIO_V12S", 
                                0x0A, 
                                "STORAGE_PCH_SSD", 
                                0x0A
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3B
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG1, Zero)))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x2710, 
                                0x2710, 
                                0x2710, 
                                0x2710
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3B
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG2, Zero)))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3)
                    }
                    Case (0x04)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4)
                    }
                    Case (0x05)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5)
                    }
                    Case (0x06)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6)
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (PA02)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, "I2C5&PA02")  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x01)
                            {
                                0x3B
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C5",
                        0x00, ResourceConsumer, _Y56, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C5.PA02._CRS._Y56._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x01)
                        {
                            0x3B
                        }

)
                    {
                        Store (0x14, BADR)
                    }
                    Default
                    {
                        Store (Zero, BADR)
                    }

                }

                Return (RBUF)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LNotEqual (Arg0, ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09")))
                {
                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                           
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x02)
                        {
                            Package (0x08)
                            {
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero
                            }, 

                            Package (0x08)
                            {
                                "SYSTEM_VCCCORE_VIN", 
                                0x02, 
                                "SYSTEM_VCCGT_VIN", 
                                0x02, 
                                "CPU_V1P8", 
                                0x0A, 
                                "CPU_V1P05", 
                                0x05
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3B
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG1, Zero)))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x07D0, 
                                0x07D0, 
                                0x2710, 
                                0x1388
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3B
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG2, Zero)))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3)
                    }
                    Case (0x04)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4)
                    }
                    Case (0x05)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5)
                    }
                    Case (0x06)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6)
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (PA03)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, "I2C5&PA03")  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x01)
                            {
                                0x3B
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C5",
                        0x00, ResourceConsumer, _Y57, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C5.PA03._CRS._Y57._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x01)
                        {
                            0x3B
                        }

)
                    {
                        Store (0x16, BADR)
                    }
                    Default
                    {
                        Store (Zero, BADR)
                    }

                }

                Return (RBUF)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LNotEqual (Arg0, ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09")))
                {
                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                           
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x02)
                        {
                            Package (0x08)
                            {
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero
                            }, 

                            Package (0x08)
                            {
                                "SYSTEM_VCCINAUX_VIN", 
                                0x05, 
                                "CPU_VCCDD2", 
                                0x05, 
                                "DRAM_V5A", 
                                0x02, 
                                "SYSTEM_VBATA", 
                                One
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3B
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG1, Zero)))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x1388, 
                                0x1388, 
                                0x07D0, 
                                0x03E8
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3B
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG2, Zero)))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3)
                    }
                    Case (0x04)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4)
                    }
                    Case (0x05)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5)
                    }
                    Case (0x06)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6)
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (PA04)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, "I2C5&PA04")  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x01)
                            {
                                0x3B
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C5",
                        0x00, ResourceConsumer, _Y58, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C5.PA04._CRS._Y58._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x01)
                        {
                            0x3B
                        }

)
                    {
                        Store (0x18, BADR)
                    }
                    Default
                    {
                        Store (Zero, BADR)
                    }

                }

                Return (RBUF)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LNotEqual (Arg0, ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09")))
                {
                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                           
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x02)
                        {
                            Package (0x08)
                            {
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero
                            }, 

                            Package (0x08)
                            {
                                "PLATFORM_V1P8A", 
                                0x05, 
                                "PCH_V0P82A", 
                                0x02, 
                                "PLATFORM_V3P3A_DSW", 
                                One, 
                                "PLATFORM_V5A_DS3", 
                                One
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3B
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG1, Zero)))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x1388, 
                                0x07D0, 
                                0x03E8, 
                                0x03E8
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3B
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG2, Zero)))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3)
                    }
                    Case (0x04)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4)
                    }
                    Case (0x05)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5)
                    }
                    Case (0x06)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6)
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (PA05)
        {
            Name (_HID, "MCHP1930")  // _HID: Hardware ID
            Name (_UID, "I2C5&PA05")  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x01)
                            {
                                0x3B
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C5",
                        0x00, ResourceConsumer, _Y59, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C5.PA05._CRS._Y59._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x01)
                        {
                            0x3B
                        }

)
                    {
                        Store (0x1C, BADR)
                    }
                    Default
                    {
                        Store (Zero, BADR)
                    }

                }

                Return (RBUF)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LNotEqual (Arg0, ToUUID ("033771e0-1705-47b4-9535-d1bbe14d9a09")))
                {
                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Case (One)
                            {
                                Return (Buffer (One)
                                {
                                     0x7F                                           
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x02)
                        {
                            Package (0x08)
                            {
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero, 
                                "", 
                                Zero
                            }, 

                            Package (0x08)
                            {
                                "STORAGE_CPU_SSD", 
                                0x0A, 
                                "CONNECTIVITY_WLAN", 
                                0x02, 
                                "CONNECTIVITY_LAN", 
                                0x0A, 
                                "CONNECTIVITY_WWAN", 
                                0x0A
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3B
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG1, Zero)))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x2710, 
                                0x07D0, 
                                0x2710, 
                                0x2710
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3B
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG2, Zero)))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3)
                    }
                    Case (0x04)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF4, Package (0x01)
                        {
                            Zero
                        })
                        Return (BUF4)
                    }
                    Case (0x05)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5)
                    }
                    Case (0x06)
                    {
                        If (LLess (Arg1, One))
                        {
                            Break
                        }

                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6)
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (PM01)
        {
            Name (_HID, "MCHP1940")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x01)
                            {
                                0x3D
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C5",
                        0x00, ResourceConsumer, _Y5A, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C5.PM01._CRS._Y5A._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x01)
                        {
                            0x3D
                        }

)
                    {
                        Store (0x10, BADR)
                    }
                    Default
                    {
                        Store (Zero, BADR)
                    }

                }

                Return (RBUF)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LNotEqual (Arg0, ToUUID ("721f1534-5d27-4b60-9df4-41a3c4b7da3a")))
                {
                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0xFF                                           
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x02)
                        {
                            Package (0x04)
                            {
                                "", 
                                "", 
                                "", 
                                ""
                            }, 

                            Package (0x04)
                            {
                                "AUDIO_V1P8", 
                                "AUDIO_V5", 
                                "AUDIO_V12S", 
                                "STORAGE_PCH_SSD"
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3D
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG1, Zero)))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x2710, 
                                0x2710, 
                                0x2710, 
                                0x2710
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3D
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG2, Zero)))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3)
                    }
                    Case (0x04)
                    {
                        Name (BUF4, Package (0x08)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Return (BUF4)
                    }
                    Case (0x05)
                    {
                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5)
                    }
                    Case (0x06)
                    {
                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6)
                    }
                    Case (0x07)
                    {
                        Name (BUF7, Package (0x04)
                        {
                            0x03E8, 
                            0x03E8, 
                            0x03E8, 
                            0x03E8
                        })
                        Return (BUF7)
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (PM02)
        {
            Name (_HID, "MCHP1940")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x01)
                            {
                                0x3D
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C5",
                        0x00, ResourceConsumer, _Y5B, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C5.PM02._CRS._Y5B._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x01)
                        {
                            0x3D
                        }

)
                    {
                        Store (0x14, BADR)
                    }
                    Default
                    {
                        Store (Zero, BADR)
                    }

                }

                Return (RBUF)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LNotEqual (Arg0, ToUUID ("721f1534-5d27-4b60-9df4-41a3c4b7da3a")))
                {
                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0xFF                                           
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x02)
                        {
                            Package (0x04)
                            {
                                "", 
                                "", 
                                "", 
                                ""
                            }, 

                            Package (0x04)
                            {
                                "SYSTEM_VCCCORE_VIN", 
                                "SYSTEM_VCCGT_VIN", 
                                "CPU_V1P8", 
                                "CPU_V1P05"
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3D
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG1, Zero)))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x07D0, 
                                0x07D0, 
                                0x2710, 
                                0x1388
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3D
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG2, Zero)))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3)
                    }
                    Case (0x04)
                    {
                        Name (BUF4, Package (0x08)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Return (BUF4)
                    }
                    Case (0x05)
                    {
                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5)
                    }
                    Case (0x06)
                    {
                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6)
                    }
                    Case (0x07)
                    {
                        Name (BUF7, Package (0x04)
                        {
                            0x03E8, 
                            0x03E8, 
                            0x03E8, 
                            0x03E8
                        })
                        Return (BUF7)
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (PM03)
        {
            Name (_HID, "MCHP1940")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x01)
                            {
                                0x3D
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C5",
                        0x00, ResourceConsumer, _Y5C, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C5.PM03._CRS._Y5C._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x01)
                        {
                            0x3D
                        }

)
                    {
                        Store (0x16, BADR)
                    }
                    Default
                    {
                        Store (Zero, BADR)
                    }

                }

                Return (RBUF)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LNotEqual (Arg0, ToUUID ("721f1534-5d27-4b60-9df4-41a3c4b7da3a")))
                {
                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0xFF                                           
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x02)
                        {
                            Package (0x04)
                            {
                                "", 
                                "", 
                                "", 
                                ""
                            }, 

                            Package (0x04)
                            {
                                "SYSTEM_VCCINAUX_VIN", 
                                "CPU_VCCDD2", 
                                "DRAM_V5A", 
                                "SYSTEM_VBATA"
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3D
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG1, Zero)))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x1388, 
                                0x1388, 
                                0x07D0, 
                                0x03E8
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3D
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG2, Zero)))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3)
                    }
                    Case (0x04)
                    {
                        Name (BUF4, Package (0x08)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Return (BUF4)
                    }
                    Case (0x05)
                    {
                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5)
                    }
                    Case (0x06)
                    {
                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6)
                    }
                    Case (0x07)
                    {
                        Name (BUF7, Package (0x04)
                        {
                            0x03E8, 
                            0x03E8, 
                            0x03E8, 
                            0x03E8
                        })
                        Return (BUF7)
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (PM04)
        {
            Name (_HID, "MCHP1940")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x01)
                            {
                                0x3D
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C5",
                        0x00, ResourceConsumer, _Y5D, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C5.PM04._CRS._Y5D._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x01)
                        {
                            0x3D
                        }

)
                    {
                        Store (0x18, BADR)
                    }
                    Default
                    {
                        Store (Zero, BADR)
                    }

                }

                Return (RBUF)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LNotEqual (Arg0, ToUUID ("721f1534-5d27-4b60-9df4-41a3c4b7da3a")))
                {
                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0xFF                                           
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x02)
                        {
                            Package (0x04)
                            {
                                "", 
                                "", 
                                "", 
                                ""
                            }, 

                            Package (0x04)
                            {
                                "PLATFORM_V1P8A", 
                                "PCH_V0P82A", 
                                "PLATFORM_V3P3A_DSW", 
                                "PLATFORM_V5A_DS3"
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3D
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG1, Zero)))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x1388, 
                                0x07D0, 
                                0x03E8, 
                                0x03E8
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3D
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG2, Zero)))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3)
                    }
                    Case (0x04)
                    {
                        Name (BUF4, Package (0x08)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Return (BUF4)
                    }
                    Case (0x05)
                    {
                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5)
                    }
                    Case (0x06)
                    {
                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6)
                    }
                    Case (0x07)
                    {
                        Name (BUF7, Package (0x04)
                        {
                            0x03E8, 
                            0x03E8, 
                            0x03E8, 
                            0x03E8
                        })
                        Return (BUF7)
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (PM05)
        {
            Name (_HID, "MCHP1940")  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x01)
                            {
                                0x3D
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C5",
                        0x00, ResourceConsumer, _Y5E, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C5.PM05._CRS._Y5E._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x01)
                        {
                            0x3D
                        }

)
                    {
                        Store (0x1C, BADR)
                    }
                    Default
                    {
                        Store (Zero, BADR)
                    }

                }

                Return (RBUF)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LNotEqual (Arg0, ToUUID ("721f1534-5d27-4b60-9df4-41a3c4b7da3a")))
                {
                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0xFF                                           
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x02)
                        {
                            Package (0x04)
                            {
                                "", 
                                "", 
                                "", 
                                ""
                            }, 

                            Package (0x04)
                            {
                                "STORAGE_CPU_SSD", 
                                "CONNECTIVITY_WLAN", 
                                "CONNECTIVITY_LAN", 
                                "CONNECTIVITY_WWAN"
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3D
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG1, Zero)))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x2710, 
                                0x2710, 
                                0x2710, 
                                0x2710
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3D
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG2, Zero)))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3)
                    }
                    Case (0x04)
                    {
                        Name (BUF4, Package (0x08)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Return (BUF4)
                    }
                    Case (0x05)
                    {
                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5)
                    }
                    Case (0x06)
                    {
                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6)
                    }
                    Case (0x07)
                    {
                        Name (BUF7, Package (0x04)
                        {
                            0x03E8, 
                            0x03E8, 
                            0x03E8, 
                            0x03E8
                        })
                        Return (BUF7)
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (PM06)
        {
            Name (_HID, "MCHP1940")  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (POME)
                {
                    Switch (ToInteger (PLID))
                    {
                        Case (Package (0x01)
                            {
                                0x3D
                            }

)
                        {
                            Return (0x0F)
                        }

                    }
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C5",
                        0x00, ResourceConsumer, _Y5F, Exclusive,
                        )
                })
                CreateWordField (RBUF, \_SB.PC00.I2C5.PM06._CRS._Y5F._ADR, BADR)  // _ADR: Address
                Switch (ToInteger (PLID))
                {
                    Case (Package (0x01)
                        {
                            0x3D
                        }

)
                    {
                        Store (0x11, BADR)
                    }
                    Default
                    {
                        Store (Zero, BADR)
                    }

                }

                Return (RBUF)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LNotEqual (Arg0, ToUUID ("721f1534-5d27-4b60-9df4-41a3c4b7da3a")))
                {
                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0xFF                                           
                                })
                            }

                        }

                        Break
                    }
                    Case (One)
                    {
                        Name (PKG1, Package (0x02)
                        {
                            Package (0x04)
                            {
                                "", 
                                "", 
                                "", 
                                ""
                            }, 

                            Package (0x04)
                            {
                                "VBUS_TBT0_TYPEC_PA", 
                                "VBUS_TBT0_TYPEC_PB", 
                                "VBUS_TBT1_TYPEC_PA", 
                                "VBUS_TBT1_TYPEC_PB"
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3D
                                }

)
                            {
                                Return (DerefOf (Index (PKG1, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG1, Zero)))
                            }

                        }
                    }
                    Case (0x02)
                    {
                        Name (PKG2, Package (0x02)
                        {
                            Package (0x04)
                            {
                                Zero, 
                                Zero, 
                                Zero, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x1388, 
                                0x1388, 
                                0x1388, 
                                0x1388
                            }
                        })
                        Switch (ToInteger (PLID))
                        {
                            Case (Package (0x01)
                                {
                                    0x3D
                                }

)
                            {
                                Return (DerefOf (Index (PKG2, One)))
                            }
                            Default
                            {
                                Return (DerefOf (Index (PKG2, Zero)))
                            }

                        }
                    }
                    Case (0x03)
                    {
                        Name (BUF3, Package (0x01)
                        {
                            0x0F
                        })
                        Return (BUF3)
                    }
                    Case (0x04)
                    {
                        Name (BUF4, Package (0x08)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Return (BUF4)
                    }
                    Case (0x05)
                    {
                        Name (BUF5, Package (0x02)
                        {
                            0x0400, 
                            0x08
                        })
                        Return (BUF5)
                    }
                    Case (0x06)
                    {
                        Name (BUF6, Package (0x01)
                        {
                            0x0384
                        })
                        Return (BUF6)
                    }
                    Case (0x07)
                    {
                        Name (BUF7, Package (0x04)
                        {
                            0x03E8, 
                            0x03E8, 
                            0x03E8, 
                            0x03E8
                        })
                        Return (BUF7)
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }
    }

    Scope (_SB)
    {
        Device (COEX)
        {
            Name (_HID, EisaId ("INT3519"))  // _HID: Hardware ID
            Name (_STR, Unicode ("CoExistence Manager"))  // _STR: Description String
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (LEqual (COEM, One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.PC00.ISHD)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If (PCIC (Arg0))
            {
                Return (PCID (Arg0, Arg1, Arg2, Arg3))
            }

            If (CondRefOf (HIWC))
            {
                If (HIWC (Arg0))
                {
                    If (LLessEqual (Arg2, 0x02))
                    {
                        If (CondRefOf (HIDW))
                        {
                            Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                    ElseIf (LEqual (Arg2, 0x03))
                    {
                        If (CondRefOf (ISAR))
                        {
                            Return (ISAR (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }
            }

            Return (Buffer (One)
            {
                 0x00                                           
            })
        }
    }

    Scope (_SB)
    {
        Device (PR00)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
        }

        Device (PR01)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
        }

        Device (PR02)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
        }

        Device (PR03)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
        }

        Device (PR04)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
        }

        Device (PR05)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
        }

        Device (PR06)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
        }

        Device (PR07)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
        }

        Device (PR08)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
        }

        Device (PR09)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x09)  // _UID: Unique ID
        }

        Device (PR10)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x0A)  // _UID: Unique ID
        }

        Device (PR11)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x0B)  // _UID: Unique ID
        }

        Device (PR12)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x0C)  // _UID: Unique ID
        }

        Device (PR13)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x0D)  // _UID: Unique ID
        }

        Device (PR14)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x0E)  // _UID: Unique ID
        }

        Device (PR15)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x0F)  // _UID: Unique ID
        }

        Device (PR16)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x10)  // _UID: Unique ID
        }

        Device (PR17)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x11)  // _UID: Unique ID
        }

        Device (PR18)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x12)  // _UID: Unique ID
        }

        Device (PR19)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x13)  // _UID: Unique ID
        }

        Device (PR20)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x14)  // _UID: Unique ID
        }

        Device (PR21)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x15)  // _UID: Unique ID
        }

        Device (PR22)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x16)  // _UID: Unique ID
        }

        Device (PR23)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x17)  // _UID: Unique ID
        }

        Device (PR24)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x18)  // _UID: Unique ID
        }

        Device (PR25)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x19)  // _UID: Unique ID
        }

        Device (PR26)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x1A)  // _UID: Unique ID
        }

        Device (PR27)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x1B)  // _UID: Unique ID
        }

        Device (PR28)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x1C)  // _UID: Unique ID
        }

        Device (PR29)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x1D)  // _UID: Unique ID
        }

        Device (PR30)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x1E)  // _UID: Unique ID
        }

        Device (PR31)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x1F)  // _UID: Unique ID
        }

        Device (PR32)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x20)  // _UID: Unique ID
        }

        Device (PR33)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x21)  // _UID: Unique ID
        }

        Device (PR34)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x22)  // _UID: Unique ID
        }

        Device (PR35)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x23)  // _UID: Unique ID
        }

        Device (PR36)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x24)  // _UID: Unique ID
        }

        Device (PR37)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x25)  // _UID: Unique ID
        }

        Device (PR38)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x26)  // _UID: Unique ID
        }

        Device (PR39)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x27)  // _UID: Unique ID
        }

        Device (PR40)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x28)  // _UID: Unique ID
        }

        Device (PR41)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x29)  // _UID: Unique ID
        }

        Device (PR42)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x2A)  // _UID: Unique ID
        }

        Device (PR43)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x2B)  // _UID: Unique ID
        }

        Device (PR44)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x2C)  // _UID: Unique ID
        }

        Device (PR45)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x2D)  // _UID: Unique ID
        }

        Device (PR46)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x2E)  // _UID: Unique ID
        }

        Device (PR47)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x2F)  // _UID: Unique ID
        }

        Device (PR48)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x30)  // _UID: Unique ID
        }

        Device (PR49)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x31)  // _UID: Unique ID
        }

        Device (PR50)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x32)  // _UID: Unique ID
        }

        Device (PR51)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x33)  // _UID: Unique ID
        }

        Device (PR52)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x34)  // _UID: Unique ID
        }

        Device (PR53)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x35)  // _UID: Unique ID
        }

        Device (PR54)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x36)  // _UID: Unique ID
        }

        Device (PR55)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x37)  // _UID: Unique ID
        }

        Device (PR56)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x38)  // _UID: Unique ID
        }

        Device (PR57)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x39)  // _UID: Unique ID
        }

        Device (PR58)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x3A)  // _UID: Unique ID
        }

        Device (PR59)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x3B)  // _UID: Unique ID
        }

        Device (PR60)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x3C)  // _UID: Unique ID
        }

        Device (PR61)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x3D)  // _UID: Unique ID
        }

        Device (PR62)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x3E)  // _UID: Unique ID
        }

        Device (PR63)
        {
            Name (_HID, "ACPI0007")  // _HID: Hardware ID
            Name (_UID, 0x3F)  // _UID: Unique ID
        }
    }

    Scope (_SB)
    {
        Device (PAGD)
        {
            Name (_HID, "ACPI000C")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (_OSI ("Processor Aggregator Device"))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (_PUR, Package (0x02)  // _PUR: Processor Utilization Request
            {
                One, 
                Zero
            })
        }
    }

    Scope (_SB.PC00)
    {
        Device (PDRC)
        {
            Name (_HID, EisaId ("PNP0C02"))  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00008000,         // Address Length
                    _Y60)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y61)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y62)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y63)
                Memory32Fixed (ReadWrite,
                    0xFED20000,         // Address Base
                    0x00060000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFED90000,         // Address Base
                    0x00004000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED45000,         // Address Base
                    0x0004B000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFEE00000,         // Address Base
                    0x00100000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y64)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (BUF0, \_SB.PC00.PDRC._Y60._BAS, MBR0)  // _BAS: Base Address
                Store (GMHB (), MBR0)
                CreateDWordField (BUF0, \_SB.PC00.PDRC._Y61._BAS, DBR0)  // _BAS: Base Address
                Store (GDMB (), DBR0)
                CreateDWordField (BUF0, \_SB.PC00.PDRC._Y62._BAS, EBR0)  // _BAS: Base Address
                Store (GEPB (), EBR0)
                CreateDWordField (BUF0, \_SB.PC00.PDRC._Y63._BAS, XBR0)  // _BAS: Base Address
                Store (GPCB (), XBR0)
                CreateDWordField (BUF0, \_SB.PC00.PDRC._Y63._LEN, XSZ0)  // _LEN: Length
                Store (GPCL (), XSZ0)
                If (LNot (HPTE))
                {
                    CreateDWordField (BUF0, \_SB.PC00.PDRC._Y64._BAS, HBAS)  // _BAS: Base Address
                    CreateDWordField (BUF0, \_SB.PC00.PDRC._Y64._LEN, HLEN)  // _LEN: Length
                    Store (HPTB, HBAS)
                    Store (0x0400, HLEN)
                }

                Return (BUF0)
            }
        }
    }

    Method (BRTN, 1, Serialized)
    {
        If (LEqual (And (DIDX, 0x0F0F), 0x0400))
        {
            Notify (\_SB.PC00.GFX0.DD1F, Arg0)
        }

        If (LEqual (And (DIDY, 0x0F0F), 0x0401))
        {
            Notify (\_SB.PC00.GFX0.DD2F, Arg0)
        }

        If (LEqual (And (DGDX, 0x0F0F), 0x0400))
        {
            Notify (\_SB.PC00.PEG1.PEGP.PEGB.PEGE.DEDP, Arg0)
        }
    }

    Scope (_GPE)
    {
        If (LEqual (AL6D, One))
        {
            Method (_L6D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                If (CondRefOf (\_GPE.SL6D))
                {
                    SL6D ()
                }
            }
        }

        Method (_L69, 0, Serialized)  // _Lxx: Level-Triggered GPE
        {
            SL69 ()
        }

        Method (_L61, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Add (L01C, One, L01C)
            P8XH (Zero, One)
            P8XH (One, L01C)
            SL61 ()
        }

        Method (_L62, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Store (Zero, GPEC)
        }

        Method (_L66, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            SL66 ()
        }

        Name (PRES, One)
        Method (_L6F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            If (CondRefOf (\_GPE.AL6F))
            {
                AL6F ()
            }
            Else
            {
            }

            SL6F ()
        }

        Method (_L72, 0, Serialized)  // _Lxx: Level-Triggered GPE
        {
            If (CondRefOf (\_SB.AWAC))
            {
                Store (One, \_SB.AWAC.WAST)
                Notify (\_SB.AWAC, 0x02)
            }
        }
    }

    Method (GMIO, 2, Serialized)
    {
        OperationRegion (PXCS, SystemMemory, \_SB.PC00.PC2M (Arg0), 0x20)
        Field (PXCS, AnyAcc, NoLock, Preserve)
        {
            Offset (0x18), 
            PBUS,   8, 
            SBUS,   8
        }

        Store (\_SB.PC00.GPCB (), Local0)
        Add (Local0, ShiftRight (And (Arg1, 0x001F0000), One), Local0)
        Add (Local0, ShiftLeft (And (Arg1, 0x07), 0x0C), Local0)
        Add (Local0, ShiftLeft (SBUS, 0x14), Local0)
        Return (Local0)
    }

    Scope (_SB.PC00.RP01.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (^_ADR, _ADR), 0x30)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32, 
            Offset (0x2C), 
            SVID,   16
        }

        OperationRegion (FLDR, SystemMemory, Add (GMIO (^_ADR, _ADR), 0x44), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If (And (DCAP, 0x10000000))
                    {
                        Store (DCTR, Local0)
                        Or (Local0, 0x8000, Local0)
                        Store (Local0, DCTR)
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                Return (SPLX)
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                Return (WANX)
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                Return (WRDX)
            }

            Name (WRDY, Package (0x02)
            {
                0x02, 
                Package (0x2E)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                Store (STXE, Index (DerefOf (Index (WRDY, One)), One))
                Store (ST10, Index (DerefOf (Index (WRDY, One)), 0x02))
                Store (ST11, Index (DerefOf (Index (WRDY, One)), 0x03))
                Store (ST12, Index (DerefOf (Index (WRDY, One)), 0x04))
                Store (ST13, Index (DerefOf (Index (WRDY, One)), 0x05))
                Store (ST14, Index (DerefOf (Index (WRDY, One)), 0x06))
                Store (ST15, Index (DerefOf (Index (WRDY, One)), 0x07))
                Store (ST16, Index (DerefOf (Index (WRDY, One)), 0x08))
                Store (ST17, Index (DerefOf (Index (WRDY, One)), 0x09))
                Store (ST18, Index (DerefOf (Index (WRDY, One)), 0x0A))
                Store (ST19, Index (DerefOf (Index (WRDY, One)), 0x0B))
                Store (ST50, Index (DerefOf (Index (WRDY, One)), 0x0C))
                Store (ST51, Index (DerefOf (Index (WRDY, One)), 0x0D))
                Store (ST52, Index (DerefOf (Index (WRDY, One)), 0x0E))
                Store (ST53, Index (DerefOf (Index (WRDY, One)), 0x0F))
                Store (ST54, Index (DerefOf (Index (WRDY, One)), 0x10))
                Store (ST55, Index (DerefOf (Index (WRDY, One)), 0x11))
                Store (ST56, Index (DerefOf (Index (WRDY, One)), 0x12))
                Store (ST57, Index (DerefOf (Index (WRDY, One)), 0x13))
                Store (ST58, Index (DerefOf (Index (WRDY, One)), 0x14))
                Store (ST59, Index (DerefOf (Index (WRDY, One)), 0x15))
                Store (ST5A, Index (DerefOf (Index (WRDY, One)), 0x16))
                Store (ST5B, Index (DerefOf (Index (WRDY, One)), 0x17))
                Store (CD10, Index (DerefOf (Index (WRDY, One)), 0x18))
                Store (CD11, Index (DerefOf (Index (WRDY, One)), 0x19))
                Store (CD12, Index (DerefOf (Index (WRDY, One)), 0x1A))
                Store (CD13, Index (DerefOf (Index (WRDY, One)), 0x1B))
                Store (CD14, Index (DerefOf (Index (WRDY, One)), 0x1C))
                Store (CD15, Index (DerefOf (Index (WRDY, One)), 0x1D))
                Store (CD16, Index (DerefOf (Index (WRDY, One)), 0x1E))
                Store (CD17, Index (DerefOf (Index (WRDY, One)), 0x1F))
                Store (CD18, Index (DerefOf (Index (WRDY, One)), 0x20))
                Store (CD19, Index (DerefOf (Index (WRDY, One)), 0x21))
                Store (CD1A, Index (DerefOf (Index (WRDY, One)), 0x22))
                Store (CD20, Index (DerefOf (Index (WRDY, One)), 0x23))
                Store (CD21, Index (DerefOf (Index (WRDY, One)), 0x24))
                Store (CD22, Index (DerefOf (Index (WRDY, One)), 0x25))
                Store (CD23, Index (DerefOf (Index (WRDY, One)), 0x26))
                Store (CD24, Index (DerefOf (Index (WRDY, One)), 0x27))
                Store (CD25, Index (DerefOf (Index (WRDY, One)), 0x28))
                Store (CD26, Index (DerefOf (Index (WRDY, One)), 0x29))
                Store (CD27, Index (DerefOf (Index (WRDY, One)), 0x2A))
                Store (CD28, Index (DerefOf (Index (WRDY, One)), 0x2B))
                Store (CD29, Index (DerefOf (Index (WRDY, One)), 0x2C))
                Store (CD2A, Index (DerefOf (Index (WRDY, One)), 0x2D))
                Return (WRDY)
            }

            Name (EWRY, Package (0x02)
            {
                0x02, 
                Package (0x87)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                Store (STDE, Index (DerefOf (Index (EWRY, One)), One))
                Store (STRS, Index (DerefOf (Index (EWRY, One)), 0x02))
                Store (ST20, Index (DerefOf (Index (EWRY, One)), 0x03))
                Store (ST21, Index (DerefOf (Index (EWRY, One)), 0x04))
                Store (ST22, Index (DerefOf (Index (EWRY, One)), 0x05))
                Store (ST23, Index (DerefOf (Index (EWRY, One)), 0x06))
                Store (ST24, Index (DerefOf (Index (EWRY, One)), 0x07))
                Store (ST25, Index (DerefOf (Index (EWRY, One)), 0x08))
                Store (ST26, Index (DerefOf (Index (EWRY, One)), 0x09))
                Store (ST27, Index (DerefOf (Index (EWRY, One)), 0x0A))
                Store (ST28, Index (DerefOf (Index (EWRY, One)), 0x0B))
                Store (ST29, Index (DerefOf (Index (EWRY, One)), 0x0C))
                Store (ST60, Index (DerefOf (Index (EWRY, One)), 0x0D))
                Store (ST61, Index (DerefOf (Index (EWRY, One)), 0x0E))
                Store (ST62, Index (DerefOf (Index (EWRY, One)), 0x0F))
                Store (ST63, Index (DerefOf (Index (EWRY, One)), 0x10))
                Store (ST64, Index (DerefOf (Index (EWRY, One)), 0x11))
                Store (ST65, Index (DerefOf (Index (EWRY, One)), 0x12))
                Store (ST66, Index (DerefOf (Index (EWRY, One)), 0x13))
                Store (ST67, Index (DerefOf (Index (EWRY, One)), 0x14))
                Store (ST68, Index (DerefOf (Index (EWRY, One)), 0x15))
                Store (ST69, Index (DerefOf (Index (EWRY, One)), 0x16))
                Store (ST6A, Index (DerefOf (Index (EWRY, One)), 0x17))
                Store (ST6B, Index (DerefOf (Index (EWRY, One)), 0x18))
                Store (ST30, Index (DerefOf (Index (EWRY, One)), 0x19))
                Store (ST31, Index (DerefOf (Index (EWRY, One)), 0x1A))
                Store (ST32, Index (DerefOf (Index (EWRY, One)), 0x1B))
                Store (ST33, Index (DerefOf (Index (EWRY, One)), 0x1C))
                Store (ST34, Index (DerefOf (Index (EWRY, One)), 0x1D))
                Store (ST35, Index (DerefOf (Index (EWRY, One)), 0x1E))
                Store (ST36, Index (DerefOf (Index (EWRY, One)), 0x1F))
                Store (ST37, Index (DerefOf (Index (EWRY, One)), 0x20))
                Store (ST38, Index (DerefOf (Index (EWRY, One)), 0x21))
                Store (ST39, Index (DerefOf (Index (EWRY, One)), 0x22))
                Store (ST70, Index (DerefOf (Index (EWRY, One)), 0x23))
                Store (ST71, Index (DerefOf (Index (EWRY, One)), 0x24))
                Store (ST72, Index (DerefOf (Index (EWRY, One)), 0x25))
                Store (ST73, Index (DerefOf (Index (EWRY, One)), 0x26))
                Store (ST74, Index (DerefOf (Index (EWRY, One)), 0x27))
                Store (ST75, Index (DerefOf (Index (EWRY, One)), 0x28))
                Store (ST76, Index (DerefOf (Index (EWRY, One)), 0x29))
                Store (ST77, Index (DerefOf (Index (EWRY, One)), 0x2A))
                Store (ST78, Index (DerefOf (Index (EWRY, One)), 0x2B))
                Store (ST79, Index (DerefOf (Index (EWRY, One)), 0x2C))
                Store (ST7A, Index (DerefOf (Index (EWRY, One)), 0x2D))
                Store (ST7B, Index (DerefOf (Index (EWRY, One)), 0x2E))
                Store (ST40, Index (DerefOf (Index (EWRY, One)), 0x2F))
                Store (ST41, Index (DerefOf (Index (EWRY, One)), 0x30))
                Store (ST42, Index (DerefOf (Index (EWRY, One)), 0x31))
                Store (ST43, Index (DerefOf (Index (EWRY, One)), 0x32))
                Store (ST44, Index (DerefOf (Index (EWRY, One)), 0x33))
                Store (ST45, Index (DerefOf (Index (EWRY, One)), 0x34))
                Store (ST46, Index (DerefOf (Index (EWRY, One)), 0x35))
                Store (ST47, Index (DerefOf (Index (EWRY, One)), 0x36))
                Store (ST48, Index (DerefOf (Index (EWRY, One)), 0x37))
                Store (ST49, Index (DerefOf (Index (EWRY, One)), 0x38))
                Store (ST80, Index (DerefOf (Index (EWRY, One)), 0x39))
                Store (ST81, Index (DerefOf (Index (EWRY, One)), 0x3A))
                Store (ST82, Index (DerefOf (Index (EWRY, One)), 0x3B))
                Store (ST83, Index (DerefOf (Index (EWRY, One)), 0x3C))
                Store (ST84, Index (DerefOf (Index (EWRY, One)), 0x3D))
                Store (ST85, Index (DerefOf (Index (EWRY, One)), 0x3E))
                Store (ST86, Index (DerefOf (Index (EWRY, One)), 0x3F))
                Store (ST87, Index (DerefOf (Index (EWRY, One)), 0x40))
                Store (ST88, Index (DerefOf (Index (EWRY, One)), 0x41))
                Store (ST89, Index (DerefOf (Index (EWRY, One)), 0x42))
                Store (ST8A, Index (DerefOf (Index (EWRY, One)), 0x43))
                Store (ST8B, Index (DerefOf (Index (EWRY, One)), 0x44))
                Store (CD30, Index (DerefOf (Index (EWRY, One)), 0x45))
                Store (CD31, Index (DerefOf (Index (EWRY, One)), 0x46))
                Store (CD32, Index (DerefOf (Index (EWRY, One)), 0x47))
                Store (CD33, Index (DerefOf (Index (EWRY, One)), 0x48))
                Store (CD34, Index (DerefOf (Index (EWRY, One)), 0x49))
                Store (CD35, Index (DerefOf (Index (EWRY, One)), 0x4A))
                Store (CD36, Index (DerefOf (Index (EWRY, One)), 0x4B))
                Store (CD37, Index (DerefOf (Index (EWRY, One)), 0x4C))
                Store (CD38, Index (DerefOf (Index (EWRY, One)), 0x4D))
                Store (CD39, Index (DerefOf (Index (EWRY, One)), 0x4E))
                Store (CD3A, Index (DerefOf (Index (EWRY, One)), 0x4F))
                Store (CD3B, Index (DerefOf (Index (EWRY, One)), 0x50))
                Store (CD3C, Index (DerefOf (Index (EWRY, One)), 0x51))
                Store (CD3D, Index (DerefOf (Index (EWRY, One)), 0x52))
                Store (CD3E, Index (DerefOf (Index (EWRY, One)), 0x53))
                Store (CD3F, Index (DerefOf (Index (EWRY, One)), 0x54))
                Store (CD40, Index (DerefOf (Index (EWRY, One)), 0x55))
                Store (CD41, Index (DerefOf (Index (EWRY, One)), 0x56))
                Store (CD42, Index (DerefOf (Index (EWRY, One)), 0x57))
                Store (CD43, Index (DerefOf (Index (EWRY, One)), 0x58))
                Store (CD44, Index (DerefOf (Index (EWRY, One)), 0x59))
                Store (CD45, Index (DerefOf (Index (EWRY, One)), 0x5A))
                Store (CD46, Index (DerefOf (Index (EWRY, One)), 0x5B))
                Store (CD47, Index (DerefOf (Index (EWRY, One)), 0x5C))
                Store (CD48, Index (DerefOf (Index (EWRY, One)), 0x5D))
                Store (CD49, Index (DerefOf (Index (EWRY, One)), 0x5E))
                Store (CD4A, Index (DerefOf (Index (EWRY, One)), 0x5F))
                Store (CD4B, Index (DerefOf (Index (EWRY, One)), 0x60))
                Store (CD4C, Index (DerefOf (Index (EWRY, One)), 0x61))
                Store (CD4D, Index (DerefOf (Index (EWRY, One)), 0x62))
                Store (CD4E, Index (DerefOf (Index (EWRY, One)), 0x63))
                Store (CD4F, Index (DerefOf (Index (EWRY, One)), 0x64))
                Store (CD50, Index (DerefOf (Index (EWRY, One)), 0x65))
                Store (CD51, Index (DerefOf (Index (EWRY, One)), 0x66))
                Store (CD52, Index (DerefOf (Index (EWRY, One)), 0x67))
                Store (CD53, Index (DerefOf (Index (EWRY, One)), 0x68))
                Store (CD54, Index (DerefOf (Index (EWRY, One)), 0x69))
                Store (CD55, Index (DerefOf (Index (EWRY, One)), 0x6A))
                Store (CD56, Index (DerefOf (Index (EWRY, One)), 0x6B))
                Store (CD57, Index (DerefOf (Index (EWRY, One)), 0x6C))
                Store (CD58, Index (DerefOf (Index (EWRY, One)), 0x6D))
                Store (CD59, Index (DerefOf (Index (EWRY, One)), 0x6E))
                Store (CD5A, Index (DerefOf (Index (EWRY, One)), 0x6F))
                Store (CD5B, Index (DerefOf (Index (EWRY, One)), 0x70))
                Store (CD5C, Index (DerefOf (Index (EWRY, One)), 0x71))
                Store (CD5D, Index (DerefOf (Index (EWRY, One)), 0x72))
                Store (CD5E, Index (DerefOf (Index (EWRY, One)), 0x73))
                Store (CD5F, Index (DerefOf (Index (EWRY, One)), 0x74))
                Store (CD60, Index (DerefOf (Index (EWRY, One)), 0x75))
                Store (CD61, Index (DerefOf (Index (EWRY, One)), 0x76))
                Store (CD62, Index (DerefOf (Index (EWRY, One)), 0x77))
                Store (CD63, Index (DerefOf (Index (EWRY, One)), 0x78))
                Store (CD64, Index (DerefOf (Index (EWRY, One)), 0x79))
                Store (CD65, Index (DerefOf (Index (EWRY, One)), 0x7A))
                Store (CD66, Index (DerefOf (Index (EWRY, One)), 0x7B))
                Store (CD67, Index (DerefOf (Index (EWRY, One)), 0x7C))
                Store (CD68, Index (DerefOf (Index (EWRY, One)), 0x7D))
                Store (CD69, Index (DerefOf (Index (EWRY, One)), 0x7E))
                Store (CD6A, Index (DerefOf (Index (EWRY, One)), 0x7F))
                Store (CD6B, Index (DerefOf (Index (EWRY, One)), 0x80))
                Store (CD6C, Index (DerefOf (Index (EWRY, One)), 0x81))
                Store (CD6D, Index (DerefOf (Index (EWRY, One)), 0x82))
                Store (CD6E, Index (DerefOf (Index (EWRY, One)), 0x83))
                Store (CD6F, Index (DerefOf (Index (EWRY, One)), 0x84))
                Store (CD70, Index (DerefOf (Index (EWRY, One)), 0x85))
                Store (CD71, Index (DerefOf (Index (EWRY, One)), 0x86))
                Return (EWRY)
            }

            Name (WGDY, Package (0x02)
            {
                0x03, 
                Package (0x4A)
                {
                    0x07, 
                    0x03, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                Store (SDGN, Index (DerefOf (Index (WGDY, One)), One))
                Store (SD11, Index (DerefOf (Index (WGDY, One)), 0x02))
                Store (SD12, Index (DerefOf (Index (WGDY, One)), 0x03))
                Store (SD13, Index (DerefOf (Index (WGDY, One)), 0x04))
                Store (SD14, Index (DerefOf (Index (WGDY, One)), 0x05))
                Store (SD15, Index (DerefOf (Index (WGDY, One)), 0x06))
                Store (SD16, Index (DerefOf (Index (WGDY, One)), 0x07))
                Store (SD17, Index (DerefOf (Index (WGDY, One)), 0x08))
                Store (SD18, Index (DerefOf (Index (WGDY, One)), 0x09))
                Store (SD19, Index (DerefOf (Index (WGDY, One)), 0x0A))
                Store (SD21, Index (DerefOf (Index (WGDY, One)), 0x0B))
                Store (SD22, Index (DerefOf (Index (WGDY, One)), 0x0C))
                Store (SD23, Index (DerefOf (Index (WGDY, One)), 0x0D))
                Store (SD24, Index (DerefOf (Index (WGDY, One)), 0x0E))
                Store (SD25, Index (DerefOf (Index (WGDY, One)), 0x0F))
                Store (SD26, Index (DerefOf (Index (WGDY, One)), 0x10))
                Store (SD27, Index (DerefOf (Index (WGDY, One)), 0x11))
                Store (SD28, Index (DerefOf (Index (WGDY, One)), 0x12))
                Store (SD29, Index (DerefOf (Index (WGDY, One)), 0x13))
                Store (SD31, Index (DerefOf (Index (WGDY, One)), 0x14))
                Store (SD32, Index (DerefOf (Index (WGDY, One)), 0x15))
                Store (SD33, Index (DerefOf (Index (WGDY, One)), 0x16))
                Store (SD34, Index (DerefOf (Index (WGDY, One)), 0x17))
                Store (SD35, Index (DerefOf (Index (WGDY, One)), 0x18))
                Store (SD36, Index (DerefOf (Index (WGDY, One)), 0x19))
                Store (SD37, Index (DerefOf (Index (WGDY, One)), 0x1A))
                Store (SD38, Index (DerefOf (Index (WGDY, One)), 0x1B))
                Store (SD39, Index (DerefOf (Index (WGDY, One)), 0x1C))
                Store (SD41, Index (DerefOf (Index (WGDY, One)), 0x1D))
                Store (SD42, Index (DerefOf (Index (WGDY, One)), 0x1E))
                Store (SD43, Index (DerefOf (Index (WGDY, One)), 0x1F))
                Store (SD44, Index (DerefOf (Index (WGDY, One)), 0x20))
                Store (SD45, Index (DerefOf (Index (WGDY, One)), 0x21))
                Store (SD46, Index (DerefOf (Index (WGDY, One)), 0x22))
                Store (SD47, Index (DerefOf (Index (WGDY, One)), 0x23))
                Store (SD48, Index (DerefOf (Index (WGDY, One)), 0x24))
                Store (SD49, Index (DerefOf (Index (WGDY, One)), 0x25))
                Store (SD51, Index (DerefOf (Index (WGDY, One)), 0x26))
                Store (SD52, Index (DerefOf (Index (WGDY, One)), 0x27))
                Store (SD53, Index (DerefOf (Index (WGDY, One)), 0x28))
                Store (SD54, Index (DerefOf (Index (WGDY, One)), 0x29))
                Store (SD55, Index (DerefOf (Index (WGDY, One)), 0x2A))
                Store (SD56, Index (DerefOf (Index (WGDY, One)), 0x2B))
                Store (SD57, Index (DerefOf (Index (WGDY, One)), 0x2C))
                Store (SD58, Index (DerefOf (Index (WGDY, One)), 0x2D))
                Store (SD59, Index (DerefOf (Index (WGDY, One)), 0x2E))
                Store (SD61, Index (DerefOf (Index (WGDY, One)), 0x2F))
                Store (SD62, Index (DerefOf (Index (WGDY, One)), 0x30))
                Store (SD63, Index (DerefOf (Index (WGDY, One)), 0x31))
                Store (SD64, Index (DerefOf (Index (WGDY, One)), 0x32))
                Store (SD65, Index (DerefOf (Index (WGDY, One)), 0x33))
                Store (SD66, Index (DerefOf (Index (WGDY, One)), 0x34))
                Store (SD67, Index (DerefOf (Index (WGDY, One)), 0x35))
                Store (SD68, Index (DerefOf (Index (WGDY, One)), 0x36))
                Store (SD69, Index (DerefOf (Index (WGDY, One)), 0x37))
                Store (SD71, Index (DerefOf (Index (WGDY, One)), 0x38))
                Store (SD72, Index (DerefOf (Index (WGDY, One)), 0x39))
                Store (SD73, Index (DerefOf (Index (WGDY, One)), 0x3A))
                Store (SD74, Index (DerefOf (Index (WGDY, One)), 0x3B))
                Store (SD75, Index (DerefOf (Index (WGDY, One)), 0x3C))
                Store (SD76, Index (DerefOf (Index (WGDY, One)), 0x3D))
                Store (SD77, Index (DerefOf (Index (WGDY, One)), 0x3E))
                Store (SD78, Index (DerefOf (Index (WGDY, One)), 0x3F))
                Store (SD79, Index (DerefOf (Index (WGDY, One)), 0x40))
                Store (SD81, Index (DerefOf (Index (WGDY, One)), 0x41))
                Store (SD82, Index (DerefOf (Index (WGDY, One)), 0x42))
                Store (SD83, Index (DerefOf (Index (WGDY, One)), 0x43))
                Store (SD84, Index (DerefOf (Index (WGDY, One)), 0x44))
                Store (SD85, Index (DerefOf (Index (WGDY, One)), 0x45))
                Store (SD86, Index (DerefOf (Index (WGDY, One)), 0x46))
                Store (SD87, Index (DerefOf (Index (WGDY, One)), 0x47))
                Store (SD88, Index (DerefOf (Index (WGDY, One)), 0x48))
                Store (SD89, Index (DerefOf (Index (WGDY, One)), 0x49))
                Return (WGDY)
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                Return (ECKY)
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                Store (WAGE, Index (DerefOf (Index (PPAY, One)), One))
                Store (AGA1, Index (DerefOf (Index (PPAY, One)), 0x02))
                Store (AGA2, Index (DerefOf (Index (PPAY, One)), 0x03))
                Store (AGA3, Index (DerefOf (Index (PPAY, One)), 0x04))
                Store (AGA4, Index (DerefOf (Index (PPAY, One)), 0x05))
                Store (AGA5, Index (DerefOf (Index (PPAY, One)), 0x06))
                Store (AGA6, Index (DerefOf (Index (PPAY, One)), 0x07))
                Store (AGA7, Index (DerefOf (Index (PPAY, One)), 0x08))
                Store (AGA8, Index (DerefOf (Index (PPAY, One)), 0x09))
                Store (AGA9, Index (DerefOf (Index (PPAY, One)), 0x0A))
                Store (AGAA, Index (DerefOf (Index (PPAY, One)), 0x0B))
                Store (AGAB, Index (DerefOf (Index (PPAY, One)), 0x0C))
                Store (AGB1, Index (DerefOf (Index (PPAY, One)), 0x0D))
                Store (AGB2, Index (DerefOf (Index (PPAY, One)), 0x0E))
                Store (AGB3, Index (DerefOf (Index (PPAY, One)), 0x0F))
                Store (AGB4, Index (DerefOf (Index (PPAY, One)), 0x10))
                Store (AGB5, Index (DerefOf (Index (PPAY, One)), 0x11))
                Store (AGB6, Index (DerefOf (Index (PPAY, One)), 0x12))
                Store (AGB7, Index (DerefOf (Index (PPAY, One)), 0x13))
                Store (AGB8, Index (DerefOf (Index (PPAY, One)), 0x14))
                Store (AGB9, Index (DerefOf (Index (PPAY, One)), 0x15))
                Store (AGBA, Index (DerefOf (Index (PPAY, One)), 0x16))
                Store (AGBB, Index (DerefOf (Index (PPAY, One)), 0x17))
                Return (PPAY)
            }

            Name (WTSY, Package (0x02)
            {
                One, 
                Package (0x13)
                {
                    0x07, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                }
            })
            Method (WTAS, 0, Serialized)
            {
                Store (WTSV, Index (DerefOf (Index (WTSY, One)), One))
                Store (WTLE, Index (DerefOf (Index (WTSY, One)), 0x02))
                Store (BL01, Index (DerefOf (Index (WTSY, One)), 0x03))
                Store (BL02, Index (DerefOf (Index (WTSY, One)), 0x04))
                Store (BL03, Index (DerefOf (Index (WTSY, One)), 0x05))
                Store (BL04, Index (DerefOf (Index (WTSY, One)), 0x06))
                Store (BL05, Index (DerefOf (Index (WTSY, One)), 0x07))
                Store (BL06, Index (DerefOf (Index (WTSY, One)), 0x08))
                Store (BL07, Index (DerefOf (Index (WTSY, One)), 0x09))
                Store (BL08, Index (DerefOf (Index (WTSY, One)), 0x0A))
                Store (BL09, Index (DerefOf (Index (WTSY, One)), 0x0B))
                Store (BL10, Index (DerefOf (Index (WTSY, One)), 0x0C))
                Store (BL11, Index (DerefOf (Index (WTSY, One)), 0x0D))
                Store (BL12, Index (DerefOf (Index (WTSY, One)), 0x0E))
                Store (BL13, Index (DerefOf (Index (WTSY, One)), 0x0F))
                Store (BL14, Index (DerefOf (Index (WTSY, One)), 0x10))
                Store (BL15, Index (DerefOf (Index (WTSY, One)), 0x11))
                Store (BL16, Index (DerefOf (Index (WTSY, One)), 0x12))
                Return (WTSY)
            }

            Name (WAIY, Package (0x02)
            {
                Zero, 
                Package (0x04)
                {
                    0x07, 
                    Zero, 
                    Zero, 
                    Zero
                }
            })
            Method (WAIS, 0, Serialized)
            {
                Store (WLBI, Index (DerefOf (Index (WAIY, One)), One))
                Store (WHBI, Index (DerefOf (Index (WAIY, One)), 0x02))
                Return (WAIY)
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                Return (SADX)
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX)
            }
        }

        If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
        {
            Method (FHRF, 1, NotSerialized)
            {
                If (LNotEqual (GGOV (PRST), WPRP))
                {
                    DL23 ()
                    SGOV (PRST, WPRP)
                }
                Else
                {
                    ADBG ("Assume WWAN DL23() is already done")
                }

                Sleep (TR2B)
                SGOV (WBRS, PBRS)
                If (LEqual (Arg0, Zero))
                {
                    Sleep (TBTG)
                }
                ElseIf (LEqual (Arg0, One))
                {
                    SPCO (WCLK, Zero)
                    Sleep (TB2F)
                    SGOV (WFCP, And (Not (PFCP), One))
                    Sleep (TFDI)
                }
                Else
                {
                }
            }

            Method (SHRF, 0, NotSerialized)
            {
                PSD0 (SLOT)
                SPCO (WCLK, One)
                SGOV (WFCP, PFCP)
                Sleep (TN2B)
                SGOV (WBRS, And (Not (PBRS), One))
                Sleep (TB2R)
                SGOV (PRST, And (Not (WPRP), One))
                L23D ()
            }

            Method (DOSV, 0, NotSerialized)
            {
                Store (Zero, Local0)
                While (LAnd (LNotEqual (SVID, WSID), LLess (Local0, WSTO)))
                {
                    Increment (Local0)
                    Sleep (One)
                }
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                If (LEqual (WWEN, 0x02))
                {
                    Store (Acquire (WWMT, 0x03E8), Local0)
                    If (LEqual (Local0, Zero))
                    {
                        FHRF (Zero)
                        SHRF ()
                        Release (WWMT)
                        DOSV ()
                    }
                }
                Else
                {
                    SGOV (WBRS, PBRS)
                    Sleep (0xC8)
                    Notify (PXSX, One)
                    SGOV (PRST, And (Not (WPRP), One))
                    SGOV (WBRS, And (Not (PBRS), One))
                    Sleep (0xC8)
                    Store (Zero, Local0)
                    While (LEqual (LASX, Zero))
                    {
                        If (LGreater (Local0, 0x14))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Increment (Local0)
                    }

                    Sleep (0x0A)
                    Notify (PXSX, One)
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Store (Acquire (WWMT, 0x03E8), Local0)
                    If (LEqual (Local0, Zero))
                    {
                        FHRF (One)
                        SHRF ()
                        Release (WWMT)
                        DOSV ()
                    }
                }
            }
        }

        If (LOr (WIST (), LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT))))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If (And (DCAP, 0x10000000))
                    {
                        Store (DCTR, Local0)
                        Or (Local0, 0x8000, Local0)
                        Store (Local0, DCTR)
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }

            Method (IFUN, 4, Serialized)
            {
                If (LEqual (Arg2, Zero))
                {
                    If (LEqual (Arg1, Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x0F                                           
                        })
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }

                If (LEqual (Arg2, One))
                {
                    ShiftLeft (CVPR, Zero, Local0)
                    Return (Local0)
                }

                If (LEqual (Arg2, 0x02))
                {
                    CreateWordField (Arg3, Zero, CMDT)
                    CreateWordField (Arg3, 0x02, CMDP)
                    If (LEqual (CMDT, One))
                    {
                        If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                        {
                            Return (^^^CNVW.RSTT)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (CMDT, 0x02))
                    {
                        If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                        {
                            Store (CMDP, ^^^CNVW.RSTT)
                        }

                        Return (Zero)
                    }

                    If (LEqual (CMDT, 0x03))
                    {
                        If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                        {
                            Return (^^^CNVW.PRRS)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Return (Zero)
                }

                If (LEqual (Arg2, 0x03))
                {
                    If (LEqual (CRFI, One))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (IDSM, 1, Serialized)
            {
                If (LEqual (Arg0, ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd")))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (EFUN, 4, Serialized)
            {
                If (LEqual (Arg2, Zero))
                {
                    If (LEqual (Arg1, Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                     
                        })
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }

                If (LEqual (Arg2, One))
                {
                    Store (ACSD, Local0)
                    Return (Local0)
                }

                If (LEqual (Arg2, 0x02))
                {
                    Store (I5BS, Local0)
                    Return (Local0)
                }

                If (LEqual (Arg2, 0x03))
                {
                    Store (UHBS, Local0)
                    Return (Local0)
                }

                If (LEqual (Arg2, 0x06))
                {
                    Store (AXMU, Local0)
                    ShiftLeft (Local0, One, Local0)
                    Or (Local0, AXSU, Local0)
                    Store (AXMR, Local1)
                    ShiftLeft (Local1, One, Local1)
                    Or (Local1, AXSR, Local1)
                    ShiftLeft (Local1, 0x02, Local1)
                    Or (Local0, Local1, Local0)
                    Return (Local0)
                }

                If (LEqual (Arg2, 0x04))
                {
                    Return (WFRC)
                }

                If (LEqual (Arg2, 0x05))
                {
                    Return (WFUC)
                }

                If (LEqual (Arg2, 0x07))
                {
                    Return (UNI4)
                }

                If (LEqual (Arg2, 0x08))
                {
                    Return (WFIC)
                }

                Return (Zero)
            }

            Method (EDSM, 1, Serialized)
            {
                If (LEqual (Arg0, ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If (EDSM (Arg0))
                    {
                        Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                    }

                    If (IDSM (Arg0))
                    {
                        Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                    }
                }

                If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                {
                    If (LEqual (Arg0, ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d")))
                    {
                        If (LEqual (Arg2, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                           
                            })
                        }

                        If (LEqual (Arg2, One)){}
                        If (LEqual (Arg2, 0x02)){}
                        If (LEqual (Arg2, 0x03))
                        {
                            If (LEqual (WRTO, One)){}
                            ElseIf (LEqual (WRTO, 0x03)){}
                            Else
                            {
                            }

                            Return (WRTO)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP02.PXSX))
    {
        Scope (_SB.PC00.RP02.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, Add (GMIO (^_ADR, _ADR), 0x44), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                    Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                    Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                    Return (SPLX)
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                    Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                    Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                    Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                    Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                    Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                    Return (WANX)
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                    Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                    Return (WRDX)
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    Store (STXE, Index (DerefOf (Index (WRDY, One)), One))
                    Store (ST10, Index (DerefOf (Index (WRDY, One)), 0x02))
                    Store (ST11, Index (DerefOf (Index (WRDY, One)), 0x03))
                    Store (ST12, Index (DerefOf (Index (WRDY, One)), 0x04))
                    Store (ST13, Index (DerefOf (Index (WRDY, One)), 0x05))
                    Store (ST14, Index (DerefOf (Index (WRDY, One)), 0x06))
                    Store (ST15, Index (DerefOf (Index (WRDY, One)), 0x07))
                    Store (ST16, Index (DerefOf (Index (WRDY, One)), 0x08))
                    Store (ST17, Index (DerefOf (Index (WRDY, One)), 0x09))
                    Store (ST18, Index (DerefOf (Index (WRDY, One)), 0x0A))
                    Store (ST19, Index (DerefOf (Index (WRDY, One)), 0x0B))
                    Store (ST50, Index (DerefOf (Index (WRDY, One)), 0x0C))
                    Store (ST51, Index (DerefOf (Index (WRDY, One)), 0x0D))
                    Store (ST52, Index (DerefOf (Index (WRDY, One)), 0x0E))
                    Store (ST53, Index (DerefOf (Index (WRDY, One)), 0x0F))
                    Store (ST54, Index (DerefOf (Index (WRDY, One)), 0x10))
                    Store (ST55, Index (DerefOf (Index (WRDY, One)), 0x11))
                    Store (ST56, Index (DerefOf (Index (WRDY, One)), 0x12))
                    Store (ST57, Index (DerefOf (Index (WRDY, One)), 0x13))
                    Store (ST58, Index (DerefOf (Index (WRDY, One)), 0x14))
                    Store (ST59, Index (DerefOf (Index (WRDY, One)), 0x15))
                    Store (ST5A, Index (DerefOf (Index (WRDY, One)), 0x16))
                    Store (ST5B, Index (DerefOf (Index (WRDY, One)), 0x17))
                    Store (CD10, Index (DerefOf (Index (WRDY, One)), 0x18))
                    Store (CD11, Index (DerefOf (Index (WRDY, One)), 0x19))
                    Store (CD12, Index (DerefOf (Index (WRDY, One)), 0x1A))
                    Store (CD13, Index (DerefOf (Index (WRDY, One)), 0x1B))
                    Store (CD14, Index (DerefOf (Index (WRDY, One)), 0x1C))
                    Store (CD15, Index (DerefOf (Index (WRDY, One)), 0x1D))
                    Store (CD16, Index (DerefOf (Index (WRDY, One)), 0x1E))
                    Store (CD17, Index (DerefOf (Index (WRDY, One)), 0x1F))
                    Store (CD18, Index (DerefOf (Index (WRDY, One)), 0x20))
                    Store (CD19, Index (DerefOf (Index (WRDY, One)), 0x21))
                    Store (CD1A, Index (DerefOf (Index (WRDY, One)), 0x22))
                    Store (CD20, Index (DerefOf (Index (WRDY, One)), 0x23))
                    Store (CD21, Index (DerefOf (Index (WRDY, One)), 0x24))
                    Store (CD22, Index (DerefOf (Index (WRDY, One)), 0x25))
                    Store (CD23, Index (DerefOf (Index (WRDY, One)), 0x26))
                    Store (CD24, Index (DerefOf (Index (WRDY, One)), 0x27))
                    Store (CD25, Index (DerefOf (Index (WRDY, One)), 0x28))
                    Store (CD26, Index (DerefOf (Index (WRDY, One)), 0x29))
                    Store (CD27, Index (DerefOf (Index (WRDY, One)), 0x2A))
                    Store (CD28, Index (DerefOf (Index (WRDY, One)), 0x2B))
                    Store (CD29, Index (DerefOf (Index (WRDY, One)), 0x2C))
                    Store (CD2A, Index (DerefOf (Index (WRDY, One)), 0x2D))
                    Return (WRDY)
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    Store (STDE, Index (DerefOf (Index (EWRY, One)), One))
                    Store (STRS, Index (DerefOf (Index (EWRY, One)), 0x02))
                    Store (ST20, Index (DerefOf (Index (EWRY, One)), 0x03))
                    Store (ST21, Index (DerefOf (Index (EWRY, One)), 0x04))
                    Store (ST22, Index (DerefOf (Index (EWRY, One)), 0x05))
                    Store (ST23, Index (DerefOf (Index (EWRY, One)), 0x06))
                    Store (ST24, Index (DerefOf (Index (EWRY, One)), 0x07))
                    Store (ST25, Index (DerefOf (Index (EWRY, One)), 0x08))
                    Store (ST26, Index (DerefOf (Index (EWRY, One)), 0x09))
                    Store (ST27, Index (DerefOf (Index (EWRY, One)), 0x0A))
                    Store (ST28, Index (DerefOf (Index (EWRY, One)), 0x0B))
                    Store (ST29, Index (DerefOf (Index (EWRY, One)), 0x0C))
                    Store (ST60, Index (DerefOf (Index (EWRY, One)), 0x0D))
                    Store (ST61, Index (DerefOf (Index (EWRY, One)), 0x0E))
                    Store (ST62, Index (DerefOf (Index (EWRY, One)), 0x0F))
                    Store (ST63, Index (DerefOf (Index (EWRY, One)), 0x10))
                    Store (ST64, Index (DerefOf (Index (EWRY, One)), 0x11))
                    Store (ST65, Index (DerefOf (Index (EWRY, One)), 0x12))
                    Store (ST66, Index (DerefOf (Index (EWRY, One)), 0x13))
                    Store (ST67, Index (DerefOf (Index (EWRY, One)), 0x14))
                    Store (ST68, Index (DerefOf (Index (EWRY, One)), 0x15))
                    Store (ST69, Index (DerefOf (Index (EWRY, One)), 0x16))
                    Store (ST6A, Index (DerefOf (Index (EWRY, One)), 0x17))
                    Store (ST6B, Index (DerefOf (Index (EWRY, One)), 0x18))
                    Store (ST30, Index (DerefOf (Index (EWRY, One)), 0x19))
                    Store (ST31, Index (DerefOf (Index (EWRY, One)), 0x1A))
                    Store (ST32, Index (DerefOf (Index (EWRY, One)), 0x1B))
                    Store (ST33, Index (DerefOf (Index (EWRY, One)), 0x1C))
                    Store (ST34, Index (DerefOf (Index (EWRY, One)), 0x1D))
                    Store (ST35, Index (DerefOf (Index (EWRY, One)), 0x1E))
                    Store (ST36, Index (DerefOf (Index (EWRY, One)), 0x1F))
                    Store (ST37, Index (DerefOf (Index (EWRY, One)), 0x20))
                    Store (ST38, Index (DerefOf (Index (EWRY, One)), 0x21))
                    Store (ST39, Index (DerefOf (Index (EWRY, One)), 0x22))
                    Store (ST70, Index (DerefOf (Index (EWRY, One)), 0x23))
                    Store (ST71, Index (DerefOf (Index (EWRY, One)), 0x24))
                    Store (ST72, Index (DerefOf (Index (EWRY, One)), 0x25))
                    Store (ST73, Index (DerefOf (Index (EWRY, One)), 0x26))
                    Store (ST74, Index (DerefOf (Index (EWRY, One)), 0x27))
                    Store (ST75, Index (DerefOf (Index (EWRY, One)), 0x28))
                    Store (ST76, Index (DerefOf (Index (EWRY, One)), 0x29))
                    Store (ST77, Index (DerefOf (Index (EWRY, One)), 0x2A))
                    Store (ST78, Index (DerefOf (Index (EWRY, One)), 0x2B))
                    Store (ST79, Index (DerefOf (Index (EWRY, One)), 0x2C))
                    Store (ST7A, Index (DerefOf (Index (EWRY, One)), 0x2D))
                    Store (ST7B, Index (DerefOf (Index (EWRY, One)), 0x2E))
                    Store (ST40, Index (DerefOf (Index (EWRY, One)), 0x2F))
                    Store (ST41, Index (DerefOf (Index (EWRY, One)), 0x30))
                    Store (ST42, Index (DerefOf (Index (EWRY, One)), 0x31))
                    Store (ST43, Index (DerefOf (Index (EWRY, One)), 0x32))
                    Store (ST44, Index (DerefOf (Index (EWRY, One)), 0x33))
                    Store (ST45, Index (DerefOf (Index (EWRY, One)), 0x34))
                    Store (ST46, Index (DerefOf (Index (EWRY, One)), 0x35))
                    Store (ST47, Index (DerefOf (Index (EWRY, One)), 0x36))
                    Store (ST48, Index (DerefOf (Index (EWRY, One)), 0x37))
                    Store (ST49, Index (DerefOf (Index (EWRY, One)), 0x38))
                    Store (ST80, Index (DerefOf (Index (EWRY, One)), 0x39))
                    Store (ST81, Index (DerefOf (Index (EWRY, One)), 0x3A))
                    Store (ST82, Index (DerefOf (Index (EWRY, One)), 0x3B))
                    Store (ST83, Index (DerefOf (Index (EWRY, One)), 0x3C))
                    Store (ST84, Index (DerefOf (Index (EWRY, One)), 0x3D))
                    Store (ST85, Index (DerefOf (Index (EWRY, One)), 0x3E))
                    Store (ST86, Index (DerefOf (Index (EWRY, One)), 0x3F))
                    Store (ST87, Index (DerefOf (Index (EWRY, One)), 0x40))
                    Store (ST88, Index (DerefOf (Index (EWRY, One)), 0x41))
                    Store (ST89, Index (DerefOf (Index (EWRY, One)), 0x42))
                    Store (ST8A, Index (DerefOf (Index (EWRY, One)), 0x43))
                    Store (ST8B, Index (DerefOf (Index (EWRY, One)), 0x44))
                    Store (CD30, Index (DerefOf (Index (EWRY, One)), 0x45))
                    Store (CD31, Index (DerefOf (Index (EWRY, One)), 0x46))
                    Store (CD32, Index (DerefOf (Index (EWRY, One)), 0x47))
                    Store (CD33, Index (DerefOf (Index (EWRY, One)), 0x48))
                    Store (CD34, Index (DerefOf (Index (EWRY, One)), 0x49))
                    Store (CD35, Index (DerefOf (Index (EWRY, One)), 0x4A))
                    Store (CD36, Index (DerefOf (Index (EWRY, One)), 0x4B))
                    Store (CD37, Index (DerefOf (Index (EWRY, One)), 0x4C))
                    Store (CD38, Index (DerefOf (Index (EWRY, One)), 0x4D))
                    Store (CD39, Index (DerefOf (Index (EWRY, One)), 0x4E))
                    Store (CD3A, Index (DerefOf (Index (EWRY, One)), 0x4F))
                    Store (CD3B, Index (DerefOf (Index (EWRY, One)), 0x50))
                    Store (CD3C, Index (DerefOf (Index (EWRY, One)), 0x51))
                    Store (CD3D, Index (DerefOf (Index (EWRY, One)), 0x52))
                    Store (CD3E, Index (DerefOf (Index (EWRY, One)), 0x53))
                    Store (CD3F, Index (DerefOf (Index (EWRY, One)), 0x54))
                    Store (CD40, Index (DerefOf (Index (EWRY, One)), 0x55))
                    Store (CD41, Index (DerefOf (Index (EWRY, One)), 0x56))
                    Store (CD42, Index (DerefOf (Index (EWRY, One)), 0x57))
                    Store (CD43, Index (DerefOf (Index (EWRY, One)), 0x58))
                    Store (CD44, Index (DerefOf (Index (EWRY, One)), 0x59))
                    Store (CD45, Index (DerefOf (Index (EWRY, One)), 0x5A))
                    Store (CD46, Index (DerefOf (Index (EWRY, One)), 0x5B))
                    Store (CD47, Index (DerefOf (Index (EWRY, One)), 0x5C))
                    Store (CD48, Index (DerefOf (Index (EWRY, One)), 0x5D))
                    Store (CD49, Index (DerefOf (Index (EWRY, One)), 0x5E))
                    Store (CD4A, Index (DerefOf (Index (EWRY, One)), 0x5F))
                    Store (CD4B, Index (DerefOf (Index (EWRY, One)), 0x60))
                    Store (CD4C, Index (DerefOf (Index (EWRY, One)), 0x61))
                    Store (CD4D, Index (DerefOf (Index (EWRY, One)), 0x62))
                    Store (CD4E, Index (DerefOf (Index (EWRY, One)), 0x63))
                    Store (CD4F, Index (DerefOf (Index (EWRY, One)), 0x64))
                    Store (CD50, Index (DerefOf (Index (EWRY, One)), 0x65))
                    Store (CD51, Index (DerefOf (Index (EWRY, One)), 0x66))
                    Store (CD52, Index (DerefOf (Index (EWRY, One)), 0x67))
                    Store (CD53, Index (DerefOf (Index (EWRY, One)), 0x68))
                    Store (CD54, Index (DerefOf (Index (EWRY, One)), 0x69))
                    Store (CD55, Index (DerefOf (Index (EWRY, One)), 0x6A))
                    Store (CD56, Index (DerefOf (Index (EWRY, One)), 0x6B))
                    Store (CD57, Index (DerefOf (Index (EWRY, One)), 0x6C))
                    Store (CD58, Index (DerefOf (Index (EWRY, One)), 0x6D))
                    Store (CD59, Index (DerefOf (Index (EWRY, One)), 0x6E))
                    Store (CD5A, Index (DerefOf (Index (EWRY, One)), 0x6F))
                    Store (CD5B, Index (DerefOf (Index (EWRY, One)), 0x70))
                    Store (CD5C, Index (DerefOf (Index (EWRY, One)), 0x71))
                    Store (CD5D, Index (DerefOf (Index (EWRY, One)), 0x72))
                    Store (CD5E, Index (DerefOf (Index (EWRY, One)), 0x73))
                    Store (CD5F, Index (DerefOf (Index (EWRY, One)), 0x74))
                    Store (CD60, Index (DerefOf (Index (EWRY, One)), 0x75))
                    Store (CD61, Index (DerefOf (Index (EWRY, One)), 0x76))
                    Store (CD62, Index (DerefOf (Index (EWRY, One)), 0x77))
                    Store (CD63, Index (DerefOf (Index (EWRY, One)), 0x78))
                    Store (CD64, Index (DerefOf (Index (EWRY, One)), 0x79))
                    Store (CD65, Index (DerefOf (Index (EWRY, One)), 0x7A))
                    Store (CD66, Index (DerefOf (Index (EWRY, One)), 0x7B))
                    Store (CD67, Index (DerefOf (Index (EWRY, One)), 0x7C))
                    Store (CD68, Index (DerefOf (Index (EWRY, One)), 0x7D))
                    Store (CD69, Index (DerefOf (Index (EWRY, One)), 0x7E))
                    Store (CD6A, Index (DerefOf (Index (EWRY, One)), 0x7F))
                    Store (CD6B, Index (DerefOf (Index (EWRY, One)), 0x80))
                    Store (CD6C, Index (DerefOf (Index (EWRY, One)), 0x81))
                    Store (CD6D, Index (DerefOf (Index (EWRY, One)), 0x82))
                    Store (CD6E, Index (DerefOf (Index (EWRY, One)), 0x83))
                    Store (CD6F, Index (DerefOf (Index (EWRY, One)), 0x84))
                    Store (CD70, Index (DerefOf (Index (EWRY, One)), 0x85))
                    Store (CD71, Index (DerefOf (Index (EWRY, One)), 0x86))
                    Return (EWRY)
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    Store (SDGN, Index (DerefOf (Index (WGDY, One)), One))
                    Store (SD11, Index (DerefOf (Index (WGDY, One)), 0x02))
                    Store (SD12, Index (DerefOf (Index (WGDY, One)), 0x03))
                    Store (SD13, Index (DerefOf (Index (WGDY, One)), 0x04))
                    Store (SD14, Index (DerefOf (Index (WGDY, One)), 0x05))
                    Store (SD15, Index (DerefOf (Index (WGDY, One)), 0x06))
                    Store (SD16, Index (DerefOf (Index (WGDY, One)), 0x07))
                    Store (SD17, Index (DerefOf (Index (WGDY, One)), 0x08))
                    Store (SD18, Index (DerefOf (Index (WGDY, One)), 0x09))
                    Store (SD19, Index (DerefOf (Index (WGDY, One)), 0x0A))
                    Store (SD21, Index (DerefOf (Index (WGDY, One)), 0x0B))
                    Store (SD22, Index (DerefOf (Index (WGDY, One)), 0x0C))
                    Store (SD23, Index (DerefOf (Index (WGDY, One)), 0x0D))
                    Store (SD24, Index (DerefOf (Index (WGDY, One)), 0x0E))
                    Store (SD25, Index (DerefOf (Index (WGDY, One)), 0x0F))
                    Store (SD26, Index (DerefOf (Index (WGDY, One)), 0x10))
                    Store (SD27, Index (DerefOf (Index (WGDY, One)), 0x11))
                    Store (SD28, Index (DerefOf (Index (WGDY, One)), 0x12))
                    Store (SD29, Index (DerefOf (Index (WGDY, One)), 0x13))
                    Store (SD31, Index (DerefOf (Index (WGDY, One)), 0x14))
                    Store (SD32, Index (DerefOf (Index (WGDY, One)), 0x15))
                    Store (SD33, Index (DerefOf (Index (WGDY, One)), 0x16))
                    Store (SD34, Index (DerefOf (Index (WGDY, One)), 0x17))
                    Store (SD35, Index (DerefOf (Index (WGDY, One)), 0x18))
                    Store (SD36, Index (DerefOf (Index (WGDY, One)), 0x19))
                    Store (SD37, Index (DerefOf (Index (WGDY, One)), 0x1A))
                    Store (SD38, Index (DerefOf (Index (WGDY, One)), 0x1B))
                    Store (SD39, Index (DerefOf (Index (WGDY, One)), 0x1C))
                    Store (SD41, Index (DerefOf (Index (WGDY, One)), 0x1D))
                    Store (SD42, Index (DerefOf (Index (WGDY, One)), 0x1E))
                    Store (SD43, Index (DerefOf (Index (WGDY, One)), 0x1F))
                    Store (SD44, Index (DerefOf (Index (WGDY, One)), 0x20))
                    Store (SD45, Index (DerefOf (Index (WGDY, One)), 0x21))
                    Store (SD46, Index (DerefOf (Index (WGDY, One)), 0x22))
                    Store (SD47, Index (DerefOf (Index (WGDY, One)), 0x23))
                    Store (SD48, Index (DerefOf (Index (WGDY, One)), 0x24))
                    Store (SD49, Index (DerefOf (Index (WGDY, One)), 0x25))
                    Store (SD51, Index (DerefOf (Index (WGDY, One)), 0x26))
                    Store (SD52, Index (DerefOf (Index (WGDY, One)), 0x27))
                    Store (SD53, Index (DerefOf (Index (WGDY, One)), 0x28))
                    Store (SD54, Index (DerefOf (Index (WGDY, One)), 0x29))
                    Store (SD55, Index (DerefOf (Index (WGDY, One)), 0x2A))
                    Store (SD56, Index (DerefOf (Index (WGDY, One)), 0x2B))
                    Store (SD57, Index (DerefOf (Index (WGDY, One)), 0x2C))
                    Store (SD58, Index (DerefOf (Index (WGDY, One)), 0x2D))
                    Store (SD59, Index (DerefOf (Index (WGDY, One)), 0x2E))
                    Store (SD61, Index (DerefOf (Index (WGDY, One)), 0x2F))
                    Store (SD62, Index (DerefOf (Index (WGDY, One)), 0x30))
                    Store (SD63, Index (DerefOf (Index (WGDY, One)), 0x31))
                    Store (SD64, Index (DerefOf (Index (WGDY, One)), 0x32))
                    Store (SD65, Index (DerefOf (Index (WGDY, One)), 0x33))
                    Store (SD66, Index (DerefOf (Index (WGDY, One)), 0x34))
                    Store (SD67, Index (DerefOf (Index (WGDY, One)), 0x35))
                    Store (SD68, Index (DerefOf (Index (WGDY, One)), 0x36))
                    Store (SD69, Index (DerefOf (Index (WGDY, One)), 0x37))
                    Store (SD71, Index (DerefOf (Index (WGDY, One)), 0x38))
                    Store (SD72, Index (DerefOf (Index (WGDY, One)), 0x39))
                    Store (SD73, Index (DerefOf (Index (WGDY, One)), 0x3A))
                    Store (SD74, Index (DerefOf (Index (WGDY, One)), 0x3B))
                    Store (SD75, Index (DerefOf (Index (WGDY, One)), 0x3C))
                    Store (SD76, Index (DerefOf (Index (WGDY, One)), 0x3D))
                    Store (SD77, Index (DerefOf (Index (WGDY, One)), 0x3E))
                    Store (SD78, Index (DerefOf (Index (WGDY, One)), 0x3F))
                    Store (SD79, Index (DerefOf (Index (WGDY, One)), 0x40))
                    Store (SD81, Index (DerefOf (Index (WGDY, One)), 0x41))
                    Store (SD82, Index (DerefOf (Index (WGDY, One)), 0x42))
                    Store (SD83, Index (DerefOf (Index (WGDY, One)), 0x43))
                    Store (SD84, Index (DerefOf (Index (WGDY, One)), 0x44))
                    Store (SD85, Index (DerefOf (Index (WGDY, One)), 0x45))
                    Store (SD86, Index (DerefOf (Index (WGDY, One)), 0x46))
                    Store (SD87, Index (DerefOf (Index (WGDY, One)), 0x47))
                    Store (SD88, Index (DerefOf (Index (WGDY, One)), 0x48))
                    Store (SD89, Index (DerefOf (Index (WGDY, One)), 0x49))
                    Return (WGDY)
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                    Return (ECKY)
                }

                Name (PPAY, Package (0x02)
                {
                    One, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    Store (WAGE, Index (DerefOf (Index (PPAY, One)), One))
                    Store (AGA1, Index (DerefOf (Index (PPAY, One)), 0x02))
                    Store (AGA2, Index (DerefOf (Index (PPAY, One)), 0x03))
                    Store (AGA3, Index (DerefOf (Index (PPAY, One)), 0x04))
                    Store (AGA4, Index (DerefOf (Index (PPAY, One)), 0x05))
                    Store (AGA5, Index (DerefOf (Index (PPAY, One)), 0x06))
                    Store (AGA6, Index (DerefOf (Index (PPAY, One)), 0x07))
                    Store (AGA7, Index (DerefOf (Index (PPAY, One)), 0x08))
                    Store (AGA8, Index (DerefOf (Index (PPAY, One)), 0x09))
                    Store (AGA9, Index (DerefOf (Index (PPAY, One)), 0x0A))
                    Store (AGAA, Index (DerefOf (Index (PPAY, One)), 0x0B))
                    Store (AGAB, Index (DerefOf (Index (PPAY, One)), 0x0C))
                    Store (AGB1, Index (DerefOf (Index (PPAY, One)), 0x0D))
                    Store (AGB2, Index (DerefOf (Index (PPAY, One)), 0x0E))
                    Store (AGB3, Index (DerefOf (Index (PPAY, One)), 0x0F))
                    Store (AGB4, Index (DerefOf (Index (PPAY, One)), 0x10))
                    Store (AGB5, Index (DerefOf (Index (PPAY, One)), 0x11))
                    Store (AGB6, Index (DerefOf (Index (PPAY, One)), 0x12))
                    Store (AGB7, Index (DerefOf (Index (PPAY, One)), 0x13))
                    Store (AGB8, Index (DerefOf (Index (PPAY, One)), 0x14))
                    Store (AGB9, Index (DerefOf (Index (PPAY, One)), 0x15))
                    Store (AGBA, Index (DerefOf (Index (PPAY, One)), 0x16))
                    Store (AGBB, Index (DerefOf (Index (PPAY, One)), 0x17))
                    Return (PPAY)
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    Store (WTSV, Index (DerefOf (Index (WTSY, One)), One))
                    Store (WTLE, Index (DerefOf (Index (WTSY, One)), 0x02))
                    Store (BL01, Index (DerefOf (Index (WTSY, One)), 0x03))
                    Store (BL02, Index (DerefOf (Index (WTSY, One)), 0x04))
                    Store (BL03, Index (DerefOf (Index (WTSY, One)), 0x05))
                    Store (BL04, Index (DerefOf (Index (WTSY, One)), 0x06))
                    Store (BL05, Index (DerefOf (Index (WTSY, One)), 0x07))
                    Store (BL06, Index (DerefOf (Index (WTSY, One)), 0x08))
                    Store (BL07, Index (DerefOf (Index (WTSY, One)), 0x09))
                    Store (BL08, Index (DerefOf (Index (WTSY, One)), 0x0A))
                    Store (BL09, Index (DerefOf (Index (WTSY, One)), 0x0B))
                    Store (BL10, Index (DerefOf (Index (WTSY, One)), 0x0C))
                    Store (BL11, Index (DerefOf (Index (WTSY, One)), 0x0D))
                    Store (BL12, Index (DerefOf (Index (WTSY, One)), 0x0E))
                    Store (BL13, Index (DerefOf (Index (WTSY, One)), 0x0F))
                    Store (BL14, Index (DerefOf (Index (WTSY, One)), 0x10))
                    Store (BL15, Index (DerefOf (Index (WTSY, One)), 0x11))
                    Store (BL16, Index (DerefOf (Index (WTSY, One)), 0x12))
                    Return (WTSY)
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    Store (WLBI, Index (DerefOf (Index (WAIY, One)), One))
                    Store (WHBI, Index (DerefOf (Index (WAIY, One)), 0x02))
                    Return (WAIY)
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                    Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                    Return (SADX)
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX)
                }
            }

            If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If (LNotEqual (GGOV (PRST), WPRP))
                    {
                        DL23 ()
                        SGOV (PRST, WPRP)
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    If (LEqual (Arg0, Zero))
                    {
                        Sleep (TBTG)
                    }
                    ElseIf (LEqual (Arg0, One))
                    {
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, And (Not (PFCP), One))
                        Sleep (TFDI)
                    }
                    Else
                    {
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    SPCO (WCLK, One)
                    SGOV (WFCP, PFCP)
                    Sleep (TN2B)
                    SGOV (WBRS, And (Not (PBRS), One))
                    Sleep (TB2R)
                    SGOV (PRST, And (Not (WPRP), One))
                    L23D ()
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Store (Zero, Local0)
                    While (LAnd (LNotEqual (SVID, WSID), LLess (Local0, WSTO)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    If (LEqual (WWEN, 0x02))
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (Zero)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One)
                        SGOV (PRST, And (Not (WPRP), One))
                        SGOV (WBRS, And (Not (PBRS), One))
                        Sleep (0xC8)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x14))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Sleep (0x0A)
                        Notify (PXSX, One)
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (One)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                }
            }

            If (LOr (WIST (), LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT))))
            {
                PowerResource (DRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        DRST
                    })
                }

                Method (IFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        ShiftLeft (CVPR, Zero, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        If (LEqual (CMDT, One))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Return (^^^CNVW.RSTT)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If (LEqual (CMDT, 0x02))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Store (CMDP, ^^^CNVW.RSTT)
                            }

                            Return (Zero)
                        }

                        If (LEqual (CMDT, 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                Return (^^^CNVW.PRRS)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (Zero)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LEqual (CRFI, One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x01                                     
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Store (ACSD, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Store (I5BS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Store (UHBS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        Store (AXMU, Local0)
                        ShiftLeft (Local0, One, Local0)
                        Or (Local0, AXSU, Local0)
                        Store (AXMR, Local1)
                        ShiftLeft (Local1, One, Local1)
                        Or (Local1, AXSR, Local1)
                        ShiftLeft (Local1, 0x02, Local1)
                        Or (Local0, Local1, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (WFRC)
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (WFUC)
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        Return (UNI4)
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        Return (WFIC)
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (LEqual (Arg0, ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d")))
                        {
                            If (LEqual (Arg2, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                           
                                })
                            }

                            If (LEqual (Arg2, One)){}
                            If (LEqual (Arg2, 0x02)){}
                            If (LEqual (Arg2, 0x03))
                            {
                                If (LEqual (WRTO, One)){}
                                ElseIf (LEqual (WRTO, 0x03)){}
                                Else
                                {
                                }

                                Return (WRTO)
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP03.PXSX))
    {
        Scope (_SB.PC00.RP03.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, Add (GMIO (^_ADR, _ADR), 0x44), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                    Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                    Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                    Return (SPLX)
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                    Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                    Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                    Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                    Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                    Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                    Return (WANX)
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                    Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                    Return (WRDX)
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    Store (STXE, Index (DerefOf (Index (WRDY, One)), One))
                    Store (ST10, Index (DerefOf (Index (WRDY, One)), 0x02))
                    Store (ST11, Index (DerefOf (Index (WRDY, One)), 0x03))
                    Store (ST12, Index (DerefOf (Index (WRDY, One)), 0x04))
                    Store (ST13, Index (DerefOf (Index (WRDY, One)), 0x05))
                    Store (ST14, Index (DerefOf (Index (WRDY, One)), 0x06))
                    Store (ST15, Index (DerefOf (Index (WRDY, One)), 0x07))
                    Store (ST16, Index (DerefOf (Index (WRDY, One)), 0x08))
                    Store (ST17, Index (DerefOf (Index (WRDY, One)), 0x09))
                    Store (ST18, Index (DerefOf (Index (WRDY, One)), 0x0A))
                    Store (ST19, Index (DerefOf (Index (WRDY, One)), 0x0B))
                    Store (ST50, Index (DerefOf (Index (WRDY, One)), 0x0C))
                    Store (ST51, Index (DerefOf (Index (WRDY, One)), 0x0D))
                    Store (ST52, Index (DerefOf (Index (WRDY, One)), 0x0E))
                    Store (ST53, Index (DerefOf (Index (WRDY, One)), 0x0F))
                    Store (ST54, Index (DerefOf (Index (WRDY, One)), 0x10))
                    Store (ST55, Index (DerefOf (Index (WRDY, One)), 0x11))
                    Store (ST56, Index (DerefOf (Index (WRDY, One)), 0x12))
                    Store (ST57, Index (DerefOf (Index (WRDY, One)), 0x13))
                    Store (ST58, Index (DerefOf (Index (WRDY, One)), 0x14))
                    Store (ST59, Index (DerefOf (Index (WRDY, One)), 0x15))
                    Store (ST5A, Index (DerefOf (Index (WRDY, One)), 0x16))
                    Store (ST5B, Index (DerefOf (Index (WRDY, One)), 0x17))
                    Store (CD10, Index (DerefOf (Index (WRDY, One)), 0x18))
                    Store (CD11, Index (DerefOf (Index (WRDY, One)), 0x19))
                    Store (CD12, Index (DerefOf (Index (WRDY, One)), 0x1A))
                    Store (CD13, Index (DerefOf (Index (WRDY, One)), 0x1B))
                    Store (CD14, Index (DerefOf (Index (WRDY, One)), 0x1C))
                    Store (CD15, Index (DerefOf (Index (WRDY, One)), 0x1D))
                    Store (CD16, Index (DerefOf (Index (WRDY, One)), 0x1E))
                    Store (CD17, Index (DerefOf (Index (WRDY, One)), 0x1F))
                    Store (CD18, Index (DerefOf (Index (WRDY, One)), 0x20))
                    Store (CD19, Index (DerefOf (Index (WRDY, One)), 0x21))
                    Store (CD1A, Index (DerefOf (Index (WRDY, One)), 0x22))
                    Store (CD20, Index (DerefOf (Index (WRDY, One)), 0x23))
                    Store (CD21, Index (DerefOf (Index (WRDY, One)), 0x24))
                    Store (CD22, Index (DerefOf (Index (WRDY, One)), 0x25))
                    Store (CD23, Index (DerefOf (Index (WRDY, One)), 0x26))
                    Store (CD24, Index (DerefOf (Index (WRDY, One)), 0x27))
                    Store (CD25, Index (DerefOf (Index (WRDY, One)), 0x28))
                    Store (CD26, Index (DerefOf (Index (WRDY, One)), 0x29))
                    Store (CD27, Index (DerefOf (Index (WRDY, One)), 0x2A))
                    Store (CD28, Index (DerefOf (Index (WRDY, One)), 0x2B))
                    Store (CD29, Index (DerefOf (Index (WRDY, One)), 0x2C))
                    Store (CD2A, Index (DerefOf (Index (WRDY, One)), 0x2D))
                    Return (WRDY)
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    Store (STDE, Index (DerefOf (Index (EWRY, One)), One))
                    Store (STRS, Index (DerefOf (Index (EWRY, One)), 0x02))
                    Store (ST20, Index (DerefOf (Index (EWRY, One)), 0x03))
                    Store (ST21, Index (DerefOf (Index (EWRY, One)), 0x04))
                    Store (ST22, Index (DerefOf (Index (EWRY, One)), 0x05))
                    Store (ST23, Index (DerefOf (Index (EWRY, One)), 0x06))
                    Store (ST24, Index (DerefOf (Index (EWRY, One)), 0x07))
                    Store (ST25, Index (DerefOf (Index (EWRY, One)), 0x08))
                    Store (ST26, Index (DerefOf (Index (EWRY, One)), 0x09))
                    Store (ST27, Index (DerefOf (Index (EWRY, One)), 0x0A))
                    Store (ST28, Index (DerefOf (Index (EWRY, One)), 0x0B))
                    Store (ST29, Index (DerefOf (Index (EWRY, One)), 0x0C))
                    Store (ST60, Index (DerefOf (Index (EWRY, One)), 0x0D))
                    Store (ST61, Index (DerefOf (Index (EWRY, One)), 0x0E))
                    Store (ST62, Index (DerefOf (Index (EWRY, One)), 0x0F))
                    Store (ST63, Index (DerefOf (Index (EWRY, One)), 0x10))
                    Store (ST64, Index (DerefOf (Index (EWRY, One)), 0x11))
                    Store (ST65, Index (DerefOf (Index (EWRY, One)), 0x12))
                    Store (ST66, Index (DerefOf (Index (EWRY, One)), 0x13))
                    Store (ST67, Index (DerefOf (Index (EWRY, One)), 0x14))
                    Store (ST68, Index (DerefOf (Index (EWRY, One)), 0x15))
                    Store (ST69, Index (DerefOf (Index (EWRY, One)), 0x16))
                    Store (ST6A, Index (DerefOf (Index (EWRY, One)), 0x17))
                    Store (ST6B, Index (DerefOf (Index (EWRY, One)), 0x18))
                    Store (ST30, Index (DerefOf (Index (EWRY, One)), 0x19))
                    Store (ST31, Index (DerefOf (Index (EWRY, One)), 0x1A))
                    Store (ST32, Index (DerefOf (Index (EWRY, One)), 0x1B))
                    Store (ST33, Index (DerefOf (Index (EWRY, One)), 0x1C))
                    Store (ST34, Index (DerefOf (Index (EWRY, One)), 0x1D))
                    Store (ST35, Index (DerefOf (Index (EWRY, One)), 0x1E))
                    Store (ST36, Index (DerefOf (Index (EWRY, One)), 0x1F))
                    Store (ST37, Index (DerefOf (Index (EWRY, One)), 0x20))
                    Store (ST38, Index (DerefOf (Index (EWRY, One)), 0x21))
                    Store (ST39, Index (DerefOf (Index (EWRY, One)), 0x22))
                    Store (ST70, Index (DerefOf (Index (EWRY, One)), 0x23))
                    Store (ST71, Index (DerefOf (Index (EWRY, One)), 0x24))
                    Store (ST72, Index (DerefOf (Index (EWRY, One)), 0x25))
                    Store (ST73, Index (DerefOf (Index (EWRY, One)), 0x26))
                    Store (ST74, Index (DerefOf (Index (EWRY, One)), 0x27))
                    Store (ST75, Index (DerefOf (Index (EWRY, One)), 0x28))
                    Store (ST76, Index (DerefOf (Index (EWRY, One)), 0x29))
                    Store (ST77, Index (DerefOf (Index (EWRY, One)), 0x2A))
                    Store (ST78, Index (DerefOf (Index (EWRY, One)), 0x2B))
                    Store (ST79, Index (DerefOf (Index (EWRY, One)), 0x2C))
                    Store (ST7A, Index (DerefOf (Index (EWRY, One)), 0x2D))
                    Store (ST7B, Index (DerefOf (Index (EWRY, One)), 0x2E))
                    Store (ST40, Index (DerefOf (Index (EWRY, One)), 0x2F))
                    Store (ST41, Index (DerefOf (Index (EWRY, One)), 0x30))
                    Store (ST42, Index (DerefOf (Index (EWRY, One)), 0x31))
                    Store (ST43, Index (DerefOf (Index (EWRY, One)), 0x32))
                    Store (ST44, Index (DerefOf (Index (EWRY, One)), 0x33))
                    Store (ST45, Index (DerefOf (Index (EWRY, One)), 0x34))
                    Store (ST46, Index (DerefOf (Index (EWRY, One)), 0x35))
                    Store (ST47, Index (DerefOf (Index (EWRY, One)), 0x36))
                    Store (ST48, Index (DerefOf (Index (EWRY, One)), 0x37))
                    Store (ST49, Index (DerefOf (Index (EWRY, One)), 0x38))
                    Store (ST80, Index (DerefOf (Index (EWRY, One)), 0x39))
                    Store (ST81, Index (DerefOf (Index (EWRY, One)), 0x3A))
                    Store (ST82, Index (DerefOf (Index (EWRY, One)), 0x3B))
                    Store (ST83, Index (DerefOf (Index (EWRY, One)), 0x3C))
                    Store (ST84, Index (DerefOf (Index (EWRY, One)), 0x3D))
                    Store (ST85, Index (DerefOf (Index (EWRY, One)), 0x3E))
                    Store (ST86, Index (DerefOf (Index (EWRY, One)), 0x3F))
                    Store (ST87, Index (DerefOf (Index (EWRY, One)), 0x40))
                    Store (ST88, Index (DerefOf (Index (EWRY, One)), 0x41))
                    Store (ST89, Index (DerefOf (Index (EWRY, One)), 0x42))
                    Store (ST8A, Index (DerefOf (Index (EWRY, One)), 0x43))
                    Store (ST8B, Index (DerefOf (Index (EWRY, One)), 0x44))
                    Store (CD30, Index (DerefOf (Index (EWRY, One)), 0x45))
                    Store (CD31, Index (DerefOf (Index (EWRY, One)), 0x46))
                    Store (CD32, Index (DerefOf (Index (EWRY, One)), 0x47))
                    Store (CD33, Index (DerefOf (Index (EWRY, One)), 0x48))
                    Store (CD34, Index (DerefOf (Index (EWRY, One)), 0x49))
                    Store (CD35, Index (DerefOf (Index (EWRY, One)), 0x4A))
                    Store (CD36, Index (DerefOf (Index (EWRY, One)), 0x4B))
                    Store (CD37, Index (DerefOf (Index (EWRY, One)), 0x4C))
                    Store (CD38, Index (DerefOf (Index (EWRY, One)), 0x4D))
                    Store (CD39, Index (DerefOf (Index (EWRY, One)), 0x4E))
                    Store (CD3A, Index (DerefOf (Index (EWRY, One)), 0x4F))
                    Store (CD3B, Index (DerefOf (Index (EWRY, One)), 0x50))
                    Store (CD3C, Index (DerefOf (Index (EWRY, One)), 0x51))
                    Store (CD3D, Index (DerefOf (Index (EWRY, One)), 0x52))
                    Store (CD3E, Index (DerefOf (Index (EWRY, One)), 0x53))
                    Store (CD3F, Index (DerefOf (Index (EWRY, One)), 0x54))
                    Store (CD40, Index (DerefOf (Index (EWRY, One)), 0x55))
                    Store (CD41, Index (DerefOf (Index (EWRY, One)), 0x56))
                    Store (CD42, Index (DerefOf (Index (EWRY, One)), 0x57))
                    Store (CD43, Index (DerefOf (Index (EWRY, One)), 0x58))
                    Store (CD44, Index (DerefOf (Index (EWRY, One)), 0x59))
                    Store (CD45, Index (DerefOf (Index (EWRY, One)), 0x5A))
                    Store (CD46, Index (DerefOf (Index (EWRY, One)), 0x5B))
                    Store (CD47, Index (DerefOf (Index (EWRY, One)), 0x5C))
                    Store (CD48, Index (DerefOf (Index (EWRY, One)), 0x5D))
                    Store (CD49, Index (DerefOf (Index (EWRY, One)), 0x5E))
                    Store (CD4A, Index (DerefOf (Index (EWRY, One)), 0x5F))
                    Store (CD4B, Index (DerefOf (Index (EWRY, One)), 0x60))
                    Store (CD4C, Index (DerefOf (Index (EWRY, One)), 0x61))
                    Store (CD4D, Index (DerefOf (Index (EWRY, One)), 0x62))
                    Store (CD4E, Index (DerefOf (Index (EWRY, One)), 0x63))
                    Store (CD4F, Index (DerefOf (Index (EWRY, One)), 0x64))
                    Store (CD50, Index (DerefOf (Index (EWRY, One)), 0x65))
                    Store (CD51, Index (DerefOf (Index (EWRY, One)), 0x66))
                    Store (CD52, Index (DerefOf (Index (EWRY, One)), 0x67))
                    Store (CD53, Index (DerefOf (Index (EWRY, One)), 0x68))
                    Store (CD54, Index (DerefOf (Index (EWRY, One)), 0x69))
                    Store (CD55, Index (DerefOf (Index (EWRY, One)), 0x6A))
                    Store (CD56, Index (DerefOf (Index (EWRY, One)), 0x6B))
                    Store (CD57, Index (DerefOf (Index (EWRY, One)), 0x6C))
                    Store (CD58, Index (DerefOf (Index (EWRY, One)), 0x6D))
                    Store (CD59, Index (DerefOf (Index (EWRY, One)), 0x6E))
                    Store (CD5A, Index (DerefOf (Index (EWRY, One)), 0x6F))
                    Store (CD5B, Index (DerefOf (Index (EWRY, One)), 0x70))
                    Store (CD5C, Index (DerefOf (Index (EWRY, One)), 0x71))
                    Store (CD5D, Index (DerefOf (Index (EWRY, One)), 0x72))
                    Store (CD5E, Index (DerefOf (Index (EWRY, One)), 0x73))
                    Store (CD5F, Index (DerefOf (Index (EWRY, One)), 0x74))
                    Store (CD60, Index (DerefOf (Index (EWRY, One)), 0x75))
                    Store (CD61, Index (DerefOf (Index (EWRY, One)), 0x76))
                    Store (CD62, Index (DerefOf (Index (EWRY, One)), 0x77))
                    Store (CD63, Index (DerefOf (Index (EWRY, One)), 0x78))
                    Store (CD64, Index (DerefOf (Index (EWRY, One)), 0x79))
                    Store (CD65, Index (DerefOf (Index (EWRY, One)), 0x7A))
                    Store (CD66, Index (DerefOf (Index (EWRY, One)), 0x7B))
                    Store (CD67, Index (DerefOf (Index (EWRY, One)), 0x7C))
                    Store (CD68, Index (DerefOf (Index (EWRY, One)), 0x7D))
                    Store (CD69, Index (DerefOf (Index (EWRY, One)), 0x7E))
                    Store (CD6A, Index (DerefOf (Index (EWRY, One)), 0x7F))
                    Store (CD6B, Index (DerefOf (Index (EWRY, One)), 0x80))
                    Store (CD6C, Index (DerefOf (Index (EWRY, One)), 0x81))
                    Store (CD6D, Index (DerefOf (Index (EWRY, One)), 0x82))
                    Store (CD6E, Index (DerefOf (Index (EWRY, One)), 0x83))
                    Store (CD6F, Index (DerefOf (Index (EWRY, One)), 0x84))
                    Store (CD70, Index (DerefOf (Index (EWRY, One)), 0x85))
                    Store (CD71, Index (DerefOf (Index (EWRY, One)), 0x86))
                    Return (EWRY)
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    Store (SDGN, Index (DerefOf (Index (WGDY, One)), One))
                    Store (SD11, Index (DerefOf (Index (WGDY, One)), 0x02))
                    Store (SD12, Index (DerefOf (Index (WGDY, One)), 0x03))
                    Store (SD13, Index (DerefOf (Index (WGDY, One)), 0x04))
                    Store (SD14, Index (DerefOf (Index (WGDY, One)), 0x05))
                    Store (SD15, Index (DerefOf (Index (WGDY, One)), 0x06))
                    Store (SD16, Index (DerefOf (Index (WGDY, One)), 0x07))
                    Store (SD17, Index (DerefOf (Index (WGDY, One)), 0x08))
                    Store (SD18, Index (DerefOf (Index (WGDY, One)), 0x09))
                    Store (SD19, Index (DerefOf (Index (WGDY, One)), 0x0A))
                    Store (SD21, Index (DerefOf (Index (WGDY, One)), 0x0B))
                    Store (SD22, Index (DerefOf (Index (WGDY, One)), 0x0C))
                    Store (SD23, Index (DerefOf (Index (WGDY, One)), 0x0D))
                    Store (SD24, Index (DerefOf (Index (WGDY, One)), 0x0E))
                    Store (SD25, Index (DerefOf (Index (WGDY, One)), 0x0F))
                    Store (SD26, Index (DerefOf (Index (WGDY, One)), 0x10))
                    Store (SD27, Index (DerefOf (Index (WGDY, One)), 0x11))
                    Store (SD28, Index (DerefOf (Index (WGDY, One)), 0x12))
                    Store (SD29, Index (DerefOf (Index (WGDY, One)), 0x13))
                    Store (SD31, Index (DerefOf (Index (WGDY, One)), 0x14))
                    Store (SD32, Index (DerefOf (Index (WGDY, One)), 0x15))
                    Store (SD33, Index (DerefOf (Index (WGDY, One)), 0x16))
                    Store (SD34, Index (DerefOf (Index (WGDY, One)), 0x17))
                    Store (SD35, Index (DerefOf (Index (WGDY, One)), 0x18))
                    Store (SD36, Index (DerefOf (Index (WGDY, One)), 0x19))
                    Store (SD37, Index (DerefOf (Index (WGDY, One)), 0x1A))
                    Store (SD38, Index (DerefOf (Index (WGDY, One)), 0x1B))
                    Store (SD39, Index (DerefOf (Index (WGDY, One)), 0x1C))
                    Store (SD41, Index (DerefOf (Index (WGDY, One)), 0x1D))
                    Store (SD42, Index (DerefOf (Index (WGDY, One)), 0x1E))
                    Store (SD43, Index (DerefOf (Index (WGDY, One)), 0x1F))
                    Store (SD44, Index (DerefOf (Index (WGDY, One)), 0x20))
                    Store (SD45, Index (DerefOf (Index (WGDY, One)), 0x21))
                    Store (SD46, Index (DerefOf (Index (WGDY, One)), 0x22))
                    Store (SD47, Index (DerefOf (Index (WGDY, One)), 0x23))
                    Store (SD48, Index (DerefOf (Index (WGDY, One)), 0x24))
                    Store (SD49, Index (DerefOf (Index (WGDY, One)), 0x25))
                    Store (SD51, Index (DerefOf (Index (WGDY, One)), 0x26))
                    Store (SD52, Index (DerefOf (Index (WGDY, One)), 0x27))
                    Store (SD53, Index (DerefOf (Index (WGDY, One)), 0x28))
                    Store (SD54, Index (DerefOf (Index (WGDY, One)), 0x29))
                    Store (SD55, Index (DerefOf (Index (WGDY, One)), 0x2A))
                    Store (SD56, Index (DerefOf (Index (WGDY, One)), 0x2B))
                    Store (SD57, Index (DerefOf (Index (WGDY, One)), 0x2C))
                    Store (SD58, Index (DerefOf (Index (WGDY, One)), 0x2D))
                    Store (SD59, Index (DerefOf (Index (WGDY, One)), 0x2E))
                    Store (SD61, Index (DerefOf (Index (WGDY, One)), 0x2F))
                    Store (SD62, Index (DerefOf (Index (WGDY, One)), 0x30))
                    Store (SD63, Index (DerefOf (Index (WGDY, One)), 0x31))
                    Store (SD64, Index (DerefOf (Index (WGDY, One)), 0x32))
                    Store (SD65, Index (DerefOf (Index (WGDY, One)), 0x33))
                    Store (SD66, Index (DerefOf (Index (WGDY, One)), 0x34))
                    Store (SD67, Index (DerefOf (Index (WGDY, One)), 0x35))
                    Store (SD68, Index (DerefOf (Index (WGDY, One)), 0x36))
                    Store (SD69, Index (DerefOf (Index (WGDY, One)), 0x37))
                    Store (SD71, Index (DerefOf (Index (WGDY, One)), 0x38))
                    Store (SD72, Index (DerefOf (Index (WGDY, One)), 0x39))
                    Store (SD73, Index (DerefOf (Index (WGDY, One)), 0x3A))
                    Store (SD74, Index (DerefOf (Index (WGDY, One)), 0x3B))
                    Store (SD75, Index (DerefOf (Index (WGDY, One)), 0x3C))
                    Store (SD76, Index (DerefOf (Index (WGDY, One)), 0x3D))
                    Store (SD77, Index (DerefOf (Index (WGDY, One)), 0x3E))
                    Store (SD78, Index (DerefOf (Index (WGDY, One)), 0x3F))
                    Store (SD79, Index (DerefOf (Index (WGDY, One)), 0x40))
                    Store (SD81, Index (DerefOf (Index (WGDY, One)), 0x41))
                    Store (SD82, Index (DerefOf (Index (WGDY, One)), 0x42))
                    Store (SD83, Index (DerefOf (Index (WGDY, One)), 0x43))
                    Store (SD84, Index (DerefOf (Index (WGDY, One)), 0x44))
                    Store (SD85, Index (DerefOf (Index (WGDY, One)), 0x45))
                    Store (SD86, Index (DerefOf (Index (WGDY, One)), 0x46))
                    Store (SD87, Index (DerefOf (Index (WGDY, One)), 0x47))
                    Store (SD88, Index (DerefOf (Index (WGDY, One)), 0x48))
                    Store (SD89, Index (DerefOf (Index (WGDY, One)), 0x49))
                    Return (WGDY)
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                    Return (ECKY)
                }

                Name (PPAY, Package (0x02)
                {
                    One, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    Store (WAGE, Index (DerefOf (Index (PPAY, One)), One))
                    Store (AGA1, Index (DerefOf (Index (PPAY, One)), 0x02))
                    Store (AGA2, Index (DerefOf (Index (PPAY, One)), 0x03))
                    Store (AGA3, Index (DerefOf (Index (PPAY, One)), 0x04))
                    Store (AGA4, Index (DerefOf (Index (PPAY, One)), 0x05))
                    Store (AGA5, Index (DerefOf (Index (PPAY, One)), 0x06))
                    Store (AGA6, Index (DerefOf (Index (PPAY, One)), 0x07))
                    Store (AGA7, Index (DerefOf (Index (PPAY, One)), 0x08))
                    Store (AGA8, Index (DerefOf (Index (PPAY, One)), 0x09))
                    Store (AGA9, Index (DerefOf (Index (PPAY, One)), 0x0A))
                    Store (AGAA, Index (DerefOf (Index (PPAY, One)), 0x0B))
                    Store (AGAB, Index (DerefOf (Index (PPAY, One)), 0x0C))
                    Store (AGB1, Index (DerefOf (Index (PPAY, One)), 0x0D))
                    Store (AGB2, Index (DerefOf (Index (PPAY, One)), 0x0E))
                    Store (AGB3, Index (DerefOf (Index (PPAY, One)), 0x0F))
                    Store (AGB4, Index (DerefOf (Index (PPAY, One)), 0x10))
                    Store (AGB5, Index (DerefOf (Index (PPAY, One)), 0x11))
                    Store (AGB6, Index (DerefOf (Index (PPAY, One)), 0x12))
                    Store (AGB7, Index (DerefOf (Index (PPAY, One)), 0x13))
                    Store (AGB8, Index (DerefOf (Index (PPAY, One)), 0x14))
                    Store (AGB9, Index (DerefOf (Index (PPAY, One)), 0x15))
                    Store (AGBA, Index (DerefOf (Index (PPAY, One)), 0x16))
                    Store (AGBB, Index (DerefOf (Index (PPAY, One)), 0x17))
                    Return (PPAY)
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    Store (WTSV, Index (DerefOf (Index (WTSY, One)), One))
                    Store (WTLE, Index (DerefOf (Index (WTSY, One)), 0x02))
                    Store (BL01, Index (DerefOf (Index (WTSY, One)), 0x03))
                    Store (BL02, Index (DerefOf (Index (WTSY, One)), 0x04))
                    Store (BL03, Index (DerefOf (Index (WTSY, One)), 0x05))
                    Store (BL04, Index (DerefOf (Index (WTSY, One)), 0x06))
                    Store (BL05, Index (DerefOf (Index (WTSY, One)), 0x07))
                    Store (BL06, Index (DerefOf (Index (WTSY, One)), 0x08))
                    Store (BL07, Index (DerefOf (Index (WTSY, One)), 0x09))
                    Store (BL08, Index (DerefOf (Index (WTSY, One)), 0x0A))
                    Store (BL09, Index (DerefOf (Index (WTSY, One)), 0x0B))
                    Store (BL10, Index (DerefOf (Index (WTSY, One)), 0x0C))
                    Store (BL11, Index (DerefOf (Index (WTSY, One)), 0x0D))
                    Store (BL12, Index (DerefOf (Index (WTSY, One)), 0x0E))
                    Store (BL13, Index (DerefOf (Index (WTSY, One)), 0x0F))
                    Store (BL14, Index (DerefOf (Index (WTSY, One)), 0x10))
                    Store (BL15, Index (DerefOf (Index (WTSY, One)), 0x11))
                    Store (BL16, Index (DerefOf (Index (WTSY, One)), 0x12))
                    Return (WTSY)
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    Store (WLBI, Index (DerefOf (Index (WAIY, One)), One))
                    Store (WHBI, Index (DerefOf (Index (WAIY, One)), 0x02))
                    Return (WAIY)
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                    Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                    Return (SADX)
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX)
                }
            }

            If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If (LNotEqual (GGOV (PRST), WPRP))
                    {
                        DL23 ()
                        SGOV (PRST, WPRP)
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    If (LEqual (Arg0, Zero))
                    {
                        Sleep (TBTG)
                    }
                    ElseIf (LEqual (Arg0, One))
                    {
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, And (Not (PFCP), One))
                        Sleep (TFDI)
                    }
                    Else
                    {
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    SPCO (WCLK, One)
                    SGOV (WFCP, PFCP)
                    Sleep (TN2B)
                    SGOV (WBRS, And (Not (PBRS), One))
                    Sleep (TB2R)
                    SGOV (PRST, And (Not (WPRP), One))
                    L23D ()
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Store (Zero, Local0)
                    While (LAnd (LNotEqual (SVID, WSID), LLess (Local0, WSTO)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    If (LEqual (WWEN, 0x02))
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (Zero)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One)
                        SGOV (PRST, And (Not (WPRP), One))
                        SGOV (WBRS, And (Not (PBRS), One))
                        Sleep (0xC8)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x14))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Sleep (0x0A)
                        Notify (PXSX, One)
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (One)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                }
            }

            If (LOr (WIST (), LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT))))
            {
                PowerResource (DRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        DRST
                    })
                }

                Method (IFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        ShiftLeft (CVPR, Zero, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        If (LEqual (CMDT, One))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Return (^^^CNVW.RSTT)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If (LEqual (CMDT, 0x02))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Store (CMDP, ^^^CNVW.RSTT)
                            }

                            Return (Zero)
                        }

                        If (LEqual (CMDT, 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                Return (^^^CNVW.PRRS)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (Zero)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LEqual (CRFI, One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x01                                     
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Store (ACSD, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Store (I5BS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Store (UHBS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        Store (AXMU, Local0)
                        ShiftLeft (Local0, One, Local0)
                        Or (Local0, AXSU, Local0)
                        Store (AXMR, Local1)
                        ShiftLeft (Local1, One, Local1)
                        Or (Local1, AXSR, Local1)
                        ShiftLeft (Local1, 0x02, Local1)
                        Or (Local0, Local1, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (WFRC)
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (WFUC)
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        Return (UNI4)
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        Return (WFIC)
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (LEqual (Arg0, ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d")))
                        {
                            If (LEqual (Arg2, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                           
                                })
                            }

                            If (LEqual (Arg2, One)){}
                            If (LEqual (Arg2, 0x02)){}
                            If (LEqual (Arg2, 0x03))
                            {
                                If (LEqual (WRTO, One)){}
                                ElseIf (LEqual (WRTO, 0x03)){}
                                Else
                                {
                                }

                                Return (WRTO)
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP04.PXSX))
    {
        Scope (_SB.PC00.RP04.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, Add (GMIO (^_ADR, _ADR), 0x44), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                    Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                    Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                    Return (SPLX)
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                    Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                    Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                    Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                    Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                    Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                    Return (WANX)
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                    Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                    Return (WRDX)
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    Store (STXE, Index (DerefOf (Index (WRDY, One)), One))
                    Store (ST10, Index (DerefOf (Index (WRDY, One)), 0x02))
                    Store (ST11, Index (DerefOf (Index (WRDY, One)), 0x03))
                    Store (ST12, Index (DerefOf (Index (WRDY, One)), 0x04))
                    Store (ST13, Index (DerefOf (Index (WRDY, One)), 0x05))
                    Store (ST14, Index (DerefOf (Index (WRDY, One)), 0x06))
                    Store (ST15, Index (DerefOf (Index (WRDY, One)), 0x07))
                    Store (ST16, Index (DerefOf (Index (WRDY, One)), 0x08))
                    Store (ST17, Index (DerefOf (Index (WRDY, One)), 0x09))
                    Store (ST18, Index (DerefOf (Index (WRDY, One)), 0x0A))
                    Store (ST19, Index (DerefOf (Index (WRDY, One)), 0x0B))
                    Store (ST50, Index (DerefOf (Index (WRDY, One)), 0x0C))
                    Store (ST51, Index (DerefOf (Index (WRDY, One)), 0x0D))
                    Store (ST52, Index (DerefOf (Index (WRDY, One)), 0x0E))
                    Store (ST53, Index (DerefOf (Index (WRDY, One)), 0x0F))
                    Store (ST54, Index (DerefOf (Index (WRDY, One)), 0x10))
                    Store (ST55, Index (DerefOf (Index (WRDY, One)), 0x11))
                    Store (ST56, Index (DerefOf (Index (WRDY, One)), 0x12))
                    Store (ST57, Index (DerefOf (Index (WRDY, One)), 0x13))
                    Store (ST58, Index (DerefOf (Index (WRDY, One)), 0x14))
                    Store (ST59, Index (DerefOf (Index (WRDY, One)), 0x15))
                    Store (ST5A, Index (DerefOf (Index (WRDY, One)), 0x16))
                    Store (ST5B, Index (DerefOf (Index (WRDY, One)), 0x17))
                    Store (CD10, Index (DerefOf (Index (WRDY, One)), 0x18))
                    Store (CD11, Index (DerefOf (Index (WRDY, One)), 0x19))
                    Store (CD12, Index (DerefOf (Index (WRDY, One)), 0x1A))
                    Store (CD13, Index (DerefOf (Index (WRDY, One)), 0x1B))
                    Store (CD14, Index (DerefOf (Index (WRDY, One)), 0x1C))
                    Store (CD15, Index (DerefOf (Index (WRDY, One)), 0x1D))
                    Store (CD16, Index (DerefOf (Index (WRDY, One)), 0x1E))
                    Store (CD17, Index (DerefOf (Index (WRDY, One)), 0x1F))
                    Store (CD18, Index (DerefOf (Index (WRDY, One)), 0x20))
                    Store (CD19, Index (DerefOf (Index (WRDY, One)), 0x21))
                    Store (CD1A, Index (DerefOf (Index (WRDY, One)), 0x22))
                    Store (CD20, Index (DerefOf (Index (WRDY, One)), 0x23))
                    Store (CD21, Index (DerefOf (Index (WRDY, One)), 0x24))
                    Store (CD22, Index (DerefOf (Index (WRDY, One)), 0x25))
                    Store (CD23, Index (DerefOf (Index (WRDY, One)), 0x26))
                    Store (CD24, Index (DerefOf (Index (WRDY, One)), 0x27))
                    Store (CD25, Index (DerefOf (Index (WRDY, One)), 0x28))
                    Store (CD26, Index (DerefOf (Index (WRDY, One)), 0x29))
                    Store (CD27, Index (DerefOf (Index (WRDY, One)), 0x2A))
                    Store (CD28, Index (DerefOf (Index (WRDY, One)), 0x2B))
                    Store (CD29, Index (DerefOf (Index (WRDY, One)), 0x2C))
                    Store (CD2A, Index (DerefOf (Index (WRDY, One)), 0x2D))
                    Return (WRDY)
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    Store (STDE, Index (DerefOf (Index (EWRY, One)), One))
                    Store (STRS, Index (DerefOf (Index (EWRY, One)), 0x02))
                    Store (ST20, Index (DerefOf (Index (EWRY, One)), 0x03))
                    Store (ST21, Index (DerefOf (Index (EWRY, One)), 0x04))
                    Store (ST22, Index (DerefOf (Index (EWRY, One)), 0x05))
                    Store (ST23, Index (DerefOf (Index (EWRY, One)), 0x06))
                    Store (ST24, Index (DerefOf (Index (EWRY, One)), 0x07))
                    Store (ST25, Index (DerefOf (Index (EWRY, One)), 0x08))
                    Store (ST26, Index (DerefOf (Index (EWRY, One)), 0x09))
                    Store (ST27, Index (DerefOf (Index (EWRY, One)), 0x0A))
                    Store (ST28, Index (DerefOf (Index (EWRY, One)), 0x0B))
                    Store (ST29, Index (DerefOf (Index (EWRY, One)), 0x0C))
                    Store (ST60, Index (DerefOf (Index (EWRY, One)), 0x0D))
                    Store (ST61, Index (DerefOf (Index (EWRY, One)), 0x0E))
                    Store (ST62, Index (DerefOf (Index (EWRY, One)), 0x0F))
                    Store (ST63, Index (DerefOf (Index (EWRY, One)), 0x10))
                    Store (ST64, Index (DerefOf (Index (EWRY, One)), 0x11))
                    Store (ST65, Index (DerefOf (Index (EWRY, One)), 0x12))
                    Store (ST66, Index (DerefOf (Index (EWRY, One)), 0x13))
                    Store (ST67, Index (DerefOf (Index (EWRY, One)), 0x14))
                    Store (ST68, Index (DerefOf (Index (EWRY, One)), 0x15))
                    Store (ST69, Index (DerefOf (Index (EWRY, One)), 0x16))
                    Store (ST6A, Index (DerefOf (Index (EWRY, One)), 0x17))
                    Store (ST6B, Index (DerefOf (Index (EWRY, One)), 0x18))
                    Store (ST30, Index (DerefOf (Index (EWRY, One)), 0x19))
                    Store (ST31, Index (DerefOf (Index (EWRY, One)), 0x1A))
                    Store (ST32, Index (DerefOf (Index (EWRY, One)), 0x1B))
                    Store (ST33, Index (DerefOf (Index (EWRY, One)), 0x1C))
                    Store (ST34, Index (DerefOf (Index (EWRY, One)), 0x1D))
                    Store (ST35, Index (DerefOf (Index (EWRY, One)), 0x1E))
                    Store (ST36, Index (DerefOf (Index (EWRY, One)), 0x1F))
                    Store (ST37, Index (DerefOf (Index (EWRY, One)), 0x20))
                    Store (ST38, Index (DerefOf (Index (EWRY, One)), 0x21))
                    Store (ST39, Index (DerefOf (Index (EWRY, One)), 0x22))
                    Store (ST70, Index (DerefOf (Index (EWRY, One)), 0x23))
                    Store (ST71, Index (DerefOf (Index (EWRY, One)), 0x24))
                    Store (ST72, Index (DerefOf (Index (EWRY, One)), 0x25))
                    Store (ST73, Index (DerefOf (Index (EWRY, One)), 0x26))
                    Store (ST74, Index (DerefOf (Index (EWRY, One)), 0x27))
                    Store (ST75, Index (DerefOf (Index (EWRY, One)), 0x28))
                    Store (ST76, Index (DerefOf (Index (EWRY, One)), 0x29))
                    Store (ST77, Index (DerefOf (Index (EWRY, One)), 0x2A))
                    Store (ST78, Index (DerefOf (Index (EWRY, One)), 0x2B))
                    Store (ST79, Index (DerefOf (Index (EWRY, One)), 0x2C))
                    Store (ST7A, Index (DerefOf (Index (EWRY, One)), 0x2D))
                    Store (ST7B, Index (DerefOf (Index (EWRY, One)), 0x2E))
                    Store (ST40, Index (DerefOf (Index (EWRY, One)), 0x2F))
                    Store (ST41, Index (DerefOf (Index (EWRY, One)), 0x30))
                    Store (ST42, Index (DerefOf (Index (EWRY, One)), 0x31))
                    Store (ST43, Index (DerefOf (Index (EWRY, One)), 0x32))
                    Store (ST44, Index (DerefOf (Index (EWRY, One)), 0x33))
                    Store (ST45, Index (DerefOf (Index (EWRY, One)), 0x34))
                    Store (ST46, Index (DerefOf (Index (EWRY, One)), 0x35))
                    Store (ST47, Index (DerefOf (Index (EWRY, One)), 0x36))
                    Store (ST48, Index (DerefOf (Index (EWRY, One)), 0x37))
                    Store (ST49, Index (DerefOf (Index (EWRY, One)), 0x38))
                    Store (ST80, Index (DerefOf (Index (EWRY, One)), 0x39))
                    Store (ST81, Index (DerefOf (Index (EWRY, One)), 0x3A))
                    Store (ST82, Index (DerefOf (Index (EWRY, One)), 0x3B))
                    Store (ST83, Index (DerefOf (Index (EWRY, One)), 0x3C))
                    Store (ST84, Index (DerefOf (Index (EWRY, One)), 0x3D))
                    Store (ST85, Index (DerefOf (Index (EWRY, One)), 0x3E))
                    Store (ST86, Index (DerefOf (Index (EWRY, One)), 0x3F))
                    Store (ST87, Index (DerefOf (Index (EWRY, One)), 0x40))
                    Store (ST88, Index (DerefOf (Index (EWRY, One)), 0x41))
                    Store (ST89, Index (DerefOf (Index (EWRY, One)), 0x42))
                    Store (ST8A, Index (DerefOf (Index (EWRY, One)), 0x43))
                    Store (ST8B, Index (DerefOf (Index (EWRY, One)), 0x44))
                    Store (CD30, Index (DerefOf (Index (EWRY, One)), 0x45))
                    Store (CD31, Index (DerefOf (Index (EWRY, One)), 0x46))
                    Store (CD32, Index (DerefOf (Index (EWRY, One)), 0x47))
                    Store (CD33, Index (DerefOf (Index (EWRY, One)), 0x48))
                    Store (CD34, Index (DerefOf (Index (EWRY, One)), 0x49))
                    Store (CD35, Index (DerefOf (Index (EWRY, One)), 0x4A))
                    Store (CD36, Index (DerefOf (Index (EWRY, One)), 0x4B))
                    Store (CD37, Index (DerefOf (Index (EWRY, One)), 0x4C))
                    Store (CD38, Index (DerefOf (Index (EWRY, One)), 0x4D))
                    Store (CD39, Index (DerefOf (Index (EWRY, One)), 0x4E))
                    Store (CD3A, Index (DerefOf (Index (EWRY, One)), 0x4F))
                    Store (CD3B, Index (DerefOf (Index (EWRY, One)), 0x50))
                    Store (CD3C, Index (DerefOf (Index (EWRY, One)), 0x51))
                    Store (CD3D, Index (DerefOf (Index (EWRY, One)), 0x52))
                    Store (CD3E, Index (DerefOf (Index (EWRY, One)), 0x53))
                    Store (CD3F, Index (DerefOf (Index (EWRY, One)), 0x54))
                    Store (CD40, Index (DerefOf (Index (EWRY, One)), 0x55))
                    Store (CD41, Index (DerefOf (Index (EWRY, One)), 0x56))
                    Store (CD42, Index (DerefOf (Index (EWRY, One)), 0x57))
                    Store (CD43, Index (DerefOf (Index (EWRY, One)), 0x58))
                    Store (CD44, Index (DerefOf (Index (EWRY, One)), 0x59))
                    Store (CD45, Index (DerefOf (Index (EWRY, One)), 0x5A))
                    Store (CD46, Index (DerefOf (Index (EWRY, One)), 0x5B))
                    Store (CD47, Index (DerefOf (Index (EWRY, One)), 0x5C))
                    Store (CD48, Index (DerefOf (Index (EWRY, One)), 0x5D))
                    Store (CD49, Index (DerefOf (Index (EWRY, One)), 0x5E))
                    Store (CD4A, Index (DerefOf (Index (EWRY, One)), 0x5F))
                    Store (CD4B, Index (DerefOf (Index (EWRY, One)), 0x60))
                    Store (CD4C, Index (DerefOf (Index (EWRY, One)), 0x61))
                    Store (CD4D, Index (DerefOf (Index (EWRY, One)), 0x62))
                    Store (CD4E, Index (DerefOf (Index (EWRY, One)), 0x63))
                    Store (CD4F, Index (DerefOf (Index (EWRY, One)), 0x64))
                    Store (CD50, Index (DerefOf (Index (EWRY, One)), 0x65))
                    Store (CD51, Index (DerefOf (Index (EWRY, One)), 0x66))
                    Store (CD52, Index (DerefOf (Index (EWRY, One)), 0x67))
                    Store (CD53, Index (DerefOf (Index (EWRY, One)), 0x68))
                    Store (CD54, Index (DerefOf (Index (EWRY, One)), 0x69))
                    Store (CD55, Index (DerefOf (Index (EWRY, One)), 0x6A))
                    Store (CD56, Index (DerefOf (Index (EWRY, One)), 0x6B))
                    Store (CD57, Index (DerefOf (Index (EWRY, One)), 0x6C))
                    Store (CD58, Index (DerefOf (Index (EWRY, One)), 0x6D))
                    Store (CD59, Index (DerefOf (Index (EWRY, One)), 0x6E))
                    Store (CD5A, Index (DerefOf (Index (EWRY, One)), 0x6F))
                    Store (CD5B, Index (DerefOf (Index (EWRY, One)), 0x70))
                    Store (CD5C, Index (DerefOf (Index (EWRY, One)), 0x71))
                    Store (CD5D, Index (DerefOf (Index (EWRY, One)), 0x72))
                    Store (CD5E, Index (DerefOf (Index (EWRY, One)), 0x73))
                    Store (CD5F, Index (DerefOf (Index (EWRY, One)), 0x74))
                    Store (CD60, Index (DerefOf (Index (EWRY, One)), 0x75))
                    Store (CD61, Index (DerefOf (Index (EWRY, One)), 0x76))
                    Store (CD62, Index (DerefOf (Index (EWRY, One)), 0x77))
                    Store (CD63, Index (DerefOf (Index (EWRY, One)), 0x78))
                    Store (CD64, Index (DerefOf (Index (EWRY, One)), 0x79))
                    Store (CD65, Index (DerefOf (Index (EWRY, One)), 0x7A))
                    Store (CD66, Index (DerefOf (Index (EWRY, One)), 0x7B))
                    Store (CD67, Index (DerefOf (Index (EWRY, One)), 0x7C))
                    Store (CD68, Index (DerefOf (Index (EWRY, One)), 0x7D))
                    Store (CD69, Index (DerefOf (Index (EWRY, One)), 0x7E))
                    Store (CD6A, Index (DerefOf (Index (EWRY, One)), 0x7F))
                    Store (CD6B, Index (DerefOf (Index (EWRY, One)), 0x80))
                    Store (CD6C, Index (DerefOf (Index (EWRY, One)), 0x81))
                    Store (CD6D, Index (DerefOf (Index (EWRY, One)), 0x82))
                    Store (CD6E, Index (DerefOf (Index (EWRY, One)), 0x83))
                    Store (CD6F, Index (DerefOf (Index (EWRY, One)), 0x84))
                    Store (CD70, Index (DerefOf (Index (EWRY, One)), 0x85))
                    Store (CD71, Index (DerefOf (Index (EWRY, One)), 0x86))
                    Return (EWRY)
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    Store (SDGN, Index (DerefOf (Index (WGDY, One)), One))
                    Store (SD11, Index (DerefOf (Index (WGDY, One)), 0x02))
                    Store (SD12, Index (DerefOf (Index (WGDY, One)), 0x03))
                    Store (SD13, Index (DerefOf (Index (WGDY, One)), 0x04))
                    Store (SD14, Index (DerefOf (Index (WGDY, One)), 0x05))
                    Store (SD15, Index (DerefOf (Index (WGDY, One)), 0x06))
                    Store (SD16, Index (DerefOf (Index (WGDY, One)), 0x07))
                    Store (SD17, Index (DerefOf (Index (WGDY, One)), 0x08))
                    Store (SD18, Index (DerefOf (Index (WGDY, One)), 0x09))
                    Store (SD19, Index (DerefOf (Index (WGDY, One)), 0x0A))
                    Store (SD21, Index (DerefOf (Index (WGDY, One)), 0x0B))
                    Store (SD22, Index (DerefOf (Index (WGDY, One)), 0x0C))
                    Store (SD23, Index (DerefOf (Index (WGDY, One)), 0x0D))
                    Store (SD24, Index (DerefOf (Index (WGDY, One)), 0x0E))
                    Store (SD25, Index (DerefOf (Index (WGDY, One)), 0x0F))
                    Store (SD26, Index (DerefOf (Index (WGDY, One)), 0x10))
                    Store (SD27, Index (DerefOf (Index (WGDY, One)), 0x11))
                    Store (SD28, Index (DerefOf (Index (WGDY, One)), 0x12))
                    Store (SD29, Index (DerefOf (Index (WGDY, One)), 0x13))
                    Store (SD31, Index (DerefOf (Index (WGDY, One)), 0x14))
                    Store (SD32, Index (DerefOf (Index (WGDY, One)), 0x15))
                    Store (SD33, Index (DerefOf (Index (WGDY, One)), 0x16))
                    Store (SD34, Index (DerefOf (Index (WGDY, One)), 0x17))
                    Store (SD35, Index (DerefOf (Index (WGDY, One)), 0x18))
                    Store (SD36, Index (DerefOf (Index (WGDY, One)), 0x19))
                    Store (SD37, Index (DerefOf (Index (WGDY, One)), 0x1A))
                    Store (SD38, Index (DerefOf (Index (WGDY, One)), 0x1B))
                    Store (SD39, Index (DerefOf (Index (WGDY, One)), 0x1C))
                    Store (SD41, Index (DerefOf (Index (WGDY, One)), 0x1D))
                    Store (SD42, Index (DerefOf (Index (WGDY, One)), 0x1E))
                    Store (SD43, Index (DerefOf (Index (WGDY, One)), 0x1F))
                    Store (SD44, Index (DerefOf (Index (WGDY, One)), 0x20))
                    Store (SD45, Index (DerefOf (Index (WGDY, One)), 0x21))
                    Store (SD46, Index (DerefOf (Index (WGDY, One)), 0x22))
                    Store (SD47, Index (DerefOf (Index (WGDY, One)), 0x23))
                    Store (SD48, Index (DerefOf (Index (WGDY, One)), 0x24))
                    Store (SD49, Index (DerefOf (Index (WGDY, One)), 0x25))
                    Store (SD51, Index (DerefOf (Index (WGDY, One)), 0x26))
                    Store (SD52, Index (DerefOf (Index (WGDY, One)), 0x27))
                    Store (SD53, Index (DerefOf (Index (WGDY, One)), 0x28))
                    Store (SD54, Index (DerefOf (Index (WGDY, One)), 0x29))
                    Store (SD55, Index (DerefOf (Index (WGDY, One)), 0x2A))
                    Store (SD56, Index (DerefOf (Index (WGDY, One)), 0x2B))
                    Store (SD57, Index (DerefOf (Index (WGDY, One)), 0x2C))
                    Store (SD58, Index (DerefOf (Index (WGDY, One)), 0x2D))
                    Store (SD59, Index (DerefOf (Index (WGDY, One)), 0x2E))
                    Store (SD61, Index (DerefOf (Index (WGDY, One)), 0x2F))
                    Store (SD62, Index (DerefOf (Index (WGDY, One)), 0x30))
                    Store (SD63, Index (DerefOf (Index (WGDY, One)), 0x31))
                    Store (SD64, Index (DerefOf (Index (WGDY, One)), 0x32))
                    Store (SD65, Index (DerefOf (Index (WGDY, One)), 0x33))
                    Store (SD66, Index (DerefOf (Index (WGDY, One)), 0x34))
                    Store (SD67, Index (DerefOf (Index (WGDY, One)), 0x35))
                    Store (SD68, Index (DerefOf (Index (WGDY, One)), 0x36))
                    Store (SD69, Index (DerefOf (Index (WGDY, One)), 0x37))
                    Store (SD71, Index (DerefOf (Index (WGDY, One)), 0x38))
                    Store (SD72, Index (DerefOf (Index (WGDY, One)), 0x39))
                    Store (SD73, Index (DerefOf (Index (WGDY, One)), 0x3A))
                    Store (SD74, Index (DerefOf (Index (WGDY, One)), 0x3B))
                    Store (SD75, Index (DerefOf (Index (WGDY, One)), 0x3C))
                    Store (SD76, Index (DerefOf (Index (WGDY, One)), 0x3D))
                    Store (SD77, Index (DerefOf (Index (WGDY, One)), 0x3E))
                    Store (SD78, Index (DerefOf (Index (WGDY, One)), 0x3F))
                    Store (SD79, Index (DerefOf (Index (WGDY, One)), 0x40))
                    Store (SD81, Index (DerefOf (Index (WGDY, One)), 0x41))
                    Store (SD82, Index (DerefOf (Index (WGDY, One)), 0x42))
                    Store (SD83, Index (DerefOf (Index (WGDY, One)), 0x43))
                    Store (SD84, Index (DerefOf (Index (WGDY, One)), 0x44))
                    Store (SD85, Index (DerefOf (Index (WGDY, One)), 0x45))
                    Store (SD86, Index (DerefOf (Index (WGDY, One)), 0x46))
                    Store (SD87, Index (DerefOf (Index (WGDY, One)), 0x47))
                    Store (SD88, Index (DerefOf (Index (WGDY, One)), 0x48))
                    Store (SD89, Index (DerefOf (Index (WGDY, One)), 0x49))
                    Return (WGDY)
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                    Return (ECKY)
                }

                Name (PPAY, Package (0x02)
                {
                    One, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    Store (WAGE, Index (DerefOf (Index (PPAY, One)), One))
                    Store (AGA1, Index (DerefOf (Index (PPAY, One)), 0x02))
                    Store (AGA2, Index (DerefOf (Index (PPAY, One)), 0x03))
                    Store (AGA3, Index (DerefOf (Index (PPAY, One)), 0x04))
                    Store (AGA4, Index (DerefOf (Index (PPAY, One)), 0x05))
                    Store (AGA5, Index (DerefOf (Index (PPAY, One)), 0x06))
                    Store (AGA6, Index (DerefOf (Index (PPAY, One)), 0x07))
                    Store (AGA7, Index (DerefOf (Index (PPAY, One)), 0x08))
                    Store (AGA8, Index (DerefOf (Index (PPAY, One)), 0x09))
                    Store (AGA9, Index (DerefOf (Index (PPAY, One)), 0x0A))
                    Store (AGAA, Index (DerefOf (Index (PPAY, One)), 0x0B))
                    Store (AGAB, Index (DerefOf (Index (PPAY, One)), 0x0C))
                    Store (AGB1, Index (DerefOf (Index (PPAY, One)), 0x0D))
                    Store (AGB2, Index (DerefOf (Index (PPAY, One)), 0x0E))
                    Store (AGB3, Index (DerefOf (Index (PPAY, One)), 0x0F))
                    Store (AGB4, Index (DerefOf (Index (PPAY, One)), 0x10))
                    Store (AGB5, Index (DerefOf (Index (PPAY, One)), 0x11))
                    Store (AGB6, Index (DerefOf (Index (PPAY, One)), 0x12))
                    Store (AGB7, Index (DerefOf (Index (PPAY, One)), 0x13))
                    Store (AGB8, Index (DerefOf (Index (PPAY, One)), 0x14))
                    Store (AGB9, Index (DerefOf (Index (PPAY, One)), 0x15))
                    Store (AGBA, Index (DerefOf (Index (PPAY, One)), 0x16))
                    Store (AGBB, Index (DerefOf (Index (PPAY, One)), 0x17))
                    Return (PPAY)
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    Store (WTSV, Index (DerefOf (Index (WTSY, One)), One))
                    Store (WTLE, Index (DerefOf (Index (WTSY, One)), 0x02))
                    Store (BL01, Index (DerefOf (Index (WTSY, One)), 0x03))
                    Store (BL02, Index (DerefOf (Index (WTSY, One)), 0x04))
                    Store (BL03, Index (DerefOf (Index (WTSY, One)), 0x05))
                    Store (BL04, Index (DerefOf (Index (WTSY, One)), 0x06))
                    Store (BL05, Index (DerefOf (Index (WTSY, One)), 0x07))
                    Store (BL06, Index (DerefOf (Index (WTSY, One)), 0x08))
                    Store (BL07, Index (DerefOf (Index (WTSY, One)), 0x09))
                    Store (BL08, Index (DerefOf (Index (WTSY, One)), 0x0A))
                    Store (BL09, Index (DerefOf (Index (WTSY, One)), 0x0B))
                    Store (BL10, Index (DerefOf (Index (WTSY, One)), 0x0C))
                    Store (BL11, Index (DerefOf (Index (WTSY, One)), 0x0D))
                    Store (BL12, Index (DerefOf (Index (WTSY, One)), 0x0E))
                    Store (BL13, Index (DerefOf (Index (WTSY, One)), 0x0F))
                    Store (BL14, Index (DerefOf (Index (WTSY, One)), 0x10))
                    Store (BL15, Index (DerefOf (Index (WTSY, One)), 0x11))
                    Store (BL16, Index (DerefOf (Index (WTSY, One)), 0x12))
                    Return (WTSY)
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    Store (WLBI, Index (DerefOf (Index (WAIY, One)), One))
                    Store (WHBI, Index (DerefOf (Index (WAIY, One)), 0x02))
                    Return (WAIY)
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                    Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                    Return (SADX)
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX)
                }
            }

            If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If (LNotEqual (GGOV (PRST), WPRP))
                    {
                        DL23 ()
                        SGOV (PRST, WPRP)
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    If (LEqual (Arg0, Zero))
                    {
                        Sleep (TBTG)
                    }
                    ElseIf (LEqual (Arg0, One))
                    {
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, And (Not (PFCP), One))
                        Sleep (TFDI)
                    }
                    Else
                    {
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    SPCO (WCLK, One)
                    SGOV (WFCP, PFCP)
                    Sleep (TN2B)
                    SGOV (WBRS, And (Not (PBRS), One))
                    Sleep (TB2R)
                    SGOV (PRST, And (Not (WPRP), One))
                    L23D ()
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Store (Zero, Local0)
                    While (LAnd (LNotEqual (SVID, WSID), LLess (Local0, WSTO)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    If (LEqual (WWEN, 0x02))
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (Zero)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One)
                        SGOV (PRST, And (Not (WPRP), One))
                        SGOV (WBRS, And (Not (PBRS), One))
                        Sleep (0xC8)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x14))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Sleep (0x0A)
                        Notify (PXSX, One)
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (One)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                }
            }

            If (LOr (WIST (), LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT))))
            {
                PowerResource (DRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        DRST
                    })
                }

                Method (IFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        ShiftLeft (CVPR, Zero, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        If (LEqual (CMDT, One))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Return (^^^CNVW.RSTT)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If (LEqual (CMDT, 0x02))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Store (CMDP, ^^^CNVW.RSTT)
                            }

                            Return (Zero)
                        }

                        If (LEqual (CMDT, 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                Return (^^^CNVW.PRRS)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (Zero)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LEqual (CRFI, One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x01                                     
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Store (ACSD, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Store (I5BS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Store (UHBS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        Store (AXMU, Local0)
                        ShiftLeft (Local0, One, Local0)
                        Or (Local0, AXSU, Local0)
                        Store (AXMR, Local1)
                        ShiftLeft (Local1, One, Local1)
                        Or (Local1, AXSR, Local1)
                        ShiftLeft (Local1, 0x02, Local1)
                        Or (Local0, Local1, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (WFRC)
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (WFUC)
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        Return (UNI4)
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        Return (WFIC)
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (LEqual (Arg0, ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d")))
                        {
                            If (LEqual (Arg2, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                           
                                })
                            }

                            If (LEqual (Arg2, One)){}
                            If (LEqual (Arg2, 0x02)){}
                            If (LEqual (Arg2, 0x03))
                            {
                                If (LEqual (WRTO, One)){}
                                ElseIf (LEqual (WRTO, 0x03)){}
                                Else
                                {
                                }

                                Return (WRTO)
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    Scope (_SB.PC00.RP05.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (^_ADR, _ADR), 0x30)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32, 
            Offset (0x2C), 
            SVID,   16
        }

        OperationRegion (FLDR, SystemMemory, Add (GMIO (^_ADR, _ADR), 0x44), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If (And (DCAP, 0x10000000))
                    {
                        Store (DCTR, Local0)
                        Or (Local0, 0x8000, Local0)
                        Store (Local0, DCTR)
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                Return (SPLX)
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                Return (WANX)
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                Return (WRDX)
            }

            Name (WRDY, Package (0x02)
            {
                0x02, 
                Package (0x2E)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                Store (STXE, Index (DerefOf (Index (WRDY, One)), One))
                Store (ST10, Index (DerefOf (Index (WRDY, One)), 0x02))
                Store (ST11, Index (DerefOf (Index (WRDY, One)), 0x03))
                Store (ST12, Index (DerefOf (Index (WRDY, One)), 0x04))
                Store (ST13, Index (DerefOf (Index (WRDY, One)), 0x05))
                Store (ST14, Index (DerefOf (Index (WRDY, One)), 0x06))
                Store (ST15, Index (DerefOf (Index (WRDY, One)), 0x07))
                Store (ST16, Index (DerefOf (Index (WRDY, One)), 0x08))
                Store (ST17, Index (DerefOf (Index (WRDY, One)), 0x09))
                Store (ST18, Index (DerefOf (Index (WRDY, One)), 0x0A))
                Store (ST19, Index (DerefOf (Index (WRDY, One)), 0x0B))
                Store (ST50, Index (DerefOf (Index (WRDY, One)), 0x0C))
                Store (ST51, Index (DerefOf (Index (WRDY, One)), 0x0D))
                Store (ST52, Index (DerefOf (Index (WRDY, One)), 0x0E))
                Store (ST53, Index (DerefOf (Index (WRDY, One)), 0x0F))
                Store (ST54, Index (DerefOf (Index (WRDY, One)), 0x10))
                Store (ST55, Index (DerefOf (Index (WRDY, One)), 0x11))
                Store (ST56, Index (DerefOf (Index (WRDY, One)), 0x12))
                Store (ST57, Index (DerefOf (Index (WRDY, One)), 0x13))
                Store (ST58, Index (DerefOf (Index (WRDY, One)), 0x14))
                Store (ST59, Index (DerefOf (Index (WRDY, One)), 0x15))
                Store (ST5A, Index (DerefOf (Index (WRDY, One)), 0x16))
                Store (ST5B, Index (DerefOf (Index (WRDY, One)), 0x17))
                Store (CD10, Index (DerefOf (Index (WRDY, One)), 0x18))
                Store (CD11, Index (DerefOf (Index (WRDY, One)), 0x19))
                Store (CD12, Index (DerefOf (Index (WRDY, One)), 0x1A))
                Store (CD13, Index (DerefOf (Index (WRDY, One)), 0x1B))
                Store (CD14, Index (DerefOf (Index (WRDY, One)), 0x1C))
                Store (CD15, Index (DerefOf (Index (WRDY, One)), 0x1D))
                Store (CD16, Index (DerefOf (Index (WRDY, One)), 0x1E))
                Store (CD17, Index (DerefOf (Index (WRDY, One)), 0x1F))
                Store (CD18, Index (DerefOf (Index (WRDY, One)), 0x20))
                Store (CD19, Index (DerefOf (Index (WRDY, One)), 0x21))
                Store (CD1A, Index (DerefOf (Index (WRDY, One)), 0x22))
                Store (CD20, Index (DerefOf (Index (WRDY, One)), 0x23))
                Store (CD21, Index (DerefOf (Index (WRDY, One)), 0x24))
                Store (CD22, Index (DerefOf (Index (WRDY, One)), 0x25))
                Store (CD23, Index (DerefOf (Index (WRDY, One)), 0x26))
                Store (CD24, Index (DerefOf (Index (WRDY, One)), 0x27))
                Store (CD25, Index (DerefOf (Index (WRDY, One)), 0x28))
                Store (CD26, Index (DerefOf (Index (WRDY, One)), 0x29))
                Store (CD27, Index (DerefOf (Index (WRDY, One)), 0x2A))
                Store (CD28, Index (DerefOf (Index (WRDY, One)), 0x2B))
                Store (CD29, Index (DerefOf (Index (WRDY, One)), 0x2C))
                Store (CD2A, Index (DerefOf (Index (WRDY, One)), 0x2D))
                Return (WRDY)
            }

            Name (EWRY, Package (0x02)
            {
                0x02, 
                Package (0x87)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                Store (STDE, Index (DerefOf (Index (EWRY, One)), One))
                Store (STRS, Index (DerefOf (Index (EWRY, One)), 0x02))
                Store (ST20, Index (DerefOf (Index (EWRY, One)), 0x03))
                Store (ST21, Index (DerefOf (Index (EWRY, One)), 0x04))
                Store (ST22, Index (DerefOf (Index (EWRY, One)), 0x05))
                Store (ST23, Index (DerefOf (Index (EWRY, One)), 0x06))
                Store (ST24, Index (DerefOf (Index (EWRY, One)), 0x07))
                Store (ST25, Index (DerefOf (Index (EWRY, One)), 0x08))
                Store (ST26, Index (DerefOf (Index (EWRY, One)), 0x09))
                Store (ST27, Index (DerefOf (Index (EWRY, One)), 0x0A))
                Store (ST28, Index (DerefOf (Index (EWRY, One)), 0x0B))
                Store (ST29, Index (DerefOf (Index (EWRY, One)), 0x0C))
                Store (ST60, Index (DerefOf (Index (EWRY, One)), 0x0D))
                Store (ST61, Index (DerefOf (Index (EWRY, One)), 0x0E))
                Store (ST62, Index (DerefOf (Index (EWRY, One)), 0x0F))
                Store (ST63, Index (DerefOf (Index (EWRY, One)), 0x10))
                Store (ST64, Index (DerefOf (Index (EWRY, One)), 0x11))
                Store (ST65, Index (DerefOf (Index (EWRY, One)), 0x12))
                Store (ST66, Index (DerefOf (Index (EWRY, One)), 0x13))
                Store (ST67, Index (DerefOf (Index (EWRY, One)), 0x14))
                Store (ST68, Index (DerefOf (Index (EWRY, One)), 0x15))
                Store (ST69, Index (DerefOf (Index (EWRY, One)), 0x16))
                Store (ST6A, Index (DerefOf (Index (EWRY, One)), 0x17))
                Store (ST6B, Index (DerefOf (Index (EWRY, One)), 0x18))
                Store (ST30, Index (DerefOf (Index (EWRY, One)), 0x19))
                Store (ST31, Index (DerefOf (Index (EWRY, One)), 0x1A))
                Store (ST32, Index (DerefOf (Index (EWRY, One)), 0x1B))
                Store (ST33, Index (DerefOf (Index (EWRY, One)), 0x1C))
                Store (ST34, Index (DerefOf (Index (EWRY, One)), 0x1D))
                Store (ST35, Index (DerefOf (Index (EWRY, One)), 0x1E))
                Store (ST36, Index (DerefOf (Index (EWRY, One)), 0x1F))
                Store (ST37, Index (DerefOf (Index (EWRY, One)), 0x20))
                Store (ST38, Index (DerefOf (Index (EWRY, One)), 0x21))
                Store (ST39, Index (DerefOf (Index (EWRY, One)), 0x22))
                Store (ST70, Index (DerefOf (Index (EWRY, One)), 0x23))
                Store (ST71, Index (DerefOf (Index (EWRY, One)), 0x24))
                Store (ST72, Index (DerefOf (Index (EWRY, One)), 0x25))
                Store (ST73, Index (DerefOf (Index (EWRY, One)), 0x26))
                Store (ST74, Index (DerefOf (Index (EWRY, One)), 0x27))
                Store (ST75, Index (DerefOf (Index (EWRY, One)), 0x28))
                Store (ST76, Index (DerefOf (Index (EWRY, One)), 0x29))
                Store (ST77, Index (DerefOf (Index (EWRY, One)), 0x2A))
                Store (ST78, Index (DerefOf (Index (EWRY, One)), 0x2B))
                Store (ST79, Index (DerefOf (Index (EWRY, One)), 0x2C))
                Store (ST7A, Index (DerefOf (Index (EWRY, One)), 0x2D))
                Store (ST7B, Index (DerefOf (Index (EWRY, One)), 0x2E))
                Store (ST40, Index (DerefOf (Index (EWRY, One)), 0x2F))
                Store (ST41, Index (DerefOf (Index (EWRY, One)), 0x30))
                Store (ST42, Index (DerefOf (Index (EWRY, One)), 0x31))
                Store (ST43, Index (DerefOf (Index (EWRY, One)), 0x32))
                Store (ST44, Index (DerefOf (Index (EWRY, One)), 0x33))
                Store (ST45, Index (DerefOf (Index (EWRY, One)), 0x34))
                Store (ST46, Index (DerefOf (Index (EWRY, One)), 0x35))
                Store (ST47, Index (DerefOf (Index (EWRY, One)), 0x36))
                Store (ST48, Index (DerefOf (Index (EWRY, One)), 0x37))
                Store (ST49, Index (DerefOf (Index (EWRY, One)), 0x38))
                Store (ST80, Index (DerefOf (Index (EWRY, One)), 0x39))
                Store (ST81, Index (DerefOf (Index (EWRY, One)), 0x3A))
                Store (ST82, Index (DerefOf (Index (EWRY, One)), 0x3B))
                Store (ST83, Index (DerefOf (Index (EWRY, One)), 0x3C))
                Store (ST84, Index (DerefOf (Index (EWRY, One)), 0x3D))
                Store (ST85, Index (DerefOf (Index (EWRY, One)), 0x3E))
                Store (ST86, Index (DerefOf (Index (EWRY, One)), 0x3F))
                Store (ST87, Index (DerefOf (Index (EWRY, One)), 0x40))
                Store (ST88, Index (DerefOf (Index (EWRY, One)), 0x41))
                Store (ST89, Index (DerefOf (Index (EWRY, One)), 0x42))
                Store (ST8A, Index (DerefOf (Index (EWRY, One)), 0x43))
                Store (ST8B, Index (DerefOf (Index (EWRY, One)), 0x44))
                Store (CD30, Index (DerefOf (Index (EWRY, One)), 0x45))
                Store (CD31, Index (DerefOf (Index (EWRY, One)), 0x46))
                Store (CD32, Index (DerefOf (Index (EWRY, One)), 0x47))
                Store (CD33, Index (DerefOf (Index (EWRY, One)), 0x48))
                Store (CD34, Index (DerefOf (Index (EWRY, One)), 0x49))
                Store (CD35, Index (DerefOf (Index (EWRY, One)), 0x4A))
                Store (CD36, Index (DerefOf (Index (EWRY, One)), 0x4B))
                Store (CD37, Index (DerefOf (Index (EWRY, One)), 0x4C))
                Store (CD38, Index (DerefOf (Index (EWRY, One)), 0x4D))
                Store (CD39, Index (DerefOf (Index (EWRY, One)), 0x4E))
                Store (CD3A, Index (DerefOf (Index (EWRY, One)), 0x4F))
                Store (CD3B, Index (DerefOf (Index (EWRY, One)), 0x50))
                Store (CD3C, Index (DerefOf (Index (EWRY, One)), 0x51))
                Store (CD3D, Index (DerefOf (Index (EWRY, One)), 0x52))
                Store (CD3E, Index (DerefOf (Index (EWRY, One)), 0x53))
                Store (CD3F, Index (DerefOf (Index (EWRY, One)), 0x54))
                Store (CD40, Index (DerefOf (Index (EWRY, One)), 0x55))
                Store (CD41, Index (DerefOf (Index (EWRY, One)), 0x56))
                Store (CD42, Index (DerefOf (Index (EWRY, One)), 0x57))
                Store (CD43, Index (DerefOf (Index (EWRY, One)), 0x58))
                Store (CD44, Index (DerefOf (Index (EWRY, One)), 0x59))
                Store (CD45, Index (DerefOf (Index (EWRY, One)), 0x5A))
                Store (CD46, Index (DerefOf (Index (EWRY, One)), 0x5B))
                Store (CD47, Index (DerefOf (Index (EWRY, One)), 0x5C))
                Store (CD48, Index (DerefOf (Index (EWRY, One)), 0x5D))
                Store (CD49, Index (DerefOf (Index (EWRY, One)), 0x5E))
                Store (CD4A, Index (DerefOf (Index (EWRY, One)), 0x5F))
                Store (CD4B, Index (DerefOf (Index (EWRY, One)), 0x60))
                Store (CD4C, Index (DerefOf (Index (EWRY, One)), 0x61))
                Store (CD4D, Index (DerefOf (Index (EWRY, One)), 0x62))
                Store (CD4E, Index (DerefOf (Index (EWRY, One)), 0x63))
                Store (CD4F, Index (DerefOf (Index (EWRY, One)), 0x64))
                Store (CD50, Index (DerefOf (Index (EWRY, One)), 0x65))
                Store (CD51, Index (DerefOf (Index (EWRY, One)), 0x66))
                Store (CD52, Index (DerefOf (Index (EWRY, One)), 0x67))
                Store (CD53, Index (DerefOf (Index (EWRY, One)), 0x68))
                Store (CD54, Index (DerefOf (Index (EWRY, One)), 0x69))
                Store (CD55, Index (DerefOf (Index (EWRY, One)), 0x6A))
                Store (CD56, Index (DerefOf (Index (EWRY, One)), 0x6B))
                Store (CD57, Index (DerefOf (Index (EWRY, One)), 0x6C))
                Store (CD58, Index (DerefOf (Index (EWRY, One)), 0x6D))
                Store (CD59, Index (DerefOf (Index (EWRY, One)), 0x6E))
                Store (CD5A, Index (DerefOf (Index (EWRY, One)), 0x6F))
                Store (CD5B, Index (DerefOf (Index (EWRY, One)), 0x70))
                Store (CD5C, Index (DerefOf (Index (EWRY, One)), 0x71))
                Store (CD5D, Index (DerefOf (Index (EWRY, One)), 0x72))
                Store (CD5E, Index (DerefOf (Index (EWRY, One)), 0x73))
                Store (CD5F, Index (DerefOf (Index (EWRY, One)), 0x74))
                Store (CD60, Index (DerefOf (Index (EWRY, One)), 0x75))
                Store (CD61, Index (DerefOf (Index (EWRY, One)), 0x76))
                Store (CD62, Index (DerefOf (Index (EWRY, One)), 0x77))
                Store (CD63, Index (DerefOf (Index (EWRY, One)), 0x78))
                Store (CD64, Index (DerefOf (Index (EWRY, One)), 0x79))
                Store (CD65, Index (DerefOf (Index (EWRY, One)), 0x7A))
                Store (CD66, Index (DerefOf (Index (EWRY, One)), 0x7B))
                Store (CD67, Index (DerefOf (Index (EWRY, One)), 0x7C))
                Store (CD68, Index (DerefOf (Index (EWRY, One)), 0x7D))
                Store (CD69, Index (DerefOf (Index (EWRY, One)), 0x7E))
                Store (CD6A, Index (DerefOf (Index (EWRY, One)), 0x7F))
                Store (CD6B, Index (DerefOf (Index (EWRY, One)), 0x80))
                Store (CD6C, Index (DerefOf (Index (EWRY, One)), 0x81))
                Store (CD6D, Index (DerefOf (Index (EWRY, One)), 0x82))
                Store (CD6E, Index (DerefOf (Index (EWRY, One)), 0x83))
                Store (CD6F, Index (DerefOf (Index (EWRY, One)), 0x84))
                Store (CD70, Index (DerefOf (Index (EWRY, One)), 0x85))
                Store (CD71, Index (DerefOf (Index (EWRY, One)), 0x86))
                Return (EWRY)
            }

            Name (WGDY, Package (0x02)
            {
                0x03, 
                Package (0x4A)
                {
                    0x07, 
                    0x03, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                Store (SDGN, Index (DerefOf (Index (WGDY, One)), One))
                Store (SD11, Index (DerefOf (Index (WGDY, One)), 0x02))
                Store (SD12, Index (DerefOf (Index (WGDY, One)), 0x03))
                Store (SD13, Index (DerefOf (Index (WGDY, One)), 0x04))
                Store (SD14, Index (DerefOf (Index (WGDY, One)), 0x05))
                Store (SD15, Index (DerefOf (Index (WGDY, One)), 0x06))
                Store (SD16, Index (DerefOf (Index (WGDY, One)), 0x07))
                Store (SD17, Index (DerefOf (Index (WGDY, One)), 0x08))
                Store (SD18, Index (DerefOf (Index (WGDY, One)), 0x09))
                Store (SD19, Index (DerefOf (Index (WGDY, One)), 0x0A))
                Store (SD21, Index (DerefOf (Index (WGDY, One)), 0x0B))
                Store (SD22, Index (DerefOf (Index (WGDY, One)), 0x0C))
                Store (SD23, Index (DerefOf (Index (WGDY, One)), 0x0D))
                Store (SD24, Index (DerefOf (Index (WGDY, One)), 0x0E))
                Store (SD25, Index (DerefOf (Index (WGDY, One)), 0x0F))
                Store (SD26, Index (DerefOf (Index (WGDY, One)), 0x10))
                Store (SD27, Index (DerefOf (Index (WGDY, One)), 0x11))
                Store (SD28, Index (DerefOf (Index (WGDY, One)), 0x12))
                Store (SD29, Index (DerefOf (Index (WGDY, One)), 0x13))
                Store (SD31, Index (DerefOf (Index (WGDY, One)), 0x14))
                Store (SD32, Index (DerefOf (Index (WGDY, One)), 0x15))
                Store (SD33, Index (DerefOf (Index (WGDY, One)), 0x16))
                Store (SD34, Index (DerefOf (Index (WGDY, One)), 0x17))
                Store (SD35, Index (DerefOf (Index (WGDY, One)), 0x18))
                Store (SD36, Index (DerefOf (Index (WGDY, One)), 0x19))
                Store (SD37, Index (DerefOf (Index (WGDY, One)), 0x1A))
                Store (SD38, Index (DerefOf (Index (WGDY, One)), 0x1B))
                Store (SD39, Index (DerefOf (Index (WGDY, One)), 0x1C))
                Store (SD41, Index (DerefOf (Index (WGDY, One)), 0x1D))
                Store (SD42, Index (DerefOf (Index (WGDY, One)), 0x1E))
                Store (SD43, Index (DerefOf (Index (WGDY, One)), 0x1F))
                Store (SD44, Index (DerefOf (Index (WGDY, One)), 0x20))
                Store (SD45, Index (DerefOf (Index (WGDY, One)), 0x21))
                Store (SD46, Index (DerefOf (Index (WGDY, One)), 0x22))
                Store (SD47, Index (DerefOf (Index (WGDY, One)), 0x23))
                Store (SD48, Index (DerefOf (Index (WGDY, One)), 0x24))
                Store (SD49, Index (DerefOf (Index (WGDY, One)), 0x25))
                Store (SD51, Index (DerefOf (Index (WGDY, One)), 0x26))
                Store (SD52, Index (DerefOf (Index (WGDY, One)), 0x27))
                Store (SD53, Index (DerefOf (Index (WGDY, One)), 0x28))
                Store (SD54, Index (DerefOf (Index (WGDY, One)), 0x29))
                Store (SD55, Index (DerefOf (Index (WGDY, One)), 0x2A))
                Store (SD56, Index (DerefOf (Index (WGDY, One)), 0x2B))
                Store (SD57, Index (DerefOf (Index (WGDY, One)), 0x2C))
                Store (SD58, Index (DerefOf (Index (WGDY, One)), 0x2D))
                Store (SD59, Index (DerefOf (Index (WGDY, One)), 0x2E))
                Store (SD61, Index (DerefOf (Index (WGDY, One)), 0x2F))
                Store (SD62, Index (DerefOf (Index (WGDY, One)), 0x30))
                Store (SD63, Index (DerefOf (Index (WGDY, One)), 0x31))
                Store (SD64, Index (DerefOf (Index (WGDY, One)), 0x32))
                Store (SD65, Index (DerefOf (Index (WGDY, One)), 0x33))
                Store (SD66, Index (DerefOf (Index (WGDY, One)), 0x34))
                Store (SD67, Index (DerefOf (Index (WGDY, One)), 0x35))
                Store (SD68, Index (DerefOf (Index (WGDY, One)), 0x36))
                Store (SD69, Index (DerefOf (Index (WGDY, One)), 0x37))
                Store (SD71, Index (DerefOf (Index (WGDY, One)), 0x38))
                Store (SD72, Index (DerefOf (Index (WGDY, One)), 0x39))
                Store (SD73, Index (DerefOf (Index (WGDY, One)), 0x3A))
                Store (SD74, Index (DerefOf (Index (WGDY, One)), 0x3B))
                Store (SD75, Index (DerefOf (Index (WGDY, One)), 0x3C))
                Store (SD76, Index (DerefOf (Index (WGDY, One)), 0x3D))
                Store (SD77, Index (DerefOf (Index (WGDY, One)), 0x3E))
                Store (SD78, Index (DerefOf (Index (WGDY, One)), 0x3F))
                Store (SD79, Index (DerefOf (Index (WGDY, One)), 0x40))
                Store (SD81, Index (DerefOf (Index (WGDY, One)), 0x41))
                Store (SD82, Index (DerefOf (Index (WGDY, One)), 0x42))
                Store (SD83, Index (DerefOf (Index (WGDY, One)), 0x43))
                Store (SD84, Index (DerefOf (Index (WGDY, One)), 0x44))
                Store (SD85, Index (DerefOf (Index (WGDY, One)), 0x45))
                Store (SD86, Index (DerefOf (Index (WGDY, One)), 0x46))
                Store (SD87, Index (DerefOf (Index (WGDY, One)), 0x47))
                Store (SD88, Index (DerefOf (Index (WGDY, One)), 0x48))
                Store (SD89, Index (DerefOf (Index (WGDY, One)), 0x49))
                Return (WGDY)
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                Return (ECKY)
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                Store (WAGE, Index (DerefOf (Index (PPAY, One)), One))
                Store (AGA1, Index (DerefOf (Index (PPAY, One)), 0x02))
                Store (AGA2, Index (DerefOf (Index (PPAY, One)), 0x03))
                Store (AGA3, Index (DerefOf (Index (PPAY, One)), 0x04))
                Store (AGA4, Index (DerefOf (Index (PPAY, One)), 0x05))
                Store (AGA5, Index (DerefOf (Index (PPAY, One)), 0x06))
                Store (AGA6, Index (DerefOf (Index (PPAY, One)), 0x07))
                Store (AGA7, Index (DerefOf (Index (PPAY, One)), 0x08))
                Store (AGA8, Index (DerefOf (Index (PPAY, One)), 0x09))
                Store (AGA9, Index (DerefOf (Index (PPAY, One)), 0x0A))
                Store (AGAA, Index (DerefOf (Index (PPAY, One)), 0x0B))
                Store (AGAB, Index (DerefOf (Index (PPAY, One)), 0x0C))
                Store (AGB1, Index (DerefOf (Index (PPAY, One)), 0x0D))
                Store (AGB2, Index (DerefOf (Index (PPAY, One)), 0x0E))
                Store (AGB3, Index (DerefOf (Index (PPAY, One)), 0x0F))
                Store (AGB4, Index (DerefOf (Index (PPAY, One)), 0x10))
                Store (AGB5, Index (DerefOf (Index (PPAY, One)), 0x11))
                Store (AGB6, Index (DerefOf (Index (PPAY, One)), 0x12))
                Store (AGB7, Index (DerefOf (Index (PPAY, One)), 0x13))
                Store (AGB8, Index (DerefOf (Index (PPAY, One)), 0x14))
                Store (AGB9, Index (DerefOf (Index (PPAY, One)), 0x15))
                Store (AGBA, Index (DerefOf (Index (PPAY, One)), 0x16))
                Store (AGBB, Index (DerefOf (Index (PPAY, One)), 0x17))
                Return (PPAY)
            }

            Name (WTSY, Package (0x02)
            {
                One, 
                Package (0x13)
                {
                    0x07, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                }
            })
            Method (WTAS, 0, Serialized)
            {
                Store (WTSV, Index (DerefOf (Index (WTSY, One)), One))
                Store (WTLE, Index (DerefOf (Index (WTSY, One)), 0x02))
                Store (BL01, Index (DerefOf (Index (WTSY, One)), 0x03))
                Store (BL02, Index (DerefOf (Index (WTSY, One)), 0x04))
                Store (BL03, Index (DerefOf (Index (WTSY, One)), 0x05))
                Store (BL04, Index (DerefOf (Index (WTSY, One)), 0x06))
                Store (BL05, Index (DerefOf (Index (WTSY, One)), 0x07))
                Store (BL06, Index (DerefOf (Index (WTSY, One)), 0x08))
                Store (BL07, Index (DerefOf (Index (WTSY, One)), 0x09))
                Store (BL08, Index (DerefOf (Index (WTSY, One)), 0x0A))
                Store (BL09, Index (DerefOf (Index (WTSY, One)), 0x0B))
                Store (BL10, Index (DerefOf (Index (WTSY, One)), 0x0C))
                Store (BL11, Index (DerefOf (Index (WTSY, One)), 0x0D))
                Store (BL12, Index (DerefOf (Index (WTSY, One)), 0x0E))
                Store (BL13, Index (DerefOf (Index (WTSY, One)), 0x0F))
                Store (BL14, Index (DerefOf (Index (WTSY, One)), 0x10))
                Store (BL15, Index (DerefOf (Index (WTSY, One)), 0x11))
                Store (BL16, Index (DerefOf (Index (WTSY, One)), 0x12))
                Return (WTSY)
            }

            Name (WAIY, Package (0x02)
            {
                Zero, 
                Package (0x04)
                {
                    0x07, 
                    Zero, 
                    Zero, 
                    Zero
                }
            })
            Method (WAIS, 0, Serialized)
            {
                Store (WLBI, Index (DerefOf (Index (WAIY, One)), One))
                Store (WHBI, Index (DerefOf (Index (WAIY, One)), 0x02))
                Return (WAIY)
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                Return (SADX)
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX)
            }
        }

        If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
        {
            Method (FHRF, 1, NotSerialized)
            {
                If (LNotEqual (GGOV (PRST), WPRP))
                {
                    DL23 ()
                    SGOV (PRST, WPRP)
                }
                Else
                {
                    ADBG ("Assume WWAN DL23() is already done")
                }

                Sleep (TR2B)
                SGOV (WBRS, PBRS)
                If (LEqual (Arg0, Zero))
                {
                    Sleep (TBTG)
                }
                ElseIf (LEqual (Arg0, One))
                {
                    SPCO (WCLK, Zero)
                    Sleep (TB2F)
                    SGOV (WFCP, And (Not (PFCP), One))
                    Sleep (TFDI)
                }
                Else
                {
                }
            }

            Method (SHRF, 0, NotSerialized)
            {
                PSD0 (SLOT)
                SPCO (WCLK, One)
                SGOV (WFCP, PFCP)
                Sleep (TN2B)
                SGOV (WBRS, And (Not (PBRS), One))
                Sleep (TB2R)
                SGOV (PRST, And (Not (WPRP), One))
                L23D ()
            }

            Method (DOSV, 0, NotSerialized)
            {
                Store (Zero, Local0)
                While (LAnd (LNotEqual (SVID, WSID), LLess (Local0, WSTO)))
                {
                    Increment (Local0)
                    Sleep (One)
                }
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                If (LEqual (WWEN, 0x02))
                {
                    Store (Acquire (WWMT, 0x03E8), Local0)
                    If (LEqual (Local0, Zero))
                    {
                        FHRF (Zero)
                        SHRF ()
                        Release (WWMT)
                        DOSV ()
                    }
                }
                Else
                {
                    SGOV (WBRS, PBRS)
                    Sleep (0xC8)
                    Notify (PXSX, One)
                    SGOV (PRST, And (Not (WPRP), One))
                    SGOV (WBRS, And (Not (PBRS), One))
                    Sleep (0xC8)
                    Store (Zero, Local0)
                    While (LEqual (LASX, Zero))
                    {
                        If (LGreater (Local0, 0x14))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Increment (Local0)
                    }

                    Sleep (0x0A)
                    Notify (PXSX, One)
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Store (Acquire (WWMT, 0x03E8), Local0)
                    If (LEqual (Local0, Zero))
                    {
                        FHRF (One)
                        SHRF ()
                        Release (WWMT)
                        DOSV ()
                    }
                }
            }
        }

        If (LOr (WIST (), LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT))))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If (And (DCAP, 0x10000000))
                    {
                        Store (DCTR, Local0)
                        Or (Local0, 0x8000, Local0)
                        Store (Local0, DCTR)
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }

            Method (IFUN, 4, Serialized)
            {
                If (LEqual (Arg2, Zero))
                {
                    If (LEqual (Arg1, Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x0F                                           
                        })
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }

                If (LEqual (Arg2, One))
                {
                    ShiftLeft (CVPR, Zero, Local0)
                    Return (Local0)
                }

                If (LEqual (Arg2, 0x02))
                {
                    CreateWordField (Arg3, Zero, CMDT)
                    CreateWordField (Arg3, 0x02, CMDP)
                    If (LEqual (CMDT, One))
                    {
                        If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                        {
                            Return (^^^CNVW.RSTT)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (CMDT, 0x02))
                    {
                        If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                        {
                            Store (CMDP, ^^^CNVW.RSTT)
                        }

                        Return (Zero)
                    }

                    If (LEqual (CMDT, 0x03))
                    {
                        If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                        {
                            Return (^^^CNVW.PRRS)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Return (Zero)
                }

                If (LEqual (Arg2, 0x03))
                {
                    If (LEqual (CRFI, One))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (IDSM, 1, Serialized)
            {
                If (LEqual (Arg0, ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd")))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (EFUN, 4, Serialized)
            {
                If (LEqual (Arg2, Zero))
                {
                    If (LEqual (Arg1, Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                     
                        })
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }

                If (LEqual (Arg2, One))
                {
                    Store (ACSD, Local0)
                    Return (Local0)
                }

                If (LEqual (Arg2, 0x02))
                {
                    Store (I5BS, Local0)
                    Return (Local0)
                }

                If (LEqual (Arg2, 0x03))
                {
                    Store (UHBS, Local0)
                    Return (Local0)
                }

                If (LEqual (Arg2, 0x06))
                {
                    Store (AXMU, Local0)
                    ShiftLeft (Local0, One, Local0)
                    Or (Local0, AXSU, Local0)
                    Store (AXMR, Local1)
                    ShiftLeft (Local1, One, Local1)
                    Or (Local1, AXSR, Local1)
                    ShiftLeft (Local1, 0x02, Local1)
                    Or (Local0, Local1, Local0)
                    Return (Local0)
                }

                If (LEqual (Arg2, 0x04))
                {
                    Return (WFRC)
                }

                If (LEqual (Arg2, 0x05))
                {
                    Return (WFUC)
                }

                If (LEqual (Arg2, 0x07))
                {
                    Return (UNI4)
                }

                If (LEqual (Arg2, 0x08))
                {
                    Return (WFIC)
                }

                Return (Zero)
            }

            Method (EDSM, 1, Serialized)
            {
                If (LEqual (Arg0, ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If (EDSM (Arg0))
                    {
                        Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                    }

                    If (IDSM (Arg0))
                    {
                        Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                    }
                }

                If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                {
                    If (LEqual (Arg0, ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d")))
                    {
                        If (LEqual (Arg2, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                           
                            })
                        }

                        If (LEqual (Arg2, One)){}
                        If (LEqual (Arg2, 0x02)){}
                        If (LEqual (Arg2, 0x03))
                        {
                            If (LEqual (WRTO, One)){}
                            ElseIf (LEqual (WRTO, 0x03)){}
                            Else
                            {
                            }

                            Return (WRTO)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP06.PXSX))
    {
        Scope (_SB.PC00.RP06.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, Add (GMIO (^_ADR, _ADR), 0x44), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                    Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                    Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                    Return (SPLX)
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                    Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                    Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                    Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                    Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                    Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                    Return (WANX)
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                    Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                    Return (WRDX)
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    Store (STXE, Index (DerefOf (Index (WRDY, One)), One))
                    Store (ST10, Index (DerefOf (Index (WRDY, One)), 0x02))
                    Store (ST11, Index (DerefOf (Index (WRDY, One)), 0x03))
                    Store (ST12, Index (DerefOf (Index (WRDY, One)), 0x04))
                    Store (ST13, Index (DerefOf (Index (WRDY, One)), 0x05))
                    Store (ST14, Index (DerefOf (Index (WRDY, One)), 0x06))
                    Store (ST15, Index (DerefOf (Index (WRDY, One)), 0x07))
                    Store (ST16, Index (DerefOf (Index (WRDY, One)), 0x08))
                    Store (ST17, Index (DerefOf (Index (WRDY, One)), 0x09))
                    Store (ST18, Index (DerefOf (Index (WRDY, One)), 0x0A))
                    Store (ST19, Index (DerefOf (Index (WRDY, One)), 0x0B))
                    Store (ST50, Index (DerefOf (Index (WRDY, One)), 0x0C))
                    Store (ST51, Index (DerefOf (Index (WRDY, One)), 0x0D))
                    Store (ST52, Index (DerefOf (Index (WRDY, One)), 0x0E))
                    Store (ST53, Index (DerefOf (Index (WRDY, One)), 0x0F))
                    Store (ST54, Index (DerefOf (Index (WRDY, One)), 0x10))
                    Store (ST55, Index (DerefOf (Index (WRDY, One)), 0x11))
                    Store (ST56, Index (DerefOf (Index (WRDY, One)), 0x12))
                    Store (ST57, Index (DerefOf (Index (WRDY, One)), 0x13))
                    Store (ST58, Index (DerefOf (Index (WRDY, One)), 0x14))
                    Store (ST59, Index (DerefOf (Index (WRDY, One)), 0x15))
                    Store (ST5A, Index (DerefOf (Index (WRDY, One)), 0x16))
                    Store (ST5B, Index (DerefOf (Index (WRDY, One)), 0x17))
                    Store (CD10, Index (DerefOf (Index (WRDY, One)), 0x18))
                    Store (CD11, Index (DerefOf (Index (WRDY, One)), 0x19))
                    Store (CD12, Index (DerefOf (Index (WRDY, One)), 0x1A))
                    Store (CD13, Index (DerefOf (Index (WRDY, One)), 0x1B))
                    Store (CD14, Index (DerefOf (Index (WRDY, One)), 0x1C))
                    Store (CD15, Index (DerefOf (Index (WRDY, One)), 0x1D))
                    Store (CD16, Index (DerefOf (Index (WRDY, One)), 0x1E))
                    Store (CD17, Index (DerefOf (Index (WRDY, One)), 0x1F))
                    Store (CD18, Index (DerefOf (Index (WRDY, One)), 0x20))
                    Store (CD19, Index (DerefOf (Index (WRDY, One)), 0x21))
                    Store (CD1A, Index (DerefOf (Index (WRDY, One)), 0x22))
                    Store (CD20, Index (DerefOf (Index (WRDY, One)), 0x23))
                    Store (CD21, Index (DerefOf (Index (WRDY, One)), 0x24))
                    Store (CD22, Index (DerefOf (Index (WRDY, One)), 0x25))
                    Store (CD23, Index (DerefOf (Index (WRDY, One)), 0x26))
                    Store (CD24, Index (DerefOf (Index (WRDY, One)), 0x27))
                    Store (CD25, Index (DerefOf (Index (WRDY, One)), 0x28))
                    Store (CD26, Index (DerefOf (Index (WRDY, One)), 0x29))
                    Store (CD27, Index (DerefOf (Index (WRDY, One)), 0x2A))
                    Store (CD28, Index (DerefOf (Index (WRDY, One)), 0x2B))
                    Store (CD29, Index (DerefOf (Index (WRDY, One)), 0x2C))
                    Store (CD2A, Index (DerefOf (Index (WRDY, One)), 0x2D))
                    Return (WRDY)
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    Store (STDE, Index (DerefOf (Index (EWRY, One)), One))
                    Store (STRS, Index (DerefOf (Index (EWRY, One)), 0x02))
                    Store (ST20, Index (DerefOf (Index (EWRY, One)), 0x03))
                    Store (ST21, Index (DerefOf (Index (EWRY, One)), 0x04))
                    Store (ST22, Index (DerefOf (Index (EWRY, One)), 0x05))
                    Store (ST23, Index (DerefOf (Index (EWRY, One)), 0x06))
                    Store (ST24, Index (DerefOf (Index (EWRY, One)), 0x07))
                    Store (ST25, Index (DerefOf (Index (EWRY, One)), 0x08))
                    Store (ST26, Index (DerefOf (Index (EWRY, One)), 0x09))
                    Store (ST27, Index (DerefOf (Index (EWRY, One)), 0x0A))
                    Store (ST28, Index (DerefOf (Index (EWRY, One)), 0x0B))
                    Store (ST29, Index (DerefOf (Index (EWRY, One)), 0x0C))
                    Store (ST60, Index (DerefOf (Index (EWRY, One)), 0x0D))
                    Store (ST61, Index (DerefOf (Index (EWRY, One)), 0x0E))
                    Store (ST62, Index (DerefOf (Index (EWRY, One)), 0x0F))
                    Store (ST63, Index (DerefOf (Index (EWRY, One)), 0x10))
                    Store (ST64, Index (DerefOf (Index (EWRY, One)), 0x11))
                    Store (ST65, Index (DerefOf (Index (EWRY, One)), 0x12))
                    Store (ST66, Index (DerefOf (Index (EWRY, One)), 0x13))
                    Store (ST67, Index (DerefOf (Index (EWRY, One)), 0x14))
                    Store (ST68, Index (DerefOf (Index (EWRY, One)), 0x15))
                    Store (ST69, Index (DerefOf (Index (EWRY, One)), 0x16))
                    Store (ST6A, Index (DerefOf (Index (EWRY, One)), 0x17))
                    Store (ST6B, Index (DerefOf (Index (EWRY, One)), 0x18))
                    Store (ST30, Index (DerefOf (Index (EWRY, One)), 0x19))
                    Store (ST31, Index (DerefOf (Index (EWRY, One)), 0x1A))
                    Store (ST32, Index (DerefOf (Index (EWRY, One)), 0x1B))
                    Store (ST33, Index (DerefOf (Index (EWRY, One)), 0x1C))
                    Store (ST34, Index (DerefOf (Index (EWRY, One)), 0x1D))
                    Store (ST35, Index (DerefOf (Index (EWRY, One)), 0x1E))
                    Store (ST36, Index (DerefOf (Index (EWRY, One)), 0x1F))
                    Store (ST37, Index (DerefOf (Index (EWRY, One)), 0x20))
                    Store (ST38, Index (DerefOf (Index (EWRY, One)), 0x21))
                    Store (ST39, Index (DerefOf (Index (EWRY, One)), 0x22))
                    Store (ST70, Index (DerefOf (Index (EWRY, One)), 0x23))
                    Store (ST71, Index (DerefOf (Index (EWRY, One)), 0x24))
                    Store (ST72, Index (DerefOf (Index (EWRY, One)), 0x25))
                    Store (ST73, Index (DerefOf (Index (EWRY, One)), 0x26))
                    Store (ST74, Index (DerefOf (Index (EWRY, One)), 0x27))
                    Store (ST75, Index (DerefOf (Index (EWRY, One)), 0x28))
                    Store (ST76, Index (DerefOf (Index (EWRY, One)), 0x29))
                    Store (ST77, Index (DerefOf (Index (EWRY, One)), 0x2A))
                    Store (ST78, Index (DerefOf (Index (EWRY, One)), 0x2B))
                    Store (ST79, Index (DerefOf (Index (EWRY, One)), 0x2C))
                    Store (ST7A, Index (DerefOf (Index (EWRY, One)), 0x2D))
                    Store (ST7B, Index (DerefOf (Index (EWRY, One)), 0x2E))
                    Store (ST40, Index (DerefOf (Index (EWRY, One)), 0x2F))
                    Store (ST41, Index (DerefOf (Index (EWRY, One)), 0x30))
                    Store (ST42, Index (DerefOf (Index (EWRY, One)), 0x31))
                    Store (ST43, Index (DerefOf (Index (EWRY, One)), 0x32))
                    Store (ST44, Index (DerefOf (Index (EWRY, One)), 0x33))
                    Store (ST45, Index (DerefOf (Index (EWRY, One)), 0x34))
                    Store (ST46, Index (DerefOf (Index (EWRY, One)), 0x35))
                    Store (ST47, Index (DerefOf (Index (EWRY, One)), 0x36))
                    Store (ST48, Index (DerefOf (Index (EWRY, One)), 0x37))
                    Store (ST49, Index (DerefOf (Index (EWRY, One)), 0x38))
                    Store (ST80, Index (DerefOf (Index (EWRY, One)), 0x39))
                    Store (ST81, Index (DerefOf (Index (EWRY, One)), 0x3A))
                    Store (ST82, Index (DerefOf (Index (EWRY, One)), 0x3B))
                    Store (ST83, Index (DerefOf (Index (EWRY, One)), 0x3C))
                    Store (ST84, Index (DerefOf (Index (EWRY, One)), 0x3D))
                    Store (ST85, Index (DerefOf (Index (EWRY, One)), 0x3E))
                    Store (ST86, Index (DerefOf (Index (EWRY, One)), 0x3F))
                    Store (ST87, Index (DerefOf (Index (EWRY, One)), 0x40))
                    Store (ST88, Index (DerefOf (Index (EWRY, One)), 0x41))
                    Store (ST89, Index (DerefOf (Index (EWRY, One)), 0x42))
                    Store (ST8A, Index (DerefOf (Index (EWRY, One)), 0x43))
                    Store (ST8B, Index (DerefOf (Index (EWRY, One)), 0x44))
                    Store (CD30, Index (DerefOf (Index (EWRY, One)), 0x45))
                    Store (CD31, Index (DerefOf (Index (EWRY, One)), 0x46))
                    Store (CD32, Index (DerefOf (Index (EWRY, One)), 0x47))
                    Store (CD33, Index (DerefOf (Index (EWRY, One)), 0x48))
                    Store (CD34, Index (DerefOf (Index (EWRY, One)), 0x49))
                    Store (CD35, Index (DerefOf (Index (EWRY, One)), 0x4A))
                    Store (CD36, Index (DerefOf (Index (EWRY, One)), 0x4B))
                    Store (CD37, Index (DerefOf (Index (EWRY, One)), 0x4C))
                    Store (CD38, Index (DerefOf (Index (EWRY, One)), 0x4D))
                    Store (CD39, Index (DerefOf (Index (EWRY, One)), 0x4E))
                    Store (CD3A, Index (DerefOf (Index (EWRY, One)), 0x4F))
                    Store (CD3B, Index (DerefOf (Index (EWRY, One)), 0x50))
                    Store (CD3C, Index (DerefOf (Index (EWRY, One)), 0x51))
                    Store (CD3D, Index (DerefOf (Index (EWRY, One)), 0x52))
                    Store (CD3E, Index (DerefOf (Index (EWRY, One)), 0x53))
                    Store (CD3F, Index (DerefOf (Index (EWRY, One)), 0x54))
                    Store (CD40, Index (DerefOf (Index (EWRY, One)), 0x55))
                    Store (CD41, Index (DerefOf (Index (EWRY, One)), 0x56))
                    Store (CD42, Index (DerefOf (Index (EWRY, One)), 0x57))
                    Store (CD43, Index (DerefOf (Index (EWRY, One)), 0x58))
                    Store (CD44, Index (DerefOf (Index (EWRY, One)), 0x59))
                    Store (CD45, Index (DerefOf (Index (EWRY, One)), 0x5A))
                    Store (CD46, Index (DerefOf (Index (EWRY, One)), 0x5B))
                    Store (CD47, Index (DerefOf (Index (EWRY, One)), 0x5C))
                    Store (CD48, Index (DerefOf (Index (EWRY, One)), 0x5D))
                    Store (CD49, Index (DerefOf (Index (EWRY, One)), 0x5E))
                    Store (CD4A, Index (DerefOf (Index (EWRY, One)), 0x5F))
                    Store (CD4B, Index (DerefOf (Index (EWRY, One)), 0x60))
                    Store (CD4C, Index (DerefOf (Index (EWRY, One)), 0x61))
                    Store (CD4D, Index (DerefOf (Index (EWRY, One)), 0x62))
                    Store (CD4E, Index (DerefOf (Index (EWRY, One)), 0x63))
                    Store (CD4F, Index (DerefOf (Index (EWRY, One)), 0x64))
                    Store (CD50, Index (DerefOf (Index (EWRY, One)), 0x65))
                    Store (CD51, Index (DerefOf (Index (EWRY, One)), 0x66))
                    Store (CD52, Index (DerefOf (Index (EWRY, One)), 0x67))
                    Store (CD53, Index (DerefOf (Index (EWRY, One)), 0x68))
                    Store (CD54, Index (DerefOf (Index (EWRY, One)), 0x69))
                    Store (CD55, Index (DerefOf (Index (EWRY, One)), 0x6A))
                    Store (CD56, Index (DerefOf (Index (EWRY, One)), 0x6B))
                    Store (CD57, Index (DerefOf (Index (EWRY, One)), 0x6C))
                    Store (CD58, Index (DerefOf (Index (EWRY, One)), 0x6D))
                    Store (CD59, Index (DerefOf (Index (EWRY, One)), 0x6E))
                    Store (CD5A, Index (DerefOf (Index (EWRY, One)), 0x6F))
                    Store (CD5B, Index (DerefOf (Index (EWRY, One)), 0x70))
                    Store (CD5C, Index (DerefOf (Index (EWRY, One)), 0x71))
                    Store (CD5D, Index (DerefOf (Index (EWRY, One)), 0x72))
                    Store (CD5E, Index (DerefOf (Index (EWRY, One)), 0x73))
                    Store (CD5F, Index (DerefOf (Index (EWRY, One)), 0x74))
                    Store (CD60, Index (DerefOf (Index (EWRY, One)), 0x75))
                    Store (CD61, Index (DerefOf (Index (EWRY, One)), 0x76))
                    Store (CD62, Index (DerefOf (Index (EWRY, One)), 0x77))
                    Store (CD63, Index (DerefOf (Index (EWRY, One)), 0x78))
                    Store (CD64, Index (DerefOf (Index (EWRY, One)), 0x79))
                    Store (CD65, Index (DerefOf (Index (EWRY, One)), 0x7A))
                    Store (CD66, Index (DerefOf (Index (EWRY, One)), 0x7B))
                    Store (CD67, Index (DerefOf (Index (EWRY, One)), 0x7C))
                    Store (CD68, Index (DerefOf (Index (EWRY, One)), 0x7D))
                    Store (CD69, Index (DerefOf (Index (EWRY, One)), 0x7E))
                    Store (CD6A, Index (DerefOf (Index (EWRY, One)), 0x7F))
                    Store (CD6B, Index (DerefOf (Index (EWRY, One)), 0x80))
                    Store (CD6C, Index (DerefOf (Index (EWRY, One)), 0x81))
                    Store (CD6D, Index (DerefOf (Index (EWRY, One)), 0x82))
                    Store (CD6E, Index (DerefOf (Index (EWRY, One)), 0x83))
                    Store (CD6F, Index (DerefOf (Index (EWRY, One)), 0x84))
                    Store (CD70, Index (DerefOf (Index (EWRY, One)), 0x85))
                    Store (CD71, Index (DerefOf (Index (EWRY, One)), 0x86))
                    Return (EWRY)
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    Store (SDGN, Index (DerefOf (Index (WGDY, One)), One))
                    Store (SD11, Index (DerefOf (Index (WGDY, One)), 0x02))
                    Store (SD12, Index (DerefOf (Index (WGDY, One)), 0x03))
                    Store (SD13, Index (DerefOf (Index (WGDY, One)), 0x04))
                    Store (SD14, Index (DerefOf (Index (WGDY, One)), 0x05))
                    Store (SD15, Index (DerefOf (Index (WGDY, One)), 0x06))
                    Store (SD16, Index (DerefOf (Index (WGDY, One)), 0x07))
                    Store (SD17, Index (DerefOf (Index (WGDY, One)), 0x08))
                    Store (SD18, Index (DerefOf (Index (WGDY, One)), 0x09))
                    Store (SD19, Index (DerefOf (Index (WGDY, One)), 0x0A))
                    Store (SD21, Index (DerefOf (Index (WGDY, One)), 0x0B))
                    Store (SD22, Index (DerefOf (Index (WGDY, One)), 0x0C))
                    Store (SD23, Index (DerefOf (Index (WGDY, One)), 0x0D))
                    Store (SD24, Index (DerefOf (Index (WGDY, One)), 0x0E))
                    Store (SD25, Index (DerefOf (Index (WGDY, One)), 0x0F))
                    Store (SD26, Index (DerefOf (Index (WGDY, One)), 0x10))
                    Store (SD27, Index (DerefOf (Index (WGDY, One)), 0x11))
                    Store (SD28, Index (DerefOf (Index (WGDY, One)), 0x12))
                    Store (SD29, Index (DerefOf (Index (WGDY, One)), 0x13))
                    Store (SD31, Index (DerefOf (Index (WGDY, One)), 0x14))
                    Store (SD32, Index (DerefOf (Index (WGDY, One)), 0x15))
                    Store (SD33, Index (DerefOf (Index (WGDY, One)), 0x16))
                    Store (SD34, Index (DerefOf (Index (WGDY, One)), 0x17))
                    Store (SD35, Index (DerefOf (Index (WGDY, One)), 0x18))
                    Store (SD36, Index (DerefOf (Index (WGDY, One)), 0x19))
                    Store (SD37, Index (DerefOf (Index (WGDY, One)), 0x1A))
                    Store (SD38, Index (DerefOf (Index (WGDY, One)), 0x1B))
                    Store (SD39, Index (DerefOf (Index (WGDY, One)), 0x1C))
                    Store (SD41, Index (DerefOf (Index (WGDY, One)), 0x1D))
                    Store (SD42, Index (DerefOf (Index (WGDY, One)), 0x1E))
                    Store (SD43, Index (DerefOf (Index (WGDY, One)), 0x1F))
                    Store (SD44, Index (DerefOf (Index (WGDY, One)), 0x20))
                    Store (SD45, Index (DerefOf (Index (WGDY, One)), 0x21))
                    Store (SD46, Index (DerefOf (Index (WGDY, One)), 0x22))
                    Store (SD47, Index (DerefOf (Index (WGDY, One)), 0x23))
                    Store (SD48, Index (DerefOf (Index (WGDY, One)), 0x24))
                    Store (SD49, Index (DerefOf (Index (WGDY, One)), 0x25))
                    Store (SD51, Index (DerefOf (Index (WGDY, One)), 0x26))
                    Store (SD52, Index (DerefOf (Index (WGDY, One)), 0x27))
                    Store (SD53, Index (DerefOf (Index (WGDY, One)), 0x28))
                    Store (SD54, Index (DerefOf (Index (WGDY, One)), 0x29))
                    Store (SD55, Index (DerefOf (Index (WGDY, One)), 0x2A))
                    Store (SD56, Index (DerefOf (Index (WGDY, One)), 0x2B))
                    Store (SD57, Index (DerefOf (Index (WGDY, One)), 0x2C))
                    Store (SD58, Index (DerefOf (Index (WGDY, One)), 0x2D))
                    Store (SD59, Index (DerefOf (Index (WGDY, One)), 0x2E))
                    Store (SD61, Index (DerefOf (Index (WGDY, One)), 0x2F))
                    Store (SD62, Index (DerefOf (Index (WGDY, One)), 0x30))
                    Store (SD63, Index (DerefOf (Index (WGDY, One)), 0x31))
                    Store (SD64, Index (DerefOf (Index (WGDY, One)), 0x32))
                    Store (SD65, Index (DerefOf (Index (WGDY, One)), 0x33))
                    Store (SD66, Index (DerefOf (Index (WGDY, One)), 0x34))
                    Store (SD67, Index (DerefOf (Index (WGDY, One)), 0x35))
                    Store (SD68, Index (DerefOf (Index (WGDY, One)), 0x36))
                    Store (SD69, Index (DerefOf (Index (WGDY, One)), 0x37))
                    Store (SD71, Index (DerefOf (Index (WGDY, One)), 0x38))
                    Store (SD72, Index (DerefOf (Index (WGDY, One)), 0x39))
                    Store (SD73, Index (DerefOf (Index (WGDY, One)), 0x3A))
                    Store (SD74, Index (DerefOf (Index (WGDY, One)), 0x3B))
                    Store (SD75, Index (DerefOf (Index (WGDY, One)), 0x3C))
                    Store (SD76, Index (DerefOf (Index (WGDY, One)), 0x3D))
                    Store (SD77, Index (DerefOf (Index (WGDY, One)), 0x3E))
                    Store (SD78, Index (DerefOf (Index (WGDY, One)), 0x3F))
                    Store (SD79, Index (DerefOf (Index (WGDY, One)), 0x40))
                    Store (SD81, Index (DerefOf (Index (WGDY, One)), 0x41))
                    Store (SD82, Index (DerefOf (Index (WGDY, One)), 0x42))
                    Store (SD83, Index (DerefOf (Index (WGDY, One)), 0x43))
                    Store (SD84, Index (DerefOf (Index (WGDY, One)), 0x44))
                    Store (SD85, Index (DerefOf (Index (WGDY, One)), 0x45))
                    Store (SD86, Index (DerefOf (Index (WGDY, One)), 0x46))
                    Store (SD87, Index (DerefOf (Index (WGDY, One)), 0x47))
                    Store (SD88, Index (DerefOf (Index (WGDY, One)), 0x48))
                    Store (SD89, Index (DerefOf (Index (WGDY, One)), 0x49))
                    Return (WGDY)
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                    Return (ECKY)
                }

                Name (PPAY, Package (0x02)
                {
                    One, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    Store (WAGE, Index (DerefOf (Index (PPAY, One)), One))
                    Store (AGA1, Index (DerefOf (Index (PPAY, One)), 0x02))
                    Store (AGA2, Index (DerefOf (Index (PPAY, One)), 0x03))
                    Store (AGA3, Index (DerefOf (Index (PPAY, One)), 0x04))
                    Store (AGA4, Index (DerefOf (Index (PPAY, One)), 0x05))
                    Store (AGA5, Index (DerefOf (Index (PPAY, One)), 0x06))
                    Store (AGA6, Index (DerefOf (Index (PPAY, One)), 0x07))
                    Store (AGA7, Index (DerefOf (Index (PPAY, One)), 0x08))
                    Store (AGA8, Index (DerefOf (Index (PPAY, One)), 0x09))
                    Store (AGA9, Index (DerefOf (Index (PPAY, One)), 0x0A))
                    Store (AGAA, Index (DerefOf (Index (PPAY, One)), 0x0B))
                    Store (AGAB, Index (DerefOf (Index (PPAY, One)), 0x0C))
                    Store (AGB1, Index (DerefOf (Index (PPAY, One)), 0x0D))
                    Store (AGB2, Index (DerefOf (Index (PPAY, One)), 0x0E))
                    Store (AGB3, Index (DerefOf (Index (PPAY, One)), 0x0F))
                    Store (AGB4, Index (DerefOf (Index (PPAY, One)), 0x10))
                    Store (AGB5, Index (DerefOf (Index (PPAY, One)), 0x11))
                    Store (AGB6, Index (DerefOf (Index (PPAY, One)), 0x12))
                    Store (AGB7, Index (DerefOf (Index (PPAY, One)), 0x13))
                    Store (AGB8, Index (DerefOf (Index (PPAY, One)), 0x14))
                    Store (AGB9, Index (DerefOf (Index (PPAY, One)), 0x15))
                    Store (AGBA, Index (DerefOf (Index (PPAY, One)), 0x16))
                    Store (AGBB, Index (DerefOf (Index (PPAY, One)), 0x17))
                    Return (PPAY)
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    Store (WTSV, Index (DerefOf (Index (WTSY, One)), One))
                    Store (WTLE, Index (DerefOf (Index (WTSY, One)), 0x02))
                    Store (BL01, Index (DerefOf (Index (WTSY, One)), 0x03))
                    Store (BL02, Index (DerefOf (Index (WTSY, One)), 0x04))
                    Store (BL03, Index (DerefOf (Index (WTSY, One)), 0x05))
                    Store (BL04, Index (DerefOf (Index (WTSY, One)), 0x06))
                    Store (BL05, Index (DerefOf (Index (WTSY, One)), 0x07))
                    Store (BL06, Index (DerefOf (Index (WTSY, One)), 0x08))
                    Store (BL07, Index (DerefOf (Index (WTSY, One)), 0x09))
                    Store (BL08, Index (DerefOf (Index (WTSY, One)), 0x0A))
                    Store (BL09, Index (DerefOf (Index (WTSY, One)), 0x0B))
                    Store (BL10, Index (DerefOf (Index (WTSY, One)), 0x0C))
                    Store (BL11, Index (DerefOf (Index (WTSY, One)), 0x0D))
                    Store (BL12, Index (DerefOf (Index (WTSY, One)), 0x0E))
                    Store (BL13, Index (DerefOf (Index (WTSY, One)), 0x0F))
                    Store (BL14, Index (DerefOf (Index (WTSY, One)), 0x10))
                    Store (BL15, Index (DerefOf (Index (WTSY, One)), 0x11))
                    Store (BL16, Index (DerefOf (Index (WTSY, One)), 0x12))
                    Return (WTSY)
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    Store (WLBI, Index (DerefOf (Index (WAIY, One)), One))
                    Store (WHBI, Index (DerefOf (Index (WAIY, One)), 0x02))
                    Return (WAIY)
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                    Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                    Return (SADX)
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX)
                }
            }

            If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If (LNotEqual (GGOV (PRST), WPRP))
                    {
                        DL23 ()
                        SGOV (PRST, WPRP)
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    If (LEqual (Arg0, Zero))
                    {
                        Sleep (TBTG)
                    }
                    ElseIf (LEqual (Arg0, One))
                    {
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, And (Not (PFCP), One))
                        Sleep (TFDI)
                    }
                    Else
                    {
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    SPCO (WCLK, One)
                    SGOV (WFCP, PFCP)
                    Sleep (TN2B)
                    SGOV (WBRS, And (Not (PBRS), One))
                    Sleep (TB2R)
                    SGOV (PRST, And (Not (WPRP), One))
                    L23D ()
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Store (Zero, Local0)
                    While (LAnd (LNotEqual (SVID, WSID), LLess (Local0, WSTO)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    If (LEqual (WWEN, 0x02))
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (Zero)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One)
                        SGOV (PRST, And (Not (WPRP), One))
                        SGOV (WBRS, And (Not (PBRS), One))
                        Sleep (0xC8)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x14))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Sleep (0x0A)
                        Notify (PXSX, One)
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (One)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                }
            }

            If (LOr (WIST (), LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT))))
            {
                PowerResource (DRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        DRST
                    })
                }

                Method (IFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        ShiftLeft (CVPR, Zero, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        If (LEqual (CMDT, One))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Return (^^^CNVW.RSTT)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If (LEqual (CMDT, 0x02))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Store (CMDP, ^^^CNVW.RSTT)
                            }

                            Return (Zero)
                        }

                        If (LEqual (CMDT, 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                Return (^^^CNVW.PRRS)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (Zero)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LEqual (CRFI, One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x01                                     
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Store (ACSD, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Store (I5BS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Store (UHBS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        Store (AXMU, Local0)
                        ShiftLeft (Local0, One, Local0)
                        Or (Local0, AXSU, Local0)
                        Store (AXMR, Local1)
                        ShiftLeft (Local1, One, Local1)
                        Or (Local1, AXSR, Local1)
                        ShiftLeft (Local1, 0x02, Local1)
                        Or (Local0, Local1, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (WFRC)
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (WFUC)
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        Return (UNI4)
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        Return (WFIC)
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (LEqual (Arg0, ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d")))
                        {
                            If (LEqual (Arg2, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                           
                                })
                            }

                            If (LEqual (Arg2, One)){}
                            If (LEqual (Arg2, 0x02)){}
                            If (LEqual (Arg2, 0x03))
                            {
                                If (LEqual (WRTO, One)){}
                                ElseIf (LEqual (WRTO, 0x03)){}
                                Else
                                {
                                }

                                Return (WRTO)
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP07.PXSX))
    {
        Scope (_SB.PC00.RP07.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, Add (GMIO (^_ADR, _ADR), 0x44), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                    Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                    Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                    Return (SPLX)
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                    Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                    Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                    Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                    Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                    Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                    Return (WANX)
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                    Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                    Return (WRDX)
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    Store (STXE, Index (DerefOf (Index (WRDY, One)), One))
                    Store (ST10, Index (DerefOf (Index (WRDY, One)), 0x02))
                    Store (ST11, Index (DerefOf (Index (WRDY, One)), 0x03))
                    Store (ST12, Index (DerefOf (Index (WRDY, One)), 0x04))
                    Store (ST13, Index (DerefOf (Index (WRDY, One)), 0x05))
                    Store (ST14, Index (DerefOf (Index (WRDY, One)), 0x06))
                    Store (ST15, Index (DerefOf (Index (WRDY, One)), 0x07))
                    Store (ST16, Index (DerefOf (Index (WRDY, One)), 0x08))
                    Store (ST17, Index (DerefOf (Index (WRDY, One)), 0x09))
                    Store (ST18, Index (DerefOf (Index (WRDY, One)), 0x0A))
                    Store (ST19, Index (DerefOf (Index (WRDY, One)), 0x0B))
                    Store (ST50, Index (DerefOf (Index (WRDY, One)), 0x0C))
                    Store (ST51, Index (DerefOf (Index (WRDY, One)), 0x0D))
                    Store (ST52, Index (DerefOf (Index (WRDY, One)), 0x0E))
                    Store (ST53, Index (DerefOf (Index (WRDY, One)), 0x0F))
                    Store (ST54, Index (DerefOf (Index (WRDY, One)), 0x10))
                    Store (ST55, Index (DerefOf (Index (WRDY, One)), 0x11))
                    Store (ST56, Index (DerefOf (Index (WRDY, One)), 0x12))
                    Store (ST57, Index (DerefOf (Index (WRDY, One)), 0x13))
                    Store (ST58, Index (DerefOf (Index (WRDY, One)), 0x14))
                    Store (ST59, Index (DerefOf (Index (WRDY, One)), 0x15))
                    Store (ST5A, Index (DerefOf (Index (WRDY, One)), 0x16))
                    Store (ST5B, Index (DerefOf (Index (WRDY, One)), 0x17))
                    Store (CD10, Index (DerefOf (Index (WRDY, One)), 0x18))
                    Store (CD11, Index (DerefOf (Index (WRDY, One)), 0x19))
                    Store (CD12, Index (DerefOf (Index (WRDY, One)), 0x1A))
                    Store (CD13, Index (DerefOf (Index (WRDY, One)), 0x1B))
                    Store (CD14, Index (DerefOf (Index (WRDY, One)), 0x1C))
                    Store (CD15, Index (DerefOf (Index (WRDY, One)), 0x1D))
                    Store (CD16, Index (DerefOf (Index (WRDY, One)), 0x1E))
                    Store (CD17, Index (DerefOf (Index (WRDY, One)), 0x1F))
                    Store (CD18, Index (DerefOf (Index (WRDY, One)), 0x20))
                    Store (CD19, Index (DerefOf (Index (WRDY, One)), 0x21))
                    Store (CD1A, Index (DerefOf (Index (WRDY, One)), 0x22))
                    Store (CD20, Index (DerefOf (Index (WRDY, One)), 0x23))
                    Store (CD21, Index (DerefOf (Index (WRDY, One)), 0x24))
                    Store (CD22, Index (DerefOf (Index (WRDY, One)), 0x25))
                    Store (CD23, Index (DerefOf (Index (WRDY, One)), 0x26))
                    Store (CD24, Index (DerefOf (Index (WRDY, One)), 0x27))
                    Store (CD25, Index (DerefOf (Index (WRDY, One)), 0x28))
                    Store (CD26, Index (DerefOf (Index (WRDY, One)), 0x29))
                    Store (CD27, Index (DerefOf (Index (WRDY, One)), 0x2A))
                    Store (CD28, Index (DerefOf (Index (WRDY, One)), 0x2B))
                    Store (CD29, Index (DerefOf (Index (WRDY, One)), 0x2C))
                    Store (CD2A, Index (DerefOf (Index (WRDY, One)), 0x2D))
                    Return (WRDY)
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    Store (STDE, Index (DerefOf (Index (EWRY, One)), One))
                    Store (STRS, Index (DerefOf (Index (EWRY, One)), 0x02))
                    Store (ST20, Index (DerefOf (Index (EWRY, One)), 0x03))
                    Store (ST21, Index (DerefOf (Index (EWRY, One)), 0x04))
                    Store (ST22, Index (DerefOf (Index (EWRY, One)), 0x05))
                    Store (ST23, Index (DerefOf (Index (EWRY, One)), 0x06))
                    Store (ST24, Index (DerefOf (Index (EWRY, One)), 0x07))
                    Store (ST25, Index (DerefOf (Index (EWRY, One)), 0x08))
                    Store (ST26, Index (DerefOf (Index (EWRY, One)), 0x09))
                    Store (ST27, Index (DerefOf (Index (EWRY, One)), 0x0A))
                    Store (ST28, Index (DerefOf (Index (EWRY, One)), 0x0B))
                    Store (ST29, Index (DerefOf (Index (EWRY, One)), 0x0C))
                    Store (ST60, Index (DerefOf (Index (EWRY, One)), 0x0D))
                    Store (ST61, Index (DerefOf (Index (EWRY, One)), 0x0E))
                    Store (ST62, Index (DerefOf (Index (EWRY, One)), 0x0F))
                    Store (ST63, Index (DerefOf (Index (EWRY, One)), 0x10))
                    Store (ST64, Index (DerefOf (Index (EWRY, One)), 0x11))
                    Store (ST65, Index (DerefOf (Index (EWRY, One)), 0x12))
                    Store (ST66, Index (DerefOf (Index (EWRY, One)), 0x13))
                    Store (ST67, Index (DerefOf (Index (EWRY, One)), 0x14))
                    Store (ST68, Index (DerefOf (Index (EWRY, One)), 0x15))
                    Store (ST69, Index (DerefOf (Index (EWRY, One)), 0x16))
                    Store (ST6A, Index (DerefOf (Index (EWRY, One)), 0x17))
                    Store (ST6B, Index (DerefOf (Index (EWRY, One)), 0x18))
                    Store (ST30, Index (DerefOf (Index (EWRY, One)), 0x19))
                    Store (ST31, Index (DerefOf (Index (EWRY, One)), 0x1A))
                    Store (ST32, Index (DerefOf (Index (EWRY, One)), 0x1B))
                    Store (ST33, Index (DerefOf (Index (EWRY, One)), 0x1C))
                    Store (ST34, Index (DerefOf (Index (EWRY, One)), 0x1D))
                    Store (ST35, Index (DerefOf (Index (EWRY, One)), 0x1E))
                    Store (ST36, Index (DerefOf (Index (EWRY, One)), 0x1F))
                    Store (ST37, Index (DerefOf (Index (EWRY, One)), 0x20))
                    Store (ST38, Index (DerefOf (Index (EWRY, One)), 0x21))
                    Store (ST39, Index (DerefOf (Index (EWRY, One)), 0x22))
                    Store (ST70, Index (DerefOf (Index (EWRY, One)), 0x23))
                    Store (ST71, Index (DerefOf (Index (EWRY, One)), 0x24))
                    Store (ST72, Index (DerefOf (Index (EWRY, One)), 0x25))
                    Store (ST73, Index (DerefOf (Index (EWRY, One)), 0x26))
                    Store (ST74, Index (DerefOf (Index (EWRY, One)), 0x27))
                    Store (ST75, Index (DerefOf (Index (EWRY, One)), 0x28))
                    Store (ST76, Index (DerefOf (Index (EWRY, One)), 0x29))
                    Store (ST77, Index (DerefOf (Index (EWRY, One)), 0x2A))
                    Store (ST78, Index (DerefOf (Index (EWRY, One)), 0x2B))
                    Store (ST79, Index (DerefOf (Index (EWRY, One)), 0x2C))
                    Store (ST7A, Index (DerefOf (Index (EWRY, One)), 0x2D))
                    Store (ST7B, Index (DerefOf (Index (EWRY, One)), 0x2E))
                    Store (ST40, Index (DerefOf (Index (EWRY, One)), 0x2F))
                    Store (ST41, Index (DerefOf (Index (EWRY, One)), 0x30))
                    Store (ST42, Index (DerefOf (Index (EWRY, One)), 0x31))
                    Store (ST43, Index (DerefOf (Index (EWRY, One)), 0x32))
                    Store (ST44, Index (DerefOf (Index (EWRY, One)), 0x33))
                    Store (ST45, Index (DerefOf (Index (EWRY, One)), 0x34))
                    Store (ST46, Index (DerefOf (Index (EWRY, One)), 0x35))
                    Store (ST47, Index (DerefOf (Index (EWRY, One)), 0x36))
                    Store (ST48, Index (DerefOf (Index (EWRY, One)), 0x37))
                    Store (ST49, Index (DerefOf (Index (EWRY, One)), 0x38))
                    Store (ST80, Index (DerefOf (Index (EWRY, One)), 0x39))
                    Store (ST81, Index (DerefOf (Index (EWRY, One)), 0x3A))
                    Store (ST82, Index (DerefOf (Index (EWRY, One)), 0x3B))
                    Store (ST83, Index (DerefOf (Index (EWRY, One)), 0x3C))
                    Store (ST84, Index (DerefOf (Index (EWRY, One)), 0x3D))
                    Store (ST85, Index (DerefOf (Index (EWRY, One)), 0x3E))
                    Store (ST86, Index (DerefOf (Index (EWRY, One)), 0x3F))
                    Store (ST87, Index (DerefOf (Index (EWRY, One)), 0x40))
                    Store (ST88, Index (DerefOf (Index (EWRY, One)), 0x41))
                    Store (ST89, Index (DerefOf (Index (EWRY, One)), 0x42))
                    Store (ST8A, Index (DerefOf (Index (EWRY, One)), 0x43))
                    Store (ST8B, Index (DerefOf (Index (EWRY, One)), 0x44))
                    Store (CD30, Index (DerefOf (Index (EWRY, One)), 0x45))
                    Store (CD31, Index (DerefOf (Index (EWRY, One)), 0x46))
                    Store (CD32, Index (DerefOf (Index (EWRY, One)), 0x47))
                    Store (CD33, Index (DerefOf (Index (EWRY, One)), 0x48))
                    Store (CD34, Index (DerefOf (Index (EWRY, One)), 0x49))
                    Store (CD35, Index (DerefOf (Index (EWRY, One)), 0x4A))
                    Store (CD36, Index (DerefOf (Index (EWRY, One)), 0x4B))
                    Store (CD37, Index (DerefOf (Index (EWRY, One)), 0x4C))
                    Store (CD38, Index (DerefOf (Index (EWRY, One)), 0x4D))
                    Store (CD39, Index (DerefOf (Index (EWRY, One)), 0x4E))
                    Store (CD3A, Index (DerefOf (Index (EWRY, One)), 0x4F))
                    Store (CD3B, Index (DerefOf (Index (EWRY, One)), 0x50))
                    Store (CD3C, Index (DerefOf (Index (EWRY, One)), 0x51))
                    Store (CD3D, Index (DerefOf (Index (EWRY, One)), 0x52))
                    Store (CD3E, Index (DerefOf (Index (EWRY, One)), 0x53))
                    Store (CD3F, Index (DerefOf (Index (EWRY, One)), 0x54))
                    Store (CD40, Index (DerefOf (Index (EWRY, One)), 0x55))
                    Store (CD41, Index (DerefOf (Index (EWRY, One)), 0x56))
                    Store (CD42, Index (DerefOf (Index (EWRY, One)), 0x57))
                    Store (CD43, Index (DerefOf (Index (EWRY, One)), 0x58))
                    Store (CD44, Index (DerefOf (Index (EWRY, One)), 0x59))
                    Store (CD45, Index (DerefOf (Index (EWRY, One)), 0x5A))
                    Store (CD46, Index (DerefOf (Index (EWRY, One)), 0x5B))
                    Store (CD47, Index (DerefOf (Index (EWRY, One)), 0x5C))
                    Store (CD48, Index (DerefOf (Index (EWRY, One)), 0x5D))
                    Store (CD49, Index (DerefOf (Index (EWRY, One)), 0x5E))
                    Store (CD4A, Index (DerefOf (Index (EWRY, One)), 0x5F))
                    Store (CD4B, Index (DerefOf (Index (EWRY, One)), 0x60))
                    Store (CD4C, Index (DerefOf (Index (EWRY, One)), 0x61))
                    Store (CD4D, Index (DerefOf (Index (EWRY, One)), 0x62))
                    Store (CD4E, Index (DerefOf (Index (EWRY, One)), 0x63))
                    Store (CD4F, Index (DerefOf (Index (EWRY, One)), 0x64))
                    Store (CD50, Index (DerefOf (Index (EWRY, One)), 0x65))
                    Store (CD51, Index (DerefOf (Index (EWRY, One)), 0x66))
                    Store (CD52, Index (DerefOf (Index (EWRY, One)), 0x67))
                    Store (CD53, Index (DerefOf (Index (EWRY, One)), 0x68))
                    Store (CD54, Index (DerefOf (Index (EWRY, One)), 0x69))
                    Store (CD55, Index (DerefOf (Index (EWRY, One)), 0x6A))
                    Store (CD56, Index (DerefOf (Index (EWRY, One)), 0x6B))
                    Store (CD57, Index (DerefOf (Index (EWRY, One)), 0x6C))
                    Store (CD58, Index (DerefOf (Index (EWRY, One)), 0x6D))
                    Store (CD59, Index (DerefOf (Index (EWRY, One)), 0x6E))
                    Store (CD5A, Index (DerefOf (Index (EWRY, One)), 0x6F))
                    Store (CD5B, Index (DerefOf (Index (EWRY, One)), 0x70))
                    Store (CD5C, Index (DerefOf (Index (EWRY, One)), 0x71))
                    Store (CD5D, Index (DerefOf (Index (EWRY, One)), 0x72))
                    Store (CD5E, Index (DerefOf (Index (EWRY, One)), 0x73))
                    Store (CD5F, Index (DerefOf (Index (EWRY, One)), 0x74))
                    Store (CD60, Index (DerefOf (Index (EWRY, One)), 0x75))
                    Store (CD61, Index (DerefOf (Index (EWRY, One)), 0x76))
                    Store (CD62, Index (DerefOf (Index (EWRY, One)), 0x77))
                    Store (CD63, Index (DerefOf (Index (EWRY, One)), 0x78))
                    Store (CD64, Index (DerefOf (Index (EWRY, One)), 0x79))
                    Store (CD65, Index (DerefOf (Index (EWRY, One)), 0x7A))
                    Store (CD66, Index (DerefOf (Index (EWRY, One)), 0x7B))
                    Store (CD67, Index (DerefOf (Index (EWRY, One)), 0x7C))
                    Store (CD68, Index (DerefOf (Index (EWRY, One)), 0x7D))
                    Store (CD69, Index (DerefOf (Index (EWRY, One)), 0x7E))
                    Store (CD6A, Index (DerefOf (Index (EWRY, One)), 0x7F))
                    Store (CD6B, Index (DerefOf (Index (EWRY, One)), 0x80))
                    Store (CD6C, Index (DerefOf (Index (EWRY, One)), 0x81))
                    Store (CD6D, Index (DerefOf (Index (EWRY, One)), 0x82))
                    Store (CD6E, Index (DerefOf (Index (EWRY, One)), 0x83))
                    Store (CD6F, Index (DerefOf (Index (EWRY, One)), 0x84))
                    Store (CD70, Index (DerefOf (Index (EWRY, One)), 0x85))
                    Store (CD71, Index (DerefOf (Index (EWRY, One)), 0x86))
                    Return (EWRY)
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    Store (SDGN, Index (DerefOf (Index (WGDY, One)), One))
                    Store (SD11, Index (DerefOf (Index (WGDY, One)), 0x02))
                    Store (SD12, Index (DerefOf (Index (WGDY, One)), 0x03))
                    Store (SD13, Index (DerefOf (Index (WGDY, One)), 0x04))
                    Store (SD14, Index (DerefOf (Index (WGDY, One)), 0x05))
                    Store (SD15, Index (DerefOf (Index (WGDY, One)), 0x06))
                    Store (SD16, Index (DerefOf (Index (WGDY, One)), 0x07))
                    Store (SD17, Index (DerefOf (Index (WGDY, One)), 0x08))
                    Store (SD18, Index (DerefOf (Index (WGDY, One)), 0x09))
                    Store (SD19, Index (DerefOf (Index (WGDY, One)), 0x0A))
                    Store (SD21, Index (DerefOf (Index (WGDY, One)), 0x0B))
                    Store (SD22, Index (DerefOf (Index (WGDY, One)), 0x0C))
                    Store (SD23, Index (DerefOf (Index (WGDY, One)), 0x0D))
                    Store (SD24, Index (DerefOf (Index (WGDY, One)), 0x0E))
                    Store (SD25, Index (DerefOf (Index (WGDY, One)), 0x0F))
                    Store (SD26, Index (DerefOf (Index (WGDY, One)), 0x10))
                    Store (SD27, Index (DerefOf (Index (WGDY, One)), 0x11))
                    Store (SD28, Index (DerefOf (Index (WGDY, One)), 0x12))
                    Store (SD29, Index (DerefOf (Index (WGDY, One)), 0x13))
                    Store (SD31, Index (DerefOf (Index (WGDY, One)), 0x14))
                    Store (SD32, Index (DerefOf (Index (WGDY, One)), 0x15))
                    Store (SD33, Index (DerefOf (Index (WGDY, One)), 0x16))
                    Store (SD34, Index (DerefOf (Index (WGDY, One)), 0x17))
                    Store (SD35, Index (DerefOf (Index (WGDY, One)), 0x18))
                    Store (SD36, Index (DerefOf (Index (WGDY, One)), 0x19))
                    Store (SD37, Index (DerefOf (Index (WGDY, One)), 0x1A))
                    Store (SD38, Index (DerefOf (Index (WGDY, One)), 0x1B))
                    Store (SD39, Index (DerefOf (Index (WGDY, One)), 0x1C))
                    Store (SD41, Index (DerefOf (Index (WGDY, One)), 0x1D))
                    Store (SD42, Index (DerefOf (Index (WGDY, One)), 0x1E))
                    Store (SD43, Index (DerefOf (Index (WGDY, One)), 0x1F))
                    Store (SD44, Index (DerefOf (Index (WGDY, One)), 0x20))
                    Store (SD45, Index (DerefOf (Index (WGDY, One)), 0x21))
                    Store (SD46, Index (DerefOf (Index (WGDY, One)), 0x22))
                    Store (SD47, Index (DerefOf (Index (WGDY, One)), 0x23))
                    Store (SD48, Index (DerefOf (Index (WGDY, One)), 0x24))
                    Store (SD49, Index (DerefOf (Index (WGDY, One)), 0x25))
                    Store (SD51, Index (DerefOf (Index (WGDY, One)), 0x26))
                    Store (SD52, Index (DerefOf (Index (WGDY, One)), 0x27))
                    Store (SD53, Index (DerefOf (Index (WGDY, One)), 0x28))
                    Store (SD54, Index (DerefOf (Index (WGDY, One)), 0x29))
                    Store (SD55, Index (DerefOf (Index (WGDY, One)), 0x2A))
                    Store (SD56, Index (DerefOf (Index (WGDY, One)), 0x2B))
                    Store (SD57, Index (DerefOf (Index (WGDY, One)), 0x2C))
                    Store (SD58, Index (DerefOf (Index (WGDY, One)), 0x2D))
                    Store (SD59, Index (DerefOf (Index (WGDY, One)), 0x2E))
                    Store (SD61, Index (DerefOf (Index (WGDY, One)), 0x2F))
                    Store (SD62, Index (DerefOf (Index (WGDY, One)), 0x30))
                    Store (SD63, Index (DerefOf (Index (WGDY, One)), 0x31))
                    Store (SD64, Index (DerefOf (Index (WGDY, One)), 0x32))
                    Store (SD65, Index (DerefOf (Index (WGDY, One)), 0x33))
                    Store (SD66, Index (DerefOf (Index (WGDY, One)), 0x34))
                    Store (SD67, Index (DerefOf (Index (WGDY, One)), 0x35))
                    Store (SD68, Index (DerefOf (Index (WGDY, One)), 0x36))
                    Store (SD69, Index (DerefOf (Index (WGDY, One)), 0x37))
                    Store (SD71, Index (DerefOf (Index (WGDY, One)), 0x38))
                    Store (SD72, Index (DerefOf (Index (WGDY, One)), 0x39))
                    Store (SD73, Index (DerefOf (Index (WGDY, One)), 0x3A))
                    Store (SD74, Index (DerefOf (Index (WGDY, One)), 0x3B))
                    Store (SD75, Index (DerefOf (Index (WGDY, One)), 0x3C))
                    Store (SD76, Index (DerefOf (Index (WGDY, One)), 0x3D))
                    Store (SD77, Index (DerefOf (Index (WGDY, One)), 0x3E))
                    Store (SD78, Index (DerefOf (Index (WGDY, One)), 0x3F))
                    Store (SD79, Index (DerefOf (Index (WGDY, One)), 0x40))
                    Store (SD81, Index (DerefOf (Index (WGDY, One)), 0x41))
                    Store (SD82, Index (DerefOf (Index (WGDY, One)), 0x42))
                    Store (SD83, Index (DerefOf (Index (WGDY, One)), 0x43))
                    Store (SD84, Index (DerefOf (Index (WGDY, One)), 0x44))
                    Store (SD85, Index (DerefOf (Index (WGDY, One)), 0x45))
                    Store (SD86, Index (DerefOf (Index (WGDY, One)), 0x46))
                    Store (SD87, Index (DerefOf (Index (WGDY, One)), 0x47))
                    Store (SD88, Index (DerefOf (Index (WGDY, One)), 0x48))
                    Store (SD89, Index (DerefOf (Index (WGDY, One)), 0x49))
                    Return (WGDY)
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                    Return (ECKY)
                }

                Name (PPAY, Package (0x02)
                {
                    One, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    Store (WAGE, Index (DerefOf (Index (PPAY, One)), One))
                    Store (AGA1, Index (DerefOf (Index (PPAY, One)), 0x02))
                    Store (AGA2, Index (DerefOf (Index (PPAY, One)), 0x03))
                    Store (AGA3, Index (DerefOf (Index (PPAY, One)), 0x04))
                    Store (AGA4, Index (DerefOf (Index (PPAY, One)), 0x05))
                    Store (AGA5, Index (DerefOf (Index (PPAY, One)), 0x06))
                    Store (AGA6, Index (DerefOf (Index (PPAY, One)), 0x07))
                    Store (AGA7, Index (DerefOf (Index (PPAY, One)), 0x08))
                    Store (AGA8, Index (DerefOf (Index (PPAY, One)), 0x09))
                    Store (AGA9, Index (DerefOf (Index (PPAY, One)), 0x0A))
                    Store (AGAA, Index (DerefOf (Index (PPAY, One)), 0x0B))
                    Store (AGAB, Index (DerefOf (Index (PPAY, One)), 0x0C))
                    Store (AGB1, Index (DerefOf (Index (PPAY, One)), 0x0D))
                    Store (AGB2, Index (DerefOf (Index (PPAY, One)), 0x0E))
                    Store (AGB3, Index (DerefOf (Index (PPAY, One)), 0x0F))
                    Store (AGB4, Index (DerefOf (Index (PPAY, One)), 0x10))
                    Store (AGB5, Index (DerefOf (Index (PPAY, One)), 0x11))
                    Store (AGB6, Index (DerefOf (Index (PPAY, One)), 0x12))
                    Store (AGB7, Index (DerefOf (Index (PPAY, One)), 0x13))
                    Store (AGB8, Index (DerefOf (Index (PPAY, One)), 0x14))
                    Store (AGB9, Index (DerefOf (Index (PPAY, One)), 0x15))
                    Store (AGBA, Index (DerefOf (Index (PPAY, One)), 0x16))
                    Store (AGBB, Index (DerefOf (Index (PPAY, One)), 0x17))
                    Return (PPAY)
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    Store (WTSV, Index (DerefOf (Index (WTSY, One)), One))
                    Store (WTLE, Index (DerefOf (Index (WTSY, One)), 0x02))
                    Store (BL01, Index (DerefOf (Index (WTSY, One)), 0x03))
                    Store (BL02, Index (DerefOf (Index (WTSY, One)), 0x04))
                    Store (BL03, Index (DerefOf (Index (WTSY, One)), 0x05))
                    Store (BL04, Index (DerefOf (Index (WTSY, One)), 0x06))
                    Store (BL05, Index (DerefOf (Index (WTSY, One)), 0x07))
                    Store (BL06, Index (DerefOf (Index (WTSY, One)), 0x08))
                    Store (BL07, Index (DerefOf (Index (WTSY, One)), 0x09))
                    Store (BL08, Index (DerefOf (Index (WTSY, One)), 0x0A))
                    Store (BL09, Index (DerefOf (Index (WTSY, One)), 0x0B))
                    Store (BL10, Index (DerefOf (Index (WTSY, One)), 0x0C))
                    Store (BL11, Index (DerefOf (Index (WTSY, One)), 0x0D))
                    Store (BL12, Index (DerefOf (Index (WTSY, One)), 0x0E))
                    Store (BL13, Index (DerefOf (Index (WTSY, One)), 0x0F))
                    Store (BL14, Index (DerefOf (Index (WTSY, One)), 0x10))
                    Store (BL15, Index (DerefOf (Index (WTSY, One)), 0x11))
                    Store (BL16, Index (DerefOf (Index (WTSY, One)), 0x12))
                    Return (WTSY)
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    Store (WLBI, Index (DerefOf (Index (WAIY, One)), One))
                    Store (WHBI, Index (DerefOf (Index (WAIY, One)), 0x02))
                    Return (WAIY)
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                    Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                    Return (SADX)
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX)
                }
            }

            If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If (LNotEqual (GGOV (PRST), WPRP))
                    {
                        DL23 ()
                        SGOV (PRST, WPRP)
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    If (LEqual (Arg0, Zero))
                    {
                        Sleep (TBTG)
                    }
                    ElseIf (LEqual (Arg0, One))
                    {
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, And (Not (PFCP), One))
                        Sleep (TFDI)
                    }
                    Else
                    {
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    SPCO (WCLK, One)
                    SGOV (WFCP, PFCP)
                    Sleep (TN2B)
                    SGOV (WBRS, And (Not (PBRS), One))
                    Sleep (TB2R)
                    SGOV (PRST, And (Not (WPRP), One))
                    L23D ()
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Store (Zero, Local0)
                    While (LAnd (LNotEqual (SVID, WSID), LLess (Local0, WSTO)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    If (LEqual (WWEN, 0x02))
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (Zero)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One)
                        SGOV (PRST, And (Not (WPRP), One))
                        SGOV (WBRS, And (Not (PBRS), One))
                        Sleep (0xC8)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x14))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Sleep (0x0A)
                        Notify (PXSX, One)
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (One)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                }
            }

            If (LOr (WIST (), LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT))))
            {
                PowerResource (DRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        DRST
                    })
                }

                Method (IFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        ShiftLeft (CVPR, Zero, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        If (LEqual (CMDT, One))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Return (^^^CNVW.RSTT)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If (LEqual (CMDT, 0x02))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Store (CMDP, ^^^CNVW.RSTT)
                            }

                            Return (Zero)
                        }

                        If (LEqual (CMDT, 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                Return (^^^CNVW.PRRS)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (Zero)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LEqual (CRFI, One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x01                                     
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Store (ACSD, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Store (I5BS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Store (UHBS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        Store (AXMU, Local0)
                        ShiftLeft (Local0, One, Local0)
                        Or (Local0, AXSU, Local0)
                        Store (AXMR, Local1)
                        ShiftLeft (Local1, One, Local1)
                        Or (Local1, AXSR, Local1)
                        ShiftLeft (Local1, 0x02, Local1)
                        Or (Local0, Local1, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (WFRC)
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (WFUC)
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        Return (UNI4)
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        Return (WFIC)
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (LEqual (Arg0, ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d")))
                        {
                            If (LEqual (Arg2, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                           
                                })
                            }

                            If (LEqual (Arg2, One)){}
                            If (LEqual (Arg2, 0x02)){}
                            If (LEqual (Arg2, 0x03))
                            {
                                If (LEqual (WRTO, One)){}
                                ElseIf (LEqual (WRTO, 0x03)){}
                                Else
                                {
                                }

                                Return (WRTO)
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP08.PXSX))
    {
        Scope (_SB.PC00.RP08.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, Add (GMIO (^_ADR, _ADR), 0x44), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                    Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                    Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                    Return (SPLX)
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                    Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                    Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                    Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                    Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                    Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                    Return (WANX)
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                    Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                    Return (WRDX)
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    Store (STXE, Index (DerefOf (Index (WRDY, One)), One))
                    Store (ST10, Index (DerefOf (Index (WRDY, One)), 0x02))
                    Store (ST11, Index (DerefOf (Index (WRDY, One)), 0x03))
                    Store (ST12, Index (DerefOf (Index (WRDY, One)), 0x04))
                    Store (ST13, Index (DerefOf (Index (WRDY, One)), 0x05))
                    Store (ST14, Index (DerefOf (Index (WRDY, One)), 0x06))
                    Store (ST15, Index (DerefOf (Index (WRDY, One)), 0x07))
                    Store (ST16, Index (DerefOf (Index (WRDY, One)), 0x08))
                    Store (ST17, Index (DerefOf (Index (WRDY, One)), 0x09))
                    Store (ST18, Index (DerefOf (Index (WRDY, One)), 0x0A))
                    Store (ST19, Index (DerefOf (Index (WRDY, One)), 0x0B))
                    Store (ST50, Index (DerefOf (Index (WRDY, One)), 0x0C))
                    Store (ST51, Index (DerefOf (Index (WRDY, One)), 0x0D))
                    Store (ST52, Index (DerefOf (Index (WRDY, One)), 0x0E))
                    Store (ST53, Index (DerefOf (Index (WRDY, One)), 0x0F))
                    Store (ST54, Index (DerefOf (Index (WRDY, One)), 0x10))
                    Store (ST55, Index (DerefOf (Index (WRDY, One)), 0x11))
                    Store (ST56, Index (DerefOf (Index (WRDY, One)), 0x12))
                    Store (ST57, Index (DerefOf (Index (WRDY, One)), 0x13))
                    Store (ST58, Index (DerefOf (Index (WRDY, One)), 0x14))
                    Store (ST59, Index (DerefOf (Index (WRDY, One)), 0x15))
                    Store (ST5A, Index (DerefOf (Index (WRDY, One)), 0x16))
                    Store (ST5B, Index (DerefOf (Index (WRDY, One)), 0x17))
                    Store (CD10, Index (DerefOf (Index (WRDY, One)), 0x18))
                    Store (CD11, Index (DerefOf (Index (WRDY, One)), 0x19))
                    Store (CD12, Index (DerefOf (Index (WRDY, One)), 0x1A))
                    Store (CD13, Index (DerefOf (Index (WRDY, One)), 0x1B))
                    Store (CD14, Index (DerefOf (Index (WRDY, One)), 0x1C))
                    Store (CD15, Index (DerefOf (Index (WRDY, One)), 0x1D))
                    Store (CD16, Index (DerefOf (Index (WRDY, One)), 0x1E))
                    Store (CD17, Index (DerefOf (Index (WRDY, One)), 0x1F))
                    Store (CD18, Index (DerefOf (Index (WRDY, One)), 0x20))
                    Store (CD19, Index (DerefOf (Index (WRDY, One)), 0x21))
                    Store (CD1A, Index (DerefOf (Index (WRDY, One)), 0x22))
                    Store (CD20, Index (DerefOf (Index (WRDY, One)), 0x23))
                    Store (CD21, Index (DerefOf (Index (WRDY, One)), 0x24))
                    Store (CD22, Index (DerefOf (Index (WRDY, One)), 0x25))
                    Store (CD23, Index (DerefOf (Index (WRDY, One)), 0x26))
                    Store (CD24, Index (DerefOf (Index (WRDY, One)), 0x27))
                    Store (CD25, Index (DerefOf (Index (WRDY, One)), 0x28))
                    Store (CD26, Index (DerefOf (Index (WRDY, One)), 0x29))
                    Store (CD27, Index (DerefOf (Index (WRDY, One)), 0x2A))
                    Store (CD28, Index (DerefOf (Index (WRDY, One)), 0x2B))
                    Store (CD29, Index (DerefOf (Index (WRDY, One)), 0x2C))
                    Store (CD2A, Index (DerefOf (Index (WRDY, One)), 0x2D))
                    Return (WRDY)
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    Store (STDE, Index (DerefOf (Index (EWRY, One)), One))
                    Store (STRS, Index (DerefOf (Index (EWRY, One)), 0x02))
                    Store (ST20, Index (DerefOf (Index (EWRY, One)), 0x03))
                    Store (ST21, Index (DerefOf (Index (EWRY, One)), 0x04))
                    Store (ST22, Index (DerefOf (Index (EWRY, One)), 0x05))
                    Store (ST23, Index (DerefOf (Index (EWRY, One)), 0x06))
                    Store (ST24, Index (DerefOf (Index (EWRY, One)), 0x07))
                    Store (ST25, Index (DerefOf (Index (EWRY, One)), 0x08))
                    Store (ST26, Index (DerefOf (Index (EWRY, One)), 0x09))
                    Store (ST27, Index (DerefOf (Index (EWRY, One)), 0x0A))
                    Store (ST28, Index (DerefOf (Index (EWRY, One)), 0x0B))
                    Store (ST29, Index (DerefOf (Index (EWRY, One)), 0x0C))
                    Store (ST60, Index (DerefOf (Index (EWRY, One)), 0x0D))
                    Store (ST61, Index (DerefOf (Index (EWRY, One)), 0x0E))
                    Store (ST62, Index (DerefOf (Index (EWRY, One)), 0x0F))
                    Store (ST63, Index (DerefOf (Index (EWRY, One)), 0x10))
                    Store (ST64, Index (DerefOf (Index (EWRY, One)), 0x11))
                    Store (ST65, Index (DerefOf (Index (EWRY, One)), 0x12))
                    Store (ST66, Index (DerefOf (Index (EWRY, One)), 0x13))
                    Store (ST67, Index (DerefOf (Index (EWRY, One)), 0x14))
                    Store (ST68, Index (DerefOf (Index (EWRY, One)), 0x15))
                    Store (ST69, Index (DerefOf (Index (EWRY, One)), 0x16))
                    Store (ST6A, Index (DerefOf (Index (EWRY, One)), 0x17))
                    Store (ST6B, Index (DerefOf (Index (EWRY, One)), 0x18))
                    Store (ST30, Index (DerefOf (Index (EWRY, One)), 0x19))
                    Store (ST31, Index (DerefOf (Index (EWRY, One)), 0x1A))
                    Store (ST32, Index (DerefOf (Index (EWRY, One)), 0x1B))
                    Store (ST33, Index (DerefOf (Index (EWRY, One)), 0x1C))
                    Store (ST34, Index (DerefOf (Index (EWRY, One)), 0x1D))
                    Store (ST35, Index (DerefOf (Index (EWRY, One)), 0x1E))
                    Store (ST36, Index (DerefOf (Index (EWRY, One)), 0x1F))
                    Store (ST37, Index (DerefOf (Index (EWRY, One)), 0x20))
                    Store (ST38, Index (DerefOf (Index (EWRY, One)), 0x21))
                    Store (ST39, Index (DerefOf (Index (EWRY, One)), 0x22))
                    Store (ST70, Index (DerefOf (Index (EWRY, One)), 0x23))
                    Store (ST71, Index (DerefOf (Index (EWRY, One)), 0x24))
                    Store (ST72, Index (DerefOf (Index (EWRY, One)), 0x25))
                    Store (ST73, Index (DerefOf (Index (EWRY, One)), 0x26))
                    Store (ST74, Index (DerefOf (Index (EWRY, One)), 0x27))
                    Store (ST75, Index (DerefOf (Index (EWRY, One)), 0x28))
                    Store (ST76, Index (DerefOf (Index (EWRY, One)), 0x29))
                    Store (ST77, Index (DerefOf (Index (EWRY, One)), 0x2A))
                    Store (ST78, Index (DerefOf (Index (EWRY, One)), 0x2B))
                    Store (ST79, Index (DerefOf (Index (EWRY, One)), 0x2C))
                    Store (ST7A, Index (DerefOf (Index (EWRY, One)), 0x2D))
                    Store (ST7B, Index (DerefOf (Index (EWRY, One)), 0x2E))
                    Store (ST40, Index (DerefOf (Index (EWRY, One)), 0x2F))
                    Store (ST41, Index (DerefOf (Index (EWRY, One)), 0x30))
                    Store (ST42, Index (DerefOf (Index (EWRY, One)), 0x31))
                    Store (ST43, Index (DerefOf (Index (EWRY, One)), 0x32))
                    Store (ST44, Index (DerefOf (Index (EWRY, One)), 0x33))
                    Store (ST45, Index (DerefOf (Index (EWRY, One)), 0x34))
                    Store (ST46, Index (DerefOf (Index (EWRY, One)), 0x35))
                    Store (ST47, Index (DerefOf (Index (EWRY, One)), 0x36))
                    Store (ST48, Index (DerefOf (Index (EWRY, One)), 0x37))
                    Store (ST49, Index (DerefOf (Index (EWRY, One)), 0x38))
                    Store (ST80, Index (DerefOf (Index (EWRY, One)), 0x39))
                    Store (ST81, Index (DerefOf (Index (EWRY, One)), 0x3A))
                    Store (ST82, Index (DerefOf (Index (EWRY, One)), 0x3B))
                    Store (ST83, Index (DerefOf (Index (EWRY, One)), 0x3C))
                    Store (ST84, Index (DerefOf (Index (EWRY, One)), 0x3D))
                    Store (ST85, Index (DerefOf (Index (EWRY, One)), 0x3E))
                    Store (ST86, Index (DerefOf (Index (EWRY, One)), 0x3F))
                    Store (ST87, Index (DerefOf (Index (EWRY, One)), 0x40))
                    Store (ST88, Index (DerefOf (Index (EWRY, One)), 0x41))
                    Store (ST89, Index (DerefOf (Index (EWRY, One)), 0x42))
                    Store (ST8A, Index (DerefOf (Index (EWRY, One)), 0x43))
                    Store (ST8B, Index (DerefOf (Index (EWRY, One)), 0x44))
                    Store (CD30, Index (DerefOf (Index (EWRY, One)), 0x45))
                    Store (CD31, Index (DerefOf (Index (EWRY, One)), 0x46))
                    Store (CD32, Index (DerefOf (Index (EWRY, One)), 0x47))
                    Store (CD33, Index (DerefOf (Index (EWRY, One)), 0x48))
                    Store (CD34, Index (DerefOf (Index (EWRY, One)), 0x49))
                    Store (CD35, Index (DerefOf (Index (EWRY, One)), 0x4A))
                    Store (CD36, Index (DerefOf (Index (EWRY, One)), 0x4B))
                    Store (CD37, Index (DerefOf (Index (EWRY, One)), 0x4C))
                    Store (CD38, Index (DerefOf (Index (EWRY, One)), 0x4D))
                    Store (CD39, Index (DerefOf (Index (EWRY, One)), 0x4E))
                    Store (CD3A, Index (DerefOf (Index (EWRY, One)), 0x4F))
                    Store (CD3B, Index (DerefOf (Index (EWRY, One)), 0x50))
                    Store (CD3C, Index (DerefOf (Index (EWRY, One)), 0x51))
                    Store (CD3D, Index (DerefOf (Index (EWRY, One)), 0x52))
                    Store (CD3E, Index (DerefOf (Index (EWRY, One)), 0x53))
                    Store (CD3F, Index (DerefOf (Index (EWRY, One)), 0x54))
                    Store (CD40, Index (DerefOf (Index (EWRY, One)), 0x55))
                    Store (CD41, Index (DerefOf (Index (EWRY, One)), 0x56))
                    Store (CD42, Index (DerefOf (Index (EWRY, One)), 0x57))
                    Store (CD43, Index (DerefOf (Index (EWRY, One)), 0x58))
                    Store (CD44, Index (DerefOf (Index (EWRY, One)), 0x59))
                    Store (CD45, Index (DerefOf (Index (EWRY, One)), 0x5A))
                    Store (CD46, Index (DerefOf (Index (EWRY, One)), 0x5B))
                    Store (CD47, Index (DerefOf (Index (EWRY, One)), 0x5C))
                    Store (CD48, Index (DerefOf (Index (EWRY, One)), 0x5D))
                    Store (CD49, Index (DerefOf (Index (EWRY, One)), 0x5E))
                    Store (CD4A, Index (DerefOf (Index (EWRY, One)), 0x5F))
                    Store (CD4B, Index (DerefOf (Index (EWRY, One)), 0x60))
                    Store (CD4C, Index (DerefOf (Index (EWRY, One)), 0x61))
                    Store (CD4D, Index (DerefOf (Index (EWRY, One)), 0x62))
                    Store (CD4E, Index (DerefOf (Index (EWRY, One)), 0x63))
                    Store (CD4F, Index (DerefOf (Index (EWRY, One)), 0x64))
                    Store (CD50, Index (DerefOf (Index (EWRY, One)), 0x65))
                    Store (CD51, Index (DerefOf (Index (EWRY, One)), 0x66))
                    Store (CD52, Index (DerefOf (Index (EWRY, One)), 0x67))
                    Store (CD53, Index (DerefOf (Index (EWRY, One)), 0x68))
                    Store (CD54, Index (DerefOf (Index (EWRY, One)), 0x69))
                    Store (CD55, Index (DerefOf (Index (EWRY, One)), 0x6A))
                    Store (CD56, Index (DerefOf (Index (EWRY, One)), 0x6B))
                    Store (CD57, Index (DerefOf (Index (EWRY, One)), 0x6C))
                    Store (CD58, Index (DerefOf (Index (EWRY, One)), 0x6D))
                    Store (CD59, Index (DerefOf (Index (EWRY, One)), 0x6E))
                    Store (CD5A, Index (DerefOf (Index (EWRY, One)), 0x6F))
                    Store (CD5B, Index (DerefOf (Index (EWRY, One)), 0x70))
                    Store (CD5C, Index (DerefOf (Index (EWRY, One)), 0x71))
                    Store (CD5D, Index (DerefOf (Index (EWRY, One)), 0x72))
                    Store (CD5E, Index (DerefOf (Index (EWRY, One)), 0x73))
                    Store (CD5F, Index (DerefOf (Index (EWRY, One)), 0x74))
                    Store (CD60, Index (DerefOf (Index (EWRY, One)), 0x75))
                    Store (CD61, Index (DerefOf (Index (EWRY, One)), 0x76))
                    Store (CD62, Index (DerefOf (Index (EWRY, One)), 0x77))
                    Store (CD63, Index (DerefOf (Index (EWRY, One)), 0x78))
                    Store (CD64, Index (DerefOf (Index (EWRY, One)), 0x79))
                    Store (CD65, Index (DerefOf (Index (EWRY, One)), 0x7A))
                    Store (CD66, Index (DerefOf (Index (EWRY, One)), 0x7B))
                    Store (CD67, Index (DerefOf (Index (EWRY, One)), 0x7C))
                    Store (CD68, Index (DerefOf (Index (EWRY, One)), 0x7D))
                    Store (CD69, Index (DerefOf (Index (EWRY, One)), 0x7E))
                    Store (CD6A, Index (DerefOf (Index (EWRY, One)), 0x7F))
                    Store (CD6B, Index (DerefOf (Index (EWRY, One)), 0x80))
                    Store (CD6C, Index (DerefOf (Index (EWRY, One)), 0x81))
                    Store (CD6D, Index (DerefOf (Index (EWRY, One)), 0x82))
                    Store (CD6E, Index (DerefOf (Index (EWRY, One)), 0x83))
                    Store (CD6F, Index (DerefOf (Index (EWRY, One)), 0x84))
                    Store (CD70, Index (DerefOf (Index (EWRY, One)), 0x85))
                    Store (CD71, Index (DerefOf (Index (EWRY, One)), 0x86))
                    Return (EWRY)
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    Store (SDGN, Index (DerefOf (Index (WGDY, One)), One))
                    Store (SD11, Index (DerefOf (Index (WGDY, One)), 0x02))
                    Store (SD12, Index (DerefOf (Index (WGDY, One)), 0x03))
                    Store (SD13, Index (DerefOf (Index (WGDY, One)), 0x04))
                    Store (SD14, Index (DerefOf (Index (WGDY, One)), 0x05))
                    Store (SD15, Index (DerefOf (Index (WGDY, One)), 0x06))
                    Store (SD16, Index (DerefOf (Index (WGDY, One)), 0x07))
                    Store (SD17, Index (DerefOf (Index (WGDY, One)), 0x08))
                    Store (SD18, Index (DerefOf (Index (WGDY, One)), 0x09))
                    Store (SD19, Index (DerefOf (Index (WGDY, One)), 0x0A))
                    Store (SD21, Index (DerefOf (Index (WGDY, One)), 0x0B))
                    Store (SD22, Index (DerefOf (Index (WGDY, One)), 0x0C))
                    Store (SD23, Index (DerefOf (Index (WGDY, One)), 0x0D))
                    Store (SD24, Index (DerefOf (Index (WGDY, One)), 0x0E))
                    Store (SD25, Index (DerefOf (Index (WGDY, One)), 0x0F))
                    Store (SD26, Index (DerefOf (Index (WGDY, One)), 0x10))
                    Store (SD27, Index (DerefOf (Index (WGDY, One)), 0x11))
                    Store (SD28, Index (DerefOf (Index (WGDY, One)), 0x12))
                    Store (SD29, Index (DerefOf (Index (WGDY, One)), 0x13))
                    Store (SD31, Index (DerefOf (Index (WGDY, One)), 0x14))
                    Store (SD32, Index (DerefOf (Index (WGDY, One)), 0x15))
                    Store (SD33, Index (DerefOf (Index (WGDY, One)), 0x16))
                    Store (SD34, Index (DerefOf (Index (WGDY, One)), 0x17))
                    Store (SD35, Index (DerefOf (Index (WGDY, One)), 0x18))
                    Store (SD36, Index (DerefOf (Index (WGDY, One)), 0x19))
                    Store (SD37, Index (DerefOf (Index (WGDY, One)), 0x1A))
                    Store (SD38, Index (DerefOf (Index (WGDY, One)), 0x1B))
                    Store (SD39, Index (DerefOf (Index (WGDY, One)), 0x1C))
                    Store (SD41, Index (DerefOf (Index (WGDY, One)), 0x1D))
                    Store (SD42, Index (DerefOf (Index (WGDY, One)), 0x1E))
                    Store (SD43, Index (DerefOf (Index (WGDY, One)), 0x1F))
                    Store (SD44, Index (DerefOf (Index (WGDY, One)), 0x20))
                    Store (SD45, Index (DerefOf (Index (WGDY, One)), 0x21))
                    Store (SD46, Index (DerefOf (Index (WGDY, One)), 0x22))
                    Store (SD47, Index (DerefOf (Index (WGDY, One)), 0x23))
                    Store (SD48, Index (DerefOf (Index (WGDY, One)), 0x24))
                    Store (SD49, Index (DerefOf (Index (WGDY, One)), 0x25))
                    Store (SD51, Index (DerefOf (Index (WGDY, One)), 0x26))
                    Store (SD52, Index (DerefOf (Index (WGDY, One)), 0x27))
                    Store (SD53, Index (DerefOf (Index (WGDY, One)), 0x28))
                    Store (SD54, Index (DerefOf (Index (WGDY, One)), 0x29))
                    Store (SD55, Index (DerefOf (Index (WGDY, One)), 0x2A))
                    Store (SD56, Index (DerefOf (Index (WGDY, One)), 0x2B))
                    Store (SD57, Index (DerefOf (Index (WGDY, One)), 0x2C))
                    Store (SD58, Index (DerefOf (Index (WGDY, One)), 0x2D))
                    Store (SD59, Index (DerefOf (Index (WGDY, One)), 0x2E))
                    Store (SD61, Index (DerefOf (Index (WGDY, One)), 0x2F))
                    Store (SD62, Index (DerefOf (Index (WGDY, One)), 0x30))
                    Store (SD63, Index (DerefOf (Index (WGDY, One)), 0x31))
                    Store (SD64, Index (DerefOf (Index (WGDY, One)), 0x32))
                    Store (SD65, Index (DerefOf (Index (WGDY, One)), 0x33))
                    Store (SD66, Index (DerefOf (Index (WGDY, One)), 0x34))
                    Store (SD67, Index (DerefOf (Index (WGDY, One)), 0x35))
                    Store (SD68, Index (DerefOf (Index (WGDY, One)), 0x36))
                    Store (SD69, Index (DerefOf (Index (WGDY, One)), 0x37))
                    Store (SD71, Index (DerefOf (Index (WGDY, One)), 0x38))
                    Store (SD72, Index (DerefOf (Index (WGDY, One)), 0x39))
                    Store (SD73, Index (DerefOf (Index (WGDY, One)), 0x3A))
                    Store (SD74, Index (DerefOf (Index (WGDY, One)), 0x3B))
                    Store (SD75, Index (DerefOf (Index (WGDY, One)), 0x3C))
                    Store (SD76, Index (DerefOf (Index (WGDY, One)), 0x3D))
                    Store (SD77, Index (DerefOf (Index (WGDY, One)), 0x3E))
                    Store (SD78, Index (DerefOf (Index (WGDY, One)), 0x3F))
                    Store (SD79, Index (DerefOf (Index (WGDY, One)), 0x40))
                    Store (SD81, Index (DerefOf (Index (WGDY, One)), 0x41))
                    Store (SD82, Index (DerefOf (Index (WGDY, One)), 0x42))
                    Store (SD83, Index (DerefOf (Index (WGDY, One)), 0x43))
                    Store (SD84, Index (DerefOf (Index (WGDY, One)), 0x44))
                    Store (SD85, Index (DerefOf (Index (WGDY, One)), 0x45))
                    Store (SD86, Index (DerefOf (Index (WGDY, One)), 0x46))
                    Store (SD87, Index (DerefOf (Index (WGDY, One)), 0x47))
                    Store (SD88, Index (DerefOf (Index (WGDY, One)), 0x48))
                    Store (SD89, Index (DerefOf (Index (WGDY, One)), 0x49))
                    Return (WGDY)
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                    Return (ECKY)
                }

                Name (PPAY, Package (0x02)
                {
                    One, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    Store (WAGE, Index (DerefOf (Index (PPAY, One)), One))
                    Store (AGA1, Index (DerefOf (Index (PPAY, One)), 0x02))
                    Store (AGA2, Index (DerefOf (Index (PPAY, One)), 0x03))
                    Store (AGA3, Index (DerefOf (Index (PPAY, One)), 0x04))
                    Store (AGA4, Index (DerefOf (Index (PPAY, One)), 0x05))
                    Store (AGA5, Index (DerefOf (Index (PPAY, One)), 0x06))
                    Store (AGA6, Index (DerefOf (Index (PPAY, One)), 0x07))
                    Store (AGA7, Index (DerefOf (Index (PPAY, One)), 0x08))
                    Store (AGA8, Index (DerefOf (Index (PPAY, One)), 0x09))
                    Store (AGA9, Index (DerefOf (Index (PPAY, One)), 0x0A))
                    Store (AGAA, Index (DerefOf (Index (PPAY, One)), 0x0B))
                    Store (AGAB, Index (DerefOf (Index (PPAY, One)), 0x0C))
                    Store (AGB1, Index (DerefOf (Index (PPAY, One)), 0x0D))
                    Store (AGB2, Index (DerefOf (Index (PPAY, One)), 0x0E))
                    Store (AGB3, Index (DerefOf (Index (PPAY, One)), 0x0F))
                    Store (AGB4, Index (DerefOf (Index (PPAY, One)), 0x10))
                    Store (AGB5, Index (DerefOf (Index (PPAY, One)), 0x11))
                    Store (AGB6, Index (DerefOf (Index (PPAY, One)), 0x12))
                    Store (AGB7, Index (DerefOf (Index (PPAY, One)), 0x13))
                    Store (AGB8, Index (DerefOf (Index (PPAY, One)), 0x14))
                    Store (AGB9, Index (DerefOf (Index (PPAY, One)), 0x15))
                    Store (AGBA, Index (DerefOf (Index (PPAY, One)), 0x16))
                    Store (AGBB, Index (DerefOf (Index (PPAY, One)), 0x17))
                    Return (PPAY)
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    Store (WTSV, Index (DerefOf (Index (WTSY, One)), One))
                    Store (WTLE, Index (DerefOf (Index (WTSY, One)), 0x02))
                    Store (BL01, Index (DerefOf (Index (WTSY, One)), 0x03))
                    Store (BL02, Index (DerefOf (Index (WTSY, One)), 0x04))
                    Store (BL03, Index (DerefOf (Index (WTSY, One)), 0x05))
                    Store (BL04, Index (DerefOf (Index (WTSY, One)), 0x06))
                    Store (BL05, Index (DerefOf (Index (WTSY, One)), 0x07))
                    Store (BL06, Index (DerefOf (Index (WTSY, One)), 0x08))
                    Store (BL07, Index (DerefOf (Index (WTSY, One)), 0x09))
                    Store (BL08, Index (DerefOf (Index (WTSY, One)), 0x0A))
                    Store (BL09, Index (DerefOf (Index (WTSY, One)), 0x0B))
                    Store (BL10, Index (DerefOf (Index (WTSY, One)), 0x0C))
                    Store (BL11, Index (DerefOf (Index (WTSY, One)), 0x0D))
                    Store (BL12, Index (DerefOf (Index (WTSY, One)), 0x0E))
                    Store (BL13, Index (DerefOf (Index (WTSY, One)), 0x0F))
                    Store (BL14, Index (DerefOf (Index (WTSY, One)), 0x10))
                    Store (BL15, Index (DerefOf (Index (WTSY, One)), 0x11))
                    Store (BL16, Index (DerefOf (Index (WTSY, One)), 0x12))
                    Return (WTSY)
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    Store (WLBI, Index (DerefOf (Index (WAIY, One)), One))
                    Store (WHBI, Index (DerefOf (Index (WAIY, One)), 0x02))
                    Return (WAIY)
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                    Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                    Return (SADX)
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX)
                }
            }

            If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If (LNotEqual (GGOV (PRST), WPRP))
                    {
                        DL23 ()
                        SGOV (PRST, WPRP)
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    If (LEqual (Arg0, Zero))
                    {
                        Sleep (TBTG)
                    }
                    ElseIf (LEqual (Arg0, One))
                    {
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, And (Not (PFCP), One))
                        Sleep (TFDI)
                    }
                    Else
                    {
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    SPCO (WCLK, One)
                    SGOV (WFCP, PFCP)
                    Sleep (TN2B)
                    SGOV (WBRS, And (Not (PBRS), One))
                    Sleep (TB2R)
                    SGOV (PRST, And (Not (WPRP), One))
                    L23D ()
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Store (Zero, Local0)
                    While (LAnd (LNotEqual (SVID, WSID), LLess (Local0, WSTO)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    If (LEqual (WWEN, 0x02))
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (Zero)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One)
                        SGOV (PRST, And (Not (WPRP), One))
                        SGOV (WBRS, And (Not (PBRS), One))
                        Sleep (0xC8)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x14))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Sleep (0x0A)
                        Notify (PXSX, One)
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (One)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                }
            }

            If (LOr (WIST (), LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT))))
            {
                PowerResource (DRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        DRST
                    })
                }

                Method (IFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        ShiftLeft (CVPR, Zero, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        If (LEqual (CMDT, One))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Return (^^^CNVW.RSTT)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If (LEqual (CMDT, 0x02))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Store (CMDP, ^^^CNVW.RSTT)
                            }

                            Return (Zero)
                        }

                        If (LEqual (CMDT, 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                Return (^^^CNVW.PRRS)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (Zero)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LEqual (CRFI, One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x01                                     
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Store (ACSD, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Store (I5BS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Store (UHBS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        Store (AXMU, Local0)
                        ShiftLeft (Local0, One, Local0)
                        Or (Local0, AXSU, Local0)
                        Store (AXMR, Local1)
                        ShiftLeft (Local1, One, Local1)
                        Or (Local1, AXSR, Local1)
                        ShiftLeft (Local1, 0x02, Local1)
                        Or (Local0, Local1, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (WFRC)
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (WFUC)
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        Return (UNI4)
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        Return (WFIC)
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (LEqual (Arg0, ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d")))
                        {
                            If (LEqual (Arg2, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                           
                                })
                            }

                            If (LEqual (Arg2, One)){}
                            If (LEqual (Arg2, 0x02)){}
                            If (LEqual (Arg2, 0x03))
                            {
                                If (LEqual (WRTO, One)){}
                                ElseIf (LEqual (WRTO, 0x03)){}
                                Else
                                {
                                }

                                Return (WRTO)
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    Scope (_SB.PC00.RP09.PXSX)
    {
        OperationRegion (RPXX, SystemMemory, GMIO (^_ADR, _ADR), 0x30)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32, 
            Offset (0x2C), 
            SVID,   16
        }

        OperationRegion (FLDR, SystemMemory, Add (GMIO (^_ADR, _ADR), 0x44), 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Case (0x271B8086)
                    {
                        Return (One)
                    }
                    Case (0x27238086)
                    {
                        Return (One)
                    }
                    Case (0x27258086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Case (0x75608086)
                    {
                        Return (One)
                    }
                    Case (0x4D7514C3)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If (WIST ())
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If (And (DCAP, 0x10000000))
                    {
                        Store (DCTR, Local0)
                        Or (Local0, 0x8000, Local0)
                        Store (Local0, DCTR)
                    }
                }
            }

            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                Return (SPLX)
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                Return (WANX)
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                Return (WRDX)
            }

            Name (WRDY, Package (0x02)
            {
                0x02, 
                Package (0x2E)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                Store (STXE, Index (DerefOf (Index (WRDY, One)), One))
                Store (ST10, Index (DerefOf (Index (WRDY, One)), 0x02))
                Store (ST11, Index (DerefOf (Index (WRDY, One)), 0x03))
                Store (ST12, Index (DerefOf (Index (WRDY, One)), 0x04))
                Store (ST13, Index (DerefOf (Index (WRDY, One)), 0x05))
                Store (ST14, Index (DerefOf (Index (WRDY, One)), 0x06))
                Store (ST15, Index (DerefOf (Index (WRDY, One)), 0x07))
                Store (ST16, Index (DerefOf (Index (WRDY, One)), 0x08))
                Store (ST17, Index (DerefOf (Index (WRDY, One)), 0x09))
                Store (ST18, Index (DerefOf (Index (WRDY, One)), 0x0A))
                Store (ST19, Index (DerefOf (Index (WRDY, One)), 0x0B))
                Store (ST50, Index (DerefOf (Index (WRDY, One)), 0x0C))
                Store (ST51, Index (DerefOf (Index (WRDY, One)), 0x0D))
                Store (ST52, Index (DerefOf (Index (WRDY, One)), 0x0E))
                Store (ST53, Index (DerefOf (Index (WRDY, One)), 0x0F))
                Store (ST54, Index (DerefOf (Index (WRDY, One)), 0x10))
                Store (ST55, Index (DerefOf (Index (WRDY, One)), 0x11))
                Store (ST56, Index (DerefOf (Index (WRDY, One)), 0x12))
                Store (ST57, Index (DerefOf (Index (WRDY, One)), 0x13))
                Store (ST58, Index (DerefOf (Index (WRDY, One)), 0x14))
                Store (ST59, Index (DerefOf (Index (WRDY, One)), 0x15))
                Store (ST5A, Index (DerefOf (Index (WRDY, One)), 0x16))
                Store (ST5B, Index (DerefOf (Index (WRDY, One)), 0x17))
                Store (CD10, Index (DerefOf (Index (WRDY, One)), 0x18))
                Store (CD11, Index (DerefOf (Index (WRDY, One)), 0x19))
                Store (CD12, Index (DerefOf (Index (WRDY, One)), 0x1A))
                Store (CD13, Index (DerefOf (Index (WRDY, One)), 0x1B))
                Store (CD14, Index (DerefOf (Index (WRDY, One)), 0x1C))
                Store (CD15, Index (DerefOf (Index (WRDY, One)), 0x1D))
                Store (CD16, Index (DerefOf (Index (WRDY, One)), 0x1E))
                Store (CD17, Index (DerefOf (Index (WRDY, One)), 0x1F))
                Store (CD18, Index (DerefOf (Index (WRDY, One)), 0x20))
                Store (CD19, Index (DerefOf (Index (WRDY, One)), 0x21))
                Store (CD1A, Index (DerefOf (Index (WRDY, One)), 0x22))
                Store (CD20, Index (DerefOf (Index (WRDY, One)), 0x23))
                Store (CD21, Index (DerefOf (Index (WRDY, One)), 0x24))
                Store (CD22, Index (DerefOf (Index (WRDY, One)), 0x25))
                Store (CD23, Index (DerefOf (Index (WRDY, One)), 0x26))
                Store (CD24, Index (DerefOf (Index (WRDY, One)), 0x27))
                Store (CD25, Index (DerefOf (Index (WRDY, One)), 0x28))
                Store (CD26, Index (DerefOf (Index (WRDY, One)), 0x29))
                Store (CD27, Index (DerefOf (Index (WRDY, One)), 0x2A))
                Store (CD28, Index (DerefOf (Index (WRDY, One)), 0x2B))
                Store (CD29, Index (DerefOf (Index (WRDY, One)), 0x2C))
                Store (CD2A, Index (DerefOf (Index (WRDY, One)), 0x2D))
                Return (WRDY)
            }

            Name (EWRY, Package (0x02)
            {
                0x02, 
                Package (0x87)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                Store (STDE, Index (DerefOf (Index (EWRY, One)), One))
                Store (STRS, Index (DerefOf (Index (EWRY, One)), 0x02))
                Store (ST20, Index (DerefOf (Index (EWRY, One)), 0x03))
                Store (ST21, Index (DerefOf (Index (EWRY, One)), 0x04))
                Store (ST22, Index (DerefOf (Index (EWRY, One)), 0x05))
                Store (ST23, Index (DerefOf (Index (EWRY, One)), 0x06))
                Store (ST24, Index (DerefOf (Index (EWRY, One)), 0x07))
                Store (ST25, Index (DerefOf (Index (EWRY, One)), 0x08))
                Store (ST26, Index (DerefOf (Index (EWRY, One)), 0x09))
                Store (ST27, Index (DerefOf (Index (EWRY, One)), 0x0A))
                Store (ST28, Index (DerefOf (Index (EWRY, One)), 0x0B))
                Store (ST29, Index (DerefOf (Index (EWRY, One)), 0x0C))
                Store (ST60, Index (DerefOf (Index (EWRY, One)), 0x0D))
                Store (ST61, Index (DerefOf (Index (EWRY, One)), 0x0E))
                Store (ST62, Index (DerefOf (Index (EWRY, One)), 0x0F))
                Store (ST63, Index (DerefOf (Index (EWRY, One)), 0x10))
                Store (ST64, Index (DerefOf (Index (EWRY, One)), 0x11))
                Store (ST65, Index (DerefOf (Index (EWRY, One)), 0x12))
                Store (ST66, Index (DerefOf (Index (EWRY, One)), 0x13))
                Store (ST67, Index (DerefOf (Index (EWRY, One)), 0x14))
                Store (ST68, Index (DerefOf (Index (EWRY, One)), 0x15))
                Store (ST69, Index (DerefOf (Index (EWRY, One)), 0x16))
                Store (ST6A, Index (DerefOf (Index (EWRY, One)), 0x17))
                Store (ST6B, Index (DerefOf (Index (EWRY, One)), 0x18))
                Store (ST30, Index (DerefOf (Index (EWRY, One)), 0x19))
                Store (ST31, Index (DerefOf (Index (EWRY, One)), 0x1A))
                Store (ST32, Index (DerefOf (Index (EWRY, One)), 0x1B))
                Store (ST33, Index (DerefOf (Index (EWRY, One)), 0x1C))
                Store (ST34, Index (DerefOf (Index (EWRY, One)), 0x1D))
                Store (ST35, Index (DerefOf (Index (EWRY, One)), 0x1E))
                Store (ST36, Index (DerefOf (Index (EWRY, One)), 0x1F))
                Store (ST37, Index (DerefOf (Index (EWRY, One)), 0x20))
                Store (ST38, Index (DerefOf (Index (EWRY, One)), 0x21))
                Store (ST39, Index (DerefOf (Index (EWRY, One)), 0x22))
                Store (ST70, Index (DerefOf (Index (EWRY, One)), 0x23))
                Store (ST71, Index (DerefOf (Index (EWRY, One)), 0x24))
                Store (ST72, Index (DerefOf (Index (EWRY, One)), 0x25))
                Store (ST73, Index (DerefOf (Index (EWRY, One)), 0x26))
                Store (ST74, Index (DerefOf (Index (EWRY, One)), 0x27))
                Store (ST75, Index (DerefOf (Index (EWRY, One)), 0x28))
                Store (ST76, Index (DerefOf (Index (EWRY, One)), 0x29))
                Store (ST77, Index (DerefOf (Index (EWRY, One)), 0x2A))
                Store (ST78, Index (DerefOf (Index (EWRY, One)), 0x2B))
                Store (ST79, Index (DerefOf (Index (EWRY, One)), 0x2C))
                Store (ST7A, Index (DerefOf (Index (EWRY, One)), 0x2D))
                Store (ST7B, Index (DerefOf (Index (EWRY, One)), 0x2E))
                Store (ST40, Index (DerefOf (Index (EWRY, One)), 0x2F))
                Store (ST41, Index (DerefOf (Index (EWRY, One)), 0x30))
                Store (ST42, Index (DerefOf (Index (EWRY, One)), 0x31))
                Store (ST43, Index (DerefOf (Index (EWRY, One)), 0x32))
                Store (ST44, Index (DerefOf (Index (EWRY, One)), 0x33))
                Store (ST45, Index (DerefOf (Index (EWRY, One)), 0x34))
                Store (ST46, Index (DerefOf (Index (EWRY, One)), 0x35))
                Store (ST47, Index (DerefOf (Index (EWRY, One)), 0x36))
                Store (ST48, Index (DerefOf (Index (EWRY, One)), 0x37))
                Store (ST49, Index (DerefOf (Index (EWRY, One)), 0x38))
                Store (ST80, Index (DerefOf (Index (EWRY, One)), 0x39))
                Store (ST81, Index (DerefOf (Index (EWRY, One)), 0x3A))
                Store (ST82, Index (DerefOf (Index (EWRY, One)), 0x3B))
                Store (ST83, Index (DerefOf (Index (EWRY, One)), 0x3C))
                Store (ST84, Index (DerefOf (Index (EWRY, One)), 0x3D))
                Store (ST85, Index (DerefOf (Index (EWRY, One)), 0x3E))
                Store (ST86, Index (DerefOf (Index (EWRY, One)), 0x3F))
                Store (ST87, Index (DerefOf (Index (EWRY, One)), 0x40))
                Store (ST88, Index (DerefOf (Index (EWRY, One)), 0x41))
                Store (ST89, Index (DerefOf (Index (EWRY, One)), 0x42))
                Store (ST8A, Index (DerefOf (Index (EWRY, One)), 0x43))
                Store (ST8B, Index (DerefOf (Index (EWRY, One)), 0x44))
                Store (CD30, Index (DerefOf (Index (EWRY, One)), 0x45))
                Store (CD31, Index (DerefOf (Index (EWRY, One)), 0x46))
                Store (CD32, Index (DerefOf (Index (EWRY, One)), 0x47))
                Store (CD33, Index (DerefOf (Index (EWRY, One)), 0x48))
                Store (CD34, Index (DerefOf (Index (EWRY, One)), 0x49))
                Store (CD35, Index (DerefOf (Index (EWRY, One)), 0x4A))
                Store (CD36, Index (DerefOf (Index (EWRY, One)), 0x4B))
                Store (CD37, Index (DerefOf (Index (EWRY, One)), 0x4C))
                Store (CD38, Index (DerefOf (Index (EWRY, One)), 0x4D))
                Store (CD39, Index (DerefOf (Index (EWRY, One)), 0x4E))
                Store (CD3A, Index (DerefOf (Index (EWRY, One)), 0x4F))
                Store (CD3B, Index (DerefOf (Index (EWRY, One)), 0x50))
                Store (CD3C, Index (DerefOf (Index (EWRY, One)), 0x51))
                Store (CD3D, Index (DerefOf (Index (EWRY, One)), 0x52))
                Store (CD3E, Index (DerefOf (Index (EWRY, One)), 0x53))
                Store (CD3F, Index (DerefOf (Index (EWRY, One)), 0x54))
                Store (CD40, Index (DerefOf (Index (EWRY, One)), 0x55))
                Store (CD41, Index (DerefOf (Index (EWRY, One)), 0x56))
                Store (CD42, Index (DerefOf (Index (EWRY, One)), 0x57))
                Store (CD43, Index (DerefOf (Index (EWRY, One)), 0x58))
                Store (CD44, Index (DerefOf (Index (EWRY, One)), 0x59))
                Store (CD45, Index (DerefOf (Index (EWRY, One)), 0x5A))
                Store (CD46, Index (DerefOf (Index (EWRY, One)), 0x5B))
                Store (CD47, Index (DerefOf (Index (EWRY, One)), 0x5C))
                Store (CD48, Index (DerefOf (Index (EWRY, One)), 0x5D))
                Store (CD49, Index (DerefOf (Index (EWRY, One)), 0x5E))
                Store (CD4A, Index (DerefOf (Index (EWRY, One)), 0x5F))
                Store (CD4B, Index (DerefOf (Index (EWRY, One)), 0x60))
                Store (CD4C, Index (DerefOf (Index (EWRY, One)), 0x61))
                Store (CD4D, Index (DerefOf (Index (EWRY, One)), 0x62))
                Store (CD4E, Index (DerefOf (Index (EWRY, One)), 0x63))
                Store (CD4F, Index (DerefOf (Index (EWRY, One)), 0x64))
                Store (CD50, Index (DerefOf (Index (EWRY, One)), 0x65))
                Store (CD51, Index (DerefOf (Index (EWRY, One)), 0x66))
                Store (CD52, Index (DerefOf (Index (EWRY, One)), 0x67))
                Store (CD53, Index (DerefOf (Index (EWRY, One)), 0x68))
                Store (CD54, Index (DerefOf (Index (EWRY, One)), 0x69))
                Store (CD55, Index (DerefOf (Index (EWRY, One)), 0x6A))
                Store (CD56, Index (DerefOf (Index (EWRY, One)), 0x6B))
                Store (CD57, Index (DerefOf (Index (EWRY, One)), 0x6C))
                Store (CD58, Index (DerefOf (Index (EWRY, One)), 0x6D))
                Store (CD59, Index (DerefOf (Index (EWRY, One)), 0x6E))
                Store (CD5A, Index (DerefOf (Index (EWRY, One)), 0x6F))
                Store (CD5B, Index (DerefOf (Index (EWRY, One)), 0x70))
                Store (CD5C, Index (DerefOf (Index (EWRY, One)), 0x71))
                Store (CD5D, Index (DerefOf (Index (EWRY, One)), 0x72))
                Store (CD5E, Index (DerefOf (Index (EWRY, One)), 0x73))
                Store (CD5F, Index (DerefOf (Index (EWRY, One)), 0x74))
                Store (CD60, Index (DerefOf (Index (EWRY, One)), 0x75))
                Store (CD61, Index (DerefOf (Index (EWRY, One)), 0x76))
                Store (CD62, Index (DerefOf (Index (EWRY, One)), 0x77))
                Store (CD63, Index (DerefOf (Index (EWRY, One)), 0x78))
                Store (CD64, Index (DerefOf (Index (EWRY, One)), 0x79))
                Store (CD65, Index (DerefOf (Index (EWRY, One)), 0x7A))
                Store (CD66, Index (DerefOf (Index (EWRY, One)), 0x7B))
                Store (CD67, Index (DerefOf (Index (EWRY, One)), 0x7C))
                Store (CD68, Index (DerefOf (Index (EWRY, One)), 0x7D))
                Store (CD69, Index (DerefOf (Index (EWRY, One)), 0x7E))
                Store (CD6A, Index (DerefOf (Index (EWRY, One)), 0x7F))
                Store (CD6B, Index (DerefOf (Index (EWRY, One)), 0x80))
                Store (CD6C, Index (DerefOf (Index (EWRY, One)), 0x81))
                Store (CD6D, Index (DerefOf (Index (EWRY, One)), 0x82))
                Store (CD6E, Index (DerefOf (Index (EWRY, One)), 0x83))
                Store (CD6F, Index (DerefOf (Index (EWRY, One)), 0x84))
                Store (CD70, Index (DerefOf (Index (EWRY, One)), 0x85))
                Store (CD71, Index (DerefOf (Index (EWRY, One)), 0x86))
                Return (EWRY)
            }

            Name (WGDY, Package (0x02)
            {
                0x03, 
                Package (0x4A)
                {
                    0x07, 
                    0x03, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                Store (SDGN, Index (DerefOf (Index (WGDY, One)), One))
                Store (SD11, Index (DerefOf (Index (WGDY, One)), 0x02))
                Store (SD12, Index (DerefOf (Index (WGDY, One)), 0x03))
                Store (SD13, Index (DerefOf (Index (WGDY, One)), 0x04))
                Store (SD14, Index (DerefOf (Index (WGDY, One)), 0x05))
                Store (SD15, Index (DerefOf (Index (WGDY, One)), 0x06))
                Store (SD16, Index (DerefOf (Index (WGDY, One)), 0x07))
                Store (SD17, Index (DerefOf (Index (WGDY, One)), 0x08))
                Store (SD18, Index (DerefOf (Index (WGDY, One)), 0x09))
                Store (SD19, Index (DerefOf (Index (WGDY, One)), 0x0A))
                Store (SD21, Index (DerefOf (Index (WGDY, One)), 0x0B))
                Store (SD22, Index (DerefOf (Index (WGDY, One)), 0x0C))
                Store (SD23, Index (DerefOf (Index (WGDY, One)), 0x0D))
                Store (SD24, Index (DerefOf (Index (WGDY, One)), 0x0E))
                Store (SD25, Index (DerefOf (Index (WGDY, One)), 0x0F))
                Store (SD26, Index (DerefOf (Index (WGDY, One)), 0x10))
                Store (SD27, Index (DerefOf (Index (WGDY, One)), 0x11))
                Store (SD28, Index (DerefOf (Index (WGDY, One)), 0x12))
                Store (SD29, Index (DerefOf (Index (WGDY, One)), 0x13))
                Store (SD31, Index (DerefOf (Index (WGDY, One)), 0x14))
                Store (SD32, Index (DerefOf (Index (WGDY, One)), 0x15))
                Store (SD33, Index (DerefOf (Index (WGDY, One)), 0x16))
                Store (SD34, Index (DerefOf (Index (WGDY, One)), 0x17))
                Store (SD35, Index (DerefOf (Index (WGDY, One)), 0x18))
                Store (SD36, Index (DerefOf (Index (WGDY, One)), 0x19))
                Store (SD37, Index (DerefOf (Index (WGDY, One)), 0x1A))
                Store (SD38, Index (DerefOf (Index (WGDY, One)), 0x1B))
                Store (SD39, Index (DerefOf (Index (WGDY, One)), 0x1C))
                Store (SD41, Index (DerefOf (Index (WGDY, One)), 0x1D))
                Store (SD42, Index (DerefOf (Index (WGDY, One)), 0x1E))
                Store (SD43, Index (DerefOf (Index (WGDY, One)), 0x1F))
                Store (SD44, Index (DerefOf (Index (WGDY, One)), 0x20))
                Store (SD45, Index (DerefOf (Index (WGDY, One)), 0x21))
                Store (SD46, Index (DerefOf (Index (WGDY, One)), 0x22))
                Store (SD47, Index (DerefOf (Index (WGDY, One)), 0x23))
                Store (SD48, Index (DerefOf (Index (WGDY, One)), 0x24))
                Store (SD49, Index (DerefOf (Index (WGDY, One)), 0x25))
                Store (SD51, Index (DerefOf (Index (WGDY, One)), 0x26))
                Store (SD52, Index (DerefOf (Index (WGDY, One)), 0x27))
                Store (SD53, Index (DerefOf (Index (WGDY, One)), 0x28))
                Store (SD54, Index (DerefOf (Index (WGDY, One)), 0x29))
                Store (SD55, Index (DerefOf (Index (WGDY, One)), 0x2A))
                Store (SD56, Index (DerefOf (Index (WGDY, One)), 0x2B))
                Store (SD57, Index (DerefOf (Index (WGDY, One)), 0x2C))
                Store (SD58, Index (DerefOf (Index (WGDY, One)), 0x2D))
                Store (SD59, Index (DerefOf (Index (WGDY, One)), 0x2E))
                Store (SD61, Index (DerefOf (Index (WGDY, One)), 0x2F))
                Store (SD62, Index (DerefOf (Index (WGDY, One)), 0x30))
                Store (SD63, Index (DerefOf (Index (WGDY, One)), 0x31))
                Store (SD64, Index (DerefOf (Index (WGDY, One)), 0x32))
                Store (SD65, Index (DerefOf (Index (WGDY, One)), 0x33))
                Store (SD66, Index (DerefOf (Index (WGDY, One)), 0x34))
                Store (SD67, Index (DerefOf (Index (WGDY, One)), 0x35))
                Store (SD68, Index (DerefOf (Index (WGDY, One)), 0x36))
                Store (SD69, Index (DerefOf (Index (WGDY, One)), 0x37))
                Store (SD71, Index (DerefOf (Index (WGDY, One)), 0x38))
                Store (SD72, Index (DerefOf (Index (WGDY, One)), 0x39))
                Store (SD73, Index (DerefOf (Index (WGDY, One)), 0x3A))
                Store (SD74, Index (DerefOf (Index (WGDY, One)), 0x3B))
                Store (SD75, Index (DerefOf (Index (WGDY, One)), 0x3C))
                Store (SD76, Index (DerefOf (Index (WGDY, One)), 0x3D))
                Store (SD77, Index (DerefOf (Index (WGDY, One)), 0x3E))
                Store (SD78, Index (DerefOf (Index (WGDY, One)), 0x3F))
                Store (SD79, Index (DerefOf (Index (WGDY, One)), 0x40))
                Store (SD81, Index (DerefOf (Index (WGDY, One)), 0x41))
                Store (SD82, Index (DerefOf (Index (WGDY, One)), 0x42))
                Store (SD83, Index (DerefOf (Index (WGDY, One)), 0x43))
                Store (SD84, Index (DerefOf (Index (WGDY, One)), 0x44))
                Store (SD85, Index (DerefOf (Index (WGDY, One)), 0x45))
                Store (SD86, Index (DerefOf (Index (WGDY, One)), 0x46))
                Store (SD87, Index (DerefOf (Index (WGDY, One)), 0x47))
                Store (SD88, Index (DerefOf (Index (WGDY, One)), 0x48))
                Store (SD89, Index (DerefOf (Index (WGDY, One)), 0x49))
                Return (WGDY)
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                Return (ECKY)
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                Store (WAGE, Index (DerefOf (Index (PPAY, One)), One))
                Store (AGA1, Index (DerefOf (Index (PPAY, One)), 0x02))
                Store (AGA2, Index (DerefOf (Index (PPAY, One)), 0x03))
                Store (AGA3, Index (DerefOf (Index (PPAY, One)), 0x04))
                Store (AGA4, Index (DerefOf (Index (PPAY, One)), 0x05))
                Store (AGA5, Index (DerefOf (Index (PPAY, One)), 0x06))
                Store (AGA6, Index (DerefOf (Index (PPAY, One)), 0x07))
                Store (AGA7, Index (DerefOf (Index (PPAY, One)), 0x08))
                Store (AGA8, Index (DerefOf (Index (PPAY, One)), 0x09))
                Store (AGA9, Index (DerefOf (Index (PPAY, One)), 0x0A))
                Store (AGAA, Index (DerefOf (Index (PPAY, One)), 0x0B))
                Store (AGAB, Index (DerefOf (Index (PPAY, One)), 0x0C))
                Store (AGB1, Index (DerefOf (Index (PPAY, One)), 0x0D))
                Store (AGB2, Index (DerefOf (Index (PPAY, One)), 0x0E))
                Store (AGB3, Index (DerefOf (Index (PPAY, One)), 0x0F))
                Store (AGB4, Index (DerefOf (Index (PPAY, One)), 0x10))
                Store (AGB5, Index (DerefOf (Index (PPAY, One)), 0x11))
                Store (AGB6, Index (DerefOf (Index (PPAY, One)), 0x12))
                Store (AGB7, Index (DerefOf (Index (PPAY, One)), 0x13))
                Store (AGB8, Index (DerefOf (Index (PPAY, One)), 0x14))
                Store (AGB9, Index (DerefOf (Index (PPAY, One)), 0x15))
                Store (AGBA, Index (DerefOf (Index (PPAY, One)), 0x16))
                Store (AGBB, Index (DerefOf (Index (PPAY, One)), 0x17))
                Return (PPAY)
            }

            Name (WTSY, Package (0x02)
            {
                One, 
                Package (0x13)
                {
                    0x07, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                }
            })
            Method (WTAS, 0, Serialized)
            {
                Store (WTSV, Index (DerefOf (Index (WTSY, One)), One))
                Store (WTLE, Index (DerefOf (Index (WTSY, One)), 0x02))
                Store (BL01, Index (DerefOf (Index (WTSY, One)), 0x03))
                Store (BL02, Index (DerefOf (Index (WTSY, One)), 0x04))
                Store (BL03, Index (DerefOf (Index (WTSY, One)), 0x05))
                Store (BL04, Index (DerefOf (Index (WTSY, One)), 0x06))
                Store (BL05, Index (DerefOf (Index (WTSY, One)), 0x07))
                Store (BL06, Index (DerefOf (Index (WTSY, One)), 0x08))
                Store (BL07, Index (DerefOf (Index (WTSY, One)), 0x09))
                Store (BL08, Index (DerefOf (Index (WTSY, One)), 0x0A))
                Store (BL09, Index (DerefOf (Index (WTSY, One)), 0x0B))
                Store (BL10, Index (DerefOf (Index (WTSY, One)), 0x0C))
                Store (BL11, Index (DerefOf (Index (WTSY, One)), 0x0D))
                Store (BL12, Index (DerefOf (Index (WTSY, One)), 0x0E))
                Store (BL13, Index (DerefOf (Index (WTSY, One)), 0x0F))
                Store (BL14, Index (DerefOf (Index (WTSY, One)), 0x10))
                Store (BL15, Index (DerefOf (Index (WTSY, One)), 0x11))
                Store (BL16, Index (DerefOf (Index (WTSY, One)), 0x12))
                Return (WTSY)
            }

            Name (WAIY, Package (0x02)
            {
                Zero, 
                Package (0x04)
                {
                    0x07, 
                    Zero, 
                    Zero, 
                    Zero
                }
            })
            Method (WAIS, 0, Serialized)
            {
                Store (WLBI, Index (DerefOf (Index (WAIY, One)), One))
                Store (WHBI, Index (DerefOf (Index (WAIY, One)), 0x02))
                Return (WAIY)
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                Return (SADX)
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX)
            }
        }

        If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
        {
            Method (FHRF, 1, NotSerialized)
            {
                If (LNotEqual (GGOV (PRST), WPRP))
                {
                    DL23 ()
                    SGOV (PRST, WPRP)
                }
                Else
                {
                    ADBG ("Assume WWAN DL23() is already done")
                }

                Sleep (TR2B)
                SGOV (WBRS, PBRS)
                If (LEqual (Arg0, Zero))
                {
                    Sleep (TBTG)
                }
                ElseIf (LEqual (Arg0, One))
                {
                    SPCO (WCLK, Zero)
                    Sleep (TB2F)
                    SGOV (WFCP, And (Not (PFCP), One))
                    Sleep (TFDI)
                }
                Else
                {
                }
            }

            Method (SHRF, 0, NotSerialized)
            {
                PSD0 (SLOT)
                SPCO (WCLK, One)
                SGOV (WFCP, PFCP)
                Sleep (TN2B)
                SGOV (WBRS, And (Not (PBRS), One))
                Sleep (TB2R)
                SGOV (PRST, And (Not (WPRP), One))
                L23D ()
            }

            Method (DOSV, 0, NotSerialized)
            {
                Store (Zero, Local0)
                While (LAnd (LNotEqual (SVID, WSID), LLess (Local0, WSTO)))
                {
                    Increment (Local0)
                    Sleep (One)
                }
            }

            Method (_RST, 0, Serialized)  // _RST: Device Reset
            {
                If (LEqual (WWEN, 0x02))
                {
                    Store (Acquire (WWMT, 0x03E8), Local0)
                    If (LEqual (Local0, Zero))
                    {
                        FHRF (Zero)
                        SHRF ()
                        Release (WWMT)
                        DOSV ()
                    }
                }
                Else
                {
                    SGOV (WBRS, PBRS)
                    Sleep (0xC8)
                    Notify (PXSX, One)
                    SGOV (PRST, And (Not (WPRP), One))
                    SGOV (WBRS, And (Not (PBRS), One))
                    Sleep (0xC8)
                    Store (Zero, Local0)
                    While (LEqual (LASX, Zero))
                    {
                        If (LGreater (Local0, 0x14))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Increment (Local0)
                    }

                    Sleep (0x0A)
                    Notify (PXSX, One)
                }
            }

            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    Store (Acquire (WWMT, 0x03E8), Local0)
                    If (LEqual (Local0, Zero))
                    {
                        FHRF (One)
                        SHRF ()
                        Release (WWMT)
                        DOSV ()
                    }
                }
            }
        }

        If (LOr (WIST (), LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT))))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If (And (DCAP, 0x10000000))
                    {
                        Store (DCTR, Local0)
                        Or (Local0, 0x8000, Local0)
                        Store (Local0, DCTR)
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If (WIST ())
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }

            Method (IFUN, 4, Serialized)
            {
                If (LEqual (Arg2, Zero))
                {
                    If (LEqual (Arg1, Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x0F                                           
                        })
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }

                If (LEqual (Arg2, One))
                {
                    ShiftLeft (CVPR, Zero, Local0)
                    Return (Local0)
                }

                If (LEqual (Arg2, 0x02))
                {
                    CreateWordField (Arg3, Zero, CMDT)
                    CreateWordField (Arg3, 0x02, CMDP)
                    If (LEqual (CMDT, One))
                    {
                        If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                        {
                            Return (^^^CNVW.RSTT)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (CMDT, 0x02))
                    {
                        If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                        {
                            Store (CMDP, ^^^CNVW.RSTT)
                        }

                        Return (Zero)
                    }

                    If (LEqual (CMDT, 0x03))
                    {
                        If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                        {
                            Return (^^^CNVW.PRRS)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Return (Zero)
                }

                If (LEqual (Arg2, 0x03))
                {
                    If (LEqual (CRFI, One))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (IDSM, 1, Serialized)
            {
                If (LEqual (Arg0, ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd")))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (EFUN, 4, Serialized)
            {
                If (LEqual (Arg2, Zero))
                {
                    If (LEqual (Arg1, Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                     
                        })
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }

                If (LEqual (Arg2, One))
                {
                    Store (ACSD, Local0)
                    Return (Local0)
                }

                If (LEqual (Arg2, 0x02))
                {
                    Store (I5BS, Local0)
                    Return (Local0)
                }

                If (LEqual (Arg2, 0x03))
                {
                    Store (UHBS, Local0)
                    Return (Local0)
                }

                If (LEqual (Arg2, 0x06))
                {
                    Store (AXMU, Local0)
                    ShiftLeft (Local0, One, Local0)
                    Or (Local0, AXSU, Local0)
                    Store (AXMR, Local1)
                    ShiftLeft (Local1, One, Local1)
                    Or (Local1, AXSR, Local1)
                    ShiftLeft (Local1, 0x02, Local1)
                    Or (Local0, Local1, Local0)
                    Return (Local0)
                }

                If (LEqual (Arg2, 0x04))
                {
                    Return (WFRC)
                }

                If (LEqual (Arg2, 0x05))
                {
                    Return (WFUC)
                }

                If (LEqual (Arg2, 0x07))
                {
                    Return (UNI4)
                }

                If (LEqual (Arg2, 0x08))
                {
                    Return (WFIC)
                }

                Return (Zero)
            }

            Method (EDSM, 1, Serialized)
            {
                If (LEqual (Arg0, ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (WIST ())
                {
                    If (EDSM (Arg0))
                    {
                        Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                    }

                    If (IDSM (Arg0))
                    {
                        Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                    }
                }

                If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                {
                    If (LEqual (Arg0, ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d")))
                    {
                        If (LEqual (Arg2, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x09                                           
                            })
                        }

                        If (LEqual (Arg2, One)){}
                        If (LEqual (Arg2, 0x02)){}
                        If (LEqual (Arg2, 0x03))
                        {
                            If (LEqual (WRTO, One)){}
                            ElseIf (LEqual (WRTO, 0x03)){}
                            Else
                            {
                            }

                            Return (WRTO)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP10.PXSX))
    {
        Scope (_SB.PC00.RP10.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, Add (GMIO (^_ADR, _ADR), 0x44), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                    Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                    Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                    Return (SPLX)
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                    Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                    Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                    Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                    Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                    Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                    Return (WANX)
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                    Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                    Return (WRDX)
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    Store (STXE, Index (DerefOf (Index (WRDY, One)), One))
                    Store (ST10, Index (DerefOf (Index (WRDY, One)), 0x02))
                    Store (ST11, Index (DerefOf (Index (WRDY, One)), 0x03))
                    Store (ST12, Index (DerefOf (Index (WRDY, One)), 0x04))
                    Store (ST13, Index (DerefOf (Index (WRDY, One)), 0x05))
                    Store (ST14, Index (DerefOf (Index (WRDY, One)), 0x06))
                    Store (ST15, Index (DerefOf (Index (WRDY, One)), 0x07))
                    Store (ST16, Index (DerefOf (Index (WRDY, One)), 0x08))
                    Store (ST17, Index (DerefOf (Index (WRDY, One)), 0x09))
                    Store (ST18, Index (DerefOf (Index (WRDY, One)), 0x0A))
                    Store (ST19, Index (DerefOf (Index (WRDY, One)), 0x0B))
                    Store (ST50, Index (DerefOf (Index (WRDY, One)), 0x0C))
                    Store (ST51, Index (DerefOf (Index (WRDY, One)), 0x0D))
                    Store (ST52, Index (DerefOf (Index (WRDY, One)), 0x0E))
                    Store (ST53, Index (DerefOf (Index (WRDY, One)), 0x0F))
                    Store (ST54, Index (DerefOf (Index (WRDY, One)), 0x10))
                    Store (ST55, Index (DerefOf (Index (WRDY, One)), 0x11))
                    Store (ST56, Index (DerefOf (Index (WRDY, One)), 0x12))
                    Store (ST57, Index (DerefOf (Index (WRDY, One)), 0x13))
                    Store (ST58, Index (DerefOf (Index (WRDY, One)), 0x14))
                    Store (ST59, Index (DerefOf (Index (WRDY, One)), 0x15))
                    Store (ST5A, Index (DerefOf (Index (WRDY, One)), 0x16))
                    Store (ST5B, Index (DerefOf (Index (WRDY, One)), 0x17))
                    Store (CD10, Index (DerefOf (Index (WRDY, One)), 0x18))
                    Store (CD11, Index (DerefOf (Index (WRDY, One)), 0x19))
                    Store (CD12, Index (DerefOf (Index (WRDY, One)), 0x1A))
                    Store (CD13, Index (DerefOf (Index (WRDY, One)), 0x1B))
                    Store (CD14, Index (DerefOf (Index (WRDY, One)), 0x1C))
                    Store (CD15, Index (DerefOf (Index (WRDY, One)), 0x1D))
                    Store (CD16, Index (DerefOf (Index (WRDY, One)), 0x1E))
                    Store (CD17, Index (DerefOf (Index (WRDY, One)), 0x1F))
                    Store (CD18, Index (DerefOf (Index (WRDY, One)), 0x20))
                    Store (CD19, Index (DerefOf (Index (WRDY, One)), 0x21))
                    Store (CD1A, Index (DerefOf (Index (WRDY, One)), 0x22))
                    Store (CD20, Index (DerefOf (Index (WRDY, One)), 0x23))
                    Store (CD21, Index (DerefOf (Index (WRDY, One)), 0x24))
                    Store (CD22, Index (DerefOf (Index (WRDY, One)), 0x25))
                    Store (CD23, Index (DerefOf (Index (WRDY, One)), 0x26))
                    Store (CD24, Index (DerefOf (Index (WRDY, One)), 0x27))
                    Store (CD25, Index (DerefOf (Index (WRDY, One)), 0x28))
                    Store (CD26, Index (DerefOf (Index (WRDY, One)), 0x29))
                    Store (CD27, Index (DerefOf (Index (WRDY, One)), 0x2A))
                    Store (CD28, Index (DerefOf (Index (WRDY, One)), 0x2B))
                    Store (CD29, Index (DerefOf (Index (WRDY, One)), 0x2C))
                    Store (CD2A, Index (DerefOf (Index (WRDY, One)), 0x2D))
                    Return (WRDY)
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    Store (STDE, Index (DerefOf (Index (EWRY, One)), One))
                    Store (STRS, Index (DerefOf (Index (EWRY, One)), 0x02))
                    Store (ST20, Index (DerefOf (Index (EWRY, One)), 0x03))
                    Store (ST21, Index (DerefOf (Index (EWRY, One)), 0x04))
                    Store (ST22, Index (DerefOf (Index (EWRY, One)), 0x05))
                    Store (ST23, Index (DerefOf (Index (EWRY, One)), 0x06))
                    Store (ST24, Index (DerefOf (Index (EWRY, One)), 0x07))
                    Store (ST25, Index (DerefOf (Index (EWRY, One)), 0x08))
                    Store (ST26, Index (DerefOf (Index (EWRY, One)), 0x09))
                    Store (ST27, Index (DerefOf (Index (EWRY, One)), 0x0A))
                    Store (ST28, Index (DerefOf (Index (EWRY, One)), 0x0B))
                    Store (ST29, Index (DerefOf (Index (EWRY, One)), 0x0C))
                    Store (ST60, Index (DerefOf (Index (EWRY, One)), 0x0D))
                    Store (ST61, Index (DerefOf (Index (EWRY, One)), 0x0E))
                    Store (ST62, Index (DerefOf (Index (EWRY, One)), 0x0F))
                    Store (ST63, Index (DerefOf (Index (EWRY, One)), 0x10))
                    Store (ST64, Index (DerefOf (Index (EWRY, One)), 0x11))
                    Store (ST65, Index (DerefOf (Index (EWRY, One)), 0x12))
                    Store (ST66, Index (DerefOf (Index (EWRY, One)), 0x13))
                    Store (ST67, Index (DerefOf (Index (EWRY, One)), 0x14))
                    Store (ST68, Index (DerefOf (Index (EWRY, One)), 0x15))
                    Store (ST69, Index (DerefOf (Index (EWRY, One)), 0x16))
                    Store (ST6A, Index (DerefOf (Index (EWRY, One)), 0x17))
                    Store (ST6B, Index (DerefOf (Index (EWRY, One)), 0x18))
                    Store (ST30, Index (DerefOf (Index (EWRY, One)), 0x19))
                    Store (ST31, Index (DerefOf (Index (EWRY, One)), 0x1A))
                    Store (ST32, Index (DerefOf (Index (EWRY, One)), 0x1B))
                    Store (ST33, Index (DerefOf (Index (EWRY, One)), 0x1C))
                    Store (ST34, Index (DerefOf (Index (EWRY, One)), 0x1D))
                    Store (ST35, Index (DerefOf (Index (EWRY, One)), 0x1E))
                    Store (ST36, Index (DerefOf (Index (EWRY, One)), 0x1F))
                    Store (ST37, Index (DerefOf (Index (EWRY, One)), 0x20))
                    Store (ST38, Index (DerefOf (Index (EWRY, One)), 0x21))
                    Store (ST39, Index (DerefOf (Index (EWRY, One)), 0x22))
                    Store (ST70, Index (DerefOf (Index (EWRY, One)), 0x23))
                    Store (ST71, Index (DerefOf (Index (EWRY, One)), 0x24))
                    Store (ST72, Index (DerefOf (Index (EWRY, One)), 0x25))
                    Store (ST73, Index (DerefOf (Index (EWRY, One)), 0x26))
                    Store (ST74, Index (DerefOf (Index (EWRY, One)), 0x27))
                    Store (ST75, Index (DerefOf (Index (EWRY, One)), 0x28))
                    Store (ST76, Index (DerefOf (Index (EWRY, One)), 0x29))
                    Store (ST77, Index (DerefOf (Index (EWRY, One)), 0x2A))
                    Store (ST78, Index (DerefOf (Index (EWRY, One)), 0x2B))
                    Store (ST79, Index (DerefOf (Index (EWRY, One)), 0x2C))
                    Store (ST7A, Index (DerefOf (Index (EWRY, One)), 0x2D))
                    Store (ST7B, Index (DerefOf (Index (EWRY, One)), 0x2E))
                    Store (ST40, Index (DerefOf (Index (EWRY, One)), 0x2F))
                    Store (ST41, Index (DerefOf (Index (EWRY, One)), 0x30))
                    Store (ST42, Index (DerefOf (Index (EWRY, One)), 0x31))
                    Store (ST43, Index (DerefOf (Index (EWRY, One)), 0x32))
                    Store (ST44, Index (DerefOf (Index (EWRY, One)), 0x33))
                    Store (ST45, Index (DerefOf (Index (EWRY, One)), 0x34))
                    Store (ST46, Index (DerefOf (Index (EWRY, One)), 0x35))
                    Store (ST47, Index (DerefOf (Index (EWRY, One)), 0x36))
                    Store (ST48, Index (DerefOf (Index (EWRY, One)), 0x37))
                    Store (ST49, Index (DerefOf (Index (EWRY, One)), 0x38))
                    Store (ST80, Index (DerefOf (Index (EWRY, One)), 0x39))
                    Store (ST81, Index (DerefOf (Index (EWRY, One)), 0x3A))
                    Store (ST82, Index (DerefOf (Index (EWRY, One)), 0x3B))
                    Store (ST83, Index (DerefOf (Index (EWRY, One)), 0x3C))
                    Store (ST84, Index (DerefOf (Index (EWRY, One)), 0x3D))
                    Store (ST85, Index (DerefOf (Index (EWRY, One)), 0x3E))
                    Store (ST86, Index (DerefOf (Index (EWRY, One)), 0x3F))
                    Store (ST87, Index (DerefOf (Index (EWRY, One)), 0x40))
                    Store (ST88, Index (DerefOf (Index (EWRY, One)), 0x41))
                    Store (ST89, Index (DerefOf (Index (EWRY, One)), 0x42))
                    Store (ST8A, Index (DerefOf (Index (EWRY, One)), 0x43))
                    Store (ST8B, Index (DerefOf (Index (EWRY, One)), 0x44))
                    Store (CD30, Index (DerefOf (Index (EWRY, One)), 0x45))
                    Store (CD31, Index (DerefOf (Index (EWRY, One)), 0x46))
                    Store (CD32, Index (DerefOf (Index (EWRY, One)), 0x47))
                    Store (CD33, Index (DerefOf (Index (EWRY, One)), 0x48))
                    Store (CD34, Index (DerefOf (Index (EWRY, One)), 0x49))
                    Store (CD35, Index (DerefOf (Index (EWRY, One)), 0x4A))
                    Store (CD36, Index (DerefOf (Index (EWRY, One)), 0x4B))
                    Store (CD37, Index (DerefOf (Index (EWRY, One)), 0x4C))
                    Store (CD38, Index (DerefOf (Index (EWRY, One)), 0x4D))
                    Store (CD39, Index (DerefOf (Index (EWRY, One)), 0x4E))
                    Store (CD3A, Index (DerefOf (Index (EWRY, One)), 0x4F))
                    Store (CD3B, Index (DerefOf (Index (EWRY, One)), 0x50))
                    Store (CD3C, Index (DerefOf (Index (EWRY, One)), 0x51))
                    Store (CD3D, Index (DerefOf (Index (EWRY, One)), 0x52))
                    Store (CD3E, Index (DerefOf (Index (EWRY, One)), 0x53))
                    Store (CD3F, Index (DerefOf (Index (EWRY, One)), 0x54))
                    Store (CD40, Index (DerefOf (Index (EWRY, One)), 0x55))
                    Store (CD41, Index (DerefOf (Index (EWRY, One)), 0x56))
                    Store (CD42, Index (DerefOf (Index (EWRY, One)), 0x57))
                    Store (CD43, Index (DerefOf (Index (EWRY, One)), 0x58))
                    Store (CD44, Index (DerefOf (Index (EWRY, One)), 0x59))
                    Store (CD45, Index (DerefOf (Index (EWRY, One)), 0x5A))
                    Store (CD46, Index (DerefOf (Index (EWRY, One)), 0x5B))
                    Store (CD47, Index (DerefOf (Index (EWRY, One)), 0x5C))
                    Store (CD48, Index (DerefOf (Index (EWRY, One)), 0x5D))
                    Store (CD49, Index (DerefOf (Index (EWRY, One)), 0x5E))
                    Store (CD4A, Index (DerefOf (Index (EWRY, One)), 0x5F))
                    Store (CD4B, Index (DerefOf (Index (EWRY, One)), 0x60))
                    Store (CD4C, Index (DerefOf (Index (EWRY, One)), 0x61))
                    Store (CD4D, Index (DerefOf (Index (EWRY, One)), 0x62))
                    Store (CD4E, Index (DerefOf (Index (EWRY, One)), 0x63))
                    Store (CD4F, Index (DerefOf (Index (EWRY, One)), 0x64))
                    Store (CD50, Index (DerefOf (Index (EWRY, One)), 0x65))
                    Store (CD51, Index (DerefOf (Index (EWRY, One)), 0x66))
                    Store (CD52, Index (DerefOf (Index (EWRY, One)), 0x67))
                    Store (CD53, Index (DerefOf (Index (EWRY, One)), 0x68))
                    Store (CD54, Index (DerefOf (Index (EWRY, One)), 0x69))
                    Store (CD55, Index (DerefOf (Index (EWRY, One)), 0x6A))
                    Store (CD56, Index (DerefOf (Index (EWRY, One)), 0x6B))
                    Store (CD57, Index (DerefOf (Index (EWRY, One)), 0x6C))
                    Store (CD58, Index (DerefOf (Index (EWRY, One)), 0x6D))
                    Store (CD59, Index (DerefOf (Index (EWRY, One)), 0x6E))
                    Store (CD5A, Index (DerefOf (Index (EWRY, One)), 0x6F))
                    Store (CD5B, Index (DerefOf (Index (EWRY, One)), 0x70))
                    Store (CD5C, Index (DerefOf (Index (EWRY, One)), 0x71))
                    Store (CD5D, Index (DerefOf (Index (EWRY, One)), 0x72))
                    Store (CD5E, Index (DerefOf (Index (EWRY, One)), 0x73))
                    Store (CD5F, Index (DerefOf (Index (EWRY, One)), 0x74))
                    Store (CD60, Index (DerefOf (Index (EWRY, One)), 0x75))
                    Store (CD61, Index (DerefOf (Index (EWRY, One)), 0x76))
                    Store (CD62, Index (DerefOf (Index (EWRY, One)), 0x77))
                    Store (CD63, Index (DerefOf (Index (EWRY, One)), 0x78))
                    Store (CD64, Index (DerefOf (Index (EWRY, One)), 0x79))
                    Store (CD65, Index (DerefOf (Index (EWRY, One)), 0x7A))
                    Store (CD66, Index (DerefOf (Index (EWRY, One)), 0x7B))
                    Store (CD67, Index (DerefOf (Index (EWRY, One)), 0x7C))
                    Store (CD68, Index (DerefOf (Index (EWRY, One)), 0x7D))
                    Store (CD69, Index (DerefOf (Index (EWRY, One)), 0x7E))
                    Store (CD6A, Index (DerefOf (Index (EWRY, One)), 0x7F))
                    Store (CD6B, Index (DerefOf (Index (EWRY, One)), 0x80))
                    Store (CD6C, Index (DerefOf (Index (EWRY, One)), 0x81))
                    Store (CD6D, Index (DerefOf (Index (EWRY, One)), 0x82))
                    Store (CD6E, Index (DerefOf (Index (EWRY, One)), 0x83))
                    Store (CD6F, Index (DerefOf (Index (EWRY, One)), 0x84))
                    Store (CD70, Index (DerefOf (Index (EWRY, One)), 0x85))
                    Store (CD71, Index (DerefOf (Index (EWRY, One)), 0x86))
                    Return (EWRY)
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    Store (SDGN, Index (DerefOf (Index (WGDY, One)), One))
                    Store (SD11, Index (DerefOf (Index (WGDY, One)), 0x02))
                    Store (SD12, Index (DerefOf (Index (WGDY, One)), 0x03))
                    Store (SD13, Index (DerefOf (Index (WGDY, One)), 0x04))
                    Store (SD14, Index (DerefOf (Index (WGDY, One)), 0x05))
                    Store (SD15, Index (DerefOf (Index (WGDY, One)), 0x06))
                    Store (SD16, Index (DerefOf (Index (WGDY, One)), 0x07))
                    Store (SD17, Index (DerefOf (Index (WGDY, One)), 0x08))
                    Store (SD18, Index (DerefOf (Index (WGDY, One)), 0x09))
                    Store (SD19, Index (DerefOf (Index (WGDY, One)), 0x0A))
                    Store (SD21, Index (DerefOf (Index (WGDY, One)), 0x0B))
                    Store (SD22, Index (DerefOf (Index (WGDY, One)), 0x0C))
                    Store (SD23, Index (DerefOf (Index (WGDY, One)), 0x0D))
                    Store (SD24, Index (DerefOf (Index (WGDY, One)), 0x0E))
                    Store (SD25, Index (DerefOf (Index (WGDY, One)), 0x0F))
                    Store (SD26, Index (DerefOf (Index (WGDY, One)), 0x10))
                    Store (SD27, Index (DerefOf (Index (WGDY, One)), 0x11))
                    Store (SD28, Index (DerefOf (Index (WGDY, One)), 0x12))
                    Store (SD29, Index (DerefOf (Index (WGDY, One)), 0x13))
                    Store (SD31, Index (DerefOf (Index (WGDY, One)), 0x14))
                    Store (SD32, Index (DerefOf (Index (WGDY, One)), 0x15))
                    Store (SD33, Index (DerefOf (Index (WGDY, One)), 0x16))
                    Store (SD34, Index (DerefOf (Index (WGDY, One)), 0x17))
                    Store (SD35, Index (DerefOf (Index (WGDY, One)), 0x18))
                    Store (SD36, Index (DerefOf (Index (WGDY, One)), 0x19))
                    Store (SD37, Index (DerefOf (Index (WGDY, One)), 0x1A))
                    Store (SD38, Index (DerefOf (Index (WGDY, One)), 0x1B))
                    Store (SD39, Index (DerefOf (Index (WGDY, One)), 0x1C))
                    Store (SD41, Index (DerefOf (Index (WGDY, One)), 0x1D))
                    Store (SD42, Index (DerefOf (Index (WGDY, One)), 0x1E))
                    Store (SD43, Index (DerefOf (Index (WGDY, One)), 0x1F))
                    Store (SD44, Index (DerefOf (Index (WGDY, One)), 0x20))
                    Store (SD45, Index (DerefOf (Index (WGDY, One)), 0x21))
                    Store (SD46, Index (DerefOf (Index (WGDY, One)), 0x22))
                    Store (SD47, Index (DerefOf (Index (WGDY, One)), 0x23))
                    Store (SD48, Index (DerefOf (Index (WGDY, One)), 0x24))
                    Store (SD49, Index (DerefOf (Index (WGDY, One)), 0x25))
                    Store (SD51, Index (DerefOf (Index (WGDY, One)), 0x26))
                    Store (SD52, Index (DerefOf (Index (WGDY, One)), 0x27))
                    Store (SD53, Index (DerefOf (Index (WGDY, One)), 0x28))
                    Store (SD54, Index (DerefOf (Index (WGDY, One)), 0x29))
                    Store (SD55, Index (DerefOf (Index (WGDY, One)), 0x2A))
                    Store (SD56, Index (DerefOf (Index (WGDY, One)), 0x2B))
                    Store (SD57, Index (DerefOf (Index (WGDY, One)), 0x2C))
                    Store (SD58, Index (DerefOf (Index (WGDY, One)), 0x2D))
                    Store (SD59, Index (DerefOf (Index (WGDY, One)), 0x2E))
                    Store (SD61, Index (DerefOf (Index (WGDY, One)), 0x2F))
                    Store (SD62, Index (DerefOf (Index (WGDY, One)), 0x30))
                    Store (SD63, Index (DerefOf (Index (WGDY, One)), 0x31))
                    Store (SD64, Index (DerefOf (Index (WGDY, One)), 0x32))
                    Store (SD65, Index (DerefOf (Index (WGDY, One)), 0x33))
                    Store (SD66, Index (DerefOf (Index (WGDY, One)), 0x34))
                    Store (SD67, Index (DerefOf (Index (WGDY, One)), 0x35))
                    Store (SD68, Index (DerefOf (Index (WGDY, One)), 0x36))
                    Store (SD69, Index (DerefOf (Index (WGDY, One)), 0x37))
                    Store (SD71, Index (DerefOf (Index (WGDY, One)), 0x38))
                    Store (SD72, Index (DerefOf (Index (WGDY, One)), 0x39))
                    Store (SD73, Index (DerefOf (Index (WGDY, One)), 0x3A))
                    Store (SD74, Index (DerefOf (Index (WGDY, One)), 0x3B))
                    Store (SD75, Index (DerefOf (Index (WGDY, One)), 0x3C))
                    Store (SD76, Index (DerefOf (Index (WGDY, One)), 0x3D))
                    Store (SD77, Index (DerefOf (Index (WGDY, One)), 0x3E))
                    Store (SD78, Index (DerefOf (Index (WGDY, One)), 0x3F))
                    Store (SD79, Index (DerefOf (Index (WGDY, One)), 0x40))
                    Store (SD81, Index (DerefOf (Index (WGDY, One)), 0x41))
                    Store (SD82, Index (DerefOf (Index (WGDY, One)), 0x42))
                    Store (SD83, Index (DerefOf (Index (WGDY, One)), 0x43))
                    Store (SD84, Index (DerefOf (Index (WGDY, One)), 0x44))
                    Store (SD85, Index (DerefOf (Index (WGDY, One)), 0x45))
                    Store (SD86, Index (DerefOf (Index (WGDY, One)), 0x46))
                    Store (SD87, Index (DerefOf (Index (WGDY, One)), 0x47))
                    Store (SD88, Index (DerefOf (Index (WGDY, One)), 0x48))
                    Store (SD89, Index (DerefOf (Index (WGDY, One)), 0x49))
                    Return (WGDY)
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                    Return (ECKY)
                }

                Name (PPAY, Package (0x02)
                {
                    One, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    Store (WAGE, Index (DerefOf (Index (PPAY, One)), One))
                    Store (AGA1, Index (DerefOf (Index (PPAY, One)), 0x02))
                    Store (AGA2, Index (DerefOf (Index (PPAY, One)), 0x03))
                    Store (AGA3, Index (DerefOf (Index (PPAY, One)), 0x04))
                    Store (AGA4, Index (DerefOf (Index (PPAY, One)), 0x05))
                    Store (AGA5, Index (DerefOf (Index (PPAY, One)), 0x06))
                    Store (AGA6, Index (DerefOf (Index (PPAY, One)), 0x07))
                    Store (AGA7, Index (DerefOf (Index (PPAY, One)), 0x08))
                    Store (AGA8, Index (DerefOf (Index (PPAY, One)), 0x09))
                    Store (AGA9, Index (DerefOf (Index (PPAY, One)), 0x0A))
                    Store (AGAA, Index (DerefOf (Index (PPAY, One)), 0x0B))
                    Store (AGAB, Index (DerefOf (Index (PPAY, One)), 0x0C))
                    Store (AGB1, Index (DerefOf (Index (PPAY, One)), 0x0D))
                    Store (AGB2, Index (DerefOf (Index (PPAY, One)), 0x0E))
                    Store (AGB3, Index (DerefOf (Index (PPAY, One)), 0x0F))
                    Store (AGB4, Index (DerefOf (Index (PPAY, One)), 0x10))
                    Store (AGB5, Index (DerefOf (Index (PPAY, One)), 0x11))
                    Store (AGB6, Index (DerefOf (Index (PPAY, One)), 0x12))
                    Store (AGB7, Index (DerefOf (Index (PPAY, One)), 0x13))
                    Store (AGB8, Index (DerefOf (Index (PPAY, One)), 0x14))
                    Store (AGB9, Index (DerefOf (Index (PPAY, One)), 0x15))
                    Store (AGBA, Index (DerefOf (Index (PPAY, One)), 0x16))
                    Store (AGBB, Index (DerefOf (Index (PPAY, One)), 0x17))
                    Return (PPAY)
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    Store (WTSV, Index (DerefOf (Index (WTSY, One)), One))
                    Store (WTLE, Index (DerefOf (Index (WTSY, One)), 0x02))
                    Store (BL01, Index (DerefOf (Index (WTSY, One)), 0x03))
                    Store (BL02, Index (DerefOf (Index (WTSY, One)), 0x04))
                    Store (BL03, Index (DerefOf (Index (WTSY, One)), 0x05))
                    Store (BL04, Index (DerefOf (Index (WTSY, One)), 0x06))
                    Store (BL05, Index (DerefOf (Index (WTSY, One)), 0x07))
                    Store (BL06, Index (DerefOf (Index (WTSY, One)), 0x08))
                    Store (BL07, Index (DerefOf (Index (WTSY, One)), 0x09))
                    Store (BL08, Index (DerefOf (Index (WTSY, One)), 0x0A))
                    Store (BL09, Index (DerefOf (Index (WTSY, One)), 0x0B))
                    Store (BL10, Index (DerefOf (Index (WTSY, One)), 0x0C))
                    Store (BL11, Index (DerefOf (Index (WTSY, One)), 0x0D))
                    Store (BL12, Index (DerefOf (Index (WTSY, One)), 0x0E))
                    Store (BL13, Index (DerefOf (Index (WTSY, One)), 0x0F))
                    Store (BL14, Index (DerefOf (Index (WTSY, One)), 0x10))
                    Store (BL15, Index (DerefOf (Index (WTSY, One)), 0x11))
                    Store (BL16, Index (DerefOf (Index (WTSY, One)), 0x12))
                    Return (WTSY)
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    Store (WLBI, Index (DerefOf (Index (WAIY, One)), One))
                    Store (WHBI, Index (DerefOf (Index (WAIY, One)), 0x02))
                    Return (WAIY)
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                    Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                    Return (SADX)
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX)
                }
            }

            If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If (LNotEqual (GGOV (PRST), WPRP))
                    {
                        DL23 ()
                        SGOV (PRST, WPRP)
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    If (LEqual (Arg0, Zero))
                    {
                        Sleep (TBTG)
                    }
                    ElseIf (LEqual (Arg0, One))
                    {
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, And (Not (PFCP), One))
                        Sleep (TFDI)
                    }
                    Else
                    {
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    SPCO (WCLK, One)
                    SGOV (WFCP, PFCP)
                    Sleep (TN2B)
                    SGOV (WBRS, And (Not (PBRS), One))
                    Sleep (TB2R)
                    SGOV (PRST, And (Not (WPRP), One))
                    L23D ()
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Store (Zero, Local0)
                    While (LAnd (LNotEqual (SVID, WSID), LLess (Local0, WSTO)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    If (LEqual (WWEN, 0x02))
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (Zero)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One)
                        SGOV (PRST, And (Not (WPRP), One))
                        SGOV (WBRS, And (Not (PBRS), One))
                        Sleep (0xC8)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x14))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Sleep (0x0A)
                        Notify (PXSX, One)
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (One)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                }
            }

            If (LOr (WIST (), LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT))))
            {
                PowerResource (DRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        DRST
                    })
                }

                Method (IFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        ShiftLeft (CVPR, Zero, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        If (LEqual (CMDT, One))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Return (^^^CNVW.RSTT)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If (LEqual (CMDT, 0x02))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Store (CMDP, ^^^CNVW.RSTT)
                            }

                            Return (Zero)
                        }

                        If (LEqual (CMDT, 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                Return (^^^CNVW.PRRS)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (Zero)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LEqual (CRFI, One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x01                                     
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Store (ACSD, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Store (I5BS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Store (UHBS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        Store (AXMU, Local0)
                        ShiftLeft (Local0, One, Local0)
                        Or (Local0, AXSU, Local0)
                        Store (AXMR, Local1)
                        ShiftLeft (Local1, One, Local1)
                        Or (Local1, AXSR, Local1)
                        ShiftLeft (Local1, 0x02, Local1)
                        Or (Local0, Local1, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (WFRC)
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (WFUC)
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        Return (UNI4)
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        Return (WFIC)
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (LEqual (Arg0, ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d")))
                        {
                            If (LEqual (Arg2, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                           
                                })
                            }

                            If (LEqual (Arg2, One)){}
                            If (LEqual (Arg2, 0x02)){}
                            If (LEqual (Arg2, 0x03))
                            {
                                If (LEqual (WRTO, One)){}
                                ElseIf (LEqual (WRTO, 0x03)){}
                                Else
                                {
                                }

                                Return (WRTO)
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP11.PXSX))
    {
        Scope (_SB.PC00.RP11.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, Add (GMIO (^_ADR, _ADR), 0x44), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                    Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                    Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                    Return (SPLX)
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                    Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                    Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                    Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                    Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                    Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                    Return (WANX)
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                    Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                    Return (WRDX)
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    Store (STXE, Index (DerefOf (Index (WRDY, One)), One))
                    Store (ST10, Index (DerefOf (Index (WRDY, One)), 0x02))
                    Store (ST11, Index (DerefOf (Index (WRDY, One)), 0x03))
                    Store (ST12, Index (DerefOf (Index (WRDY, One)), 0x04))
                    Store (ST13, Index (DerefOf (Index (WRDY, One)), 0x05))
                    Store (ST14, Index (DerefOf (Index (WRDY, One)), 0x06))
                    Store (ST15, Index (DerefOf (Index (WRDY, One)), 0x07))
                    Store (ST16, Index (DerefOf (Index (WRDY, One)), 0x08))
                    Store (ST17, Index (DerefOf (Index (WRDY, One)), 0x09))
                    Store (ST18, Index (DerefOf (Index (WRDY, One)), 0x0A))
                    Store (ST19, Index (DerefOf (Index (WRDY, One)), 0x0B))
                    Store (ST50, Index (DerefOf (Index (WRDY, One)), 0x0C))
                    Store (ST51, Index (DerefOf (Index (WRDY, One)), 0x0D))
                    Store (ST52, Index (DerefOf (Index (WRDY, One)), 0x0E))
                    Store (ST53, Index (DerefOf (Index (WRDY, One)), 0x0F))
                    Store (ST54, Index (DerefOf (Index (WRDY, One)), 0x10))
                    Store (ST55, Index (DerefOf (Index (WRDY, One)), 0x11))
                    Store (ST56, Index (DerefOf (Index (WRDY, One)), 0x12))
                    Store (ST57, Index (DerefOf (Index (WRDY, One)), 0x13))
                    Store (ST58, Index (DerefOf (Index (WRDY, One)), 0x14))
                    Store (ST59, Index (DerefOf (Index (WRDY, One)), 0x15))
                    Store (ST5A, Index (DerefOf (Index (WRDY, One)), 0x16))
                    Store (ST5B, Index (DerefOf (Index (WRDY, One)), 0x17))
                    Store (CD10, Index (DerefOf (Index (WRDY, One)), 0x18))
                    Store (CD11, Index (DerefOf (Index (WRDY, One)), 0x19))
                    Store (CD12, Index (DerefOf (Index (WRDY, One)), 0x1A))
                    Store (CD13, Index (DerefOf (Index (WRDY, One)), 0x1B))
                    Store (CD14, Index (DerefOf (Index (WRDY, One)), 0x1C))
                    Store (CD15, Index (DerefOf (Index (WRDY, One)), 0x1D))
                    Store (CD16, Index (DerefOf (Index (WRDY, One)), 0x1E))
                    Store (CD17, Index (DerefOf (Index (WRDY, One)), 0x1F))
                    Store (CD18, Index (DerefOf (Index (WRDY, One)), 0x20))
                    Store (CD19, Index (DerefOf (Index (WRDY, One)), 0x21))
                    Store (CD1A, Index (DerefOf (Index (WRDY, One)), 0x22))
                    Store (CD20, Index (DerefOf (Index (WRDY, One)), 0x23))
                    Store (CD21, Index (DerefOf (Index (WRDY, One)), 0x24))
                    Store (CD22, Index (DerefOf (Index (WRDY, One)), 0x25))
                    Store (CD23, Index (DerefOf (Index (WRDY, One)), 0x26))
                    Store (CD24, Index (DerefOf (Index (WRDY, One)), 0x27))
                    Store (CD25, Index (DerefOf (Index (WRDY, One)), 0x28))
                    Store (CD26, Index (DerefOf (Index (WRDY, One)), 0x29))
                    Store (CD27, Index (DerefOf (Index (WRDY, One)), 0x2A))
                    Store (CD28, Index (DerefOf (Index (WRDY, One)), 0x2B))
                    Store (CD29, Index (DerefOf (Index (WRDY, One)), 0x2C))
                    Store (CD2A, Index (DerefOf (Index (WRDY, One)), 0x2D))
                    Return (WRDY)
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    Store (STDE, Index (DerefOf (Index (EWRY, One)), One))
                    Store (STRS, Index (DerefOf (Index (EWRY, One)), 0x02))
                    Store (ST20, Index (DerefOf (Index (EWRY, One)), 0x03))
                    Store (ST21, Index (DerefOf (Index (EWRY, One)), 0x04))
                    Store (ST22, Index (DerefOf (Index (EWRY, One)), 0x05))
                    Store (ST23, Index (DerefOf (Index (EWRY, One)), 0x06))
                    Store (ST24, Index (DerefOf (Index (EWRY, One)), 0x07))
                    Store (ST25, Index (DerefOf (Index (EWRY, One)), 0x08))
                    Store (ST26, Index (DerefOf (Index (EWRY, One)), 0x09))
                    Store (ST27, Index (DerefOf (Index (EWRY, One)), 0x0A))
                    Store (ST28, Index (DerefOf (Index (EWRY, One)), 0x0B))
                    Store (ST29, Index (DerefOf (Index (EWRY, One)), 0x0C))
                    Store (ST60, Index (DerefOf (Index (EWRY, One)), 0x0D))
                    Store (ST61, Index (DerefOf (Index (EWRY, One)), 0x0E))
                    Store (ST62, Index (DerefOf (Index (EWRY, One)), 0x0F))
                    Store (ST63, Index (DerefOf (Index (EWRY, One)), 0x10))
                    Store (ST64, Index (DerefOf (Index (EWRY, One)), 0x11))
                    Store (ST65, Index (DerefOf (Index (EWRY, One)), 0x12))
                    Store (ST66, Index (DerefOf (Index (EWRY, One)), 0x13))
                    Store (ST67, Index (DerefOf (Index (EWRY, One)), 0x14))
                    Store (ST68, Index (DerefOf (Index (EWRY, One)), 0x15))
                    Store (ST69, Index (DerefOf (Index (EWRY, One)), 0x16))
                    Store (ST6A, Index (DerefOf (Index (EWRY, One)), 0x17))
                    Store (ST6B, Index (DerefOf (Index (EWRY, One)), 0x18))
                    Store (ST30, Index (DerefOf (Index (EWRY, One)), 0x19))
                    Store (ST31, Index (DerefOf (Index (EWRY, One)), 0x1A))
                    Store (ST32, Index (DerefOf (Index (EWRY, One)), 0x1B))
                    Store (ST33, Index (DerefOf (Index (EWRY, One)), 0x1C))
                    Store (ST34, Index (DerefOf (Index (EWRY, One)), 0x1D))
                    Store (ST35, Index (DerefOf (Index (EWRY, One)), 0x1E))
                    Store (ST36, Index (DerefOf (Index (EWRY, One)), 0x1F))
                    Store (ST37, Index (DerefOf (Index (EWRY, One)), 0x20))
                    Store (ST38, Index (DerefOf (Index (EWRY, One)), 0x21))
                    Store (ST39, Index (DerefOf (Index (EWRY, One)), 0x22))
                    Store (ST70, Index (DerefOf (Index (EWRY, One)), 0x23))
                    Store (ST71, Index (DerefOf (Index (EWRY, One)), 0x24))
                    Store (ST72, Index (DerefOf (Index (EWRY, One)), 0x25))
                    Store (ST73, Index (DerefOf (Index (EWRY, One)), 0x26))
                    Store (ST74, Index (DerefOf (Index (EWRY, One)), 0x27))
                    Store (ST75, Index (DerefOf (Index (EWRY, One)), 0x28))
                    Store (ST76, Index (DerefOf (Index (EWRY, One)), 0x29))
                    Store (ST77, Index (DerefOf (Index (EWRY, One)), 0x2A))
                    Store (ST78, Index (DerefOf (Index (EWRY, One)), 0x2B))
                    Store (ST79, Index (DerefOf (Index (EWRY, One)), 0x2C))
                    Store (ST7A, Index (DerefOf (Index (EWRY, One)), 0x2D))
                    Store (ST7B, Index (DerefOf (Index (EWRY, One)), 0x2E))
                    Store (ST40, Index (DerefOf (Index (EWRY, One)), 0x2F))
                    Store (ST41, Index (DerefOf (Index (EWRY, One)), 0x30))
                    Store (ST42, Index (DerefOf (Index (EWRY, One)), 0x31))
                    Store (ST43, Index (DerefOf (Index (EWRY, One)), 0x32))
                    Store (ST44, Index (DerefOf (Index (EWRY, One)), 0x33))
                    Store (ST45, Index (DerefOf (Index (EWRY, One)), 0x34))
                    Store (ST46, Index (DerefOf (Index (EWRY, One)), 0x35))
                    Store (ST47, Index (DerefOf (Index (EWRY, One)), 0x36))
                    Store (ST48, Index (DerefOf (Index (EWRY, One)), 0x37))
                    Store (ST49, Index (DerefOf (Index (EWRY, One)), 0x38))
                    Store (ST80, Index (DerefOf (Index (EWRY, One)), 0x39))
                    Store (ST81, Index (DerefOf (Index (EWRY, One)), 0x3A))
                    Store (ST82, Index (DerefOf (Index (EWRY, One)), 0x3B))
                    Store (ST83, Index (DerefOf (Index (EWRY, One)), 0x3C))
                    Store (ST84, Index (DerefOf (Index (EWRY, One)), 0x3D))
                    Store (ST85, Index (DerefOf (Index (EWRY, One)), 0x3E))
                    Store (ST86, Index (DerefOf (Index (EWRY, One)), 0x3F))
                    Store (ST87, Index (DerefOf (Index (EWRY, One)), 0x40))
                    Store (ST88, Index (DerefOf (Index (EWRY, One)), 0x41))
                    Store (ST89, Index (DerefOf (Index (EWRY, One)), 0x42))
                    Store (ST8A, Index (DerefOf (Index (EWRY, One)), 0x43))
                    Store (ST8B, Index (DerefOf (Index (EWRY, One)), 0x44))
                    Store (CD30, Index (DerefOf (Index (EWRY, One)), 0x45))
                    Store (CD31, Index (DerefOf (Index (EWRY, One)), 0x46))
                    Store (CD32, Index (DerefOf (Index (EWRY, One)), 0x47))
                    Store (CD33, Index (DerefOf (Index (EWRY, One)), 0x48))
                    Store (CD34, Index (DerefOf (Index (EWRY, One)), 0x49))
                    Store (CD35, Index (DerefOf (Index (EWRY, One)), 0x4A))
                    Store (CD36, Index (DerefOf (Index (EWRY, One)), 0x4B))
                    Store (CD37, Index (DerefOf (Index (EWRY, One)), 0x4C))
                    Store (CD38, Index (DerefOf (Index (EWRY, One)), 0x4D))
                    Store (CD39, Index (DerefOf (Index (EWRY, One)), 0x4E))
                    Store (CD3A, Index (DerefOf (Index (EWRY, One)), 0x4F))
                    Store (CD3B, Index (DerefOf (Index (EWRY, One)), 0x50))
                    Store (CD3C, Index (DerefOf (Index (EWRY, One)), 0x51))
                    Store (CD3D, Index (DerefOf (Index (EWRY, One)), 0x52))
                    Store (CD3E, Index (DerefOf (Index (EWRY, One)), 0x53))
                    Store (CD3F, Index (DerefOf (Index (EWRY, One)), 0x54))
                    Store (CD40, Index (DerefOf (Index (EWRY, One)), 0x55))
                    Store (CD41, Index (DerefOf (Index (EWRY, One)), 0x56))
                    Store (CD42, Index (DerefOf (Index (EWRY, One)), 0x57))
                    Store (CD43, Index (DerefOf (Index (EWRY, One)), 0x58))
                    Store (CD44, Index (DerefOf (Index (EWRY, One)), 0x59))
                    Store (CD45, Index (DerefOf (Index (EWRY, One)), 0x5A))
                    Store (CD46, Index (DerefOf (Index (EWRY, One)), 0x5B))
                    Store (CD47, Index (DerefOf (Index (EWRY, One)), 0x5C))
                    Store (CD48, Index (DerefOf (Index (EWRY, One)), 0x5D))
                    Store (CD49, Index (DerefOf (Index (EWRY, One)), 0x5E))
                    Store (CD4A, Index (DerefOf (Index (EWRY, One)), 0x5F))
                    Store (CD4B, Index (DerefOf (Index (EWRY, One)), 0x60))
                    Store (CD4C, Index (DerefOf (Index (EWRY, One)), 0x61))
                    Store (CD4D, Index (DerefOf (Index (EWRY, One)), 0x62))
                    Store (CD4E, Index (DerefOf (Index (EWRY, One)), 0x63))
                    Store (CD4F, Index (DerefOf (Index (EWRY, One)), 0x64))
                    Store (CD50, Index (DerefOf (Index (EWRY, One)), 0x65))
                    Store (CD51, Index (DerefOf (Index (EWRY, One)), 0x66))
                    Store (CD52, Index (DerefOf (Index (EWRY, One)), 0x67))
                    Store (CD53, Index (DerefOf (Index (EWRY, One)), 0x68))
                    Store (CD54, Index (DerefOf (Index (EWRY, One)), 0x69))
                    Store (CD55, Index (DerefOf (Index (EWRY, One)), 0x6A))
                    Store (CD56, Index (DerefOf (Index (EWRY, One)), 0x6B))
                    Store (CD57, Index (DerefOf (Index (EWRY, One)), 0x6C))
                    Store (CD58, Index (DerefOf (Index (EWRY, One)), 0x6D))
                    Store (CD59, Index (DerefOf (Index (EWRY, One)), 0x6E))
                    Store (CD5A, Index (DerefOf (Index (EWRY, One)), 0x6F))
                    Store (CD5B, Index (DerefOf (Index (EWRY, One)), 0x70))
                    Store (CD5C, Index (DerefOf (Index (EWRY, One)), 0x71))
                    Store (CD5D, Index (DerefOf (Index (EWRY, One)), 0x72))
                    Store (CD5E, Index (DerefOf (Index (EWRY, One)), 0x73))
                    Store (CD5F, Index (DerefOf (Index (EWRY, One)), 0x74))
                    Store (CD60, Index (DerefOf (Index (EWRY, One)), 0x75))
                    Store (CD61, Index (DerefOf (Index (EWRY, One)), 0x76))
                    Store (CD62, Index (DerefOf (Index (EWRY, One)), 0x77))
                    Store (CD63, Index (DerefOf (Index (EWRY, One)), 0x78))
                    Store (CD64, Index (DerefOf (Index (EWRY, One)), 0x79))
                    Store (CD65, Index (DerefOf (Index (EWRY, One)), 0x7A))
                    Store (CD66, Index (DerefOf (Index (EWRY, One)), 0x7B))
                    Store (CD67, Index (DerefOf (Index (EWRY, One)), 0x7C))
                    Store (CD68, Index (DerefOf (Index (EWRY, One)), 0x7D))
                    Store (CD69, Index (DerefOf (Index (EWRY, One)), 0x7E))
                    Store (CD6A, Index (DerefOf (Index (EWRY, One)), 0x7F))
                    Store (CD6B, Index (DerefOf (Index (EWRY, One)), 0x80))
                    Store (CD6C, Index (DerefOf (Index (EWRY, One)), 0x81))
                    Store (CD6D, Index (DerefOf (Index (EWRY, One)), 0x82))
                    Store (CD6E, Index (DerefOf (Index (EWRY, One)), 0x83))
                    Store (CD6F, Index (DerefOf (Index (EWRY, One)), 0x84))
                    Store (CD70, Index (DerefOf (Index (EWRY, One)), 0x85))
                    Store (CD71, Index (DerefOf (Index (EWRY, One)), 0x86))
                    Return (EWRY)
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    Store (SDGN, Index (DerefOf (Index (WGDY, One)), One))
                    Store (SD11, Index (DerefOf (Index (WGDY, One)), 0x02))
                    Store (SD12, Index (DerefOf (Index (WGDY, One)), 0x03))
                    Store (SD13, Index (DerefOf (Index (WGDY, One)), 0x04))
                    Store (SD14, Index (DerefOf (Index (WGDY, One)), 0x05))
                    Store (SD15, Index (DerefOf (Index (WGDY, One)), 0x06))
                    Store (SD16, Index (DerefOf (Index (WGDY, One)), 0x07))
                    Store (SD17, Index (DerefOf (Index (WGDY, One)), 0x08))
                    Store (SD18, Index (DerefOf (Index (WGDY, One)), 0x09))
                    Store (SD19, Index (DerefOf (Index (WGDY, One)), 0x0A))
                    Store (SD21, Index (DerefOf (Index (WGDY, One)), 0x0B))
                    Store (SD22, Index (DerefOf (Index (WGDY, One)), 0x0C))
                    Store (SD23, Index (DerefOf (Index (WGDY, One)), 0x0D))
                    Store (SD24, Index (DerefOf (Index (WGDY, One)), 0x0E))
                    Store (SD25, Index (DerefOf (Index (WGDY, One)), 0x0F))
                    Store (SD26, Index (DerefOf (Index (WGDY, One)), 0x10))
                    Store (SD27, Index (DerefOf (Index (WGDY, One)), 0x11))
                    Store (SD28, Index (DerefOf (Index (WGDY, One)), 0x12))
                    Store (SD29, Index (DerefOf (Index (WGDY, One)), 0x13))
                    Store (SD31, Index (DerefOf (Index (WGDY, One)), 0x14))
                    Store (SD32, Index (DerefOf (Index (WGDY, One)), 0x15))
                    Store (SD33, Index (DerefOf (Index (WGDY, One)), 0x16))
                    Store (SD34, Index (DerefOf (Index (WGDY, One)), 0x17))
                    Store (SD35, Index (DerefOf (Index (WGDY, One)), 0x18))
                    Store (SD36, Index (DerefOf (Index (WGDY, One)), 0x19))
                    Store (SD37, Index (DerefOf (Index (WGDY, One)), 0x1A))
                    Store (SD38, Index (DerefOf (Index (WGDY, One)), 0x1B))
                    Store (SD39, Index (DerefOf (Index (WGDY, One)), 0x1C))
                    Store (SD41, Index (DerefOf (Index (WGDY, One)), 0x1D))
                    Store (SD42, Index (DerefOf (Index (WGDY, One)), 0x1E))
                    Store (SD43, Index (DerefOf (Index (WGDY, One)), 0x1F))
                    Store (SD44, Index (DerefOf (Index (WGDY, One)), 0x20))
                    Store (SD45, Index (DerefOf (Index (WGDY, One)), 0x21))
                    Store (SD46, Index (DerefOf (Index (WGDY, One)), 0x22))
                    Store (SD47, Index (DerefOf (Index (WGDY, One)), 0x23))
                    Store (SD48, Index (DerefOf (Index (WGDY, One)), 0x24))
                    Store (SD49, Index (DerefOf (Index (WGDY, One)), 0x25))
                    Store (SD51, Index (DerefOf (Index (WGDY, One)), 0x26))
                    Store (SD52, Index (DerefOf (Index (WGDY, One)), 0x27))
                    Store (SD53, Index (DerefOf (Index (WGDY, One)), 0x28))
                    Store (SD54, Index (DerefOf (Index (WGDY, One)), 0x29))
                    Store (SD55, Index (DerefOf (Index (WGDY, One)), 0x2A))
                    Store (SD56, Index (DerefOf (Index (WGDY, One)), 0x2B))
                    Store (SD57, Index (DerefOf (Index (WGDY, One)), 0x2C))
                    Store (SD58, Index (DerefOf (Index (WGDY, One)), 0x2D))
                    Store (SD59, Index (DerefOf (Index (WGDY, One)), 0x2E))
                    Store (SD61, Index (DerefOf (Index (WGDY, One)), 0x2F))
                    Store (SD62, Index (DerefOf (Index (WGDY, One)), 0x30))
                    Store (SD63, Index (DerefOf (Index (WGDY, One)), 0x31))
                    Store (SD64, Index (DerefOf (Index (WGDY, One)), 0x32))
                    Store (SD65, Index (DerefOf (Index (WGDY, One)), 0x33))
                    Store (SD66, Index (DerefOf (Index (WGDY, One)), 0x34))
                    Store (SD67, Index (DerefOf (Index (WGDY, One)), 0x35))
                    Store (SD68, Index (DerefOf (Index (WGDY, One)), 0x36))
                    Store (SD69, Index (DerefOf (Index (WGDY, One)), 0x37))
                    Store (SD71, Index (DerefOf (Index (WGDY, One)), 0x38))
                    Store (SD72, Index (DerefOf (Index (WGDY, One)), 0x39))
                    Store (SD73, Index (DerefOf (Index (WGDY, One)), 0x3A))
                    Store (SD74, Index (DerefOf (Index (WGDY, One)), 0x3B))
                    Store (SD75, Index (DerefOf (Index (WGDY, One)), 0x3C))
                    Store (SD76, Index (DerefOf (Index (WGDY, One)), 0x3D))
                    Store (SD77, Index (DerefOf (Index (WGDY, One)), 0x3E))
                    Store (SD78, Index (DerefOf (Index (WGDY, One)), 0x3F))
                    Store (SD79, Index (DerefOf (Index (WGDY, One)), 0x40))
                    Store (SD81, Index (DerefOf (Index (WGDY, One)), 0x41))
                    Store (SD82, Index (DerefOf (Index (WGDY, One)), 0x42))
                    Store (SD83, Index (DerefOf (Index (WGDY, One)), 0x43))
                    Store (SD84, Index (DerefOf (Index (WGDY, One)), 0x44))
                    Store (SD85, Index (DerefOf (Index (WGDY, One)), 0x45))
                    Store (SD86, Index (DerefOf (Index (WGDY, One)), 0x46))
                    Store (SD87, Index (DerefOf (Index (WGDY, One)), 0x47))
                    Store (SD88, Index (DerefOf (Index (WGDY, One)), 0x48))
                    Store (SD89, Index (DerefOf (Index (WGDY, One)), 0x49))
                    Return (WGDY)
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                    Return (ECKY)
                }

                Name (PPAY, Package (0x02)
                {
                    One, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    Store (WAGE, Index (DerefOf (Index (PPAY, One)), One))
                    Store (AGA1, Index (DerefOf (Index (PPAY, One)), 0x02))
                    Store (AGA2, Index (DerefOf (Index (PPAY, One)), 0x03))
                    Store (AGA3, Index (DerefOf (Index (PPAY, One)), 0x04))
                    Store (AGA4, Index (DerefOf (Index (PPAY, One)), 0x05))
                    Store (AGA5, Index (DerefOf (Index (PPAY, One)), 0x06))
                    Store (AGA6, Index (DerefOf (Index (PPAY, One)), 0x07))
                    Store (AGA7, Index (DerefOf (Index (PPAY, One)), 0x08))
                    Store (AGA8, Index (DerefOf (Index (PPAY, One)), 0x09))
                    Store (AGA9, Index (DerefOf (Index (PPAY, One)), 0x0A))
                    Store (AGAA, Index (DerefOf (Index (PPAY, One)), 0x0B))
                    Store (AGAB, Index (DerefOf (Index (PPAY, One)), 0x0C))
                    Store (AGB1, Index (DerefOf (Index (PPAY, One)), 0x0D))
                    Store (AGB2, Index (DerefOf (Index (PPAY, One)), 0x0E))
                    Store (AGB3, Index (DerefOf (Index (PPAY, One)), 0x0F))
                    Store (AGB4, Index (DerefOf (Index (PPAY, One)), 0x10))
                    Store (AGB5, Index (DerefOf (Index (PPAY, One)), 0x11))
                    Store (AGB6, Index (DerefOf (Index (PPAY, One)), 0x12))
                    Store (AGB7, Index (DerefOf (Index (PPAY, One)), 0x13))
                    Store (AGB8, Index (DerefOf (Index (PPAY, One)), 0x14))
                    Store (AGB9, Index (DerefOf (Index (PPAY, One)), 0x15))
                    Store (AGBA, Index (DerefOf (Index (PPAY, One)), 0x16))
                    Store (AGBB, Index (DerefOf (Index (PPAY, One)), 0x17))
                    Return (PPAY)
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    Store (WTSV, Index (DerefOf (Index (WTSY, One)), One))
                    Store (WTLE, Index (DerefOf (Index (WTSY, One)), 0x02))
                    Store (BL01, Index (DerefOf (Index (WTSY, One)), 0x03))
                    Store (BL02, Index (DerefOf (Index (WTSY, One)), 0x04))
                    Store (BL03, Index (DerefOf (Index (WTSY, One)), 0x05))
                    Store (BL04, Index (DerefOf (Index (WTSY, One)), 0x06))
                    Store (BL05, Index (DerefOf (Index (WTSY, One)), 0x07))
                    Store (BL06, Index (DerefOf (Index (WTSY, One)), 0x08))
                    Store (BL07, Index (DerefOf (Index (WTSY, One)), 0x09))
                    Store (BL08, Index (DerefOf (Index (WTSY, One)), 0x0A))
                    Store (BL09, Index (DerefOf (Index (WTSY, One)), 0x0B))
                    Store (BL10, Index (DerefOf (Index (WTSY, One)), 0x0C))
                    Store (BL11, Index (DerefOf (Index (WTSY, One)), 0x0D))
                    Store (BL12, Index (DerefOf (Index (WTSY, One)), 0x0E))
                    Store (BL13, Index (DerefOf (Index (WTSY, One)), 0x0F))
                    Store (BL14, Index (DerefOf (Index (WTSY, One)), 0x10))
                    Store (BL15, Index (DerefOf (Index (WTSY, One)), 0x11))
                    Store (BL16, Index (DerefOf (Index (WTSY, One)), 0x12))
                    Return (WTSY)
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    Store (WLBI, Index (DerefOf (Index (WAIY, One)), One))
                    Store (WHBI, Index (DerefOf (Index (WAIY, One)), 0x02))
                    Return (WAIY)
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                    Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                    Return (SADX)
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX)
                }
            }

            If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If (LNotEqual (GGOV (PRST), WPRP))
                    {
                        DL23 ()
                        SGOV (PRST, WPRP)
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    If (LEqual (Arg0, Zero))
                    {
                        Sleep (TBTG)
                    }
                    ElseIf (LEqual (Arg0, One))
                    {
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, And (Not (PFCP), One))
                        Sleep (TFDI)
                    }
                    Else
                    {
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    SPCO (WCLK, One)
                    SGOV (WFCP, PFCP)
                    Sleep (TN2B)
                    SGOV (WBRS, And (Not (PBRS), One))
                    Sleep (TB2R)
                    SGOV (PRST, And (Not (WPRP), One))
                    L23D ()
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Store (Zero, Local0)
                    While (LAnd (LNotEqual (SVID, WSID), LLess (Local0, WSTO)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    If (LEqual (WWEN, 0x02))
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (Zero)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One)
                        SGOV (PRST, And (Not (WPRP), One))
                        SGOV (WBRS, And (Not (PBRS), One))
                        Sleep (0xC8)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x14))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Sleep (0x0A)
                        Notify (PXSX, One)
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (One)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                }
            }

            If (LOr (WIST (), LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT))))
            {
                PowerResource (DRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        DRST
                    })
                }

                Method (IFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        ShiftLeft (CVPR, Zero, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        If (LEqual (CMDT, One))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Return (^^^CNVW.RSTT)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If (LEqual (CMDT, 0x02))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Store (CMDP, ^^^CNVW.RSTT)
                            }

                            Return (Zero)
                        }

                        If (LEqual (CMDT, 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                Return (^^^CNVW.PRRS)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (Zero)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LEqual (CRFI, One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x01                                     
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Store (ACSD, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Store (I5BS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Store (UHBS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        Store (AXMU, Local0)
                        ShiftLeft (Local0, One, Local0)
                        Or (Local0, AXSU, Local0)
                        Store (AXMR, Local1)
                        ShiftLeft (Local1, One, Local1)
                        Or (Local1, AXSR, Local1)
                        ShiftLeft (Local1, 0x02, Local1)
                        Or (Local0, Local1, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (WFRC)
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (WFUC)
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        Return (UNI4)
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        Return (WFIC)
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (LEqual (Arg0, ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d")))
                        {
                            If (LEqual (Arg2, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                           
                                })
                            }

                            If (LEqual (Arg2, One)){}
                            If (LEqual (Arg2, 0x02)){}
                            If (LEqual (Arg2, 0x03))
                            {
                                If (LEqual (WRTO, One)){}
                                ElseIf (LEqual (WRTO, 0x03)){}
                                Else
                                {
                                }

                                Return (WRTO)
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP12.PXSX))
    {
        Scope (_SB.PC00.RP12.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, Add (GMIO (^_ADR, _ADR), 0x44), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                    Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                    Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                    Return (SPLX)
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                    Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                    Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                    Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                    Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                    Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                    Return (WANX)
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                    Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                    Return (WRDX)
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    Store (STXE, Index (DerefOf (Index (WRDY, One)), One))
                    Store (ST10, Index (DerefOf (Index (WRDY, One)), 0x02))
                    Store (ST11, Index (DerefOf (Index (WRDY, One)), 0x03))
                    Store (ST12, Index (DerefOf (Index (WRDY, One)), 0x04))
                    Store (ST13, Index (DerefOf (Index (WRDY, One)), 0x05))
                    Store (ST14, Index (DerefOf (Index (WRDY, One)), 0x06))
                    Store (ST15, Index (DerefOf (Index (WRDY, One)), 0x07))
                    Store (ST16, Index (DerefOf (Index (WRDY, One)), 0x08))
                    Store (ST17, Index (DerefOf (Index (WRDY, One)), 0x09))
                    Store (ST18, Index (DerefOf (Index (WRDY, One)), 0x0A))
                    Store (ST19, Index (DerefOf (Index (WRDY, One)), 0x0B))
                    Store (ST50, Index (DerefOf (Index (WRDY, One)), 0x0C))
                    Store (ST51, Index (DerefOf (Index (WRDY, One)), 0x0D))
                    Store (ST52, Index (DerefOf (Index (WRDY, One)), 0x0E))
                    Store (ST53, Index (DerefOf (Index (WRDY, One)), 0x0F))
                    Store (ST54, Index (DerefOf (Index (WRDY, One)), 0x10))
                    Store (ST55, Index (DerefOf (Index (WRDY, One)), 0x11))
                    Store (ST56, Index (DerefOf (Index (WRDY, One)), 0x12))
                    Store (ST57, Index (DerefOf (Index (WRDY, One)), 0x13))
                    Store (ST58, Index (DerefOf (Index (WRDY, One)), 0x14))
                    Store (ST59, Index (DerefOf (Index (WRDY, One)), 0x15))
                    Store (ST5A, Index (DerefOf (Index (WRDY, One)), 0x16))
                    Store (ST5B, Index (DerefOf (Index (WRDY, One)), 0x17))
                    Store (CD10, Index (DerefOf (Index (WRDY, One)), 0x18))
                    Store (CD11, Index (DerefOf (Index (WRDY, One)), 0x19))
                    Store (CD12, Index (DerefOf (Index (WRDY, One)), 0x1A))
                    Store (CD13, Index (DerefOf (Index (WRDY, One)), 0x1B))
                    Store (CD14, Index (DerefOf (Index (WRDY, One)), 0x1C))
                    Store (CD15, Index (DerefOf (Index (WRDY, One)), 0x1D))
                    Store (CD16, Index (DerefOf (Index (WRDY, One)), 0x1E))
                    Store (CD17, Index (DerefOf (Index (WRDY, One)), 0x1F))
                    Store (CD18, Index (DerefOf (Index (WRDY, One)), 0x20))
                    Store (CD19, Index (DerefOf (Index (WRDY, One)), 0x21))
                    Store (CD1A, Index (DerefOf (Index (WRDY, One)), 0x22))
                    Store (CD20, Index (DerefOf (Index (WRDY, One)), 0x23))
                    Store (CD21, Index (DerefOf (Index (WRDY, One)), 0x24))
                    Store (CD22, Index (DerefOf (Index (WRDY, One)), 0x25))
                    Store (CD23, Index (DerefOf (Index (WRDY, One)), 0x26))
                    Store (CD24, Index (DerefOf (Index (WRDY, One)), 0x27))
                    Store (CD25, Index (DerefOf (Index (WRDY, One)), 0x28))
                    Store (CD26, Index (DerefOf (Index (WRDY, One)), 0x29))
                    Store (CD27, Index (DerefOf (Index (WRDY, One)), 0x2A))
                    Store (CD28, Index (DerefOf (Index (WRDY, One)), 0x2B))
                    Store (CD29, Index (DerefOf (Index (WRDY, One)), 0x2C))
                    Store (CD2A, Index (DerefOf (Index (WRDY, One)), 0x2D))
                    Return (WRDY)
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    Store (STDE, Index (DerefOf (Index (EWRY, One)), One))
                    Store (STRS, Index (DerefOf (Index (EWRY, One)), 0x02))
                    Store (ST20, Index (DerefOf (Index (EWRY, One)), 0x03))
                    Store (ST21, Index (DerefOf (Index (EWRY, One)), 0x04))
                    Store (ST22, Index (DerefOf (Index (EWRY, One)), 0x05))
                    Store (ST23, Index (DerefOf (Index (EWRY, One)), 0x06))
                    Store (ST24, Index (DerefOf (Index (EWRY, One)), 0x07))
                    Store (ST25, Index (DerefOf (Index (EWRY, One)), 0x08))
                    Store (ST26, Index (DerefOf (Index (EWRY, One)), 0x09))
                    Store (ST27, Index (DerefOf (Index (EWRY, One)), 0x0A))
                    Store (ST28, Index (DerefOf (Index (EWRY, One)), 0x0B))
                    Store (ST29, Index (DerefOf (Index (EWRY, One)), 0x0C))
                    Store (ST60, Index (DerefOf (Index (EWRY, One)), 0x0D))
                    Store (ST61, Index (DerefOf (Index (EWRY, One)), 0x0E))
                    Store (ST62, Index (DerefOf (Index (EWRY, One)), 0x0F))
                    Store (ST63, Index (DerefOf (Index (EWRY, One)), 0x10))
                    Store (ST64, Index (DerefOf (Index (EWRY, One)), 0x11))
                    Store (ST65, Index (DerefOf (Index (EWRY, One)), 0x12))
                    Store (ST66, Index (DerefOf (Index (EWRY, One)), 0x13))
                    Store (ST67, Index (DerefOf (Index (EWRY, One)), 0x14))
                    Store (ST68, Index (DerefOf (Index (EWRY, One)), 0x15))
                    Store (ST69, Index (DerefOf (Index (EWRY, One)), 0x16))
                    Store (ST6A, Index (DerefOf (Index (EWRY, One)), 0x17))
                    Store (ST6B, Index (DerefOf (Index (EWRY, One)), 0x18))
                    Store (ST30, Index (DerefOf (Index (EWRY, One)), 0x19))
                    Store (ST31, Index (DerefOf (Index (EWRY, One)), 0x1A))
                    Store (ST32, Index (DerefOf (Index (EWRY, One)), 0x1B))
                    Store (ST33, Index (DerefOf (Index (EWRY, One)), 0x1C))
                    Store (ST34, Index (DerefOf (Index (EWRY, One)), 0x1D))
                    Store (ST35, Index (DerefOf (Index (EWRY, One)), 0x1E))
                    Store (ST36, Index (DerefOf (Index (EWRY, One)), 0x1F))
                    Store (ST37, Index (DerefOf (Index (EWRY, One)), 0x20))
                    Store (ST38, Index (DerefOf (Index (EWRY, One)), 0x21))
                    Store (ST39, Index (DerefOf (Index (EWRY, One)), 0x22))
                    Store (ST70, Index (DerefOf (Index (EWRY, One)), 0x23))
                    Store (ST71, Index (DerefOf (Index (EWRY, One)), 0x24))
                    Store (ST72, Index (DerefOf (Index (EWRY, One)), 0x25))
                    Store (ST73, Index (DerefOf (Index (EWRY, One)), 0x26))
                    Store (ST74, Index (DerefOf (Index (EWRY, One)), 0x27))
                    Store (ST75, Index (DerefOf (Index (EWRY, One)), 0x28))
                    Store (ST76, Index (DerefOf (Index (EWRY, One)), 0x29))
                    Store (ST77, Index (DerefOf (Index (EWRY, One)), 0x2A))
                    Store (ST78, Index (DerefOf (Index (EWRY, One)), 0x2B))
                    Store (ST79, Index (DerefOf (Index (EWRY, One)), 0x2C))
                    Store (ST7A, Index (DerefOf (Index (EWRY, One)), 0x2D))
                    Store (ST7B, Index (DerefOf (Index (EWRY, One)), 0x2E))
                    Store (ST40, Index (DerefOf (Index (EWRY, One)), 0x2F))
                    Store (ST41, Index (DerefOf (Index (EWRY, One)), 0x30))
                    Store (ST42, Index (DerefOf (Index (EWRY, One)), 0x31))
                    Store (ST43, Index (DerefOf (Index (EWRY, One)), 0x32))
                    Store (ST44, Index (DerefOf (Index (EWRY, One)), 0x33))
                    Store (ST45, Index (DerefOf (Index (EWRY, One)), 0x34))
                    Store (ST46, Index (DerefOf (Index (EWRY, One)), 0x35))
                    Store (ST47, Index (DerefOf (Index (EWRY, One)), 0x36))
                    Store (ST48, Index (DerefOf (Index (EWRY, One)), 0x37))
                    Store (ST49, Index (DerefOf (Index (EWRY, One)), 0x38))
                    Store (ST80, Index (DerefOf (Index (EWRY, One)), 0x39))
                    Store (ST81, Index (DerefOf (Index (EWRY, One)), 0x3A))
                    Store (ST82, Index (DerefOf (Index (EWRY, One)), 0x3B))
                    Store (ST83, Index (DerefOf (Index (EWRY, One)), 0x3C))
                    Store (ST84, Index (DerefOf (Index (EWRY, One)), 0x3D))
                    Store (ST85, Index (DerefOf (Index (EWRY, One)), 0x3E))
                    Store (ST86, Index (DerefOf (Index (EWRY, One)), 0x3F))
                    Store (ST87, Index (DerefOf (Index (EWRY, One)), 0x40))
                    Store (ST88, Index (DerefOf (Index (EWRY, One)), 0x41))
                    Store (ST89, Index (DerefOf (Index (EWRY, One)), 0x42))
                    Store (ST8A, Index (DerefOf (Index (EWRY, One)), 0x43))
                    Store (ST8B, Index (DerefOf (Index (EWRY, One)), 0x44))
                    Store (CD30, Index (DerefOf (Index (EWRY, One)), 0x45))
                    Store (CD31, Index (DerefOf (Index (EWRY, One)), 0x46))
                    Store (CD32, Index (DerefOf (Index (EWRY, One)), 0x47))
                    Store (CD33, Index (DerefOf (Index (EWRY, One)), 0x48))
                    Store (CD34, Index (DerefOf (Index (EWRY, One)), 0x49))
                    Store (CD35, Index (DerefOf (Index (EWRY, One)), 0x4A))
                    Store (CD36, Index (DerefOf (Index (EWRY, One)), 0x4B))
                    Store (CD37, Index (DerefOf (Index (EWRY, One)), 0x4C))
                    Store (CD38, Index (DerefOf (Index (EWRY, One)), 0x4D))
                    Store (CD39, Index (DerefOf (Index (EWRY, One)), 0x4E))
                    Store (CD3A, Index (DerefOf (Index (EWRY, One)), 0x4F))
                    Store (CD3B, Index (DerefOf (Index (EWRY, One)), 0x50))
                    Store (CD3C, Index (DerefOf (Index (EWRY, One)), 0x51))
                    Store (CD3D, Index (DerefOf (Index (EWRY, One)), 0x52))
                    Store (CD3E, Index (DerefOf (Index (EWRY, One)), 0x53))
                    Store (CD3F, Index (DerefOf (Index (EWRY, One)), 0x54))
                    Store (CD40, Index (DerefOf (Index (EWRY, One)), 0x55))
                    Store (CD41, Index (DerefOf (Index (EWRY, One)), 0x56))
                    Store (CD42, Index (DerefOf (Index (EWRY, One)), 0x57))
                    Store (CD43, Index (DerefOf (Index (EWRY, One)), 0x58))
                    Store (CD44, Index (DerefOf (Index (EWRY, One)), 0x59))
                    Store (CD45, Index (DerefOf (Index (EWRY, One)), 0x5A))
                    Store (CD46, Index (DerefOf (Index (EWRY, One)), 0x5B))
                    Store (CD47, Index (DerefOf (Index (EWRY, One)), 0x5C))
                    Store (CD48, Index (DerefOf (Index (EWRY, One)), 0x5D))
                    Store (CD49, Index (DerefOf (Index (EWRY, One)), 0x5E))
                    Store (CD4A, Index (DerefOf (Index (EWRY, One)), 0x5F))
                    Store (CD4B, Index (DerefOf (Index (EWRY, One)), 0x60))
                    Store (CD4C, Index (DerefOf (Index (EWRY, One)), 0x61))
                    Store (CD4D, Index (DerefOf (Index (EWRY, One)), 0x62))
                    Store (CD4E, Index (DerefOf (Index (EWRY, One)), 0x63))
                    Store (CD4F, Index (DerefOf (Index (EWRY, One)), 0x64))
                    Store (CD50, Index (DerefOf (Index (EWRY, One)), 0x65))
                    Store (CD51, Index (DerefOf (Index (EWRY, One)), 0x66))
                    Store (CD52, Index (DerefOf (Index (EWRY, One)), 0x67))
                    Store (CD53, Index (DerefOf (Index (EWRY, One)), 0x68))
                    Store (CD54, Index (DerefOf (Index (EWRY, One)), 0x69))
                    Store (CD55, Index (DerefOf (Index (EWRY, One)), 0x6A))
                    Store (CD56, Index (DerefOf (Index (EWRY, One)), 0x6B))
                    Store (CD57, Index (DerefOf (Index (EWRY, One)), 0x6C))
                    Store (CD58, Index (DerefOf (Index (EWRY, One)), 0x6D))
                    Store (CD59, Index (DerefOf (Index (EWRY, One)), 0x6E))
                    Store (CD5A, Index (DerefOf (Index (EWRY, One)), 0x6F))
                    Store (CD5B, Index (DerefOf (Index (EWRY, One)), 0x70))
                    Store (CD5C, Index (DerefOf (Index (EWRY, One)), 0x71))
                    Store (CD5D, Index (DerefOf (Index (EWRY, One)), 0x72))
                    Store (CD5E, Index (DerefOf (Index (EWRY, One)), 0x73))
                    Store (CD5F, Index (DerefOf (Index (EWRY, One)), 0x74))
                    Store (CD60, Index (DerefOf (Index (EWRY, One)), 0x75))
                    Store (CD61, Index (DerefOf (Index (EWRY, One)), 0x76))
                    Store (CD62, Index (DerefOf (Index (EWRY, One)), 0x77))
                    Store (CD63, Index (DerefOf (Index (EWRY, One)), 0x78))
                    Store (CD64, Index (DerefOf (Index (EWRY, One)), 0x79))
                    Store (CD65, Index (DerefOf (Index (EWRY, One)), 0x7A))
                    Store (CD66, Index (DerefOf (Index (EWRY, One)), 0x7B))
                    Store (CD67, Index (DerefOf (Index (EWRY, One)), 0x7C))
                    Store (CD68, Index (DerefOf (Index (EWRY, One)), 0x7D))
                    Store (CD69, Index (DerefOf (Index (EWRY, One)), 0x7E))
                    Store (CD6A, Index (DerefOf (Index (EWRY, One)), 0x7F))
                    Store (CD6B, Index (DerefOf (Index (EWRY, One)), 0x80))
                    Store (CD6C, Index (DerefOf (Index (EWRY, One)), 0x81))
                    Store (CD6D, Index (DerefOf (Index (EWRY, One)), 0x82))
                    Store (CD6E, Index (DerefOf (Index (EWRY, One)), 0x83))
                    Store (CD6F, Index (DerefOf (Index (EWRY, One)), 0x84))
                    Store (CD70, Index (DerefOf (Index (EWRY, One)), 0x85))
                    Store (CD71, Index (DerefOf (Index (EWRY, One)), 0x86))
                    Return (EWRY)
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    Store (SDGN, Index (DerefOf (Index (WGDY, One)), One))
                    Store (SD11, Index (DerefOf (Index (WGDY, One)), 0x02))
                    Store (SD12, Index (DerefOf (Index (WGDY, One)), 0x03))
                    Store (SD13, Index (DerefOf (Index (WGDY, One)), 0x04))
                    Store (SD14, Index (DerefOf (Index (WGDY, One)), 0x05))
                    Store (SD15, Index (DerefOf (Index (WGDY, One)), 0x06))
                    Store (SD16, Index (DerefOf (Index (WGDY, One)), 0x07))
                    Store (SD17, Index (DerefOf (Index (WGDY, One)), 0x08))
                    Store (SD18, Index (DerefOf (Index (WGDY, One)), 0x09))
                    Store (SD19, Index (DerefOf (Index (WGDY, One)), 0x0A))
                    Store (SD21, Index (DerefOf (Index (WGDY, One)), 0x0B))
                    Store (SD22, Index (DerefOf (Index (WGDY, One)), 0x0C))
                    Store (SD23, Index (DerefOf (Index (WGDY, One)), 0x0D))
                    Store (SD24, Index (DerefOf (Index (WGDY, One)), 0x0E))
                    Store (SD25, Index (DerefOf (Index (WGDY, One)), 0x0F))
                    Store (SD26, Index (DerefOf (Index (WGDY, One)), 0x10))
                    Store (SD27, Index (DerefOf (Index (WGDY, One)), 0x11))
                    Store (SD28, Index (DerefOf (Index (WGDY, One)), 0x12))
                    Store (SD29, Index (DerefOf (Index (WGDY, One)), 0x13))
                    Store (SD31, Index (DerefOf (Index (WGDY, One)), 0x14))
                    Store (SD32, Index (DerefOf (Index (WGDY, One)), 0x15))
                    Store (SD33, Index (DerefOf (Index (WGDY, One)), 0x16))
                    Store (SD34, Index (DerefOf (Index (WGDY, One)), 0x17))
                    Store (SD35, Index (DerefOf (Index (WGDY, One)), 0x18))
                    Store (SD36, Index (DerefOf (Index (WGDY, One)), 0x19))
                    Store (SD37, Index (DerefOf (Index (WGDY, One)), 0x1A))
                    Store (SD38, Index (DerefOf (Index (WGDY, One)), 0x1B))
                    Store (SD39, Index (DerefOf (Index (WGDY, One)), 0x1C))
                    Store (SD41, Index (DerefOf (Index (WGDY, One)), 0x1D))
                    Store (SD42, Index (DerefOf (Index (WGDY, One)), 0x1E))
                    Store (SD43, Index (DerefOf (Index (WGDY, One)), 0x1F))
                    Store (SD44, Index (DerefOf (Index (WGDY, One)), 0x20))
                    Store (SD45, Index (DerefOf (Index (WGDY, One)), 0x21))
                    Store (SD46, Index (DerefOf (Index (WGDY, One)), 0x22))
                    Store (SD47, Index (DerefOf (Index (WGDY, One)), 0x23))
                    Store (SD48, Index (DerefOf (Index (WGDY, One)), 0x24))
                    Store (SD49, Index (DerefOf (Index (WGDY, One)), 0x25))
                    Store (SD51, Index (DerefOf (Index (WGDY, One)), 0x26))
                    Store (SD52, Index (DerefOf (Index (WGDY, One)), 0x27))
                    Store (SD53, Index (DerefOf (Index (WGDY, One)), 0x28))
                    Store (SD54, Index (DerefOf (Index (WGDY, One)), 0x29))
                    Store (SD55, Index (DerefOf (Index (WGDY, One)), 0x2A))
                    Store (SD56, Index (DerefOf (Index (WGDY, One)), 0x2B))
                    Store (SD57, Index (DerefOf (Index (WGDY, One)), 0x2C))
                    Store (SD58, Index (DerefOf (Index (WGDY, One)), 0x2D))
                    Store (SD59, Index (DerefOf (Index (WGDY, One)), 0x2E))
                    Store (SD61, Index (DerefOf (Index (WGDY, One)), 0x2F))
                    Store (SD62, Index (DerefOf (Index (WGDY, One)), 0x30))
                    Store (SD63, Index (DerefOf (Index (WGDY, One)), 0x31))
                    Store (SD64, Index (DerefOf (Index (WGDY, One)), 0x32))
                    Store (SD65, Index (DerefOf (Index (WGDY, One)), 0x33))
                    Store (SD66, Index (DerefOf (Index (WGDY, One)), 0x34))
                    Store (SD67, Index (DerefOf (Index (WGDY, One)), 0x35))
                    Store (SD68, Index (DerefOf (Index (WGDY, One)), 0x36))
                    Store (SD69, Index (DerefOf (Index (WGDY, One)), 0x37))
                    Store (SD71, Index (DerefOf (Index (WGDY, One)), 0x38))
                    Store (SD72, Index (DerefOf (Index (WGDY, One)), 0x39))
                    Store (SD73, Index (DerefOf (Index (WGDY, One)), 0x3A))
                    Store (SD74, Index (DerefOf (Index (WGDY, One)), 0x3B))
                    Store (SD75, Index (DerefOf (Index (WGDY, One)), 0x3C))
                    Store (SD76, Index (DerefOf (Index (WGDY, One)), 0x3D))
                    Store (SD77, Index (DerefOf (Index (WGDY, One)), 0x3E))
                    Store (SD78, Index (DerefOf (Index (WGDY, One)), 0x3F))
                    Store (SD79, Index (DerefOf (Index (WGDY, One)), 0x40))
                    Store (SD81, Index (DerefOf (Index (WGDY, One)), 0x41))
                    Store (SD82, Index (DerefOf (Index (WGDY, One)), 0x42))
                    Store (SD83, Index (DerefOf (Index (WGDY, One)), 0x43))
                    Store (SD84, Index (DerefOf (Index (WGDY, One)), 0x44))
                    Store (SD85, Index (DerefOf (Index (WGDY, One)), 0x45))
                    Store (SD86, Index (DerefOf (Index (WGDY, One)), 0x46))
                    Store (SD87, Index (DerefOf (Index (WGDY, One)), 0x47))
                    Store (SD88, Index (DerefOf (Index (WGDY, One)), 0x48))
                    Store (SD89, Index (DerefOf (Index (WGDY, One)), 0x49))
                    Return (WGDY)
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                    Return (ECKY)
                }

                Name (PPAY, Package (0x02)
                {
                    One, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    Store (WAGE, Index (DerefOf (Index (PPAY, One)), One))
                    Store (AGA1, Index (DerefOf (Index (PPAY, One)), 0x02))
                    Store (AGA2, Index (DerefOf (Index (PPAY, One)), 0x03))
                    Store (AGA3, Index (DerefOf (Index (PPAY, One)), 0x04))
                    Store (AGA4, Index (DerefOf (Index (PPAY, One)), 0x05))
                    Store (AGA5, Index (DerefOf (Index (PPAY, One)), 0x06))
                    Store (AGA6, Index (DerefOf (Index (PPAY, One)), 0x07))
                    Store (AGA7, Index (DerefOf (Index (PPAY, One)), 0x08))
                    Store (AGA8, Index (DerefOf (Index (PPAY, One)), 0x09))
                    Store (AGA9, Index (DerefOf (Index (PPAY, One)), 0x0A))
                    Store (AGAA, Index (DerefOf (Index (PPAY, One)), 0x0B))
                    Store (AGAB, Index (DerefOf (Index (PPAY, One)), 0x0C))
                    Store (AGB1, Index (DerefOf (Index (PPAY, One)), 0x0D))
                    Store (AGB2, Index (DerefOf (Index (PPAY, One)), 0x0E))
                    Store (AGB3, Index (DerefOf (Index (PPAY, One)), 0x0F))
                    Store (AGB4, Index (DerefOf (Index (PPAY, One)), 0x10))
                    Store (AGB5, Index (DerefOf (Index (PPAY, One)), 0x11))
                    Store (AGB6, Index (DerefOf (Index (PPAY, One)), 0x12))
                    Store (AGB7, Index (DerefOf (Index (PPAY, One)), 0x13))
                    Store (AGB8, Index (DerefOf (Index (PPAY, One)), 0x14))
                    Store (AGB9, Index (DerefOf (Index (PPAY, One)), 0x15))
                    Store (AGBA, Index (DerefOf (Index (PPAY, One)), 0x16))
                    Store (AGBB, Index (DerefOf (Index (PPAY, One)), 0x17))
                    Return (PPAY)
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    Store (WTSV, Index (DerefOf (Index (WTSY, One)), One))
                    Store (WTLE, Index (DerefOf (Index (WTSY, One)), 0x02))
                    Store (BL01, Index (DerefOf (Index (WTSY, One)), 0x03))
                    Store (BL02, Index (DerefOf (Index (WTSY, One)), 0x04))
                    Store (BL03, Index (DerefOf (Index (WTSY, One)), 0x05))
                    Store (BL04, Index (DerefOf (Index (WTSY, One)), 0x06))
                    Store (BL05, Index (DerefOf (Index (WTSY, One)), 0x07))
                    Store (BL06, Index (DerefOf (Index (WTSY, One)), 0x08))
                    Store (BL07, Index (DerefOf (Index (WTSY, One)), 0x09))
                    Store (BL08, Index (DerefOf (Index (WTSY, One)), 0x0A))
                    Store (BL09, Index (DerefOf (Index (WTSY, One)), 0x0B))
                    Store (BL10, Index (DerefOf (Index (WTSY, One)), 0x0C))
                    Store (BL11, Index (DerefOf (Index (WTSY, One)), 0x0D))
                    Store (BL12, Index (DerefOf (Index (WTSY, One)), 0x0E))
                    Store (BL13, Index (DerefOf (Index (WTSY, One)), 0x0F))
                    Store (BL14, Index (DerefOf (Index (WTSY, One)), 0x10))
                    Store (BL15, Index (DerefOf (Index (WTSY, One)), 0x11))
                    Store (BL16, Index (DerefOf (Index (WTSY, One)), 0x12))
                    Return (WTSY)
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    Store (WLBI, Index (DerefOf (Index (WAIY, One)), One))
                    Store (WHBI, Index (DerefOf (Index (WAIY, One)), 0x02))
                    Return (WAIY)
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                    Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                    Return (SADX)
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX)
                }
            }

            If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If (LNotEqual (GGOV (PRST), WPRP))
                    {
                        DL23 ()
                        SGOV (PRST, WPRP)
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    If (LEqual (Arg0, Zero))
                    {
                        Sleep (TBTG)
                    }
                    ElseIf (LEqual (Arg0, One))
                    {
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, And (Not (PFCP), One))
                        Sleep (TFDI)
                    }
                    Else
                    {
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    SPCO (WCLK, One)
                    SGOV (WFCP, PFCP)
                    Sleep (TN2B)
                    SGOV (WBRS, And (Not (PBRS), One))
                    Sleep (TB2R)
                    SGOV (PRST, And (Not (WPRP), One))
                    L23D ()
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Store (Zero, Local0)
                    While (LAnd (LNotEqual (SVID, WSID), LLess (Local0, WSTO)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    If (LEqual (WWEN, 0x02))
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (Zero)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One)
                        SGOV (PRST, And (Not (WPRP), One))
                        SGOV (WBRS, And (Not (PBRS), One))
                        Sleep (0xC8)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x14))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Sleep (0x0A)
                        Notify (PXSX, One)
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (One)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                }
            }

            If (LOr (WIST (), LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT))))
            {
                PowerResource (DRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        DRST
                    })
                }

                Method (IFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        ShiftLeft (CVPR, Zero, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        If (LEqual (CMDT, One))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Return (^^^CNVW.RSTT)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If (LEqual (CMDT, 0x02))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Store (CMDP, ^^^CNVW.RSTT)
                            }

                            Return (Zero)
                        }

                        If (LEqual (CMDT, 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                Return (^^^CNVW.PRRS)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (Zero)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LEqual (CRFI, One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x01                                     
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Store (ACSD, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Store (I5BS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Store (UHBS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        Store (AXMU, Local0)
                        ShiftLeft (Local0, One, Local0)
                        Or (Local0, AXSU, Local0)
                        Store (AXMR, Local1)
                        ShiftLeft (Local1, One, Local1)
                        Or (Local1, AXSR, Local1)
                        ShiftLeft (Local1, 0x02, Local1)
                        Or (Local0, Local1, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (WFRC)
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (WFUC)
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        Return (UNI4)
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        Return (WFIC)
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (LEqual (Arg0, ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d")))
                        {
                            If (LEqual (Arg2, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                           
                                })
                            }

                            If (LEqual (Arg2, One)){}
                            If (LEqual (Arg2, 0x02)){}
                            If (LEqual (Arg2, 0x03))
                            {
                                If (LEqual (WRTO, One)){}
                                ElseIf (LEqual (WRTO, 0x03)){}
                                Else
                                {
                                }

                                Return (WRTO)
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP13.PXSX))
    {
        Scope (_SB.PC00.RP13.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, Add (GMIO (^_ADR, _ADR), 0x44), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                    Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                    Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                    Return (SPLX)
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                    Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                    Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                    Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                    Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                    Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                    Return (WANX)
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                    Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                    Return (WRDX)
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    Store (STXE, Index (DerefOf (Index (WRDY, One)), One))
                    Store (ST10, Index (DerefOf (Index (WRDY, One)), 0x02))
                    Store (ST11, Index (DerefOf (Index (WRDY, One)), 0x03))
                    Store (ST12, Index (DerefOf (Index (WRDY, One)), 0x04))
                    Store (ST13, Index (DerefOf (Index (WRDY, One)), 0x05))
                    Store (ST14, Index (DerefOf (Index (WRDY, One)), 0x06))
                    Store (ST15, Index (DerefOf (Index (WRDY, One)), 0x07))
                    Store (ST16, Index (DerefOf (Index (WRDY, One)), 0x08))
                    Store (ST17, Index (DerefOf (Index (WRDY, One)), 0x09))
                    Store (ST18, Index (DerefOf (Index (WRDY, One)), 0x0A))
                    Store (ST19, Index (DerefOf (Index (WRDY, One)), 0x0B))
                    Store (ST50, Index (DerefOf (Index (WRDY, One)), 0x0C))
                    Store (ST51, Index (DerefOf (Index (WRDY, One)), 0x0D))
                    Store (ST52, Index (DerefOf (Index (WRDY, One)), 0x0E))
                    Store (ST53, Index (DerefOf (Index (WRDY, One)), 0x0F))
                    Store (ST54, Index (DerefOf (Index (WRDY, One)), 0x10))
                    Store (ST55, Index (DerefOf (Index (WRDY, One)), 0x11))
                    Store (ST56, Index (DerefOf (Index (WRDY, One)), 0x12))
                    Store (ST57, Index (DerefOf (Index (WRDY, One)), 0x13))
                    Store (ST58, Index (DerefOf (Index (WRDY, One)), 0x14))
                    Store (ST59, Index (DerefOf (Index (WRDY, One)), 0x15))
                    Store (ST5A, Index (DerefOf (Index (WRDY, One)), 0x16))
                    Store (ST5B, Index (DerefOf (Index (WRDY, One)), 0x17))
                    Store (CD10, Index (DerefOf (Index (WRDY, One)), 0x18))
                    Store (CD11, Index (DerefOf (Index (WRDY, One)), 0x19))
                    Store (CD12, Index (DerefOf (Index (WRDY, One)), 0x1A))
                    Store (CD13, Index (DerefOf (Index (WRDY, One)), 0x1B))
                    Store (CD14, Index (DerefOf (Index (WRDY, One)), 0x1C))
                    Store (CD15, Index (DerefOf (Index (WRDY, One)), 0x1D))
                    Store (CD16, Index (DerefOf (Index (WRDY, One)), 0x1E))
                    Store (CD17, Index (DerefOf (Index (WRDY, One)), 0x1F))
                    Store (CD18, Index (DerefOf (Index (WRDY, One)), 0x20))
                    Store (CD19, Index (DerefOf (Index (WRDY, One)), 0x21))
                    Store (CD1A, Index (DerefOf (Index (WRDY, One)), 0x22))
                    Store (CD20, Index (DerefOf (Index (WRDY, One)), 0x23))
                    Store (CD21, Index (DerefOf (Index (WRDY, One)), 0x24))
                    Store (CD22, Index (DerefOf (Index (WRDY, One)), 0x25))
                    Store (CD23, Index (DerefOf (Index (WRDY, One)), 0x26))
                    Store (CD24, Index (DerefOf (Index (WRDY, One)), 0x27))
                    Store (CD25, Index (DerefOf (Index (WRDY, One)), 0x28))
                    Store (CD26, Index (DerefOf (Index (WRDY, One)), 0x29))
                    Store (CD27, Index (DerefOf (Index (WRDY, One)), 0x2A))
                    Store (CD28, Index (DerefOf (Index (WRDY, One)), 0x2B))
                    Store (CD29, Index (DerefOf (Index (WRDY, One)), 0x2C))
                    Store (CD2A, Index (DerefOf (Index (WRDY, One)), 0x2D))
                    Return (WRDY)
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    Store (STDE, Index (DerefOf (Index (EWRY, One)), One))
                    Store (STRS, Index (DerefOf (Index (EWRY, One)), 0x02))
                    Store (ST20, Index (DerefOf (Index (EWRY, One)), 0x03))
                    Store (ST21, Index (DerefOf (Index (EWRY, One)), 0x04))
                    Store (ST22, Index (DerefOf (Index (EWRY, One)), 0x05))
                    Store (ST23, Index (DerefOf (Index (EWRY, One)), 0x06))
                    Store (ST24, Index (DerefOf (Index (EWRY, One)), 0x07))
                    Store (ST25, Index (DerefOf (Index (EWRY, One)), 0x08))
                    Store (ST26, Index (DerefOf (Index (EWRY, One)), 0x09))
                    Store (ST27, Index (DerefOf (Index (EWRY, One)), 0x0A))
                    Store (ST28, Index (DerefOf (Index (EWRY, One)), 0x0B))
                    Store (ST29, Index (DerefOf (Index (EWRY, One)), 0x0C))
                    Store (ST60, Index (DerefOf (Index (EWRY, One)), 0x0D))
                    Store (ST61, Index (DerefOf (Index (EWRY, One)), 0x0E))
                    Store (ST62, Index (DerefOf (Index (EWRY, One)), 0x0F))
                    Store (ST63, Index (DerefOf (Index (EWRY, One)), 0x10))
                    Store (ST64, Index (DerefOf (Index (EWRY, One)), 0x11))
                    Store (ST65, Index (DerefOf (Index (EWRY, One)), 0x12))
                    Store (ST66, Index (DerefOf (Index (EWRY, One)), 0x13))
                    Store (ST67, Index (DerefOf (Index (EWRY, One)), 0x14))
                    Store (ST68, Index (DerefOf (Index (EWRY, One)), 0x15))
                    Store (ST69, Index (DerefOf (Index (EWRY, One)), 0x16))
                    Store (ST6A, Index (DerefOf (Index (EWRY, One)), 0x17))
                    Store (ST6B, Index (DerefOf (Index (EWRY, One)), 0x18))
                    Store (ST30, Index (DerefOf (Index (EWRY, One)), 0x19))
                    Store (ST31, Index (DerefOf (Index (EWRY, One)), 0x1A))
                    Store (ST32, Index (DerefOf (Index (EWRY, One)), 0x1B))
                    Store (ST33, Index (DerefOf (Index (EWRY, One)), 0x1C))
                    Store (ST34, Index (DerefOf (Index (EWRY, One)), 0x1D))
                    Store (ST35, Index (DerefOf (Index (EWRY, One)), 0x1E))
                    Store (ST36, Index (DerefOf (Index (EWRY, One)), 0x1F))
                    Store (ST37, Index (DerefOf (Index (EWRY, One)), 0x20))
                    Store (ST38, Index (DerefOf (Index (EWRY, One)), 0x21))
                    Store (ST39, Index (DerefOf (Index (EWRY, One)), 0x22))
                    Store (ST70, Index (DerefOf (Index (EWRY, One)), 0x23))
                    Store (ST71, Index (DerefOf (Index (EWRY, One)), 0x24))
                    Store (ST72, Index (DerefOf (Index (EWRY, One)), 0x25))
                    Store (ST73, Index (DerefOf (Index (EWRY, One)), 0x26))
                    Store (ST74, Index (DerefOf (Index (EWRY, One)), 0x27))
                    Store (ST75, Index (DerefOf (Index (EWRY, One)), 0x28))
                    Store (ST76, Index (DerefOf (Index (EWRY, One)), 0x29))
                    Store (ST77, Index (DerefOf (Index (EWRY, One)), 0x2A))
                    Store (ST78, Index (DerefOf (Index (EWRY, One)), 0x2B))
                    Store (ST79, Index (DerefOf (Index (EWRY, One)), 0x2C))
                    Store (ST7A, Index (DerefOf (Index (EWRY, One)), 0x2D))
                    Store (ST7B, Index (DerefOf (Index (EWRY, One)), 0x2E))
                    Store (ST40, Index (DerefOf (Index (EWRY, One)), 0x2F))
                    Store (ST41, Index (DerefOf (Index (EWRY, One)), 0x30))
                    Store (ST42, Index (DerefOf (Index (EWRY, One)), 0x31))
                    Store (ST43, Index (DerefOf (Index (EWRY, One)), 0x32))
                    Store (ST44, Index (DerefOf (Index (EWRY, One)), 0x33))
                    Store (ST45, Index (DerefOf (Index (EWRY, One)), 0x34))
                    Store (ST46, Index (DerefOf (Index (EWRY, One)), 0x35))
                    Store (ST47, Index (DerefOf (Index (EWRY, One)), 0x36))
                    Store (ST48, Index (DerefOf (Index (EWRY, One)), 0x37))
                    Store (ST49, Index (DerefOf (Index (EWRY, One)), 0x38))
                    Store (ST80, Index (DerefOf (Index (EWRY, One)), 0x39))
                    Store (ST81, Index (DerefOf (Index (EWRY, One)), 0x3A))
                    Store (ST82, Index (DerefOf (Index (EWRY, One)), 0x3B))
                    Store (ST83, Index (DerefOf (Index (EWRY, One)), 0x3C))
                    Store (ST84, Index (DerefOf (Index (EWRY, One)), 0x3D))
                    Store (ST85, Index (DerefOf (Index (EWRY, One)), 0x3E))
                    Store (ST86, Index (DerefOf (Index (EWRY, One)), 0x3F))
                    Store (ST87, Index (DerefOf (Index (EWRY, One)), 0x40))
                    Store (ST88, Index (DerefOf (Index (EWRY, One)), 0x41))
                    Store (ST89, Index (DerefOf (Index (EWRY, One)), 0x42))
                    Store (ST8A, Index (DerefOf (Index (EWRY, One)), 0x43))
                    Store (ST8B, Index (DerefOf (Index (EWRY, One)), 0x44))
                    Store (CD30, Index (DerefOf (Index (EWRY, One)), 0x45))
                    Store (CD31, Index (DerefOf (Index (EWRY, One)), 0x46))
                    Store (CD32, Index (DerefOf (Index (EWRY, One)), 0x47))
                    Store (CD33, Index (DerefOf (Index (EWRY, One)), 0x48))
                    Store (CD34, Index (DerefOf (Index (EWRY, One)), 0x49))
                    Store (CD35, Index (DerefOf (Index (EWRY, One)), 0x4A))
                    Store (CD36, Index (DerefOf (Index (EWRY, One)), 0x4B))
                    Store (CD37, Index (DerefOf (Index (EWRY, One)), 0x4C))
                    Store (CD38, Index (DerefOf (Index (EWRY, One)), 0x4D))
                    Store (CD39, Index (DerefOf (Index (EWRY, One)), 0x4E))
                    Store (CD3A, Index (DerefOf (Index (EWRY, One)), 0x4F))
                    Store (CD3B, Index (DerefOf (Index (EWRY, One)), 0x50))
                    Store (CD3C, Index (DerefOf (Index (EWRY, One)), 0x51))
                    Store (CD3D, Index (DerefOf (Index (EWRY, One)), 0x52))
                    Store (CD3E, Index (DerefOf (Index (EWRY, One)), 0x53))
                    Store (CD3F, Index (DerefOf (Index (EWRY, One)), 0x54))
                    Store (CD40, Index (DerefOf (Index (EWRY, One)), 0x55))
                    Store (CD41, Index (DerefOf (Index (EWRY, One)), 0x56))
                    Store (CD42, Index (DerefOf (Index (EWRY, One)), 0x57))
                    Store (CD43, Index (DerefOf (Index (EWRY, One)), 0x58))
                    Store (CD44, Index (DerefOf (Index (EWRY, One)), 0x59))
                    Store (CD45, Index (DerefOf (Index (EWRY, One)), 0x5A))
                    Store (CD46, Index (DerefOf (Index (EWRY, One)), 0x5B))
                    Store (CD47, Index (DerefOf (Index (EWRY, One)), 0x5C))
                    Store (CD48, Index (DerefOf (Index (EWRY, One)), 0x5D))
                    Store (CD49, Index (DerefOf (Index (EWRY, One)), 0x5E))
                    Store (CD4A, Index (DerefOf (Index (EWRY, One)), 0x5F))
                    Store (CD4B, Index (DerefOf (Index (EWRY, One)), 0x60))
                    Store (CD4C, Index (DerefOf (Index (EWRY, One)), 0x61))
                    Store (CD4D, Index (DerefOf (Index (EWRY, One)), 0x62))
                    Store (CD4E, Index (DerefOf (Index (EWRY, One)), 0x63))
                    Store (CD4F, Index (DerefOf (Index (EWRY, One)), 0x64))
                    Store (CD50, Index (DerefOf (Index (EWRY, One)), 0x65))
                    Store (CD51, Index (DerefOf (Index (EWRY, One)), 0x66))
                    Store (CD52, Index (DerefOf (Index (EWRY, One)), 0x67))
                    Store (CD53, Index (DerefOf (Index (EWRY, One)), 0x68))
                    Store (CD54, Index (DerefOf (Index (EWRY, One)), 0x69))
                    Store (CD55, Index (DerefOf (Index (EWRY, One)), 0x6A))
                    Store (CD56, Index (DerefOf (Index (EWRY, One)), 0x6B))
                    Store (CD57, Index (DerefOf (Index (EWRY, One)), 0x6C))
                    Store (CD58, Index (DerefOf (Index (EWRY, One)), 0x6D))
                    Store (CD59, Index (DerefOf (Index (EWRY, One)), 0x6E))
                    Store (CD5A, Index (DerefOf (Index (EWRY, One)), 0x6F))
                    Store (CD5B, Index (DerefOf (Index (EWRY, One)), 0x70))
                    Store (CD5C, Index (DerefOf (Index (EWRY, One)), 0x71))
                    Store (CD5D, Index (DerefOf (Index (EWRY, One)), 0x72))
                    Store (CD5E, Index (DerefOf (Index (EWRY, One)), 0x73))
                    Store (CD5F, Index (DerefOf (Index (EWRY, One)), 0x74))
                    Store (CD60, Index (DerefOf (Index (EWRY, One)), 0x75))
                    Store (CD61, Index (DerefOf (Index (EWRY, One)), 0x76))
                    Store (CD62, Index (DerefOf (Index (EWRY, One)), 0x77))
                    Store (CD63, Index (DerefOf (Index (EWRY, One)), 0x78))
                    Store (CD64, Index (DerefOf (Index (EWRY, One)), 0x79))
                    Store (CD65, Index (DerefOf (Index (EWRY, One)), 0x7A))
                    Store (CD66, Index (DerefOf (Index (EWRY, One)), 0x7B))
                    Store (CD67, Index (DerefOf (Index (EWRY, One)), 0x7C))
                    Store (CD68, Index (DerefOf (Index (EWRY, One)), 0x7D))
                    Store (CD69, Index (DerefOf (Index (EWRY, One)), 0x7E))
                    Store (CD6A, Index (DerefOf (Index (EWRY, One)), 0x7F))
                    Store (CD6B, Index (DerefOf (Index (EWRY, One)), 0x80))
                    Store (CD6C, Index (DerefOf (Index (EWRY, One)), 0x81))
                    Store (CD6D, Index (DerefOf (Index (EWRY, One)), 0x82))
                    Store (CD6E, Index (DerefOf (Index (EWRY, One)), 0x83))
                    Store (CD6F, Index (DerefOf (Index (EWRY, One)), 0x84))
                    Store (CD70, Index (DerefOf (Index (EWRY, One)), 0x85))
                    Store (CD71, Index (DerefOf (Index (EWRY, One)), 0x86))
                    Return (EWRY)
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    Store (SDGN, Index (DerefOf (Index (WGDY, One)), One))
                    Store (SD11, Index (DerefOf (Index (WGDY, One)), 0x02))
                    Store (SD12, Index (DerefOf (Index (WGDY, One)), 0x03))
                    Store (SD13, Index (DerefOf (Index (WGDY, One)), 0x04))
                    Store (SD14, Index (DerefOf (Index (WGDY, One)), 0x05))
                    Store (SD15, Index (DerefOf (Index (WGDY, One)), 0x06))
                    Store (SD16, Index (DerefOf (Index (WGDY, One)), 0x07))
                    Store (SD17, Index (DerefOf (Index (WGDY, One)), 0x08))
                    Store (SD18, Index (DerefOf (Index (WGDY, One)), 0x09))
                    Store (SD19, Index (DerefOf (Index (WGDY, One)), 0x0A))
                    Store (SD21, Index (DerefOf (Index (WGDY, One)), 0x0B))
                    Store (SD22, Index (DerefOf (Index (WGDY, One)), 0x0C))
                    Store (SD23, Index (DerefOf (Index (WGDY, One)), 0x0D))
                    Store (SD24, Index (DerefOf (Index (WGDY, One)), 0x0E))
                    Store (SD25, Index (DerefOf (Index (WGDY, One)), 0x0F))
                    Store (SD26, Index (DerefOf (Index (WGDY, One)), 0x10))
                    Store (SD27, Index (DerefOf (Index (WGDY, One)), 0x11))
                    Store (SD28, Index (DerefOf (Index (WGDY, One)), 0x12))
                    Store (SD29, Index (DerefOf (Index (WGDY, One)), 0x13))
                    Store (SD31, Index (DerefOf (Index (WGDY, One)), 0x14))
                    Store (SD32, Index (DerefOf (Index (WGDY, One)), 0x15))
                    Store (SD33, Index (DerefOf (Index (WGDY, One)), 0x16))
                    Store (SD34, Index (DerefOf (Index (WGDY, One)), 0x17))
                    Store (SD35, Index (DerefOf (Index (WGDY, One)), 0x18))
                    Store (SD36, Index (DerefOf (Index (WGDY, One)), 0x19))
                    Store (SD37, Index (DerefOf (Index (WGDY, One)), 0x1A))
                    Store (SD38, Index (DerefOf (Index (WGDY, One)), 0x1B))
                    Store (SD39, Index (DerefOf (Index (WGDY, One)), 0x1C))
                    Store (SD41, Index (DerefOf (Index (WGDY, One)), 0x1D))
                    Store (SD42, Index (DerefOf (Index (WGDY, One)), 0x1E))
                    Store (SD43, Index (DerefOf (Index (WGDY, One)), 0x1F))
                    Store (SD44, Index (DerefOf (Index (WGDY, One)), 0x20))
                    Store (SD45, Index (DerefOf (Index (WGDY, One)), 0x21))
                    Store (SD46, Index (DerefOf (Index (WGDY, One)), 0x22))
                    Store (SD47, Index (DerefOf (Index (WGDY, One)), 0x23))
                    Store (SD48, Index (DerefOf (Index (WGDY, One)), 0x24))
                    Store (SD49, Index (DerefOf (Index (WGDY, One)), 0x25))
                    Store (SD51, Index (DerefOf (Index (WGDY, One)), 0x26))
                    Store (SD52, Index (DerefOf (Index (WGDY, One)), 0x27))
                    Store (SD53, Index (DerefOf (Index (WGDY, One)), 0x28))
                    Store (SD54, Index (DerefOf (Index (WGDY, One)), 0x29))
                    Store (SD55, Index (DerefOf (Index (WGDY, One)), 0x2A))
                    Store (SD56, Index (DerefOf (Index (WGDY, One)), 0x2B))
                    Store (SD57, Index (DerefOf (Index (WGDY, One)), 0x2C))
                    Store (SD58, Index (DerefOf (Index (WGDY, One)), 0x2D))
                    Store (SD59, Index (DerefOf (Index (WGDY, One)), 0x2E))
                    Store (SD61, Index (DerefOf (Index (WGDY, One)), 0x2F))
                    Store (SD62, Index (DerefOf (Index (WGDY, One)), 0x30))
                    Store (SD63, Index (DerefOf (Index (WGDY, One)), 0x31))
                    Store (SD64, Index (DerefOf (Index (WGDY, One)), 0x32))
                    Store (SD65, Index (DerefOf (Index (WGDY, One)), 0x33))
                    Store (SD66, Index (DerefOf (Index (WGDY, One)), 0x34))
                    Store (SD67, Index (DerefOf (Index (WGDY, One)), 0x35))
                    Store (SD68, Index (DerefOf (Index (WGDY, One)), 0x36))
                    Store (SD69, Index (DerefOf (Index (WGDY, One)), 0x37))
                    Store (SD71, Index (DerefOf (Index (WGDY, One)), 0x38))
                    Store (SD72, Index (DerefOf (Index (WGDY, One)), 0x39))
                    Store (SD73, Index (DerefOf (Index (WGDY, One)), 0x3A))
                    Store (SD74, Index (DerefOf (Index (WGDY, One)), 0x3B))
                    Store (SD75, Index (DerefOf (Index (WGDY, One)), 0x3C))
                    Store (SD76, Index (DerefOf (Index (WGDY, One)), 0x3D))
                    Store (SD77, Index (DerefOf (Index (WGDY, One)), 0x3E))
                    Store (SD78, Index (DerefOf (Index (WGDY, One)), 0x3F))
                    Store (SD79, Index (DerefOf (Index (WGDY, One)), 0x40))
                    Store (SD81, Index (DerefOf (Index (WGDY, One)), 0x41))
                    Store (SD82, Index (DerefOf (Index (WGDY, One)), 0x42))
                    Store (SD83, Index (DerefOf (Index (WGDY, One)), 0x43))
                    Store (SD84, Index (DerefOf (Index (WGDY, One)), 0x44))
                    Store (SD85, Index (DerefOf (Index (WGDY, One)), 0x45))
                    Store (SD86, Index (DerefOf (Index (WGDY, One)), 0x46))
                    Store (SD87, Index (DerefOf (Index (WGDY, One)), 0x47))
                    Store (SD88, Index (DerefOf (Index (WGDY, One)), 0x48))
                    Store (SD89, Index (DerefOf (Index (WGDY, One)), 0x49))
                    Return (WGDY)
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                    Return (ECKY)
                }

                Name (PPAY, Package (0x02)
                {
                    One, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    Store (WAGE, Index (DerefOf (Index (PPAY, One)), One))
                    Store (AGA1, Index (DerefOf (Index (PPAY, One)), 0x02))
                    Store (AGA2, Index (DerefOf (Index (PPAY, One)), 0x03))
                    Store (AGA3, Index (DerefOf (Index (PPAY, One)), 0x04))
                    Store (AGA4, Index (DerefOf (Index (PPAY, One)), 0x05))
                    Store (AGA5, Index (DerefOf (Index (PPAY, One)), 0x06))
                    Store (AGA6, Index (DerefOf (Index (PPAY, One)), 0x07))
                    Store (AGA7, Index (DerefOf (Index (PPAY, One)), 0x08))
                    Store (AGA8, Index (DerefOf (Index (PPAY, One)), 0x09))
                    Store (AGA9, Index (DerefOf (Index (PPAY, One)), 0x0A))
                    Store (AGAA, Index (DerefOf (Index (PPAY, One)), 0x0B))
                    Store (AGAB, Index (DerefOf (Index (PPAY, One)), 0x0C))
                    Store (AGB1, Index (DerefOf (Index (PPAY, One)), 0x0D))
                    Store (AGB2, Index (DerefOf (Index (PPAY, One)), 0x0E))
                    Store (AGB3, Index (DerefOf (Index (PPAY, One)), 0x0F))
                    Store (AGB4, Index (DerefOf (Index (PPAY, One)), 0x10))
                    Store (AGB5, Index (DerefOf (Index (PPAY, One)), 0x11))
                    Store (AGB6, Index (DerefOf (Index (PPAY, One)), 0x12))
                    Store (AGB7, Index (DerefOf (Index (PPAY, One)), 0x13))
                    Store (AGB8, Index (DerefOf (Index (PPAY, One)), 0x14))
                    Store (AGB9, Index (DerefOf (Index (PPAY, One)), 0x15))
                    Store (AGBA, Index (DerefOf (Index (PPAY, One)), 0x16))
                    Store (AGBB, Index (DerefOf (Index (PPAY, One)), 0x17))
                    Return (PPAY)
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    Store (WTSV, Index (DerefOf (Index (WTSY, One)), One))
                    Store (WTLE, Index (DerefOf (Index (WTSY, One)), 0x02))
                    Store (BL01, Index (DerefOf (Index (WTSY, One)), 0x03))
                    Store (BL02, Index (DerefOf (Index (WTSY, One)), 0x04))
                    Store (BL03, Index (DerefOf (Index (WTSY, One)), 0x05))
                    Store (BL04, Index (DerefOf (Index (WTSY, One)), 0x06))
                    Store (BL05, Index (DerefOf (Index (WTSY, One)), 0x07))
                    Store (BL06, Index (DerefOf (Index (WTSY, One)), 0x08))
                    Store (BL07, Index (DerefOf (Index (WTSY, One)), 0x09))
                    Store (BL08, Index (DerefOf (Index (WTSY, One)), 0x0A))
                    Store (BL09, Index (DerefOf (Index (WTSY, One)), 0x0B))
                    Store (BL10, Index (DerefOf (Index (WTSY, One)), 0x0C))
                    Store (BL11, Index (DerefOf (Index (WTSY, One)), 0x0D))
                    Store (BL12, Index (DerefOf (Index (WTSY, One)), 0x0E))
                    Store (BL13, Index (DerefOf (Index (WTSY, One)), 0x0F))
                    Store (BL14, Index (DerefOf (Index (WTSY, One)), 0x10))
                    Store (BL15, Index (DerefOf (Index (WTSY, One)), 0x11))
                    Store (BL16, Index (DerefOf (Index (WTSY, One)), 0x12))
                    Return (WTSY)
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    Store (WLBI, Index (DerefOf (Index (WAIY, One)), One))
                    Store (WHBI, Index (DerefOf (Index (WAIY, One)), 0x02))
                    Return (WAIY)
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                    Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                    Return (SADX)
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX)
                }
            }

            If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If (LNotEqual (GGOV (PRST), WPRP))
                    {
                        DL23 ()
                        SGOV (PRST, WPRP)
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    If (LEqual (Arg0, Zero))
                    {
                        Sleep (TBTG)
                    }
                    ElseIf (LEqual (Arg0, One))
                    {
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, And (Not (PFCP), One))
                        Sleep (TFDI)
                    }
                    Else
                    {
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    SPCO (WCLK, One)
                    SGOV (WFCP, PFCP)
                    Sleep (TN2B)
                    SGOV (WBRS, And (Not (PBRS), One))
                    Sleep (TB2R)
                    SGOV (PRST, And (Not (WPRP), One))
                    L23D ()
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Store (Zero, Local0)
                    While (LAnd (LNotEqual (SVID, WSID), LLess (Local0, WSTO)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    If (LEqual (WWEN, 0x02))
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (Zero)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One)
                        SGOV (PRST, And (Not (WPRP), One))
                        SGOV (WBRS, And (Not (PBRS), One))
                        Sleep (0xC8)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x14))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Sleep (0x0A)
                        Notify (PXSX, One)
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (One)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                }
            }

            If (LOr (WIST (), LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT))))
            {
                PowerResource (DRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        DRST
                    })
                }

                Method (IFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        ShiftLeft (CVPR, Zero, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        If (LEqual (CMDT, One))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Return (^^^CNVW.RSTT)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If (LEqual (CMDT, 0x02))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Store (CMDP, ^^^CNVW.RSTT)
                            }

                            Return (Zero)
                        }

                        If (LEqual (CMDT, 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                Return (^^^CNVW.PRRS)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (Zero)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LEqual (CRFI, One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x01                                     
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Store (ACSD, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Store (I5BS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Store (UHBS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        Store (AXMU, Local0)
                        ShiftLeft (Local0, One, Local0)
                        Or (Local0, AXSU, Local0)
                        Store (AXMR, Local1)
                        ShiftLeft (Local1, One, Local1)
                        Or (Local1, AXSR, Local1)
                        ShiftLeft (Local1, 0x02, Local1)
                        Or (Local0, Local1, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (WFRC)
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (WFUC)
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        Return (UNI4)
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        Return (WFIC)
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (LEqual (Arg0, ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d")))
                        {
                            If (LEqual (Arg2, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                           
                                })
                            }

                            If (LEqual (Arg2, One)){}
                            If (LEqual (Arg2, 0x02)){}
                            If (LEqual (Arg2, 0x03))
                            {
                                If (LEqual (WRTO, One)){}
                                ElseIf (LEqual (WRTO, 0x03)){}
                                Else
                                {
                                }

                                Return (WRTO)
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP14.PXSX))
    {
        Scope (_SB.PC00.RP14.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, Add (GMIO (^_ADR, _ADR), 0x44), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                    Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                    Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                    Return (SPLX)
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                    Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                    Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                    Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                    Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                    Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                    Return (WANX)
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                    Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                    Return (WRDX)
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    Store (STXE, Index (DerefOf (Index (WRDY, One)), One))
                    Store (ST10, Index (DerefOf (Index (WRDY, One)), 0x02))
                    Store (ST11, Index (DerefOf (Index (WRDY, One)), 0x03))
                    Store (ST12, Index (DerefOf (Index (WRDY, One)), 0x04))
                    Store (ST13, Index (DerefOf (Index (WRDY, One)), 0x05))
                    Store (ST14, Index (DerefOf (Index (WRDY, One)), 0x06))
                    Store (ST15, Index (DerefOf (Index (WRDY, One)), 0x07))
                    Store (ST16, Index (DerefOf (Index (WRDY, One)), 0x08))
                    Store (ST17, Index (DerefOf (Index (WRDY, One)), 0x09))
                    Store (ST18, Index (DerefOf (Index (WRDY, One)), 0x0A))
                    Store (ST19, Index (DerefOf (Index (WRDY, One)), 0x0B))
                    Store (ST50, Index (DerefOf (Index (WRDY, One)), 0x0C))
                    Store (ST51, Index (DerefOf (Index (WRDY, One)), 0x0D))
                    Store (ST52, Index (DerefOf (Index (WRDY, One)), 0x0E))
                    Store (ST53, Index (DerefOf (Index (WRDY, One)), 0x0F))
                    Store (ST54, Index (DerefOf (Index (WRDY, One)), 0x10))
                    Store (ST55, Index (DerefOf (Index (WRDY, One)), 0x11))
                    Store (ST56, Index (DerefOf (Index (WRDY, One)), 0x12))
                    Store (ST57, Index (DerefOf (Index (WRDY, One)), 0x13))
                    Store (ST58, Index (DerefOf (Index (WRDY, One)), 0x14))
                    Store (ST59, Index (DerefOf (Index (WRDY, One)), 0x15))
                    Store (ST5A, Index (DerefOf (Index (WRDY, One)), 0x16))
                    Store (ST5B, Index (DerefOf (Index (WRDY, One)), 0x17))
                    Store (CD10, Index (DerefOf (Index (WRDY, One)), 0x18))
                    Store (CD11, Index (DerefOf (Index (WRDY, One)), 0x19))
                    Store (CD12, Index (DerefOf (Index (WRDY, One)), 0x1A))
                    Store (CD13, Index (DerefOf (Index (WRDY, One)), 0x1B))
                    Store (CD14, Index (DerefOf (Index (WRDY, One)), 0x1C))
                    Store (CD15, Index (DerefOf (Index (WRDY, One)), 0x1D))
                    Store (CD16, Index (DerefOf (Index (WRDY, One)), 0x1E))
                    Store (CD17, Index (DerefOf (Index (WRDY, One)), 0x1F))
                    Store (CD18, Index (DerefOf (Index (WRDY, One)), 0x20))
                    Store (CD19, Index (DerefOf (Index (WRDY, One)), 0x21))
                    Store (CD1A, Index (DerefOf (Index (WRDY, One)), 0x22))
                    Store (CD20, Index (DerefOf (Index (WRDY, One)), 0x23))
                    Store (CD21, Index (DerefOf (Index (WRDY, One)), 0x24))
                    Store (CD22, Index (DerefOf (Index (WRDY, One)), 0x25))
                    Store (CD23, Index (DerefOf (Index (WRDY, One)), 0x26))
                    Store (CD24, Index (DerefOf (Index (WRDY, One)), 0x27))
                    Store (CD25, Index (DerefOf (Index (WRDY, One)), 0x28))
                    Store (CD26, Index (DerefOf (Index (WRDY, One)), 0x29))
                    Store (CD27, Index (DerefOf (Index (WRDY, One)), 0x2A))
                    Store (CD28, Index (DerefOf (Index (WRDY, One)), 0x2B))
                    Store (CD29, Index (DerefOf (Index (WRDY, One)), 0x2C))
                    Store (CD2A, Index (DerefOf (Index (WRDY, One)), 0x2D))
                    Return (WRDY)
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    Store (STDE, Index (DerefOf (Index (EWRY, One)), One))
                    Store (STRS, Index (DerefOf (Index (EWRY, One)), 0x02))
                    Store (ST20, Index (DerefOf (Index (EWRY, One)), 0x03))
                    Store (ST21, Index (DerefOf (Index (EWRY, One)), 0x04))
                    Store (ST22, Index (DerefOf (Index (EWRY, One)), 0x05))
                    Store (ST23, Index (DerefOf (Index (EWRY, One)), 0x06))
                    Store (ST24, Index (DerefOf (Index (EWRY, One)), 0x07))
                    Store (ST25, Index (DerefOf (Index (EWRY, One)), 0x08))
                    Store (ST26, Index (DerefOf (Index (EWRY, One)), 0x09))
                    Store (ST27, Index (DerefOf (Index (EWRY, One)), 0x0A))
                    Store (ST28, Index (DerefOf (Index (EWRY, One)), 0x0B))
                    Store (ST29, Index (DerefOf (Index (EWRY, One)), 0x0C))
                    Store (ST60, Index (DerefOf (Index (EWRY, One)), 0x0D))
                    Store (ST61, Index (DerefOf (Index (EWRY, One)), 0x0E))
                    Store (ST62, Index (DerefOf (Index (EWRY, One)), 0x0F))
                    Store (ST63, Index (DerefOf (Index (EWRY, One)), 0x10))
                    Store (ST64, Index (DerefOf (Index (EWRY, One)), 0x11))
                    Store (ST65, Index (DerefOf (Index (EWRY, One)), 0x12))
                    Store (ST66, Index (DerefOf (Index (EWRY, One)), 0x13))
                    Store (ST67, Index (DerefOf (Index (EWRY, One)), 0x14))
                    Store (ST68, Index (DerefOf (Index (EWRY, One)), 0x15))
                    Store (ST69, Index (DerefOf (Index (EWRY, One)), 0x16))
                    Store (ST6A, Index (DerefOf (Index (EWRY, One)), 0x17))
                    Store (ST6B, Index (DerefOf (Index (EWRY, One)), 0x18))
                    Store (ST30, Index (DerefOf (Index (EWRY, One)), 0x19))
                    Store (ST31, Index (DerefOf (Index (EWRY, One)), 0x1A))
                    Store (ST32, Index (DerefOf (Index (EWRY, One)), 0x1B))
                    Store (ST33, Index (DerefOf (Index (EWRY, One)), 0x1C))
                    Store (ST34, Index (DerefOf (Index (EWRY, One)), 0x1D))
                    Store (ST35, Index (DerefOf (Index (EWRY, One)), 0x1E))
                    Store (ST36, Index (DerefOf (Index (EWRY, One)), 0x1F))
                    Store (ST37, Index (DerefOf (Index (EWRY, One)), 0x20))
                    Store (ST38, Index (DerefOf (Index (EWRY, One)), 0x21))
                    Store (ST39, Index (DerefOf (Index (EWRY, One)), 0x22))
                    Store (ST70, Index (DerefOf (Index (EWRY, One)), 0x23))
                    Store (ST71, Index (DerefOf (Index (EWRY, One)), 0x24))
                    Store (ST72, Index (DerefOf (Index (EWRY, One)), 0x25))
                    Store (ST73, Index (DerefOf (Index (EWRY, One)), 0x26))
                    Store (ST74, Index (DerefOf (Index (EWRY, One)), 0x27))
                    Store (ST75, Index (DerefOf (Index (EWRY, One)), 0x28))
                    Store (ST76, Index (DerefOf (Index (EWRY, One)), 0x29))
                    Store (ST77, Index (DerefOf (Index (EWRY, One)), 0x2A))
                    Store (ST78, Index (DerefOf (Index (EWRY, One)), 0x2B))
                    Store (ST79, Index (DerefOf (Index (EWRY, One)), 0x2C))
                    Store (ST7A, Index (DerefOf (Index (EWRY, One)), 0x2D))
                    Store (ST7B, Index (DerefOf (Index (EWRY, One)), 0x2E))
                    Store (ST40, Index (DerefOf (Index (EWRY, One)), 0x2F))
                    Store (ST41, Index (DerefOf (Index (EWRY, One)), 0x30))
                    Store (ST42, Index (DerefOf (Index (EWRY, One)), 0x31))
                    Store (ST43, Index (DerefOf (Index (EWRY, One)), 0x32))
                    Store (ST44, Index (DerefOf (Index (EWRY, One)), 0x33))
                    Store (ST45, Index (DerefOf (Index (EWRY, One)), 0x34))
                    Store (ST46, Index (DerefOf (Index (EWRY, One)), 0x35))
                    Store (ST47, Index (DerefOf (Index (EWRY, One)), 0x36))
                    Store (ST48, Index (DerefOf (Index (EWRY, One)), 0x37))
                    Store (ST49, Index (DerefOf (Index (EWRY, One)), 0x38))
                    Store (ST80, Index (DerefOf (Index (EWRY, One)), 0x39))
                    Store (ST81, Index (DerefOf (Index (EWRY, One)), 0x3A))
                    Store (ST82, Index (DerefOf (Index (EWRY, One)), 0x3B))
                    Store (ST83, Index (DerefOf (Index (EWRY, One)), 0x3C))
                    Store (ST84, Index (DerefOf (Index (EWRY, One)), 0x3D))
                    Store (ST85, Index (DerefOf (Index (EWRY, One)), 0x3E))
                    Store (ST86, Index (DerefOf (Index (EWRY, One)), 0x3F))
                    Store (ST87, Index (DerefOf (Index (EWRY, One)), 0x40))
                    Store (ST88, Index (DerefOf (Index (EWRY, One)), 0x41))
                    Store (ST89, Index (DerefOf (Index (EWRY, One)), 0x42))
                    Store (ST8A, Index (DerefOf (Index (EWRY, One)), 0x43))
                    Store (ST8B, Index (DerefOf (Index (EWRY, One)), 0x44))
                    Store (CD30, Index (DerefOf (Index (EWRY, One)), 0x45))
                    Store (CD31, Index (DerefOf (Index (EWRY, One)), 0x46))
                    Store (CD32, Index (DerefOf (Index (EWRY, One)), 0x47))
                    Store (CD33, Index (DerefOf (Index (EWRY, One)), 0x48))
                    Store (CD34, Index (DerefOf (Index (EWRY, One)), 0x49))
                    Store (CD35, Index (DerefOf (Index (EWRY, One)), 0x4A))
                    Store (CD36, Index (DerefOf (Index (EWRY, One)), 0x4B))
                    Store (CD37, Index (DerefOf (Index (EWRY, One)), 0x4C))
                    Store (CD38, Index (DerefOf (Index (EWRY, One)), 0x4D))
                    Store (CD39, Index (DerefOf (Index (EWRY, One)), 0x4E))
                    Store (CD3A, Index (DerefOf (Index (EWRY, One)), 0x4F))
                    Store (CD3B, Index (DerefOf (Index (EWRY, One)), 0x50))
                    Store (CD3C, Index (DerefOf (Index (EWRY, One)), 0x51))
                    Store (CD3D, Index (DerefOf (Index (EWRY, One)), 0x52))
                    Store (CD3E, Index (DerefOf (Index (EWRY, One)), 0x53))
                    Store (CD3F, Index (DerefOf (Index (EWRY, One)), 0x54))
                    Store (CD40, Index (DerefOf (Index (EWRY, One)), 0x55))
                    Store (CD41, Index (DerefOf (Index (EWRY, One)), 0x56))
                    Store (CD42, Index (DerefOf (Index (EWRY, One)), 0x57))
                    Store (CD43, Index (DerefOf (Index (EWRY, One)), 0x58))
                    Store (CD44, Index (DerefOf (Index (EWRY, One)), 0x59))
                    Store (CD45, Index (DerefOf (Index (EWRY, One)), 0x5A))
                    Store (CD46, Index (DerefOf (Index (EWRY, One)), 0x5B))
                    Store (CD47, Index (DerefOf (Index (EWRY, One)), 0x5C))
                    Store (CD48, Index (DerefOf (Index (EWRY, One)), 0x5D))
                    Store (CD49, Index (DerefOf (Index (EWRY, One)), 0x5E))
                    Store (CD4A, Index (DerefOf (Index (EWRY, One)), 0x5F))
                    Store (CD4B, Index (DerefOf (Index (EWRY, One)), 0x60))
                    Store (CD4C, Index (DerefOf (Index (EWRY, One)), 0x61))
                    Store (CD4D, Index (DerefOf (Index (EWRY, One)), 0x62))
                    Store (CD4E, Index (DerefOf (Index (EWRY, One)), 0x63))
                    Store (CD4F, Index (DerefOf (Index (EWRY, One)), 0x64))
                    Store (CD50, Index (DerefOf (Index (EWRY, One)), 0x65))
                    Store (CD51, Index (DerefOf (Index (EWRY, One)), 0x66))
                    Store (CD52, Index (DerefOf (Index (EWRY, One)), 0x67))
                    Store (CD53, Index (DerefOf (Index (EWRY, One)), 0x68))
                    Store (CD54, Index (DerefOf (Index (EWRY, One)), 0x69))
                    Store (CD55, Index (DerefOf (Index (EWRY, One)), 0x6A))
                    Store (CD56, Index (DerefOf (Index (EWRY, One)), 0x6B))
                    Store (CD57, Index (DerefOf (Index (EWRY, One)), 0x6C))
                    Store (CD58, Index (DerefOf (Index (EWRY, One)), 0x6D))
                    Store (CD59, Index (DerefOf (Index (EWRY, One)), 0x6E))
                    Store (CD5A, Index (DerefOf (Index (EWRY, One)), 0x6F))
                    Store (CD5B, Index (DerefOf (Index (EWRY, One)), 0x70))
                    Store (CD5C, Index (DerefOf (Index (EWRY, One)), 0x71))
                    Store (CD5D, Index (DerefOf (Index (EWRY, One)), 0x72))
                    Store (CD5E, Index (DerefOf (Index (EWRY, One)), 0x73))
                    Store (CD5F, Index (DerefOf (Index (EWRY, One)), 0x74))
                    Store (CD60, Index (DerefOf (Index (EWRY, One)), 0x75))
                    Store (CD61, Index (DerefOf (Index (EWRY, One)), 0x76))
                    Store (CD62, Index (DerefOf (Index (EWRY, One)), 0x77))
                    Store (CD63, Index (DerefOf (Index (EWRY, One)), 0x78))
                    Store (CD64, Index (DerefOf (Index (EWRY, One)), 0x79))
                    Store (CD65, Index (DerefOf (Index (EWRY, One)), 0x7A))
                    Store (CD66, Index (DerefOf (Index (EWRY, One)), 0x7B))
                    Store (CD67, Index (DerefOf (Index (EWRY, One)), 0x7C))
                    Store (CD68, Index (DerefOf (Index (EWRY, One)), 0x7D))
                    Store (CD69, Index (DerefOf (Index (EWRY, One)), 0x7E))
                    Store (CD6A, Index (DerefOf (Index (EWRY, One)), 0x7F))
                    Store (CD6B, Index (DerefOf (Index (EWRY, One)), 0x80))
                    Store (CD6C, Index (DerefOf (Index (EWRY, One)), 0x81))
                    Store (CD6D, Index (DerefOf (Index (EWRY, One)), 0x82))
                    Store (CD6E, Index (DerefOf (Index (EWRY, One)), 0x83))
                    Store (CD6F, Index (DerefOf (Index (EWRY, One)), 0x84))
                    Store (CD70, Index (DerefOf (Index (EWRY, One)), 0x85))
                    Store (CD71, Index (DerefOf (Index (EWRY, One)), 0x86))
                    Return (EWRY)
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    Store (SDGN, Index (DerefOf (Index (WGDY, One)), One))
                    Store (SD11, Index (DerefOf (Index (WGDY, One)), 0x02))
                    Store (SD12, Index (DerefOf (Index (WGDY, One)), 0x03))
                    Store (SD13, Index (DerefOf (Index (WGDY, One)), 0x04))
                    Store (SD14, Index (DerefOf (Index (WGDY, One)), 0x05))
                    Store (SD15, Index (DerefOf (Index (WGDY, One)), 0x06))
                    Store (SD16, Index (DerefOf (Index (WGDY, One)), 0x07))
                    Store (SD17, Index (DerefOf (Index (WGDY, One)), 0x08))
                    Store (SD18, Index (DerefOf (Index (WGDY, One)), 0x09))
                    Store (SD19, Index (DerefOf (Index (WGDY, One)), 0x0A))
                    Store (SD21, Index (DerefOf (Index (WGDY, One)), 0x0B))
                    Store (SD22, Index (DerefOf (Index (WGDY, One)), 0x0C))
                    Store (SD23, Index (DerefOf (Index (WGDY, One)), 0x0D))
                    Store (SD24, Index (DerefOf (Index (WGDY, One)), 0x0E))
                    Store (SD25, Index (DerefOf (Index (WGDY, One)), 0x0F))
                    Store (SD26, Index (DerefOf (Index (WGDY, One)), 0x10))
                    Store (SD27, Index (DerefOf (Index (WGDY, One)), 0x11))
                    Store (SD28, Index (DerefOf (Index (WGDY, One)), 0x12))
                    Store (SD29, Index (DerefOf (Index (WGDY, One)), 0x13))
                    Store (SD31, Index (DerefOf (Index (WGDY, One)), 0x14))
                    Store (SD32, Index (DerefOf (Index (WGDY, One)), 0x15))
                    Store (SD33, Index (DerefOf (Index (WGDY, One)), 0x16))
                    Store (SD34, Index (DerefOf (Index (WGDY, One)), 0x17))
                    Store (SD35, Index (DerefOf (Index (WGDY, One)), 0x18))
                    Store (SD36, Index (DerefOf (Index (WGDY, One)), 0x19))
                    Store (SD37, Index (DerefOf (Index (WGDY, One)), 0x1A))
                    Store (SD38, Index (DerefOf (Index (WGDY, One)), 0x1B))
                    Store (SD39, Index (DerefOf (Index (WGDY, One)), 0x1C))
                    Store (SD41, Index (DerefOf (Index (WGDY, One)), 0x1D))
                    Store (SD42, Index (DerefOf (Index (WGDY, One)), 0x1E))
                    Store (SD43, Index (DerefOf (Index (WGDY, One)), 0x1F))
                    Store (SD44, Index (DerefOf (Index (WGDY, One)), 0x20))
                    Store (SD45, Index (DerefOf (Index (WGDY, One)), 0x21))
                    Store (SD46, Index (DerefOf (Index (WGDY, One)), 0x22))
                    Store (SD47, Index (DerefOf (Index (WGDY, One)), 0x23))
                    Store (SD48, Index (DerefOf (Index (WGDY, One)), 0x24))
                    Store (SD49, Index (DerefOf (Index (WGDY, One)), 0x25))
                    Store (SD51, Index (DerefOf (Index (WGDY, One)), 0x26))
                    Store (SD52, Index (DerefOf (Index (WGDY, One)), 0x27))
                    Store (SD53, Index (DerefOf (Index (WGDY, One)), 0x28))
                    Store (SD54, Index (DerefOf (Index (WGDY, One)), 0x29))
                    Store (SD55, Index (DerefOf (Index (WGDY, One)), 0x2A))
                    Store (SD56, Index (DerefOf (Index (WGDY, One)), 0x2B))
                    Store (SD57, Index (DerefOf (Index (WGDY, One)), 0x2C))
                    Store (SD58, Index (DerefOf (Index (WGDY, One)), 0x2D))
                    Store (SD59, Index (DerefOf (Index (WGDY, One)), 0x2E))
                    Store (SD61, Index (DerefOf (Index (WGDY, One)), 0x2F))
                    Store (SD62, Index (DerefOf (Index (WGDY, One)), 0x30))
                    Store (SD63, Index (DerefOf (Index (WGDY, One)), 0x31))
                    Store (SD64, Index (DerefOf (Index (WGDY, One)), 0x32))
                    Store (SD65, Index (DerefOf (Index (WGDY, One)), 0x33))
                    Store (SD66, Index (DerefOf (Index (WGDY, One)), 0x34))
                    Store (SD67, Index (DerefOf (Index (WGDY, One)), 0x35))
                    Store (SD68, Index (DerefOf (Index (WGDY, One)), 0x36))
                    Store (SD69, Index (DerefOf (Index (WGDY, One)), 0x37))
                    Store (SD71, Index (DerefOf (Index (WGDY, One)), 0x38))
                    Store (SD72, Index (DerefOf (Index (WGDY, One)), 0x39))
                    Store (SD73, Index (DerefOf (Index (WGDY, One)), 0x3A))
                    Store (SD74, Index (DerefOf (Index (WGDY, One)), 0x3B))
                    Store (SD75, Index (DerefOf (Index (WGDY, One)), 0x3C))
                    Store (SD76, Index (DerefOf (Index (WGDY, One)), 0x3D))
                    Store (SD77, Index (DerefOf (Index (WGDY, One)), 0x3E))
                    Store (SD78, Index (DerefOf (Index (WGDY, One)), 0x3F))
                    Store (SD79, Index (DerefOf (Index (WGDY, One)), 0x40))
                    Store (SD81, Index (DerefOf (Index (WGDY, One)), 0x41))
                    Store (SD82, Index (DerefOf (Index (WGDY, One)), 0x42))
                    Store (SD83, Index (DerefOf (Index (WGDY, One)), 0x43))
                    Store (SD84, Index (DerefOf (Index (WGDY, One)), 0x44))
                    Store (SD85, Index (DerefOf (Index (WGDY, One)), 0x45))
                    Store (SD86, Index (DerefOf (Index (WGDY, One)), 0x46))
                    Store (SD87, Index (DerefOf (Index (WGDY, One)), 0x47))
                    Store (SD88, Index (DerefOf (Index (WGDY, One)), 0x48))
                    Store (SD89, Index (DerefOf (Index (WGDY, One)), 0x49))
                    Return (WGDY)
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                    Return (ECKY)
                }

                Name (PPAY, Package (0x02)
                {
                    One, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    Store (WAGE, Index (DerefOf (Index (PPAY, One)), One))
                    Store (AGA1, Index (DerefOf (Index (PPAY, One)), 0x02))
                    Store (AGA2, Index (DerefOf (Index (PPAY, One)), 0x03))
                    Store (AGA3, Index (DerefOf (Index (PPAY, One)), 0x04))
                    Store (AGA4, Index (DerefOf (Index (PPAY, One)), 0x05))
                    Store (AGA5, Index (DerefOf (Index (PPAY, One)), 0x06))
                    Store (AGA6, Index (DerefOf (Index (PPAY, One)), 0x07))
                    Store (AGA7, Index (DerefOf (Index (PPAY, One)), 0x08))
                    Store (AGA8, Index (DerefOf (Index (PPAY, One)), 0x09))
                    Store (AGA9, Index (DerefOf (Index (PPAY, One)), 0x0A))
                    Store (AGAA, Index (DerefOf (Index (PPAY, One)), 0x0B))
                    Store (AGAB, Index (DerefOf (Index (PPAY, One)), 0x0C))
                    Store (AGB1, Index (DerefOf (Index (PPAY, One)), 0x0D))
                    Store (AGB2, Index (DerefOf (Index (PPAY, One)), 0x0E))
                    Store (AGB3, Index (DerefOf (Index (PPAY, One)), 0x0F))
                    Store (AGB4, Index (DerefOf (Index (PPAY, One)), 0x10))
                    Store (AGB5, Index (DerefOf (Index (PPAY, One)), 0x11))
                    Store (AGB6, Index (DerefOf (Index (PPAY, One)), 0x12))
                    Store (AGB7, Index (DerefOf (Index (PPAY, One)), 0x13))
                    Store (AGB8, Index (DerefOf (Index (PPAY, One)), 0x14))
                    Store (AGB9, Index (DerefOf (Index (PPAY, One)), 0x15))
                    Store (AGBA, Index (DerefOf (Index (PPAY, One)), 0x16))
                    Store (AGBB, Index (DerefOf (Index (PPAY, One)), 0x17))
                    Return (PPAY)
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    Store (WTSV, Index (DerefOf (Index (WTSY, One)), One))
                    Store (WTLE, Index (DerefOf (Index (WTSY, One)), 0x02))
                    Store (BL01, Index (DerefOf (Index (WTSY, One)), 0x03))
                    Store (BL02, Index (DerefOf (Index (WTSY, One)), 0x04))
                    Store (BL03, Index (DerefOf (Index (WTSY, One)), 0x05))
                    Store (BL04, Index (DerefOf (Index (WTSY, One)), 0x06))
                    Store (BL05, Index (DerefOf (Index (WTSY, One)), 0x07))
                    Store (BL06, Index (DerefOf (Index (WTSY, One)), 0x08))
                    Store (BL07, Index (DerefOf (Index (WTSY, One)), 0x09))
                    Store (BL08, Index (DerefOf (Index (WTSY, One)), 0x0A))
                    Store (BL09, Index (DerefOf (Index (WTSY, One)), 0x0B))
                    Store (BL10, Index (DerefOf (Index (WTSY, One)), 0x0C))
                    Store (BL11, Index (DerefOf (Index (WTSY, One)), 0x0D))
                    Store (BL12, Index (DerefOf (Index (WTSY, One)), 0x0E))
                    Store (BL13, Index (DerefOf (Index (WTSY, One)), 0x0F))
                    Store (BL14, Index (DerefOf (Index (WTSY, One)), 0x10))
                    Store (BL15, Index (DerefOf (Index (WTSY, One)), 0x11))
                    Store (BL16, Index (DerefOf (Index (WTSY, One)), 0x12))
                    Return (WTSY)
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    Store (WLBI, Index (DerefOf (Index (WAIY, One)), One))
                    Store (WHBI, Index (DerefOf (Index (WAIY, One)), 0x02))
                    Return (WAIY)
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                    Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                    Return (SADX)
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX)
                }
            }

            If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If (LNotEqual (GGOV (PRST), WPRP))
                    {
                        DL23 ()
                        SGOV (PRST, WPRP)
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    If (LEqual (Arg0, Zero))
                    {
                        Sleep (TBTG)
                    }
                    ElseIf (LEqual (Arg0, One))
                    {
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, And (Not (PFCP), One))
                        Sleep (TFDI)
                    }
                    Else
                    {
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    SPCO (WCLK, One)
                    SGOV (WFCP, PFCP)
                    Sleep (TN2B)
                    SGOV (WBRS, And (Not (PBRS), One))
                    Sleep (TB2R)
                    SGOV (PRST, And (Not (WPRP), One))
                    L23D ()
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Store (Zero, Local0)
                    While (LAnd (LNotEqual (SVID, WSID), LLess (Local0, WSTO)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    If (LEqual (WWEN, 0x02))
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (Zero)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One)
                        SGOV (PRST, And (Not (WPRP), One))
                        SGOV (WBRS, And (Not (PBRS), One))
                        Sleep (0xC8)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x14))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Sleep (0x0A)
                        Notify (PXSX, One)
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (One)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                }
            }

            If (LOr (WIST (), LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT))))
            {
                PowerResource (DRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        DRST
                    })
                }

                Method (IFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        ShiftLeft (CVPR, Zero, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        If (LEqual (CMDT, One))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Return (^^^CNVW.RSTT)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If (LEqual (CMDT, 0x02))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Store (CMDP, ^^^CNVW.RSTT)
                            }

                            Return (Zero)
                        }

                        If (LEqual (CMDT, 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                Return (^^^CNVW.PRRS)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (Zero)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LEqual (CRFI, One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x01                                     
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Store (ACSD, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Store (I5BS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Store (UHBS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        Store (AXMU, Local0)
                        ShiftLeft (Local0, One, Local0)
                        Or (Local0, AXSU, Local0)
                        Store (AXMR, Local1)
                        ShiftLeft (Local1, One, Local1)
                        Or (Local1, AXSR, Local1)
                        ShiftLeft (Local1, 0x02, Local1)
                        Or (Local0, Local1, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (WFRC)
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (WFUC)
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        Return (UNI4)
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        Return (WFIC)
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (LEqual (Arg0, ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d")))
                        {
                            If (LEqual (Arg2, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                           
                                })
                            }

                            If (LEqual (Arg2, One)){}
                            If (LEqual (Arg2, 0x02)){}
                            If (LEqual (Arg2, 0x03))
                            {
                                If (LEqual (WRTO, One)){}
                                ElseIf (LEqual (WRTO, 0x03)){}
                                Else
                                {
                                }

                                Return (WRTO)
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP15.PXSX))
    {
        Scope (_SB.PC00.RP15.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, Add (GMIO (^_ADR, _ADR), 0x44), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                    Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                    Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                    Return (SPLX)
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                    Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                    Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                    Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                    Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                    Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                    Return (WANX)
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                    Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                    Return (WRDX)
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    Store (STXE, Index (DerefOf (Index (WRDY, One)), One))
                    Store (ST10, Index (DerefOf (Index (WRDY, One)), 0x02))
                    Store (ST11, Index (DerefOf (Index (WRDY, One)), 0x03))
                    Store (ST12, Index (DerefOf (Index (WRDY, One)), 0x04))
                    Store (ST13, Index (DerefOf (Index (WRDY, One)), 0x05))
                    Store (ST14, Index (DerefOf (Index (WRDY, One)), 0x06))
                    Store (ST15, Index (DerefOf (Index (WRDY, One)), 0x07))
                    Store (ST16, Index (DerefOf (Index (WRDY, One)), 0x08))
                    Store (ST17, Index (DerefOf (Index (WRDY, One)), 0x09))
                    Store (ST18, Index (DerefOf (Index (WRDY, One)), 0x0A))
                    Store (ST19, Index (DerefOf (Index (WRDY, One)), 0x0B))
                    Store (ST50, Index (DerefOf (Index (WRDY, One)), 0x0C))
                    Store (ST51, Index (DerefOf (Index (WRDY, One)), 0x0D))
                    Store (ST52, Index (DerefOf (Index (WRDY, One)), 0x0E))
                    Store (ST53, Index (DerefOf (Index (WRDY, One)), 0x0F))
                    Store (ST54, Index (DerefOf (Index (WRDY, One)), 0x10))
                    Store (ST55, Index (DerefOf (Index (WRDY, One)), 0x11))
                    Store (ST56, Index (DerefOf (Index (WRDY, One)), 0x12))
                    Store (ST57, Index (DerefOf (Index (WRDY, One)), 0x13))
                    Store (ST58, Index (DerefOf (Index (WRDY, One)), 0x14))
                    Store (ST59, Index (DerefOf (Index (WRDY, One)), 0x15))
                    Store (ST5A, Index (DerefOf (Index (WRDY, One)), 0x16))
                    Store (ST5B, Index (DerefOf (Index (WRDY, One)), 0x17))
                    Store (CD10, Index (DerefOf (Index (WRDY, One)), 0x18))
                    Store (CD11, Index (DerefOf (Index (WRDY, One)), 0x19))
                    Store (CD12, Index (DerefOf (Index (WRDY, One)), 0x1A))
                    Store (CD13, Index (DerefOf (Index (WRDY, One)), 0x1B))
                    Store (CD14, Index (DerefOf (Index (WRDY, One)), 0x1C))
                    Store (CD15, Index (DerefOf (Index (WRDY, One)), 0x1D))
                    Store (CD16, Index (DerefOf (Index (WRDY, One)), 0x1E))
                    Store (CD17, Index (DerefOf (Index (WRDY, One)), 0x1F))
                    Store (CD18, Index (DerefOf (Index (WRDY, One)), 0x20))
                    Store (CD19, Index (DerefOf (Index (WRDY, One)), 0x21))
                    Store (CD1A, Index (DerefOf (Index (WRDY, One)), 0x22))
                    Store (CD20, Index (DerefOf (Index (WRDY, One)), 0x23))
                    Store (CD21, Index (DerefOf (Index (WRDY, One)), 0x24))
                    Store (CD22, Index (DerefOf (Index (WRDY, One)), 0x25))
                    Store (CD23, Index (DerefOf (Index (WRDY, One)), 0x26))
                    Store (CD24, Index (DerefOf (Index (WRDY, One)), 0x27))
                    Store (CD25, Index (DerefOf (Index (WRDY, One)), 0x28))
                    Store (CD26, Index (DerefOf (Index (WRDY, One)), 0x29))
                    Store (CD27, Index (DerefOf (Index (WRDY, One)), 0x2A))
                    Store (CD28, Index (DerefOf (Index (WRDY, One)), 0x2B))
                    Store (CD29, Index (DerefOf (Index (WRDY, One)), 0x2C))
                    Store (CD2A, Index (DerefOf (Index (WRDY, One)), 0x2D))
                    Return (WRDY)
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    Store (STDE, Index (DerefOf (Index (EWRY, One)), One))
                    Store (STRS, Index (DerefOf (Index (EWRY, One)), 0x02))
                    Store (ST20, Index (DerefOf (Index (EWRY, One)), 0x03))
                    Store (ST21, Index (DerefOf (Index (EWRY, One)), 0x04))
                    Store (ST22, Index (DerefOf (Index (EWRY, One)), 0x05))
                    Store (ST23, Index (DerefOf (Index (EWRY, One)), 0x06))
                    Store (ST24, Index (DerefOf (Index (EWRY, One)), 0x07))
                    Store (ST25, Index (DerefOf (Index (EWRY, One)), 0x08))
                    Store (ST26, Index (DerefOf (Index (EWRY, One)), 0x09))
                    Store (ST27, Index (DerefOf (Index (EWRY, One)), 0x0A))
                    Store (ST28, Index (DerefOf (Index (EWRY, One)), 0x0B))
                    Store (ST29, Index (DerefOf (Index (EWRY, One)), 0x0C))
                    Store (ST60, Index (DerefOf (Index (EWRY, One)), 0x0D))
                    Store (ST61, Index (DerefOf (Index (EWRY, One)), 0x0E))
                    Store (ST62, Index (DerefOf (Index (EWRY, One)), 0x0F))
                    Store (ST63, Index (DerefOf (Index (EWRY, One)), 0x10))
                    Store (ST64, Index (DerefOf (Index (EWRY, One)), 0x11))
                    Store (ST65, Index (DerefOf (Index (EWRY, One)), 0x12))
                    Store (ST66, Index (DerefOf (Index (EWRY, One)), 0x13))
                    Store (ST67, Index (DerefOf (Index (EWRY, One)), 0x14))
                    Store (ST68, Index (DerefOf (Index (EWRY, One)), 0x15))
                    Store (ST69, Index (DerefOf (Index (EWRY, One)), 0x16))
                    Store (ST6A, Index (DerefOf (Index (EWRY, One)), 0x17))
                    Store (ST6B, Index (DerefOf (Index (EWRY, One)), 0x18))
                    Store (ST30, Index (DerefOf (Index (EWRY, One)), 0x19))
                    Store (ST31, Index (DerefOf (Index (EWRY, One)), 0x1A))
                    Store (ST32, Index (DerefOf (Index (EWRY, One)), 0x1B))
                    Store (ST33, Index (DerefOf (Index (EWRY, One)), 0x1C))
                    Store (ST34, Index (DerefOf (Index (EWRY, One)), 0x1D))
                    Store (ST35, Index (DerefOf (Index (EWRY, One)), 0x1E))
                    Store (ST36, Index (DerefOf (Index (EWRY, One)), 0x1F))
                    Store (ST37, Index (DerefOf (Index (EWRY, One)), 0x20))
                    Store (ST38, Index (DerefOf (Index (EWRY, One)), 0x21))
                    Store (ST39, Index (DerefOf (Index (EWRY, One)), 0x22))
                    Store (ST70, Index (DerefOf (Index (EWRY, One)), 0x23))
                    Store (ST71, Index (DerefOf (Index (EWRY, One)), 0x24))
                    Store (ST72, Index (DerefOf (Index (EWRY, One)), 0x25))
                    Store (ST73, Index (DerefOf (Index (EWRY, One)), 0x26))
                    Store (ST74, Index (DerefOf (Index (EWRY, One)), 0x27))
                    Store (ST75, Index (DerefOf (Index (EWRY, One)), 0x28))
                    Store (ST76, Index (DerefOf (Index (EWRY, One)), 0x29))
                    Store (ST77, Index (DerefOf (Index (EWRY, One)), 0x2A))
                    Store (ST78, Index (DerefOf (Index (EWRY, One)), 0x2B))
                    Store (ST79, Index (DerefOf (Index (EWRY, One)), 0x2C))
                    Store (ST7A, Index (DerefOf (Index (EWRY, One)), 0x2D))
                    Store (ST7B, Index (DerefOf (Index (EWRY, One)), 0x2E))
                    Store (ST40, Index (DerefOf (Index (EWRY, One)), 0x2F))
                    Store (ST41, Index (DerefOf (Index (EWRY, One)), 0x30))
                    Store (ST42, Index (DerefOf (Index (EWRY, One)), 0x31))
                    Store (ST43, Index (DerefOf (Index (EWRY, One)), 0x32))
                    Store (ST44, Index (DerefOf (Index (EWRY, One)), 0x33))
                    Store (ST45, Index (DerefOf (Index (EWRY, One)), 0x34))
                    Store (ST46, Index (DerefOf (Index (EWRY, One)), 0x35))
                    Store (ST47, Index (DerefOf (Index (EWRY, One)), 0x36))
                    Store (ST48, Index (DerefOf (Index (EWRY, One)), 0x37))
                    Store (ST49, Index (DerefOf (Index (EWRY, One)), 0x38))
                    Store (ST80, Index (DerefOf (Index (EWRY, One)), 0x39))
                    Store (ST81, Index (DerefOf (Index (EWRY, One)), 0x3A))
                    Store (ST82, Index (DerefOf (Index (EWRY, One)), 0x3B))
                    Store (ST83, Index (DerefOf (Index (EWRY, One)), 0x3C))
                    Store (ST84, Index (DerefOf (Index (EWRY, One)), 0x3D))
                    Store (ST85, Index (DerefOf (Index (EWRY, One)), 0x3E))
                    Store (ST86, Index (DerefOf (Index (EWRY, One)), 0x3F))
                    Store (ST87, Index (DerefOf (Index (EWRY, One)), 0x40))
                    Store (ST88, Index (DerefOf (Index (EWRY, One)), 0x41))
                    Store (ST89, Index (DerefOf (Index (EWRY, One)), 0x42))
                    Store (ST8A, Index (DerefOf (Index (EWRY, One)), 0x43))
                    Store (ST8B, Index (DerefOf (Index (EWRY, One)), 0x44))
                    Store (CD30, Index (DerefOf (Index (EWRY, One)), 0x45))
                    Store (CD31, Index (DerefOf (Index (EWRY, One)), 0x46))
                    Store (CD32, Index (DerefOf (Index (EWRY, One)), 0x47))
                    Store (CD33, Index (DerefOf (Index (EWRY, One)), 0x48))
                    Store (CD34, Index (DerefOf (Index (EWRY, One)), 0x49))
                    Store (CD35, Index (DerefOf (Index (EWRY, One)), 0x4A))
                    Store (CD36, Index (DerefOf (Index (EWRY, One)), 0x4B))
                    Store (CD37, Index (DerefOf (Index (EWRY, One)), 0x4C))
                    Store (CD38, Index (DerefOf (Index (EWRY, One)), 0x4D))
                    Store (CD39, Index (DerefOf (Index (EWRY, One)), 0x4E))
                    Store (CD3A, Index (DerefOf (Index (EWRY, One)), 0x4F))
                    Store (CD3B, Index (DerefOf (Index (EWRY, One)), 0x50))
                    Store (CD3C, Index (DerefOf (Index (EWRY, One)), 0x51))
                    Store (CD3D, Index (DerefOf (Index (EWRY, One)), 0x52))
                    Store (CD3E, Index (DerefOf (Index (EWRY, One)), 0x53))
                    Store (CD3F, Index (DerefOf (Index (EWRY, One)), 0x54))
                    Store (CD40, Index (DerefOf (Index (EWRY, One)), 0x55))
                    Store (CD41, Index (DerefOf (Index (EWRY, One)), 0x56))
                    Store (CD42, Index (DerefOf (Index (EWRY, One)), 0x57))
                    Store (CD43, Index (DerefOf (Index (EWRY, One)), 0x58))
                    Store (CD44, Index (DerefOf (Index (EWRY, One)), 0x59))
                    Store (CD45, Index (DerefOf (Index (EWRY, One)), 0x5A))
                    Store (CD46, Index (DerefOf (Index (EWRY, One)), 0x5B))
                    Store (CD47, Index (DerefOf (Index (EWRY, One)), 0x5C))
                    Store (CD48, Index (DerefOf (Index (EWRY, One)), 0x5D))
                    Store (CD49, Index (DerefOf (Index (EWRY, One)), 0x5E))
                    Store (CD4A, Index (DerefOf (Index (EWRY, One)), 0x5F))
                    Store (CD4B, Index (DerefOf (Index (EWRY, One)), 0x60))
                    Store (CD4C, Index (DerefOf (Index (EWRY, One)), 0x61))
                    Store (CD4D, Index (DerefOf (Index (EWRY, One)), 0x62))
                    Store (CD4E, Index (DerefOf (Index (EWRY, One)), 0x63))
                    Store (CD4F, Index (DerefOf (Index (EWRY, One)), 0x64))
                    Store (CD50, Index (DerefOf (Index (EWRY, One)), 0x65))
                    Store (CD51, Index (DerefOf (Index (EWRY, One)), 0x66))
                    Store (CD52, Index (DerefOf (Index (EWRY, One)), 0x67))
                    Store (CD53, Index (DerefOf (Index (EWRY, One)), 0x68))
                    Store (CD54, Index (DerefOf (Index (EWRY, One)), 0x69))
                    Store (CD55, Index (DerefOf (Index (EWRY, One)), 0x6A))
                    Store (CD56, Index (DerefOf (Index (EWRY, One)), 0x6B))
                    Store (CD57, Index (DerefOf (Index (EWRY, One)), 0x6C))
                    Store (CD58, Index (DerefOf (Index (EWRY, One)), 0x6D))
                    Store (CD59, Index (DerefOf (Index (EWRY, One)), 0x6E))
                    Store (CD5A, Index (DerefOf (Index (EWRY, One)), 0x6F))
                    Store (CD5B, Index (DerefOf (Index (EWRY, One)), 0x70))
                    Store (CD5C, Index (DerefOf (Index (EWRY, One)), 0x71))
                    Store (CD5D, Index (DerefOf (Index (EWRY, One)), 0x72))
                    Store (CD5E, Index (DerefOf (Index (EWRY, One)), 0x73))
                    Store (CD5F, Index (DerefOf (Index (EWRY, One)), 0x74))
                    Store (CD60, Index (DerefOf (Index (EWRY, One)), 0x75))
                    Store (CD61, Index (DerefOf (Index (EWRY, One)), 0x76))
                    Store (CD62, Index (DerefOf (Index (EWRY, One)), 0x77))
                    Store (CD63, Index (DerefOf (Index (EWRY, One)), 0x78))
                    Store (CD64, Index (DerefOf (Index (EWRY, One)), 0x79))
                    Store (CD65, Index (DerefOf (Index (EWRY, One)), 0x7A))
                    Store (CD66, Index (DerefOf (Index (EWRY, One)), 0x7B))
                    Store (CD67, Index (DerefOf (Index (EWRY, One)), 0x7C))
                    Store (CD68, Index (DerefOf (Index (EWRY, One)), 0x7D))
                    Store (CD69, Index (DerefOf (Index (EWRY, One)), 0x7E))
                    Store (CD6A, Index (DerefOf (Index (EWRY, One)), 0x7F))
                    Store (CD6B, Index (DerefOf (Index (EWRY, One)), 0x80))
                    Store (CD6C, Index (DerefOf (Index (EWRY, One)), 0x81))
                    Store (CD6D, Index (DerefOf (Index (EWRY, One)), 0x82))
                    Store (CD6E, Index (DerefOf (Index (EWRY, One)), 0x83))
                    Store (CD6F, Index (DerefOf (Index (EWRY, One)), 0x84))
                    Store (CD70, Index (DerefOf (Index (EWRY, One)), 0x85))
                    Store (CD71, Index (DerefOf (Index (EWRY, One)), 0x86))
                    Return (EWRY)
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    Store (SDGN, Index (DerefOf (Index (WGDY, One)), One))
                    Store (SD11, Index (DerefOf (Index (WGDY, One)), 0x02))
                    Store (SD12, Index (DerefOf (Index (WGDY, One)), 0x03))
                    Store (SD13, Index (DerefOf (Index (WGDY, One)), 0x04))
                    Store (SD14, Index (DerefOf (Index (WGDY, One)), 0x05))
                    Store (SD15, Index (DerefOf (Index (WGDY, One)), 0x06))
                    Store (SD16, Index (DerefOf (Index (WGDY, One)), 0x07))
                    Store (SD17, Index (DerefOf (Index (WGDY, One)), 0x08))
                    Store (SD18, Index (DerefOf (Index (WGDY, One)), 0x09))
                    Store (SD19, Index (DerefOf (Index (WGDY, One)), 0x0A))
                    Store (SD21, Index (DerefOf (Index (WGDY, One)), 0x0B))
                    Store (SD22, Index (DerefOf (Index (WGDY, One)), 0x0C))
                    Store (SD23, Index (DerefOf (Index (WGDY, One)), 0x0D))
                    Store (SD24, Index (DerefOf (Index (WGDY, One)), 0x0E))
                    Store (SD25, Index (DerefOf (Index (WGDY, One)), 0x0F))
                    Store (SD26, Index (DerefOf (Index (WGDY, One)), 0x10))
                    Store (SD27, Index (DerefOf (Index (WGDY, One)), 0x11))
                    Store (SD28, Index (DerefOf (Index (WGDY, One)), 0x12))
                    Store (SD29, Index (DerefOf (Index (WGDY, One)), 0x13))
                    Store (SD31, Index (DerefOf (Index (WGDY, One)), 0x14))
                    Store (SD32, Index (DerefOf (Index (WGDY, One)), 0x15))
                    Store (SD33, Index (DerefOf (Index (WGDY, One)), 0x16))
                    Store (SD34, Index (DerefOf (Index (WGDY, One)), 0x17))
                    Store (SD35, Index (DerefOf (Index (WGDY, One)), 0x18))
                    Store (SD36, Index (DerefOf (Index (WGDY, One)), 0x19))
                    Store (SD37, Index (DerefOf (Index (WGDY, One)), 0x1A))
                    Store (SD38, Index (DerefOf (Index (WGDY, One)), 0x1B))
                    Store (SD39, Index (DerefOf (Index (WGDY, One)), 0x1C))
                    Store (SD41, Index (DerefOf (Index (WGDY, One)), 0x1D))
                    Store (SD42, Index (DerefOf (Index (WGDY, One)), 0x1E))
                    Store (SD43, Index (DerefOf (Index (WGDY, One)), 0x1F))
                    Store (SD44, Index (DerefOf (Index (WGDY, One)), 0x20))
                    Store (SD45, Index (DerefOf (Index (WGDY, One)), 0x21))
                    Store (SD46, Index (DerefOf (Index (WGDY, One)), 0x22))
                    Store (SD47, Index (DerefOf (Index (WGDY, One)), 0x23))
                    Store (SD48, Index (DerefOf (Index (WGDY, One)), 0x24))
                    Store (SD49, Index (DerefOf (Index (WGDY, One)), 0x25))
                    Store (SD51, Index (DerefOf (Index (WGDY, One)), 0x26))
                    Store (SD52, Index (DerefOf (Index (WGDY, One)), 0x27))
                    Store (SD53, Index (DerefOf (Index (WGDY, One)), 0x28))
                    Store (SD54, Index (DerefOf (Index (WGDY, One)), 0x29))
                    Store (SD55, Index (DerefOf (Index (WGDY, One)), 0x2A))
                    Store (SD56, Index (DerefOf (Index (WGDY, One)), 0x2B))
                    Store (SD57, Index (DerefOf (Index (WGDY, One)), 0x2C))
                    Store (SD58, Index (DerefOf (Index (WGDY, One)), 0x2D))
                    Store (SD59, Index (DerefOf (Index (WGDY, One)), 0x2E))
                    Store (SD61, Index (DerefOf (Index (WGDY, One)), 0x2F))
                    Store (SD62, Index (DerefOf (Index (WGDY, One)), 0x30))
                    Store (SD63, Index (DerefOf (Index (WGDY, One)), 0x31))
                    Store (SD64, Index (DerefOf (Index (WGDY, One)), 0x32))
                    Store (SD65, Index (DerefOf (Index (WGDY, One)), 0x33))
                    Store (SD66, Index (DerefOf (Index (WGDY, One)), 0x34))
                    Store (SD67, Index (DerefOf (Index (WGDY, One)), 0x35))
                    Store (SD68, Index (DerefOf (Index (WGDY, One)), 0x36))
                    Store (SD69, Index (DerefOf (Index (WGDY, One)), 0x37))
                    Store (SD71, Index (DerefOf (Index (WGDY, One)), 0x38))
                    Store (SD72, Index (DerefOf (Index (WGDY, One)), 0x39))
                    Store (SD73, Index (DerefOf (Index (WGDY, One)), 0x3A))
                    Store (SD74, Index (DerefOf (Index (WGDY, One)), 0x3B))
                    Store (SD75, Index (DerefOf (Index (WGDY, One)), 0x3C))
                    Store (SD76, Index (DerefOf (Index (WGDY, One)), 0x3D))
                    Store (SD77, Index (DerefOf (Index (WGDY, One)), 0x3E))
                    Store (SD78, Index (DerefOf (Index (WGDY, One)), 0x3F))
                    Store (SD79, Index (DerefOf (Index (WGDY, One)), 0x40))
                    Store (SD81, Index (DerefOf (Index (WGDY, One)), 0x41))
                    Store (SD82, Index (DerefOf (Index (WGDY, One)), 0x42))
                    Store (SD83, Index (DerefOf (Index (WGDY, One)), 0x43))
                    Store (SD84, Index (DerefOf (Index (WGDY, One)), 0x44))
                    Store (SD85, Index (DerefOf (Index (WGDY, One)), 0x45))
                    Store (SD86, Index (DerefOf (Index (WGDY, One)), 0x46))
                    Store (SD87, Index (DerefOf (Index (WGDY, One)), 0x47))
                    Store (SD88, Index (DerefOf (Index (WGDY, One)), 0x48))
                    Store (SD89, Index (DerefOf (Index (WGDY, One)), 0x49))
                    Return (WGDY)
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                    Return (ECKY)
                }

                Name (PPAY, Package (0x02)
                {
                    One, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    Store (WAGE, Index (DerefOf (Index (PPAY, One)), One))
                    Store (AGA1, Index (DerefOf (Index (PPAY, One)), 0x02))
                    Store (AGA2, Index (DerefOf (Index (PPAY, One)), 0x03))
                    Store (AGA3, Index (DerefOf (Index (PPAY, One)), 0x04))
                    Store (AGA4, Index (DerefOf (Index (PPAY, One)), 0x05))
                    Store (AGA5, Index (DerefOf (Index (PPAY, One)), 0x06))
                    Store (AGA6, Index (DerefOf (Index (PPAY, One)), 0x07))
                    Store (AGA7, Index (DerefOf (Index (PPAY, One)), 0x08))
                    Store (AGA8, Index (DerefOf (Index (PPAY, One)), 0x09))
                    Store (AGA9, Index (DerefOf (Index (PPAY, One)), 0x0A))
                    Store (AGAA, Index (DerefOf (Index (PPAY, One)), 0x0B))
                    Store (AGAB, Index (DerefOf (Index (PPAY, One)), 0x0C))
                    Store (AGB1, Index (DerefOf (Index (PPAY, One)), 0x0D))
                    Store (AGB2, Index (DerefOf (Index (PPAY, One)), 0x0E))
                    Store (AGB3, Index (DerefOf (Index (PPAY, One)), 0x0F))
                    Store (AGB4, Index (DerefOf (Index (PPAY, One)), 0x10))
                    Store (AGB5, Index (DerefOf (Index (PPAY, One)), 0x11))
                    Store (AGB6, Index (DerefOf (Index (PPAY, One)), 0x12))
                    Store (AGB7, Index (DerefOf (Index (PPAY, One)), 0x13))
                    Store (AGB8, Index (DerefOf (Index (PPAY, One)), 0x14))
                    Store (AGB9, Index (DerefOf (Index (PPAY, One)), 0x15))
                    Store (AGBA, Index (DerefOf (Index (PPAY, One)), 0x16))
                    Store (AGBB, Index (DerefOf (Index (PPAY, One)), 0x17))
                    Return (PPAY)
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    Store (WTSV, Index (DerefOf (Index (WTSY, One)), One))
                    Store (WTLE, Index (DerefOf (Index (WTSY, One)), 0x02))
                    Store (BL01, Index (DerefOf (Index (WTSY, One)), 0x03))
                    Store (BL02, Index (DerefOf (Index (WTSY, One)), 0x04))
                    Store (BL03, Index (DerefOf (Index (WTSY, One)), 0x05))
                    Store (BL04, Index (DerefOf (Index (WTSY, One)), 0x06))
                    Store (BL05, Index (DerefOf (Index (WTSY, One)), 0x07))
                    Store (BL06, Index (DerefOf (Index (WTSY, One)), 0x08))
                    Store (BL07, Index (DerefOf (Index (WTSY, One)), 0x09))
                    Store (BL08, Index (DerefOf (Index (WTSY, One)), 0x0A))
                    Store (BL09, Index (DerefOf (Index (WTSY, One)), 0x0B))
                    Store (BL10, Index (DerefOf (Index (WTSY, One)), 0x0C))
                    Store (BL11, Index (DerefOf (Index (WTSY, One)), 0x0D))
                    Store (BL12, Index (DerefOf (Index (WTSY, One)), 0x0E))
                    Store (BL13, Index (DerefOf (Index (WTSY, One)), 0x0F))
                    Store (BL14, Index (DerefOf (Index (WTSY, One)), 0x10))
                    Store (BL15, Index (DerefOf (Index (WTSY, One)), 0x11))
                    Store (BL16, Index (DerefOf (Index (WTSY, One)), 0x12))
                    Return (WTSY)
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    Store (WLBI, Index (DerefOf (Index (WAIY, One)), One))
                    Store (WHBI, Index (DerefOf (Index (WAIY, One)), 0x02))
                    Return (WAIY)
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                    Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                    Return (SADX)
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX)
                }
            }

            If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If (LNotEqual (GGOV (PRST), WPRP))
                    {
                        DL23 ()
                        SGOV (PRST, WPRP)
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    If (LEqual (Arg0, Zero))
                    {
                        Sleep (TBTG)
                    }
                    ElseIf (LEqual (Arg0, One))
                    {
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, And (Not (PFCP), One))
                        Sleep (TFDI)
                    }
                    Else
                    {
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    SPCO (WCLK, One)
                    SGOV (WFCP, PFCP)
                    Sleep (TN2B)
                    SGOV (WBRS, And (Not (PBRS), One))
                    Sleep (TB2R)
                    SGOV (PRST, And (Not (WPRP), One))
                    L23D ()
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Store (Zero, Local0)
                    While (LAnd (LNotEqual (SVID, WSID), LLess (Local0, WSTO)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    If (LEqual (WWEN, 0x02))
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (Zero)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One)
                        SGOV (PRST, And (Not (WPRP), One))
                        SGOV (WBRS, And (Not (PBRS), One))
                        Sleep (0xC8)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x14))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Sleep (0x0A)
                        Notify (PXSX, One)
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (One)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                }
            }

            If (LOr (WIST (), LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT))))
            {
                PowerResource (DRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        DRST
                    })
                }

                Method (IFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        ShiftLeft (CVPR, Zero, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        If (LEqual (CMDT, One))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Return (^^^CNVW.RSTT)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If (LEqual (CMDT, 0x02))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Store (CMDP, ^^^CNVW.RSTT)
                            }

                            Return (Zero)
                        }

                        If (LEqual (CMDT, 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                Return (^^^CNVW.PRRS)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (Zero)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LEqual (CRFI, One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x01                                     
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Store (ACSD, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Store (I5BS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Store (UHBS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        Store (AXMU, Local0)
                        ShiftLeft (Local0, One, Local0)
                        Or (Local0, AXSU, Local0)
                        Store (AXMR, Local1)
                        ShiftLeft (Local1, One, Local1)
                        Or (Local1, AXSR, Local1)
                        ShiftLeft (Local1, 0x02, Local1)
                        Or (Local0, Local1, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (WFRC)
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (WFUC)
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        Return (UNI4)
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        Return (WFIC)
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (LEqual (Arg0, ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d")))
                        {
                            If (LEqual (Arg2, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                           
                                })
                            }

                            If (LEqual (Arg2, One)){}
                            If (LEqual (Arg2, 0x02)){}
                            If (LEqual (Arg2, 0x03))
                            {
                                If (LEqual (WRTO, One)){}
                                ElseIf (LEqual (WRTO, 0x03)){}
                                Else
                                {
                                }

                                Return (WRTO)
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP16.PXSX))
    {
        Scope (_SB.PC00.RP16.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, Add (GMIO (^_ADR, _ADR), 0x44), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                    Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                    Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                    Return (SPLX)
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                    Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                    Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                    Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                    Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                    Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                    Return (WANX)
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                    Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                    Return (WRDX)
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    Store (STXE, Index (DerefOf (Index (WRDY, One)), One))
                    Store (ST10, Index (DerefOf (Index (WRDY, One)), 0x02))
                    Store (ST11, Index (DerefOf (Index (WRDY, One)), 0x03))
                    Store (ST12, Index (DerefOf (Index (WRDY, One)), 0x04))
                    Store (ST13, Index (DerefOf (Index (WRDY, One)), 0x05))
                    Store (ST14, Index (DerefOf (Index (WRDY, One)), 0x06))
                    Store (ST15, Index (DerefOf (Index (WRDY, One)), 0x07))
                    Store (ST16, Index (DerefOf (Index (WRDY, One)), 0x08))
                    Store (ST17, Index (DerefOf (Index (WRDY, One)), 0x09))
                    Store (ST18, Index (DerefOf (Index (WRDY, One)), 0x0A))
                    Store (ST19, Index (DerefOf (Index (WRDY, One)), 0x0B))
                    Store (ST50, Index (DerefOf (Index (WRDY, One)), 0x0C))
                    Store (ST51, Index (DerefOf (Index (WRDY, One)), 0x0D))
                    Store (ST52, Index (DerefOf (Index (WRDY, One)), 0x0E))
                    Store (ST53, Index (DerefOf (Index (WRDY, One)), 0x0F))
                    Store (ST54, Index (DerefOf (Index (WRDY, One)), 0x10))
                    Store (ST55, Index (DerefOf (Index (WRDY, One)), 0x11))
                    Store (ST56, Index (DerefOf (Index (WRDY, One)), 0x12))
                    Store (ST57, Index (DerefOf (Index (WRDY, One)), 0x13))
                    Store (ST58, Index (DerefOf (Index (WRDY, One)), 0x14))
                    Store (ST59, Index (DerefOf (Index (WRDY, One)), 0x15))
                    Store (ST5A, Index (DerefOf (Index (WRDY, One)), 0x16))
                    Store (ST5B, Index (DerefOf (Index (WRDY, One)), 0x17))
                    Store (CD10, Index (DerefOf (Index (WRDY, One)), 0x18))
                    Store (CD11, Index (DerefOf (Index (WRDY, One)), 0x19))
                    Store (CD12, Index (DerefOf (Index (WRDY, One)), 0x1A))
                    Store (CD13, Index (DerefOf (Index (WRDY, One)), 0x1B))
                    Store (CD14, Index (DerefOf (Index (WRDY, One)), 0x1C))
                    Store (CD15, Index (DerefOf (Index (WRDY, One)), 0x1D))
                    Store (CD16, Index (DerefOf (Index (WRDY, One)), 0x1E))
                    Store (CD17, Index (DerefOf (Index (WRDY, One)), 0x1F))
                    Store (CD18, Index (DerefOf (Index (WRDY, One)), 0x20))
                    Store (CD19, Index (DerefOf (Index (WRDY, One)), 0x21))
                    Store (CD1A, Index (DerefOf (Index (WRDY, One)), 0x22))
                    Store (CD20, Index (DerefOf (Index (WRDY, One)), 0x23))
                    Store (CD21, Index (DerefOf (Index (WRDY, One)), 0x24))
                    Store (CD22, Index (DerefOf (Index (WRDY, One)), 0x25))
                    Store (CD23, Index (DerefOf (Index (WRDY, One)), 0x26))
                    Store (CD24, Index (DerefOf (Index (WRDY, One)), 0x27))
                    Store (CD25, Index (DerefOf (Index (WRDY, One)), 0x28))
                    Store (CD26, Index (DerefOf (Index (WRDY, One)), 0x29))
                    Store (CD27, Index (DerefOf (Index (WRDY, One)), 0x2A))
                    Store (CD28, Index (DerefOf (Index (WRDY, One)), 0x2B))
                    Store (CD29, Index (DerefOf (Index (WRDY, One)), 0x2C))
                    Store (CD2A, Index (DerefOf (Index (WRDY, One)), 0x2D))
                    Return (WRDY)
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    Store (STDE, Index (DerefOf (Index (EWRY, One)), One))
                    Store (STRS, Index (DerefOf (Index (EWRY, One)), 0x02))
                    Store (ST20, Index (DerefOf (Index (EWRY, One)), 0x03))
                    Store (ST21, Index (DerefOf (Index (EWRY, One)), 0x04))
                    Store (ST22, Index (DerefOf (Index (EWRY, One)), 0x05))
                    Store (ST23, Index (DerefOf (Index (EWRY, One)), 0x06))
                    Store (ST24, Index (DerefOf (Index (EWRY, One)), 0x07))
                    Store (ST25, Index (DerefOf (Index (EWRY, One)), 0x08))
                    Store (ST26, Index (DerefOf (Index (EWRY, One)), 0x09))
                    Store (ST27, Index (DerefOf (Index (EWRY, One)), 0x0A))
                    Store (ST28, Index (DerefOf (Index (EWRY, One)), 0x0B))
                    Store (ST29, Index (DerefOf (Index (EWRY, One)), 0x0C))
                    Store (ST60, Index (DerefOf (Index (EWRY, One)), 0x0D))
                    Store (ST61, Index (DerefOf (Index (EWRY, One)), 0x0E))
                    Store (ST62, Index (DerefOf (Index (EWRY, One)), 0x0F))
                    Store (ST63, Index (DerefOf (Index (EWRY, One)), 0x10))
                    Store (ST64, Index (DerefOf (Index (EWRY, One)), 0x11))
                    Store (ST65, Index (DerefOf (Index (EWRY, One)), 0x12))
                    Store (ST66, Index (DerefOf (Index (EWRY, One)), 0x13))
                    Store (ST67, Index (DerefOf (Index (EWRY, One)), 0x14))
                    Store (ST68, Index (DerefOf (Index (EWRY, One)), 0x15))
                    Store (ST69, Index (DerefOf (Index (EWRY, One)), 0x16))
                    Store (ST6A, Index (DerefOf (Index (EWRY, One)), 0x17))
                    Store (ST6B, Index (DerefOf (Index (EWRY, One)), 0x18))
                    Store (ST30, Index (DerefOf (Index (EWRY, One)), 0x19))
                    Store (ST31, Index (DerefOf (Index (EWRY, One)), 0x1A))
                    Store (ST32, Index (DerefOf (Index (EWRY, One)), 0x1B))
                    Store (ST33, Index (DerefOf (Index (EWRY, One)), 0x1C))
                    Store (ST34, Index (DerefOf (Index (EWRY, One)), 0x1D))
                    Store (ST35, Index (DerefOf (Index (EWRY, One)), 0x1E))
                    Store (ST36, Index (DerefOf (Index (EWRY, One)), 0x1F))
                    Store (ST37, Index (DerefOf (Index (EWRY, One)), 0x20))
                    Store (ST38, Index (DerefOf (Index (EWRY, One)), 0x21))
                    Store (ST39, Index (DerefOf (Index (EWRY, One)), 0x22))
                    Store (ST70, Index (DerefOf (Index (EWRY, One)), 0x23))
                    Store (ST71, Index (DerefOf (Index (EWRY, One)), 0x24))
                    Store (ST72, Index (DerefOf (Index (EWRY, One)), 0x25))
                    Store (ST73, Index (DerefOf (Index (EWRY, One)), 0x26))
                    Store (ST74, Index (DerefOf (Index (EWRY, One)), 0x27))
                    Store (ST75, Index (DerefOf (Index (EWRY, One)), 0x28))
                    Store (ST76, Index (DerefOf (Index (EWRY, One)), 0x29))
                    Store (ST77, Index (DerefOf (Index (EWRY, One)), 0x2A))
                    Store (ST78, Index (DerefOf (Index (EWRY, One)), 0x2B))
                    Store (ST79, Index (DerefOf (Index (EWRY, One)), 0x2C))
                    Store (ST7A, Index (DerefOf (Index (EWRY, One)), 0x2D))
                    Store (ST7B, Index (DerefOf (Index (EWRY, One)), 0x2E))
                    Store (ST40, Index (DerefOf (Index (EWRY, One)), 0x2F))
                    Store (ST41, Index (DerefOf (Index (EWRY, One)), 0x30))
                    Store (ST42, Index (DerefOf (Index (EWRY, One)), 0x31))
                    Store (ST43, Index (DerefOf (Index (EWRY, One)), 0x32))
                    Store (ST44, Index (DerefOf (Index (EWRY, One)), 0x33))
                    Store (ST45, Index (DerefOf (Index (EWRY, One)), 0x34))
                    Store (ST46, Index (DerefOf (Index (EWRY, One)), 0x35))
                    Store (ST47, Index (DerefOf (Index (EWRY, One)), 0x36))
                    Store (ST48, Index (DerefOf (Index (EWRY, One)), 0x37))
                    Store (ST49, Index (DerefOf (Index (EWRY, One)), 0x38))
                    Store (ST80, Index (DerefOf (Index (EWRY, One)), 0x39))
                    Store (ST81, Index (DerefOf (Index (EWRY, One)), 0x3A))
                    Store (ST82, Index (DerefOf (Index (EWRY, One)), 0x3B))
                    Store (ST83, Index (DerefOf (Index (EWRY, One)), 0x3C))
                    Store (ST84, Index (DerefOf (Index (EWRY, One)), 0x3D))
                    Store (ST85, Index (DerefOf (Index (EWRY, One)), 0x3E))
                    Store (ST86, Index (DerefOf (Index (EWRY, One)), 0x3F))
                    Store (ST87, Index (DerefOf (Index (EWRY, One)), 0x40))
                    Store (ST88, Index (DerefOf (Index (EWRY, One)), 0x41))
                    Store (ST89, Index (DerefOf (Index (EWRY, One)), 0x42))
                    Store (ST8A, Index (DerefOf (Index (EWRY, One)), 0x43))
                    Store (ST8B, Index (DerefOf (Index (EWRY, One)), 0x44))
                    Store (CD30, Index (DerefOf (Index (EWRY, One)), 0x45))
                    Store (CD31, Index (DerefOf (Index (EWRY, One)), 0x46))
                    Store (CD32, Index (DerefOf (Index (EWRY, One)), 0x47))
                    Store (CD33, Index (DerefOf (Index (EWRY, One)), 0x48))
                    Store (CD34, Index (DerefOf (Index (EWRY, One)), 0x49))
                    Store (CD35, Index (DerefOf (Index (EWRY, One)), 0x4A))
                    Store (CD36, Index (DerefOf (Index (EWRY, One)), 0x4B))
                    Store (CD37, Index (DerefOf (Index (EWRY, One)), 0x4C))
                    Store (CD38, Index (DerefOf (Index (EWRY, One)), 0x4D))
                    Store (CD39, Index (DerefOf (Index (EWRY, One)), 0x4E))
                    Store (CD3A, Index (DerefOf (Index (EWRY, One)), 0x4F))
                    Store (CD3B, Index (DerefOf (Index (EWRY, One)), 0x50))
                    Store (CD3C, Index (DerefOf (Index (EWRY, One)), 0x51))
                    Store (CD3D, Index (DerefOf (Index (EWRY, One)), 0x52))
                    Store (CD3E, Index (DerefOf (Index (EWRY, One)), 0x53))
                    Store (CD3F, Index (DerefOf (Index (EWRY, One)), 0x54))
                    Store (CD40, Index (DerefOf (Index (EWRY, One)), 0x55))
                    Store (CD41, Index (DerefOf (Index (EWRY, One)), 0x56))
                    Store (CD42, Index (DerefOf (Index (EWRY, One)), 0x57))
                    Store (CD43, Index (DerefOf (Index (EWRY, One)), 0x58))
                    Store (CD44, Index (DerefOf (Index (EWRY, One)), 0x59))
                    Store (CD45, Index (DerefOf (Index (EWRY, One)), 0x5A))
                    Store (CD46, Index (DerefOf (Index (EWRY, One)), 0x5B))
                    Store (CD47, Index (DerefOf (Index (EWRY, One)), 0x5C))
                    Store (CD48, Index (DerefOf (Index (EWRY, One)), 0x5D))
                    Store (CD49, Index (DerefOf (Index (EWRY, One)), 0x5E))
                    Store (CD4A, Index (DerefOf (Index (EWRY, One)), 0x5F))
                    Store (CD4B, Index (DerefOf (Index (EWRY, One)), 0x60))
                    Store (CD4C, Index (DerefOf (Index (EWRY, One)), 0x61))
                    Store (CD4D, Index (DerefOf (Index (EWRY, One)), 0x62))
                    Store (CD4E, Index (DerefOf (Index (EWRY, One)), 0x63))
                    Store (CD4F, Index (DerefOf (Index (EWRY, One)), 0x64))
                    Store (CD50, Index (DerefOf (Index (EWRY, One)), 0x65))
                    Store (CD51, Index (DerefOf (Index (EWRY, One)), 0x66))
                    Store (CD52, Index (DerefOf (Index (EWRY, One)), 0x67))
                    Store (CD53, Index (DerefOf (Index (EWRY, One)), 0x68))
                    Store (CD54, Index (DerefOf (Index (EWRY, One)), 0x69))
                    Store (CD55, Index (DerefOf (Index (EWRY, One)), 0x6A))
                    Store (CD56, Index (DerefOf (Index (EWRY, One)), 0x6B))
                    Store (CD57, Index (DerefOf (Index (EWRY, One)), 0x6C))
                    Store (CD58, Index (DerefOf (Index (EWRY, One)), 0x6D))
                    Store (CD59, Index (DerefOf (Index (EWRY, One)), 0x6E))
                    Store (CD5A, Index (DerefOf (Index (EWRY, One)), 0x6F))
                    Store (CD5B, Index (DerefOf (Index (EWRY, One)), 0x70))
                    Store (CD5C, Index (DerefOf (Index (EWRY, One)), 0x71))
                    Store (CD5D, Index (DerefOf (Index (EWRY, One)), 0x72))
                    Store (CD5E, Index (DerefOf (Index (EWRY, One)), 0x73))
                    Store (CD5F, Index (DerefOf (Index (EWRY, One)), 0x74))
                    Store (CD60, Index (DerefOf (Index (EWRY, One)), 0x75))
                    Store (CD61, Index (DerefOf (Index (EWRY, One)), 0x76))
                    Store (CD62, Index (DerefOf (Index (EWRY, One)), 0x77))
                    Store (CD63, Index (DerefOf (Index (EWRY, One)), 0x78))
                    Store (CD64, Index (DerefOf (Index (EWRY, One)), 0x79))
                    Store (CD65, Index (DerefOf (Index (EWRY, One)), 0x7A))
                    Store (CD66, Index (DerefOf (Index (EWRY, One)), 0x7B))
                    Store (CD67, Index (DerefOf (Index (EWRY, One)), 0x7C))
                    Store (CD68, Index (DerefOf (Index (EWRY, One)), 0x7D))
                    Store (CD69, Index (DerefOf (Index (EWRY, One)), 0x7E))
                    Store (CD6A, Index (DerefOf (Index (EWRY, One)), 0x7F))
                    Store (CD6B, Index (DerefOf (Index (EWRY, One)), 0x80))
                    Store (CD6C, Index (DerefOf (Index (EWRY, One)), 0x81))
                    Store (CD6D, Index (DerefOf (Index (EWRY, One)), 0x82))
                    Store (CD6E, Index (DerefOf (Index (EWRY, One)), 0x83))
                    Store (CD6F, Index (DerefOf (Index (EWRY, One)), 0x84))
                    Store (CD70, Index (DerefOf (Index (EWRY, One)), 0x85))
                    Store (CD71, Index (DerefOf (Index (EWRY, One)), 0x86))
                    Return (EWRY)
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    Store (SDGN, Index (DerefOf (Index (WGDY, One)), One))
                    Store (SD11, Index (DerefOf (Index (WGDY, One)), 0x02))
                    Store (SD12, Index (DerefOf (Index (WGDY, One)), 0x03))
                    Store (SD13, Index (DerefOf (Index (WGDY, One)), 0x04))
                    Store (SD14, Index (DerefOf (Index (WGDY, One)), 0x05))
                    Store (SD15, Index (DerefOf (Index (WGDY, One)), 0x06))
                    Store (SD16, Index (DerefOf (Index (WGDY, One)), 0x07))
                    Store (SD17, Index (DerefOf (Index (WGDY, One)), 0x08))
                    Store (SD18, Index (DerefOf (Index (WGDY, One)), 0x09))
                    Store (SD19, Index (DerefOf (Index (WGDY, One)), 0x0A))
                    Store (SD21, Index (DerefOf (Index (WGDY, One)), 0x0B))
                    Store (SD22, Index (DerefOf (Index (WGDY, One)), 0x0C))
                    Store (SD23, Index (DerefOf (Index (WGDY, One)), 0x0D))
                    Store (SD24, Index (DerefOf (Index (WGDY, One)), 0x0E))
                    Store (SD25, Index (DerefOf (Index (WGDY, One)), 0x0F))
                    Store (SD26, Index (DerefOf (Index (WGDY, One)), 0x10))
                    Store (SD27, Index (DerefOf (Index (WGDY, One)), 0x11))
                    Store (SD28, Index (DerefOf (Index (WGDY, One)), 0x12))
                    Store (SD29, Index (DerefOf (Index (WGDY, One)), 0x13))
                    Store (SD31, Index (DerefOf (Index (WGDY, One)), 0x14))
                    Store (SD32, Index (DerefOf (Index (WGDY, One)), 0x15))
                    Store (SD33, Index (DerefOf (Index (WGDY, One)), 0x16))
                    Store (SD34, Index (DerefOf (Index (WGDY, One)), 0x17))
                    Store (SD35, Index (DerefOf (Index (WGDY, One)), 0x18))
                    Store (SD36, Index (DerefOf (Index (WGDY, One)), 0x19))
                    Store (SD37, Index (DerefOf (Index (WGDY, One)), 0x1A))
                    Store (SD38, Index (DerefOf (Index (WGDY, One)), 0x1B))
                    Store (SD39, Index (DerefOf (Index (WGDY, One)), 0x1C))
                    Store (SD41, Index (DerefOf (Index (WGDY, One)), 0x1D))
                    Store (SD42, Index (DerefOf (Index (WGDY, One)), 0x1E))
                    Store (SD43, Index (DerefOf (Index (WGDY, One)), 0x1F))
                    Store (SD44, Index (DerefOf (Index (WGDY, One)), 0x20))
                    Store (SD45, Index (DerefOf (Index (WGDY, One)), 0x21))
                    Store (SD46, Index (DerefOf (Index (WGDY, One)), 0x22))
                    Store (SD47, Index (DerefOf (Index (WGDY, One)), 0x23))
                    Store (SD48, Index (DerefOf (Index (WGDY, One)), 0x24))
                    Store (SD49, Index (DerefOf (Index (WGDY, One)), 0x25))
                    Store (SD51, Index (DerefOf (Index (WGDY, One)), 0x26))
                    Store (SD52, Index (DerefOf (Index (WGDY, One)), 0x27))
                    Store (SD53, Index (DerefOf (Index (WGDY, One)), 0x28))
                    Store (SD54, Index (DerefOf (Index (WGDY, One)), 0x29))
                    Store (SD55, Index (DerefOf (Index (WGDY, One)), 0x2A))
                    Store (SD56, Index (DerefOf (Index (WGDY, One)), 0x2B))
                    Store (SD57, Index (DerefOf (Index (WGDY, One)), 0x2C))
                    Store (SD58, Index (DerefOf (Index (WGDY, One)), 0x2D))
                    Store (SD59, Index (DerefOf (Index (WGDY, One)), 0x2E))
                    Store (SD61, Index (DerefOf (Index (WGDY, One)), 0x2F))
                    Store (SD62, Index (DerefOf (Index (WGDY, One)), 0x30))
                    Store (SD63, Index (DerefOf (Index (WGDY, One)), 0x31))
                    Store (SD64, Index (DerefOf (Index (WGDY, One)), 0x32))
                    Store (SD65, Index (DerefOf (Index (WGDY, One)), 0x33))
                    Store (SD66, Index (DerefOf (Index (WGDY, One)), 0x34))
                    Store (SD67, Index (DerefOf (Index (WGDY, One)), 0x35))
                    Store (SD68, Index (DerefOf (Index (WGDY, One)), 0x36))
                    Store (SD69, Index (DerefOf (Index (WGDY, One)), 0x37))
                    Store (SD71, Index (DerefOf (Index (WGDY, One)), 0x38))
                    Store (SD72, Index (DerefOf (Index (WGDY, One)), 0x39))
                    Store (SD73, Index (DerefOf (Index (WGDY, One)), 0x3A))
                    Store (SD74, Index (DerefOf (Index (WGDY, One)), 0x3B))
                    Store (SD75, Index (DerefOf (Index (WGDY, One)), 0x3C))
                    Store (SD76, Index (DerefOf (Index (WGDY, One)), 0x3D))
                    Store (SD77, Index (DerefOf (Index (WGDY, One)), 0x3E))
                    Store (SD78, Index (DerefOf (Index (WGDY, One)), 0x3F))
                    Store (SD79, Index (DerefOf (Index (WGDY, One)), 0x40))
                    Store (SD81, Index (DerefOf (Index (WGDY, One)), 0x41))
                    Store (SD82, Index (DerefOf (Index (WGDY, One)), 0x42))
                    Store (SD83, Index (DerefOf (Index (WGDY, One)), 0x43))
                    Store (SD84, Index (DerefOf (Index (WGDY, One)), 0x44))
                    Store (SD85, Index (DerefOf (Index (WGDY, One)), 0x45))
                    Store (SD86, Index (DerefOf (Index (WGDY, One)), 0x46))
                    Store (SD87, Index (DerefOf (Index (WGDY, One)), 0x47))
                    Store (SD88, Index (DerefOf (Index (WGDY, One)), 0x48))
                    Store (SD89, Index (DerefOf (Index (WGDY, One)), 0x49))
                    Return (WGDY)
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                    Return (ECKY)
                }

                Name (PPAY, Package (0x02)
                {
                    One, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    Store (WAGE, Index (DerefOf (Index (PPAY, One)), One))
                    Store (AGA1, Index (DerefOf (Index (PPAY, One)), 0x02))
                    Store (AGA2, Index (DerefOf (Index (PPAY, One)), 0x03))
                    Store (AGA3, Index (DerefOf (Index (PPAY, One)), 0x04))
                    Store (AGA4, Index (DerefOf (Index (PPAY, One)), 0x05))
                    Store (AGA5, Index (DerefOf (Index (PPAY, One)), 0x06))
                    Store (AGA6, Index (DerefOf (Index (PPAY, One)), 0x07))
                    Store (AGA7, Index (DerefOf (Index (PPAY, One)), 0x08))
                    Store (AGA8, Index (DerefOf (Index (PPAY, One)), 0x09))
                    Store (AGA9, Index (DerefOf (Index (PPAY, One)), 0x0A))
                    Store (AGAA, Index (DerefOf (Index (PPAY, One)), 0x0B))
                    Store (AGAB, Index (DerefOf (Index (PPAY, One)), 0x0C))
                    Store (AGB1, Index (DerefOf (Index (PPAY, One)), 0x0D))
                    Store (AGB2, Index (DerefOf (Index (PPAY, One)), 0x0E))
                    Store (AGB3, Index (DerefOf (Index (PPAY, One)), 0x0F))
                    Store (AGB4, Index (DerefOf (Index (PPAY, One)), 0x10))
                    Store (AGB5, Index (DerefOf (Index (PPAY, One)), 0x11))
                    Store (AGB6, Index (DerefOf (Index (PPAY, One)), 0x12))
                    Store (AGB7, Index (DerefOf (Index (PPAY, One)), 0x13))
                    Store (AGB8, Index (DerefOf (Index (PPAY, One)), 0x14))
                    Store (AGB9, Index (DerefOf (Index (PPAY, One)), 0x15))
                    Store (AGBA, Index (DerefOf (Index (PPAY, One)), 0x16))
                    Store (AGBB, Index (DerefOf (Index (PPAY, One)), 0x17))
                    Return (PPAY)
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    Store (WTSV, Index (DerefOf (Index (WTSY, One)), One))
                    Store (WTLE, Index (DerefOf (Index (WTSY, One)), 0x02))
                    Store (BL01, Index (DerefOf (Index (WTSY, One)), 0x03))
                    Store (BL02, Index (DerefOf (Index (WTSY, One)), 0x04))
                    Store (BL03, Index (DerefOf (Index (WTSY, One)), 0x05))
                    Store (BL04, Index (DerefOf (Index (WTSY, One)), 0x06))
                    Store (BL05, Index (DerefOf (Index (WTSY, One)), 0x07))
                    Store (BL06, Index (DerefOf (Index (WTSY, One)), 0x08))
                    Store (BL07, Index (DerefOf (Index (WTSY, One)), 0x09))
                    Store (BL08, Index (DerefOf (Index (WTSY, One)), 0x0A))
                    Store (BL09, Index (DerefOf (Index (WTSY, One)), 0x0B))
                    Store (BL10, Index (DerefOf (Index (WTSY, One)), 0x0C))
                    Store (BL11, Index (DerefOf (Index (WTSY, One)), 0x0D))
                    Store (BL12, Index (DerefOf (Index (WTSY, One)), 0x0E))
                    Store (BL13, Index (DerefOf (Index (WTSY, One)), 0x0F))
                    Store (BL14, Index (DerefOf (Index (WTSY, One)), 0x10))
                    Store (BL15, Index (DerefOf (Index (WTSY, One)), 0x11))
                    Store (BL16, Index (DerefOf (Index (WTSY, One)), 0x12))
                    Return (WTSY)
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    Store (WLBI, Index (DerefOf (Index (WAIY, One)), One))
                    Store (WHBI, Index (DerefOf (Index (WAIY, One)), 0x02))
                    Return (WAIY)
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                    Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                    Return (SADX)
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX)
                }
            }

            If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If (LNotEqual (GGOV (PRST), WPRP))
                    {
                        DL23 ()
                        SGOV (PRST, WPRP)
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    If (LEqual (Arg0, Zero))
                    {
                        Sleep (TBTG)
                    }
                    ElseIf (LEqual (Arg0, One))
                    {
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, And (Not (PFCP), One))
                        Sleep (TFDI)
                    }
                    Else
                    {
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    SPCO (WCLK, One)
                    SGOV (WFCP, PFCP)
                    Sleep (TN2B)
                    SGOV (WBRS, And (Not (PBRS), One))
                    Sleep (TB2R)
                    SGOV (PRST, And (Not (WPRP), One))
                    L23D ()
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Store (Zero, Local0)
                    While (LAnd (LNotEqual (SVID, WSID), LLess (Local0, WSTO)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    If (LEqual (WWEN, 0x02))
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (Zero)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One)
                        SGOV (PRST, And (Not (WPRP), One))
                        SGOV (WBRS, And (Not (PBRS), One))
                        Sleep (0xC8)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x14))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Sleep (0x0A)
                        Notify (PXSX, One)
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (One)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                }
            }

            If (LOr (WIST (), LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT))))
            {
                PowerResource (DRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        DRST
                    })
                }

                Method (IFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        ShiftLeft (CVPR, Zero, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        If (LEqual (CMDT, One))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Return (^^^CNVW.RSTT)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If (LEqual (CMDT, 0x02))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Store (CMDP, ^^^CNVW.RSTT)
                            }

                            Return (Zero)
                        }

                        If (LEqual (CMDT, 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                Return (^^^CNVW.PRRS)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (Zero)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LEqual (CRFI, One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x01                                     
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Store (ACSD, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Store (I5BS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Store (UHBS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        Store (AXMU, Local0)
                        ShiftLeft (Local0, One, Local0)
                        Or (Local0, AXSU, Local0)
                        Store (AXMR, Local1)
                        ShiftLeft (Local1, One, Local1)
                        Or (Local1, AXSR, Local1)
                        ShiftLeft (Local1, 0x02, Local1)
                        Or (Local0, Local1, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (WFRC)
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (WFUC)
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        Return (UNI4)
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        Return (WFIC)
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (LEqual (Arg0, ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d")))
                        {
                            If (LEqual (Arg2, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                           
                                })
                            }

                            If (LEqual (Arg2, One)){}
                            If (LEqual (Arg2, 0x02)){}
                            If (LEqual (Arg2, 0x03))
                            {
                                If (LEqual (WRTO, One)){}
                                ElseIf (LEqual (WRTO, 0x03)){}
                                Else
                                {
                                }

                                Return (WRTO)
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP17.PXSX))
    {
        Scope (_SB.PC00.RP17.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, Add (GMIO (^_ADR, _ADR), 0x44), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                    Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                    Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                    Return (SPLX)
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                    Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                    Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                    Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                    Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                    Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                    Return (WANX)
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                    Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                    Return (WRDX)
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    Store (STXE, Index (DerefOf (Index (WRDY, One)), One))
                    Store (ST10, Index (DerefOf (Index (WRDY, One)), 0x02))
                    Store (ST11, Index (DerefOf (Index (WRDY, One)), 0x03))
                    Store (ST12, Index (DerefOf (Index (WRDY, One)), 0x04))
                    Store (ST13, Index (DerefOf (Index (WRDY, One)), 0x05))
                    Store (ST14, Index (DerefOf (Index (WRDY, One)), 0x06))
                    Store (ST15, Index (DerefOf (Index (WRDY, One)), 0x07))
                    Store (ST16, Index (DerefOf (Index (WRDY, One)), 0x08))
                    Store (ST17, Index (DerefOf (Index (WRDY, One)), 0x09))
                    Store (ST18, Index (DerefOf (Index (WRDY, One)), 0x0A))
                    Store (ST19, Index (DerefOf (Index (WRDY, One)), 0x0B))
                    Store (ST50, Index (DerefOf (Index (WRDY, One)), 0x0C))
                    Store (ST51, Index (DerefOf (Index (WRDY, One)), 0x0D))
                    Store (ST52, Index (DerefOf (Index (WRDY, One)), 0x0E))
                    Store (ST53, Index (DerefOf (Index (WRDY, One)), 0x0F))
                    Store (ST54, Index (DerefOf (Index (WRDY, One)), 0x10))
                    Store (ST55, Index (DerefOf (Index (WRDY, One)), 0x11))
                    Store (ST56, Index (DerefOf (Index (WRDY, One)), 0x12))
                    Store (ST57, Index (DerefOf (Index (WRDY, One)), 0x13))
                    Store (ST58, Index (DerefOf (Index (WRDY, One)), 0x14))
                    Store (ST59, Index (DerefOf (Index (WRDY, One)), 0x15))
                    Store (ST5A, Index (DerefOf (Index (WRDY, One)), 0x16))
                    Store (ST5B, Index (DerefOf (Index (WRDY, One)), 0x17))
                    Store (CD10, Index (DerefOf (Index (WRDY, One)), 0x18))
                    Store (CD11, Index (DerefOf (Index (WRDY, One)), 0x19))
                    Store (CD12, Index (DerefOf (Index (WRDY, One)), 0x1A))
                    Store (CD13, Index (DerefOf (Index (WRDY, One)), 0x1B))
                    Store (CD14, Index (DerefOf (Index (WRDY, One)), 0x1C))
                    Store (CD15, Index (DerefOf (Index (WRDY, One)), 0x1D))
                    Store (CD16, Index (DerefOf (Index (WRDY, One)), 0x1E))
                    Store (CD17, Index (DerefOf (Index (WRDY, One)), 0x1F))
                    Store (CD18, Index (DerefOf (Index (WRDY, One)), 0x20))
                    Store (CD19, Index (DerefOf (Index (WRDY, One)), 0x21))
                    Store (CD1A, Index (DerefOf (Index (WRDY, One)), 0x22))
                    Store (CD20, Index (DerefOf (Index (WRDY, One)), 0x23))
                    Store (CD21, Index (DerefOf (Index (WRDY, One)), 0x24))
                    Store (CD22, Index (DerefOf (Index (WRDY, One)), 0x25))
                    Store (CD23, Index (DerefOf (Index (WRDY, One)), 0x26))
                    Store (CD24, Index (DerefOf (Index (WRDY, One)), 0x27))
                    Store (CD25, Index (DerefOf (Index (WRDY, One)), 0x28))
                    Store (CD26, Index (DerefOf (Index (WRDY, One)), 0x29))
                    Store (CD27, Index (DerefOf (Index (WRDY, One)), 0x2A))
                    Store (CD28, Index (DerefOf (Index (WRDY, One)), 0x2B))
                    Store (CD29, Index (DerefOf (Index (WRDY, One)), 0x2C))
                    Store (CD2A, Index (DerefOf (Index (WRDY, One)), 0x2D))
                    Return (WRDY)
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    Store (STDE, Index (DerefOf (Index (EWRY, One)), One))
                    Store (STRS, Index (DerefOf (Index (EWRY, One)), 0x02))
                    Store (ST20, Index (DerefOf (Index (EWRY, One)), 0x03))
                    Store (ST21, Index (DerefOf (Index (EWRY, One)), 0x04))
                    Store (ST22, Index (DerefOf (Index (EWRY, One)), 0x05))
                    Store (ST23, Index (DerefOf (Index (EWRY, One)), 0x06))
                    Store (ST24, Index (DerefOf (Index (EWRY, One)), 0x07))
                    Store (ST25, Index (DerefOf (Index (EWRY, One)), 0x08))
                    Store (ST26, Index (DerefOf (Index (EWRY, One)), 0x09))
                    Store (ST27, Index (DerefOf (Index (EWRY, One)), 0x0A))
                    Store (ST28, Index (DerefOf (Index (EWRY, One)), 0x0B))
                    Store (ST29, Index (DerefOf (Index (EWRY, One)), 0x0C))
                    Store (ST60, Index (DerefOf (Index (EWRY, One)), 0x0D))
                    Store (ST61, Index (DerefOf (Index (EWRY, One)), 0x0E))
                    Store (ST62, Index (DerefOf (Index (EWRY, One)), 0x0F))
                    Store (ST63, Index (DerefOf (Index (EWRY, One)), 0x10))
                    Store (ST64, Index (DerefOf (Index (EWRY, One)), 0x11))
                    Store (ST65, Index (DerefOf (Index (EWRY, One)), 0x12))
                    Store (ST66, Index (DerefOf (Index (EWRY, One)), 0x13))
                    Store (ST67, Index (DerefOf (Index (EWRY, One)), 0x14))
                    Store (ST68, Index (DerefOf (Index (EWRY, One)), 0x15))
                    Store (ST69, Index (DerefOf (Index (EWRY, One)), 0x16))
                    Store (ST6A, Index (DerefOf (Index (EWRY, One)), 0x17))
                    Store (ST6B, Index (DerefOf (Index (EWRY, One)), 0x18))
                    Store (ST30, Index (DerefOf (Index (EWRY, One)), 0x19))
                    Store (ST31, Index (DerefOf (Index (EWRY, One)), 0x1A))
                    Store (ST32, Index (DerefOf (Index (EWRY, One)), 0x1B))
                    Store (ST33, Index (DerefOf (Index (EWRY, One)), 0x1C))
                    Store (ST34, Index (DerefOf (Index (EWRY, One)), 0x1D))
                    Store (ST35, Index (DerefOf (Index (EWRY, One)), 0x1E))
                    Store (ST36, Index (DerefOf (Index (EWRY, One)), 0x1F))
                    Store (ST37, Index (DerefOf (Index (EWRY, One)), 0x20))
                    Store (ST38, Index (DerefOf (Index (EWRY, One)), 0x21))
                    Store (ST39, Index (DerefOf (Index (EWRY, One)), 0x22))
                    Store (ST70, Index (DerefOf (Index (EWRY, One)), 0x23))
                    Store (ST71, Index (DerefOf (Index (EWRY, One)), 0x24))
                    Store (ST72, Index (DerefOf (Index (EWRY, One)), 0x25))
                    Store (ST73, Index (DerefOf (Index (EWRY, One)), 0x26))
                    Store (ST74, Index (DerefOf (Index (EWRY, One)), 0x27))
                    Store (ST75, Index (DerefOf (Index (EWRY, One)), 0x28))
                    Store (ST76, Index (DerefOf (Index (EWRY, One)), 0x29))
                    Store (ST77, Index (DerefOf (Index (EWRY, One)), 0x2A))
                    Store (ST78, Index (DerefOf (Index (EWRY, One)), 0x2B))
                    Store (ST79, Index (DerefOf (Index (EWRY, One)), 0x2C))
                    Store (ST7A, Index (DerefOf (Index (EWRY, One)), 0x2D))
                    Store (ST7B, Index (DerefOf (Index (EWRY, One)), 0x2E))
                    Store (ST40, Index (DerefOf (Index (EWRY, One)), 0x2F))
                    Store (ST41, Index (DerefOf (Index (EWRY, One)), 0x30))
                    Store (ST42, Index (DerefOf (Index (EWRY, One)), 0x31))
                    Store (ST43, Index (DerefOf (Index (EWRY, One)), 0x32))
                    Store (ST44, Index (DerefOf (Index (EWRY, One)), 0x33))
                    Store (ST45, Index (DerefOf (Index (EWRY, One)), 0x34))
                    Store (ST46, Index (DerefOf (Index (EWRY, One)), 0x35))
                    Store (ST47, Index (DerefOf (Index (EWRY, One)), 0x36))
                    Store (ST48, Index (DerefOf (Index (EWRY, One)), 0x37))
                    Store (ST49, Index (DerefOf (Index (EWRY, One)), 0x38))
                    Store (ST80, Index (DerefOf (Index (EWRY, One)), 0x39))
                    Store (ST81, Index (DerefOf (Index (EWRY, One)), 0x3A))
                    Store (ST82, Index (DerefOf (Index (EWRY, One)), 0x3B))
                    Store (ST83, Index (DerefOf (Index (EWRY, One)), 0x3C))
                    Store (ST84, Index (DerefOf (Index (EWRY, One)), 0x3D))
                    Store (ST85, Index (DerefOf (Index (EWRY, One)), 0x3E))
                    Store (ST86, Index (DerefOf (Index (EWRY, One)), 0x3F))
                    Store (ST87, Index (DerefOf (Index (EWRY, One)), 0x40))
                    Store (ST88, Index (DerefOf (Index (EWRY, One)), 0x41))
                    Store (ST89, Index (DerefOf (Index (EWRY, One)), 0x42))
                    Store (ST8A, Index (DerefOf (Index (EWRY, One)), 0x43))
                    Store (ST8B, Index (DerefOf (Index (EWRY, One)), 0x44))
                    Store (CD30, Index (DerefOf (Index (EWRY, One)), 0x45))
                    Store (CD31, Index (DerefOf (Index (EWRY, One)), 0x46))
                    Store (CD32, Index (DerefOf (Index (EWRY, One)), 0x47))
                    Store (CD33, Index (DerefOf (Index (EWRY, One)), 0x48))
                    Store (CD34, Index (DerefOf (Index (EWRY, One)), 0x49))
                    Store (CD35, Index (DerefOf (Index (EWRY, One)), 0x4A))
                    Store (CD36, Index (DerefOf (Index (EWRY, One)), 0x4B))
                    Store (CD37, Index (DerefOf (Index (EWRY, One)), 0x4C))
                    Store (CD38, Index (DerefOf (Index (EWRY, One)), 0x4D))
                    Store (CD39, Index (DerefOf (Index (EWRY, One)), 0x4E))
                    Store (CD3A, Index (DerefOf (Index (EWRY, One)), 0x4F))
                    Store (CD3B, Index (DerefOf (Index (EWRY, One)), 0x50))
                    Store (CD3C, Index (DerefOf (Index (EWRY, One)), 0x51))
                    Store (CD3D, Index (DerefOf (Index (EWRY, One)), 0x52))
                    Store (CD3E, Index (DerefOf (Index (EWRY, One)), 0x53))
                    Store (CD3F, Index (DerefOf (Index (EWRY, One)), 0x54))
                    Store (CD40, Index (DerefOf (Index (EWRY, One)), 0x55))
                    Store (CD41, Index (DerefOf (Index (EWRY, One)), 0x56))
                    Store (CD42, Index (DerefOf (Index (EWRY, One)), 0x57))
                    Store (CD43, Index (DerefOf (Index (EWRY, One)), 0x58))
                    Store (CD44, Index (DerefOf (Index (EWRY, One)), 0x59))
                    Store (CD45, Index (DerefOf (Index (EWRY, One)), 0x5A))
                    Store (CD46, Index (DerefOf (Index (EWRY, One)), 0x5B))
                    Store (CD47, Index (DerefOf (Index (EWRY, One)), 0x5C))
                    Store (CD48, Index (DerefOf (Index (EWRY, One)), 0x5D))
                    Store (CD49, Index (DerefOf (Index (EWRY, One)), 0x5E))
                    Store (CD4A, Index (DerefOf (Index (EWRY, One)), 0x5F))
                    Store (CD4B, Index (DerefOf (Index (EWRY, One)), 0x60))
                    Store (CD4C, Index (DerefOf (Index (EWRY, One)), 0x61))
                    Store (CD4D, Index (DerefOf (Index (EWRY, One)), 0x62))
                    Store (CD4E, Index (DerefOf (Index (EWRY, One)), 0x63))
                    Store (CD4F, Index (DerefOf (Index (EWRY, One)), 0x64))
                    Store (CD50, Index (DerefOf (Index (EWRY, One)), 0x65))
                    Store (CD51, Index (DerefOf (Index (EWRY, One)), 0x66))
                    Store (CD52, Index (DerefOf (Index (EWRY, One)), 0x67))
                    Store (CD53, Index (DerefOf (Index (EWRY, One)), 0x68))
                    Store (CD54, Index (DerefOf (Index (EWRY, One)), 0x69))
                    Store (CD55, Index (DerefOf (Index (EWRY, One)), 0x6A))
                    Store (CD56, Index (DerefOf (Index (EWRY, One)), 0x6B))
                    Store (CD57, Index (DerefOf (Index (EWRY, One)), 0x6C))
                    Store (CD58, Index (DerefOf (Index (EWRY, One)), 0x6D))
                    Store (CD59, Index (DerefOf (Index (EWRY, One)), 0x6E))
                    Store (CD5A, Index (DerefOf (Index (EWRY, One)), 0x6F))
                    Store (CD5B, Index (DerefOf (Index (EWRY, One)), 0x70))
                    Store (CD5C, Index (DerefOf (Index (EWRY, One)), 0x71))
                    Store (CD5D, Index (DerefOf (Index (EWRY, One)), 0x72))
                    Store (CD5E, Index (DerefOf (Index (EWRY, One)), 0x73))
                    Store (CD5F, Index (DerefOf (Index (EWRY, One)), 0x74))
                    Store (CD60, Index (DerefOf (Index (EWRY, One)), 0x75))
                    Store (CD61, Index (DerefOf (Index (EWRY, One)), 0x76))
                    Store (CD62, Index (DerefOf (Index (EWRY, One)), 0x77))
                    Store (CD63, Index (DerefOf (Index (EWRY, One)), 0x78))
                    Store (CD64, Index (DerefOf (Index (EWRY, One)), 0x79))
                    Store (CD65, Index (DerefOf (Index (EWRY, One)), 0x7A))
                    Store (CD66, Index (DerefOf (Index (EWRY, One)), 0x7B))
                    Store (CD67, Index (DerefOf (Index (EWRY, One)), 0x7C))
                    Store (CD68, Index (DerefOf (Index (EWRY, One)), 0x7D))
                    Store (CD69, Index (DerefOf (Index (EWRY, One)), 0x7E))
                    Store (CD6A, Index (DerefOf (Index (EWRY, One)), 0x7F))
                    Store (CD6B, Index (DerefOf (Index (EWRY, One)), 0x80))
                    Store (CD6C, Index (DerefOf (Index (EWRY, One)), 0x81))
                    Store (CD6D, Index (DerefOf (Index (EWRY, One)), 0x82))
                    Store (CD6E, Index (DerefOf (Index (EWRY, One)), 0x83))
                    Store (CD6F, Index (DerefOf (Index (EWRY, One)), 0x84))
                    Store (CD70, Index (DerefOf (Index (EWRY, One)), 0x85))
                    Store (CD71, Index (DerefOf (Index (EWRY, One)), 0x86))
                    Return (EWRY)
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    Store (SDGN, Index (DerefOf (Index (WGDY, One)), One))
                    Store (SD11, Index (DerefOf (Index (WGDY, One)), 0x02))
                    Store (SD12, Index (DerefOf (Index (WGDY, One)), 0x03))
                    Store (SD13, Index (DerefOf (Index (WGDY, One)), 0x04))
                    Store (SD14, Index (DerefOf (Index (WGDY, One)), 0x05))
                    Store (SD15, Index (DerefOf (Index (WGDY, One)), 0x06))
                    Store (SD16, Index (DerefOf (Index (WGDY, One)), 0x07))
                    Store (SD17, Index (DerefOf (Index (WGDY, One)), 0x08))
                    Store (SD18, Index (DerefOf (Index (WGDY, One)), 0x09))
                    Store (SD19, Index (DerefOf (Index (WGDY, One)), 0x0A))
                    Store (SD21, Index (DerefOf (Index (WGDY, One)), 0x0B))
                    Store (SD22, Index (DerefOf (Index (WGDY, One)), 0x0C))
                    Store (SD23, Index (DerefOf (Index (WGDY, One)), 0x0D))
                    Store (SD24, Index (DerefOf (Index (WGDY, One)), 0x0E))
                    Store (SD25, Index (DerefOf (Index (WGDY, One)), 0x0F))
                    Store (SD26, Index (DerefOf (Index (WGDY, One)), 0x10))
                    Store (SD27, Index (DerefOf (Index (WGDY, One)), 0x11))
                    Store (SD28, Index (DerefOf (Index (WGDY, One)), 0x12))
                    Store (SD29, Index (DerefOf (Index (WGDY, One)), 0x13))
                    Store (SD31, Index (DerefOf (Index (WGDY, One)), 0x14))
                    Store (SD32, Index (DerefOf (Index (WGDY, One)), 0x15))
                    Store (SD33, Index (DerefOf (Index (WGDY, One)), 0x16))
                    Store (SD34, Index (DerefOf (Index (WGDY, One)), 0x17))
                    Store (SD35, Index (DerefOf (Index (WGDY, One)), 0x18))
                    Store (SD36, Index (DerefOf (Index (WGDY, One)), 0x19))
                    Store (SD37, Index (DerefOf (Index (WGDY, One)), 0x1A))
                    Store (SD38, Index (DerefOf (Index (WGDY, One)), 0x1B))
                    Store (SD39, Index (DerefOf (Index (WGDY, One)), 0x1C))
                    Store (SD41, Index (DerefOf (Index (WGDY, One)), 0x1D))
                    Store (SD42, Index (DerefOf (Index (WGDY, One)), 0x1E))
                    Store (SD43, Index (DerefOf (Index (WGDY, One)), 0x1F))
                    Store (SD44, Index (DerefOf (Index (WGDY, One)), 0x20))
                    Store (SD45, Index (DerefOf (Index (WGDY, One)), 0x21))
                    Store (SD46, Index (DerefOf (Index (WGDY, One)), 0x22))
                    Store (SD47, Index (DerefOf (Index (WGDY, One)), 0x23))
                    Store (SD48, Index (DerefOf (Index (WGDY, One)), 0x24))
                    Store (SD49, Index (DerefOf (Index (WGDY, One)), 0x25))
                    Store (SD51, Index (DerefOf (Index (WGDY, One)), 0x26))
                    Store (SD52, Index (DerefOf (Index (WGDY, One)), 0x27))
                    Store (SD53, Index (DerefOf (Index (WGDY, One)), 0x28))
                    Store (SD54, Index (DerefOf (Index (WGDY, One)), 0x29))
                    Store (SD55, Index (DerefOf (Index (WGDY, One)), 0x2A))
                    Store (SD56, Index (DerefOf (Index (WGDY, One)), 0x2B))
                    Store (SD57, Index (DerefOf (Index (WGDY, One)), 0x2C))
                    Store (SD58, Index (DerefOf (Index (WGDY, One)), 0x2D))
                    Store (SD59, Index (DerefOf (Index (WGDY, One)), 0x2E))
                    Store (SD61, Index (DerefOf (Index (WGDY, One)), 0x2F))
                    Store (SD62, Index (DerefOf (Index (WGDY, One)), 0x30))
                    Store (SD63, Index (DerefOf (Index (WGDY, One)), 0x31))
                    Store (SD64, Index (DerefOf (Index (WGDY, One)), 0x32))
                    Store (SD65, Index (DerefOf (Index (WGDY, One)), 0x33))
                    Store (SD66, Index (DerefOf (Index (WGDY, One)), 0x34))
                    Store (SD67, Index (DerefOf (Index (WGDY, One)), 0x35))
                    Store (SD68, Index (DerefOf (Index (WGDY, One)), 0x36))
                    Store (SD69, Index (DerefOf (Index (WGDY, One)), 0x37))
                    Store (SD71, Index (DerefOf (Index (WGDY, One)), 0x38))
                    Store (SD72, Index (DerefOf (Index (WGDY, One)), 0x39))
                    Store (SD73, Index (DerefOf (Index (WGDY, One)), 0x3A))
                    Store (SD74, Index (DerefOf (Index (WGDY, One)), 0x3B))
                    Store (SD75, Index (DerefOf (Index (WGDY, One)), 0x3C))
                    Store (SD76, Index (DerefOf (Index (WGDY, One)), 0x3D))
                    Store (SD77, Index (DerefOf (Index (WGDY, One)), 0x3E))
                    Store (SD78, Index (DerefOf (Index (WGDY, One)), 0x3F))
                    Store (SD79, Index (DerefOf (Index (WGDY, One)), 0x40))
                    Store (SD81, Index (DerefOf (Index (WGDY, One)), 0x41))
                    Store (SD82, Index (DerefOf (Index (WGDY, One)), 0x42))
                    Store (SD83, Index (DerefOf (Index (WGDY, One)), 0x43))
                    Store (SD84, Index (DerefOf (Index (WGDY, One)), 0x44))
                    Store (SD85, Index (DerefOf (Index (WGDY, One)), 0x45))
                    Store (SD86, Index (DerefOf (Index (WGDY, One)), 0x46))
                    Store (SD87, Index (DerefOf (Index (WGDY, One)), 0x47))
                    Store (SD88, Index (DerefOf (Index (WGDY, One)), 0x48))
                    Store (SD89, Index (DerefOf (Index (WGDY, One)), 0x49))
                    Return (WGDY)
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                    Return (ECKY)
                }

                Name (PPAY, Package (0x02)
                {
                    One, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    Store (WAGE, Index (DerefOf (Index (PPAY, One)), One))
                    Store (AGA1, Index (DerefOf (Index (PPAY, One)), 0x02))
                    Store (AGA2, Index (DerefOf (Index (PPAY, One)), 0x03))
                    Store (AGA3, Index (DerefOf (Index (PPAY, One)), 0x04))
                    Store (AGA4, Index (DerefOf (Index (PPAY, One)), 0x05))
                    Store (AGA5, Index (DerefOf (Index (PPAY, One)), 0x06))
                    Store (AGA6, Index (DerefOf (Index (PPAY, One)), 0x07))
                    Store (AGA7, Index (DerefOf (Index (PPAY, One)), 0x08))
                    Store (AGA8, Index (DerefOf (Index (PPAY, One)), 0x09))
                    Store (AGA9, Index (DerefOf (Index (PPAY, One)), 0x0A))
                    Store (AGAA, Index (DerefOf (Index (PPAY, One)), 0x0B))
                    Store (AGAB, Index (DerefOf (Index (PPAY, One)), 0x0C))
                    Store (AGB1, Index (DerefOf (Index (PPAY, One)), 0x0D))
                    Store (AGB2, Index (DerefOf (Index (PPAY, One)), 0x0E))
                    Store (AGB3, Index (DerefOf (Index (PPAY, One)), 0x0F))
                    Store (AGB4, Index (DerefOf (Index (PPAY, One)), 0x10))
                    Store (AGB5, Index (DerefOf (Index (PPAY, One)), 0x11))
                    Store (AGB6, Index (DerefOf (Index (PPAY, One)), 0x12))
                    Store (AGB7, Index (DerefOf (Index (PPAY, One)), 0x13))
                    Store (AGB8, Index (DerefOf (Index (PPAY, One)), 0x14))
                    Store (AGB9, Index (DerefOf (Index (PPAY, One)), 0x15))
                    Store (AGBA, Index (DerefOf (Index (PPAY, One)), 0x16))
                    Store (AGBB, Index (DerefOf (Index (PPAY, One)), 0x17))
                    Return (PPAY)
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    Store (WTSV, Index (DerefOf (Index (WTSY, One)), One))
                    Store (WTLE, Index (DerefOf (Index (WTSY, One)), 0x02))
                    Store (BL01, Index (DerefOf (Index (WTSY, One)), 0x03))
                    Store (BL02, Index (DerefOf (Index (WTSY, One)), 0x04))
                    Store (BL03, Index (DerefOf (Index (WTSY, One)), 0x05))
                    Store (BL04, Index (DerefOf (Index (WTSY, One)), 0x06))
                    Store (BL05, Index (DerefOf (Index (WTSY, One)), 0x07))
                    Store (BL06, Index (DerefOf (Index (WTSY, One)), 0x08))
                    Store (BL07, Index (DerefOf (Index (WTSY, One)), 0x09))
                    Store (BL08, Index (DerefOf (Index (WTSY, One)), 0x0A))
                    Store (BL09, Index (DerefOf (Index (WTSY, One)), 0x0B))
                    Store (BL10, Index (DerefOf (Index (WTSY, One)), 0x0C))
                    Store (BL11, Index (DerefOf (Index (WTSY, One)), 0x0D))
                    Store (BL12, Index (DerefOf (Index (WTSY, One)), 0x0E))
                    Store (BL13, Index (DerefOf (Index (WTSY, One)), 0x0F))
                    Store (BL14, Index (DerefOf (Index (WTSY, One)), 0x10))
                    Store (BL15, Index (DerefOf (Index (WTSY, One)), 0x11))
                    Store (BL16, Index (DerefOf (Index (WTSY, One)), 0x12))
                    Return (WTSY)
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    Store (WLBI, Index (DerefOf (Index (WAIY, One)), One))
                    Store (WHBI, Index (DerefOf (Index (WAIY, One)), 0x02))
                    Return (WAIY)
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                    Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                    Return (SADX)
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX)
                }
            }

            If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If (LNotEqual (GGOV (PRST), WPRP))
                    {
                        DL23 ()
                        SGOV (PRST, WPRP)
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    If (LEqual (Arg0, Zero))
                    {
                        Sleep (TBTG)
                    }
                    ElseIf (LEqual (Arg0, One))
                    {
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, And (Not (PFCP), One))
                        Sleep (TFDI)
                    }
                    Else
                    {
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    SPCO (WCLK, One)
                    SGOV (WFCP, PFCP)
                    Sleep (TN2B)
                    SGOV (WBRS, And (Not (PBRS), One))
                    Sleep (TB2R)
                    SGOV (PRST, And (Not (WPRP), One))
                    L23D ()
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Store (Zero, Local0)
                    While (LAnd (LNotEqual (SVID, WSID), LLess (Local0, WSTO)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    If (LEqual (WWEN, 0x02))
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (Zero)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One)
                        SGOV (PRST, And (Not (WPRP), One))
                        SGOV (WBRS, And (Not (PBRS), One))
                        Sleep (0xC8)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x14))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Sleep (0x0A)
                        Notify (PXSX, One)
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (One)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                }
            }

            If (LOr (WIST (), LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT))))
            {
                PowerResource (DRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        DRST
                    })
                }

                Method (IFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        ShiftLeft (CVPR, Zero, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        If (LEqual (CMDT, One))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Return (^^^CNVW.RSTT)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If (LEqual (CMDT, 0x02))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Store (CMDP, ^^^CNVW.RSTT)
                            }

                            Return (Zero)
                        }

                        If (LEqual (CMDT, 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                Return (^^^CNVW.PRRS)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (Zero)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LEqual (CRFI, One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x01                                     
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Store (ACSD, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Store (I5BS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Store (UHBS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        Store (AXMU, Local0)
                        ShiftLeft (Local0, One, Local0)
                        Or (Local0, AXSU, Local0)
                        Store (AXMR, Local1)
                        ShiftLeft (Local1, One, Local1)
                        Or (Local1, AXSR, Local1)
                        ShiftLeft (Local1, 0x02, Local1)
                        Or (Local0, Local1, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (WFRC)
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (WFUC)
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        Return (UNI4)
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        Return (WFIC)
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (LEqual (Arg0, ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d")))
                        {
                            If (LEqual (Arg2, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                           
                                })
                            }

                            If (LEqual (Arg2, One)){}
                            If (LEqual (Arg2, 0x02)){}
                            If (LEqual (Arg2, 0x03))
                            {
                                If (LEqual (WRTO, One)){}
                                ElseIf (LEqual (WRTO, 0x03)){}
                                Else
                                {
                                }

                                Return (WRTO)
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP18.PXSX))
    {
        Scope (_SB.PC00.RP18.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, Add (GMIO (^_ADR, _ADR), 0x44), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                    Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                    Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                    Return (SPLX)
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                    Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                    Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                    Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                    Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                    Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                    Return (WANX)
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                    Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                    Return (WRDX)
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    Store (STXE, Index (DerefOf (Index (WRDY, One)), One))
                    Store (ST10, Index (DerefOf (Index (WRDY, One)), 0x02))
                    Store (ST11, Index (DerefOf (Index (WRDY, One)), 0x03))
                    Store (ST12, Index (DerefOf (Index (WRDY, One)), 0x04))
                    Store (ST13, Index (DerefOf (Index (WRDY, One)), 0x05))
                    Store (ST14, Index (DerefOf (Index (WRDY, One)), 0x06))
                    Store (ST15, Index (DerefOf (Index (WRDY, One)), 0x07))
                    Store (ST16, Index (DerefOf (Index (WRDY, One)), 0x08))
                    Store (ST17, Index (DerefOf (Index (WRDY, One)), 0x09))
                    Store (ST18, Index (DerefOf (Index (WRDY, One)), 0x0A))
                    Store (ST19, Index (DerefOf (Index (WRDY, One)), 0x0B))
                    Store (ST50, Index (DerefOf (Index (WRDY, One)), 0x0C))
                    Store (ST51, Index (DerefOf (Index (WRDY, One)), 0x0D))
                    Store (ST52, Index (DerefOf (Index (WRDY, One)), 0x0E))
                    Store (ST53, Index (DerefOf (Index (WRDY, One)), 0x0F))
                    Store (ST54, Index (DerefOf (Index (WRDY, One)), 0x10))
                    Store (ST55, Index (DerefOf (Index (WRDY, One)), 0x11))
                    Store (ST56, Index (DerefOf (Index (WRDY, One)), 0x12))
                    Store (ST57, Index (DerefOf (Index (WRDY, One)), 0x13))
                    Store (ST58, Index (DerefOf (Index (WRDY, One)), 0x14))
                    Store (ST59, Index (DerefOf (Index (WRDY, One)), 0x15))
                    Store (ST5A, Index (DerefOf (Index (WRDY, One)), 0x16))
                    Store (ST5B, Index (DerefOf (Index (WRDY, One)), 0x17))
                    Store (CD10, Index (DerefOf (Index (WRDY, One)), 0x18))
                    Store (CD11, Index (DerefOf (Index (WRDY, One)), 0x19))
                    Store (CD12, Index (DerefOf (Index (WRDY, One)), 0x1A))
                    Store (CD13, Index (DerefOf (Index (WRDY, One)), 0x1B))
                    Store (CD14, Index (DerefOf (Index (WRDY, One)), 0x1C))
                    Store (CD15, Index (DerefOf (Index (WRDY, One)), 0x1D))
                    Store (CD16, Index (DerefOf (Index (WRDY, One)), 0x1E))
                    Store (CD17, Index (DerefOf (Index (WRDY, One)), 0x1F))
                    Store (CD18, Index (DerefOf (Index (WRDY, One)), 0x20))
                    Store (CD19, Index (DerefOf (Index (WRDY, One)), 0x21))
                    Store (CD1A, Index (DerefOf (Index (WRDY, One)), 0x22))
                    Store (CD20, Index (DerefOf (Index (WRDY, One)), 0x23))
                    Store (CD21, Index (DerefOf (Index (WRDY, One)), 0x24))
                    Store (CD22, Index (DerefOf (Index (WRDY, One)), 0x25))
                    Store (CD23, Index (DerefOf (Index (WRDY, One)), 0x26))
                    Store (CD24, Index (DerefOf (Index (WRDY, One)), 0x27))
                    Store (CD25, Index (DerefOf (Index (WRDY, One)), 0x28))
                    Store (CD26, Index (DerefOf (Index (WRDY, One)), 0x29))
                    Store (CD27, Index (DerefOf (Index (WRDY, One)), 0x2A))
                    Store (CD28, Index (DerefOf (Index (WRDY, One)), 0x2B))
                    Store (CD29, Index (DerefOf (Index (WRDY, One)), 0x2C))
                    Store (CD2A, Index (DerefOf (Index (WRDY, One)), 0x2D))
                    Return (WRDY)
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    Store (STDE, Index (DerefOf (Index (EWRY, One)), One))
                    Store (STRS, Index (DerefOf (Index (EWRY, One)), 0x02))
                    Store (ST20, Index (DerefOf (Index (EWRY, One)), 0x03))
                    Store (ST21, Index (DerefOf (Index (EWRY, One)), 0x04))
                    Store (ST22, Index (DerefOf (Index (EWRY, One)), 0x05))
                    Store (ST23, Index (DerefOf (Index (EWRY, One)), 0x06))
                    Store (ST24, Index (DerefOf (Index (EWRY, One)), 0x07))
                    Store (ST25, Index (DerefOf (Index (EWRY, One)), 0x08))
                    Store (ST26, Index (DerefOf (Index (EWRY, One)), 0x09))
                    Store (ST27, Index (DerefOf (Index (EWRY, One)), 0x0A))
                    Store (ST28, Index (DerefOf (Index (EWRY, One)), 0x0B))
                    Store (ST29, Index (DerefOf (Index (EWRY, One)), 0x0C))
                    Store (ST60, Index (DerefOf (Index (EWRY, One)), 0x0D))
                    Store (ST61, Index (DerefOf (Index (EWRY, One)), 0x0E))
                    Store (ST62, Index (DerefOf (Index (EWRY, One)), 0x0F))
                    Store (ST63, Index (DerefOf (Index (EWRY, One)), 0x10))
                    Store (ST64, Index (DerefOf (Index (EWRY, One)), 0x11))
                    Store (ST65, Index (DerefOf (Index (EWRY, One)), 0x12))
                    Store (ST66, Index (DerefOf (Index (EWRY, One)), 0x13))
                    Store (ST67, Index (DerefOf (Index (EWRY, One)), 0x14))
                    Store (ST68, Index (DerefOf (Index (EWRY, One)), 0x15))
                    Store (ST69, Index (DerefOf (Index (EWRY, One)), 0x16))
                    Store (ST6A, Index (DerefOf (Index (EWRY, One)), 0x17))
                    Store (ST6B, Index (DerefOf (Index (EWRY, One)), 0x18))
                    Store (ST30, Index (DerefOf (Index (EWRY, One)), 0x19))
                    Store (ST31, Index (DerefOf (Index (EWRY, One)), 0x1A))
                    Store (ST32, Index (DerefOf (Index (EWRY, One)), 0x1B))
                    Store (ST33, Index (DerefOf (Index (EWRY, One)), 0x1C))
                    Store (ST34, Index (DerefOf (Index (EWRY, One)), 0x1D))
                    Store (ST35, Index (DerefOf (Index (EWRY, One)), 0x1E))
                    Store (ST36, Index (DerefOf (Index (EWRY, One)), 0x1F))
                    Store (ST37, Index (DerefOf (Index (EWRY, One)), 0x20))
                    Store (ST38, Index (DerefOf (Index (EWRY, One)), 0x21))
                    Store (ST39, Index (DerefOf (Index (EWRY, One)), 0x22))
                    Store (ST70, Index (DerefOf (Index (EWRY, One)), 0x23))
                    Store (ST71, Index (DerefOf (Index (EWRY, One)), 0x24))
                    Store (ST72, Index (DerefOf (Index (EWRY, One)), 0x25))
                    Store (ST73, Index (DerefOf (Index (EWRY, One)), 0x26))
                    Store (ST74, Index (DerefOf (Index (EWRY, One)), 0x27))
                    Store (ST75, Index (DerefOf (Index (EWRY, One)), 0x28))
                    Store (ST76, Index (DerefOf (Index (EWRY, One)), 0x29))
                    Store (ST77, Index (DerefOf (Index (EWRY, One)), 0x2A))
                    Store (ST78, Index (DerefOf (Index (EWRY, One)), 0x2B))
                    Store (ST79, Index (DerefOf (Index (EWRY, One)), 0x2C))
                    Store (ST7A, Index (DerefOf (Index (EWRY, One)), 0x2D))
                    Store (ST7B, Index (DerefOf (Index (EWRY, One)), 0x2E))
                    Store (ST40, Index (DerefOf (Index (EWRY, One)), 0x2F))
                    Store (ST41, Index (DerefOf (Index (EWRY, One)), 0x30))
                    Store (ST42, Index (DerefOf (Index (EWRY, One)), 0x31))
                    Store (ST43, Index (DerefOf (Index (EWRY, One)), 0x32))
                    Store (ST44, Index (DerefOf (Index (EWRY, One)), 0x33))
                    Store (ST45, Index (DerefOf (Index (EWRY, One)), 0x34))
                    Store (ST46, Index (DerefOf (Index (EWRY, One)), 0x35))
                    Store (ST47, Index (DerefOf (Index (EWRY, One)), 0x36))
                    Store (ST48, Index (DerefOf (Index (EWRY, One)), 0x37))
                    Store (ST49, Index (DerefOf (Index (EWRY, One)), 0x38))
                    Store (ST80, Index (DerefOf (Index (EWRY, One)), 0x39))
                    Store (ST81, Index (DerefOf (Index (EWRY, One)), 0x3A))
                    Store (ST82, Index (DerefOf (Index (EWRY, One)), 0x3B))
                    Store (ST83, Index (DerefOf (Index (EWRY, One)), 0x3C))
                    Store (ST84, Index (DerefOf (Index (EWRY, One)), 0x3D))
                    Store (ST85, Index (DerefOf (Index (EWRY, One)), 0x3E))
                    Store (ST86, Index (DerefOf (Index (EWRY, One)), 0x3F))
                    Store (ST87, Index (DerefOf (Index (EWRY, One)), 0x40))
                    Store (ST88, Index (DerefOf (Index (EWRY, One)), 0x41))
                    Store (ST89, Index (DerefOf (Index (EWRY, One)), 0x42))
                    Store (ST8A, Index (DerefOf (Index (EWRY, One)), 0x43))
                    Store (ST8B, Index (DerefOf (Index (EWRY, One)), 0x44))
                    Store (CD30, Index (DerefOf (Index (EWRY, One)), 0x45))
                    Store (CD31, Index (DerefOf (Index (EWRY, One)), 0x46))
                    Store (CD32, Index (DerefOf (Index (EWRY, One)), 0x47))
                    Store (CD33, Index (DerefOf (Index (EWRY, One)), 0x48))
                    Store (CD34, Index (DerefOf (Index (EWRY, One)), 0x49))
                    Store (CD35, Index (DerefOf (Index (EWRY, One)), 0x4A))
                    Store (CD36, Index (DerefOf (Index (EWRY, One)), 0x4B))
                    Store (CD37, Index (DerefOf (Index (EWRY, One)), 0x4C))
                    Store (CD38, Index (DerefOf (Index (EWRY, One)), 0x4D))
                    Store (CD39, Index (DerefOf (Index (EWRY, One)), 0x4E))
                    Store (CD3A, Index (DerefOf (Index (EWRY, One)), 0x4F))
                    Store (CD3B, Index (DerefOf (Index (EWRY, One)), 0x50))
                    Store (CD3C, Index (DerefOf (Index (EWRY, One)), 0x51))
                    Store (CD3D, Index (DerefOf (Index (EWRY, One)), 0x52))
                    Store (CD3E, Index (DerefOf (Index (EWRY, One)), 0x53))
                    Store (CD3F, Index (DerefOf (Index (EWRY, One)), 0x54))
                    Store (CD40, Index (DerefOf (Index (EWRY, One)), 0x55))
                    Store (CD41, Index (DerefOf (Index (EWRY, One)), 0x56))
                    Store (CD42, Index (DerefOf (Index (EWRY, One)), 0x57))
                    Store (CD43, Index (DerefOf (Index (EWRY, One)), 0x58))
                    Store (CD44, Index (DerefOf (Index (EWRY, One)), 0x59))
                    Store (CD45, Index (DerefOf (Index (EWRY, One)), 0x5A))
                    Store (CD46, Index (DerefOf (Index (EWRY, One)), 0x5B))
                    Store (CD47, Index (DerefOf (Index (EWRY, One)), 0x5C))
                    Store (CD48, Index (DerefOf (Index (EWRY, One)), 0x5D))
                    Store (CD49, Index (DerefOf (Index (EWRY, One)), 0x5E))
                    Store (CD4A, Index (DerefOf (Index (EWRY, One)), 0x5F))
                    Store (CD4B, Index (DerefOf (Index (EWRY, One)), 0x60))
                    Store (CD4C, Index (DerefOf (Index (EWRY, One)), 0x61))
                    Store (CD4D, Index (DerefOf (Index (EWRY, One)), 0x62))
                    Store (CD4E, Index (DerefOf (Index (EWRY, One)), 0x63))
                    Store (CD4F, Index (DerefOf (Index (EWRY, One)), 0x64))
                    Store (CD50, Index (DerefOf (Index (EWRY, One)), 0x65))
                    Store (CD51, Index (DerefOf (Index (EWRY, One)), 0x66))
                    Store (CD52, Index (DerefOf (Index (EWRY, One)), 0x67))
                    Store (CD53, Index (DerefOf (Index (EWRY, One)), 0x68))
                    Store (CD54, Index (DerefOf (Index (EWRY, One)), 0x69))
                    Store (CD55, Index (DerefOf (Index (EWRY, One)), 0x6A))
                    Store (CD56, Index (DerefOf (Index (EWRY, One)), 0x6B))
                    Store (CD57, Index (DerefOf (Index (EWRY, One)), 0x6C))
                    Store (CD58, Index (DerefOf (Index (EWRY, One)), 0x6D))
                    Store (CD59, Index (DerefOf (Index (EWRY, One)), 0x6E))
                    Store (CD5A, Index (DerefOf (Index (EWRY, One)), 0x6F))
                    Store (CD5B, Index (DerefOf (Index (EWRY, One)), 0x70))
                    Store (CD5C, Index (DerefOf (Index (EWRY, One)), 0x71))
                    Store (CD5D, Index (DerefOf (Index (EWRY, One)), 0x72))
                    Store (CD5E, Index (DerefOf (Index (EWRY, One)), 0x73))
                    Store (CD5F, Index (DerefOf (Index (EWRY, One)), 0x74))
                    Store (CD60, Index (DerefOf (Index (EWRY, One)), 0x75))
                    Store (CD61, Index (DerefOf (Index (EWRY, One)), 0x76))
                    Store (CD62, Index (DerefOf (Index (EWRY, One)), 0x77))
                    Store (CD63, Index (DerefOf (Index (EWRY, One)), 0x78))
                    Store (CD64, Index (DerefOf (Index (EWRY, One)), 0x79))
                    Store (CD65, Index (DerefOf (Index (EWRY, One)), 0x7A))
                    Store (CD66, Index (DerefOf (Index (EWRY, One)), 0x7B))
                    Store (CD67, Index (DerefOf (Index (EWRY, One)), 0x7C))
                    Store (CD68, Index (DerefOf (Index (EWRY, One)), 0x7D))
                    Store (CD69, Index (DerefOf (Index (EWRY, One)), 0x7E))
                    Store (CD6A, Index (DerefOf (Index (EWRY, One)), 0x7F))
                    Store (CD6B, Index (DerefOf (Index (EWRY, One)), 0x80))
                    Store (CD6C, Index (DerefOf (Index (EWRY, One)), 0x81))
                    Store (CD6D, Index (DerefOf (Index (EWRY, One)), 0x82))
                    Store (CD6E, Index (DerefOf (Index (EWRY, One)), 0x83))
                    Store (CD6F, Index (DerefOf (Index (EWRY, One)), 0x84))
                    Store (CD70, Index (DerefOf (Index (EWRY, One)), 0x85))
                    Store (CD71, Index (DerefOf (Index (EWRY, One)), 0x86))
                    Return (EWRY)
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    Store (SDGN, Index (DerefOf (Index (WGDY, One)), One))
                    Store (SD11, Index (DerefOf (Index (WGDY, One)), 0x02))
                    Store (SD12, Index (DerefOf (Index (WGDY, One)), 0x03))
                    Store (SD13, Index (DerefOf (Index (WGDY, One)), 0x04))
                    Store (SD14, Index (DerefOf (Index (WGDY, One)), 0x05))
                    Store (SD15, Index (DerefOf (Index (WGDY, One)), 0x06))
                    Store (SD16, Index (DerefOf (Index (WGDY, One)), 0x07))
                    Store (SD17, Index (DerefOf (Index (WGDY, One)), 0x08))
                    Store (SD18, Index (DerefOf (Index (WGDY, One)), 0x09))
                    Store (SD19, Index (DerefOf (Index (WGDY, One)), 0x0A))
                    Store (SD21, Index (DerefOf (Index (WGDY, One)), 0x0B))
                    Store (SD22, Index (DerefOf (Index (WGDY, One)), 0x0C))
                    Store (SD23, Index (DerefOf (Index (WGDY, One)), 0x0D))
                    Store (SD24, Index (DerefOf (Index (WGDY, One)), 0x0E))
                    Store (SD25, Index (DerefOf (Index (WGDY, One)), 0x0F))
                    Store (SD26, Index (DerefOf (Index (WGDY, One)), 0x10))
                    Store (SD27, Index (DerefOf (Index (WGDY, One)), 0x11))
                    Store (SD28, Index (DerefOf (Index (WGDY, One)), 0x12))
                    Store (SD29, Index (DerefOf (Index (WGDY, One)), 0x13))
                    Store (SD31, Index (DerefOf (Index (WGDY, One)), 0x14))
                    Store (SD32, Index (DerefOf (Index (WGDY, One)), 0x15))
                    Store (SD33, Index (DerefOf (Index (WGDY, One)), 0x16))
                    Store (SD34, Index (DerefOf (Index (WGDY, One)), 0x17))
                    Store (SD35, Index (DerefOf (Index (WGDY, One)), 0x18))
                    Store (SD36, Index (DerefOf (Index (WGDY, One)), 0x19))
                    Store (SD37, Index (DerefOf (Index (WGDY, One)), 0x1A))
                    Store (SD38, Index (DerefOf (Index (WGDY, One)), 0x1B))
                    Store (SD39, Index (DerefOf (Index (WGDY, One)), 0x1C))
                    Store (SD41, Index (DerefOf (Index (WGDY, One)), 0x1D))
                    Store (SD42, Index (DerefOf (Index (WGDY, One)), 0x1E))
                    Store (SD43, Index (DerefOf (Index (WGDY, One)), 0x1F))
                    Store (SD44, Index (DerefOf (Index (WGDY, One)), 0x20))
                    Store (SD45, Index (DerefOf (Index (WGDY, One)), 0x21))
                    Store (SD46, Index (DerefOf (Index (WGDY, One)), 0x22))
                    Store (SD47, Index (DerefOf (Index (WGDY, One)), 0x23))
                    Store (SD48, Index (DerefOf (Index (WGDY, One)), 0x24))
                    Store (SD49, Index (DerefOf (Index (WGDY, One)), 0x25))
                    Store (SD51, Index (DerefOf (Index (WGDY, One)), 0x26))
                    Store (SD52, Index (DerefOf (Index (WGDY, One)), 0x27))
                    Store (SD53, Index (DerefOf (Index (WGDY, One)), 0x28))
                    Store (SD54, Index (DerefOf (Index (WGDY, One)), 0x29))
                    Store (SD55, Index (DerefOf (Index (WGDY, One)), 0x2A))
                    Store (SD56, Index (DerefOf (Index (WGDY, One)), 0x2B))
                    Store (SD57, Index (DerefOf (Index (WGDY, One)), 0x2C))
                    Store (SD58, Index (DerefOf (Index (WGDY, One)), 0x2D))
                    Store (SD59, Index (DerefOf (Index (WGDY, One)), 0x2E))
                    Store (SD61, Index (DerefOf (Index (WGDY, One)), 0x2F))
                    Store (SD62, Index (DerefOf (Index (WGDY, One)), 0x30))
                    Store (SD63, Index (DerefOf (Index (WGDY, One)), 0x31))
                    Store (SD64, Index (DerefOf (Index (WGDY, One)), 0x32))
                    Store (SD65, Index (DerefOf (Index (WGDY, One)), 0x33))
                    Store (SD66, Index (DerefOf (Index (WGDY, One)), 0x34))
                    Store (SD67, Index (DerefOf (Index (WGDY, One)), 0x35))
                    Store (SD68, Index (DerefOf (Index (WGDY, One)), 0x36))
                    Store (SD69, Index (DerefOf (Index (WGDY, One)), 0x37))
                    Store (SD71, Index (DerefOf (Index (WGDY, One)), 0x38))
                    Store (SD72, Index (DerefOf (Index (WGDY, One)), 0x39))
                    Store (SD73, Index (DerefOf (Index (WGDY, One)), 0x3A))
                    Store (SD74, Index (DerefOf (Index (WGDY, One)), 0x3B))
                    Store (SD75, Index (DerefOf (Index (WGDY, One)), 0x3C))
                    Store (SD76, Index (DerefOf (Index (WGDY, One)), 0x3D))
                    Store (SD77, Index (DerefOf (Index (WGDY, One)), 0x3E))
                    Store (SD78, Index (DerefOf (Index (WGDY, One)), 0x3F))
                    Store (SD79, Index (DerefOf (Index (WGDY, One)), 0x40))
                    Store (SD81, Index (DerefOf (Index (WGDY, One)), 0x41))
                    Store (SD82, Index (DerefOf (Index (WGDY, One)), 0x42))
                    Store (SD83, Index (DerefOf (Index (WGDY, One)), 0x43))
                    Store (SD84, Index (DerefOf (Index (WGDY, One)), 0x44))
                    Store (SD85, Index (DerefOf (Index (WGDY, One)), 0x45))
                    Store (SD86, Index (DerefOf (Index (WGDY, One)), 0x46))
                    Store (SD87, Index (DerefOf (Index (WGDY, One)), 0x47))
                    Store (SD88, Index (DerefOf (Index (WGDY, One)), 0x48))
                    Store (SD89, Index (DerefOf (Index (WGDY, One)), 0x49))
                    Return (WGDY)
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                    Return (ECKY)
                }

                Name (PPAY, Package (0x02)
                {
                    One, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    Store (WAGE, Index (DerefOf (Index (PPAY, One)), One))
                    Store (AGA1, Index (DerefOf (Index (PPAY, One)), 0x02))
                    Store (AGA2, Index (DerefOf (Index (PPAY, One)), 0x03))
                    Store (AGA3, Index (DerefOf (Index (PPAY, One)), 0x04))
                    Store (AGA4, Index (DerefOf (Index (PPAY, One)), 0x05))
                    Store (AGA5, Index (DerefOf (Index (PPAY, One)), 0x06))
                    Store (AGA6, Index (DerefOf (Index (PPAY, One)), 0x07))
                    Store (AGA7, Index (DerefOf (Index (PPAY, One)), 0x08))
                    Store (AGA8, Index (DerefOf (Index (PPAY, One)), 0x09))
                    Store (AGA9, Index (DerefOf (Index (PPAY, One)), 0x0A))
                    Store (AGAA, Index (DerefOf (Index (PPAY, One)), 0x0B))
                    Store (AGAB, Index (DerefOf (Index (PPAY, One)), 0x0C))
                    Store (AGB1, Index (DerefOf (Index (PPAY, One)), 0x0D))
                    Store (AGB2, Index (DerefOf (Index (PPAY, One)), 0x0E))
                    Store (AGB3, Index (DerefOf (Index (PPAY, One)), 0x0F))
                    Store (AGB4, Index (DerefOf (Index (PPAY, One)), 0x10))
                    Store (AGB5, Index (DerefOf (Index (PPAY, One)), 0x11))
                    Store (AGB6, Index (DerefOf (Index (PPAY, One)), 0x12))
                    Store (AGB7, Index (DerefOf (Index (PPAY, One)), 0x13))
                    Store (AGB8, Index (DerefOf (Index (PPAY, One)), 0x14))
                    Store (AGB9, Index (DerefOf (Index (PPAY, One)), 0x15))
                    Store (AGBA, Index (DerefOf (Index (PPAY, One)), 0x16))
                    Store (AGBB, Index (DerefOf (Index (PPAY, One)), 0x17))
                    Return (PPAY)
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    Store (WTSV, Index (DerefOf (Index (WTSY, One)), One))
                    Store (WTLE, Index (DerefOf (Index (WTSY, One)), 0x02))
                    Store (BL01, Index (DerefOf (Index (WTSY, One)), 0x03))
                    Store (BL02, Index (DerefOf (Index (WTSY, One)), 0x04))
                    Store (BL03, Index (DerefOf (Index (WTSY, One)), 0x05))
                    Store (BL04, Index (DerefOf (Index (WTSY, One)), 0x06))
                    Store (BL05, Index (DerefOf (Index (WTSY, One)), 0x07))
                    Store (BL06, Index (DerefOf (Index (WTSY, One)), 0x08))
                    Store (BL07, Index (DerefOf (Index (WTSY, One)), 0x09))
                    Store (BL08, Index (DerefOf (Index (WTSY, One)), 0x0A))
                    Store (BL09, Index (DerefOf (Index (WTSY, One)), 0x0B))
                    Store (BL10, Index (DerefOf (Index (WTSY, One)), 0x0C))
                    Store (BL11, Index (DerefOf (Index (WTSY, One)), 0x0D))
                    Store (BL12, Index (DerefOf (Index (WTSY, One)), 0x0E))
                    Store (BL13, Index (DerefOf (Index (WTSY, One)), 0x0F))
                    Store (BL14, Index (DerefOf (Index (WTSY, One)), 0x10))
                    Store (BL15, Index (DerefOf (Index (WTSY, One)), 0x11))
                    Store (BL16, Index (DerefOf (Index (WTSY, One)), 0x12))
                    Return (WTSY)
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    Store (WLBI, Index (DerefOf (Index (WAIY, One)), One))
                    Store (WHBI, Index (DerefOf (Index (WAIY, One)), 0x02))
                    Return (WAIY)
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                    Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                    Return (SADX)
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX)
                }
            }

            If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If (LNotEqual (GGOV (PRST), WPRP))
                    {
                        DL23 ()
                        SGOV (PRST, WPRP)
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    If (LEqual (Arg0, Zero))
                    {
                        Sleep (TBTG)
                    }
                    ElseIf (LEqual (Arg0, One))
                    {
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, And (Not (PFCP), One))
                        Sleep (TFDI)
                    }
                    Else
                    {
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    SPCO (WCLK, One)
                    SGOV (WFCP, PFCP)
                    Sleep (TN2B)
                    SGOV (WBRS, And (Not (PBRS), One))
                    Sleep (TB2R)
                    SGOV (PRST, And (Not (WPRP), One))
                    L23D ()
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Store (Zero, Local0)
                    While (LAnd (LNotEqual (SVID, WSID), LLess (Local0, WSTO)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    If (LEqual (WWEN, 0x02))
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (Zero)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One)
                        SGOV (PRST, And (Not (WPRP), One))
                        SGOV (WBRS, And (Not (PBRS), One))
                        Sleep (0xC8)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x14))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Sleep (0x0A)
                        Notify (PXSX, One)
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (One)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                }
            }

            If (LOr (WIST (), LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT))))
            {
                PowerResource (DRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        DRST
                    })
                }

                Method (IFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        ShiftLeft (CVPR, Zero, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        If (LEqual (CMDT, One))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Return (^^^CNVW.RSTT)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If (LEqual (CMDT, 0x02))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Store (CMDP, ^^^CNVW.RSTT)
                            }

                            Return (Zero)
                        }

                        If (LEqual (CMDT, 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                Return (^^^CNVW.PRRS)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (Zero)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LEqual (CRFI, One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x01                                     
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Store (ACSD, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Store (I5BS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Store (UHBS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        Store (AXMU, Local0)
                        ShiftLeft (Local0, One, Local0)
                        Or (Local0, AXSU, Local0)
                        Store (AXMR, Local1)
                        ShiftLeft (Local1, One, Local1)
                        Or (Local1, AXSR, Local1)
                        ShiftLeft (Local1, 0x02, Local1)
                        Or (Local0, Local1, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (WFRC)
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (WFUC)
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        Return (UNI4)
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        Return (WFIC)
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (LEqual (Arg0, ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d")))
                        {
                            If (LEqual (Arg2, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                           
                                })
                            }

                            If (LEqual (Arg2, One)){}
                            If (LEqual (Arg2, 0x02)){}
                            If (LEqual (Arg2, 0x03))
                            {
                                If (LEqual (WRTO, One)){}
                                ElseIf (LEqual (WRTO, 0x03)){}
                                Else
                                {
                                }

                                Return (WRTO)
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP19.PXSX))
    {
        Scope (_SB.PC00.RP19.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, Add (GMIO (^_ADR, _ADR), 0x44), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                    Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                    Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                    Return (SPLX)
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                    Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                    Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                    Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                    Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                    Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                    Return (WANX)
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                    Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                    Return (WRDX)
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    Store (STXE, Index (DerefOf (Index (WRDY, One)), One))
                    Store (ST10, Index (DerefOf (Index (WRDY, One)), 0x02))
                    Store (ST11, Index (DerefOf (Index (WRDY, One)), 0x03))
                    Store (ST12, Index (DerefOf (Index (WRDY, One)), 0x04))
                    Store (ST13, Index (DerefOf (Index (WRDY, One)), 0x05))
                    Store (ST14, Index (DerefOf (Index (WRDY, One)), 0x06))
                    Store (ST15, Index (DerefOf (Index (WRDY, One)), 0x07))
                    Store (ST16, Index (DerefOf (Index (WRDY, One)), 0x08))
                    Store (ST17, Index (DerefOf (Index (WRDY, One)), 0x09))
                    Store (ST18, Index (DerefOf (Index (WRDY, One)), 0x0A))
                    Store (ST19, Index (DerefOf (Index (WRDY, One)), 0x0B))
                    Store (ST50, Index (DerefOf (Index (WRDY, One)), 0x0C))
                    Store (ST51, Index (DerefOf (Index (WRDY, One)), 0x0D))
                    Store (ST52, Index (DerefOf (Index (WRDY, One)), 0x0E))
                    Store (ST53, Index (DerefOf (Index (WRDY, One)), 0x0F))
                    Store (ST54, Index (DerefOf (Index (WRDY, One)), 0x10))
                    Store (ST55, Index (DerefOf (Index (WRDY, One)), 0x11))
                    Store (ST56, Index (DerefOf (Index (WRDY, One)), 0x12))
                    Store (ST57, Index (DerefOf (Index (WRDY, One)), 0x13))
                    Store (ST58, Index (DerefOf (Index (WRDY, One)), 0x14))
                    Store (ST59, Index (DerefOf (Index (WRDY, One)), 0x15))
                    Store (ST5A, Index (DerefOf (Index (WRDY, One)), 0x16))
                    Store (ST5B, Index (DerefOf (Index (WRDY, One)), 0x17))
                    Store (CD10, Index (DerefOf (Index (WRDY, One)), 0x18))
                    Store (CD11, Index (DerefOf (Index (WRDY, One)), 0x19))
                    Store (CD12, Index (DerefOf (Index (WRDY, One)), 0x1A))
                    Store (CD13, Index (DerefOf (Index (WRDY, One)), 0x1B))
                    Store (CD14, Index (DerefOf (Index (WRDY, One)), 0x1C))
                    Store (CD15, Index (DerefOf (Index (WRDY, One)), 0x1D))
                    Store (CD16, Index (DerefOf (Index (WRDY, One)), 0x1E))
                    Store (CD17, Index (DerefOf (Index (WRDY, One)), 0x1F))
                    Store (CD18, Index (DerefOf (Index (WRDY, One)), 0x20))
                    Store (CD19, Index (DerefOf (Index (WRDY, One)), 0x21))
                    Store (CD1A, Index (DerefOf (Index (WRDY, One)), 0x22))
                    Store (CD20, Index (DerefOf (Index (WRDY, One)), 0x23))
                    Store (CD21, Index (DerefOf (Index (WRDY, One)), 0x24))
                    Store (CD22, Index (DerefOf (Index (WRDY, One)), 0x25))
                    Store (CD23, Index (DerefOf (Index (WRDY, One)), 0x26))
                    Store (CD24, Index (DerefOf (Index (WRDY, One)), 0x27))
                    Store (CD25, Index (DerefOf (Index (WRDY, One)), 0x28))
                    Store (CD26, Index (DerefOf (Index (WRDY, One)), 0x29))
                    Store (CD27, Index (DerefOf (Index (WRDY, One)), 0x2A))
                    Store (CD28, Index (DerefOf (Index (WRDY, One)), 0x2B))
                    Store (CD29, Index (DerefOf (Index (WRDY, One)), 0x2C))
                    Store (CD2A, Index (DerefOf (Index (WRDY, One)), 0x2D))
                    Return (WRDY)
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    Store (STDE, Index (DerefOf (Index (EWRY, One)), One))
                    Store (STRS, Index (DerefOf (Index (EWRY, One)), 0x02))
                    Store (ST20, Index (DerefOf (Index (EWRY, One)), 0x03))
                    Store (ST21, Index (DerefOf (Index (EWRY, One)), 0x04))
                    Store (ST22, Index (DerefOf (Index (EWRY, One)), 0x05))
                    Store (ST23, Index (DerefOf (Index (EWRY, One)), 0x06))
                    Store (ST24, Index (DerefOf (Index (EWRY, One)), 0x07))
                    Store (ST25, Index (DerefOf (Index (EWRY, One)), 0x08))
                    Store (ST26, Index (DerefOf (Index (EWRY, One)), 0x09))
                    Store (ST27, Index (DerefOf (Index (EWRY, One)), 0x0A))
                    Store (ST28, Index (DerefOf (Index (EWRY, One)), 0x0B))
                    Store (ST29, Index (DerefOf (Index (EWRY, One)), 0x0C))
                    Store (ST60, Index (DerefOf (Index (EWRY, One)), 0x0D))
                    Store (ST61, Index (DerefOf (Index (EWRY, One)), 0x0E))
                    Store (ST62, Index (DerefOf (Index (EWRY, One)), 0x0F))
                    Store (ST63, Index (DerefOf (Index (EWRY, One)), 0x10))
                    Store (ST64, Index (DerefOf (Index (EWRY, One)), 0x11))
                    Store (ST65, Index (DerefOf (Index (EWRY, One)), 0x12))
                    Store (ST66, Index (DerefOf (Index (EWRY, One)), 0x13))
                    Store (ST67, Index (DerefOf (Index (EWRY, One)), 0x14))
                    Store (ST68, Index (DerefOf (Index (EWRY, One)), 0x15))
                    Store (ST69, Index (DerefOf (Index (EWRY, One)), 0x16))
                    Store (ST6A, Index (DerefOf (Index (EWRY, One)), 0x17))
                    Store (ST6B, Index (DerefOf (Index (EWRY, One)), 0x18))
                    Store (ST30, Index (DerefOf (Index (EWRY, One)), 0x19))
                    Store (ST31, Index (DerefOf (Index (EWRY, One)), 0x1A))
                    Store (ST32, Index (DerefOf (Index (EWRY, One)), 0x1B))
                    Store (ST33, Index (DerefOf (Index (EWRY, One)), 0x1C))
                    Store (ST34, Index (DerefOf (Index (EWRY, One)), 0x1D))
                    Store (ST35, Index (DerefOf (Index (EWRY, One)), 0x1E))
                    Store (ST36, Index (DerefOf (Index (EWRY, One)), 0x1F))
                    Store (ST37, Index (DerefOf (Index (EWRY, One)), 0x20))
                    Store (ST38, Index (DerefOf (Index (EWRY, One)), 0x21))
                    Store (ST39, Index (DerefOf (Index (EWRY, One)), 0x22))
                    Store (ST70, Index (DerefOf (Index (EWRY, One)), 0x23))
                    Store (ST71, Index (DerefOf (Index (EWRY, One)), 0x24))
                    Store (ST72, Index (DerefOf (Index (EWRY, One)), 0x25))
                    Store (ST73, Index (DerefOf (Index (EWRY, One)), 0x26))
                    Store (ST74, Index (DerefOf (Index (EWRY, One)), 0x27))
                    Store (ST75, Index (DerefOf (Index (EWRY, One)), 0x28))
                    Store (ST76, Index (DerefOf (Index (EWRY, One)), 0x29))
                    Store (ST77, Index (DerefOf (Index (EWRY, One)), 0x2A))
                    Store (ST78, Index (DerefOf (Index (EWRY, One)), 0x2B))
                    Store (ST79, Index (DerefOf (Index (EWRY, One)), 0x2C))
                    Store (ST7A, Index (DerefOf (Index (EWRY, One)), 0x2D))
                    Store (ST7B, Index (DerefOf (Index (EWRY, One)), 0x2E))
                    Store (ST40, Index (DerefOf (Index (EWRY, One)), 0x2F))
                    Store (ST41, Index (DerefOf (Index (EWRY, One)), 0x30))
                    Store (ST42, Index (DerefOf (Index (EWRY, One)), 0x31))
                    Store (ST43, Index (DerefOf (Index (EWRY, One)), 0x32))
                    Store (ST44, Index (DerefOf (Index (EWRY, One)), 0x33))
                    Store (ST45, Index (DerefOf (Index (EWRY, One)), 0x34))
                    Store (ST46, Index (DerefOf (Index (EWRY, One)), 0x35))
                    Store (ST47, Index (DerefOf (Index (EWRY, One)), 0x36))
                    Store (ST48, Index (DerefOf (Index (EWRY, One)), 0x37))
                    Store (ST49, Index (DerefOf (Index (EWRY, One)), 0x38))
                    Store (ST80, Index (DerefOf (Index (EWRY, One)), 0x39))
                    Store (ST81, Index (DerefOf (Index (EWRY, One)), 0x3A))
                    Store (ST82, Index (DerefOf (Index (EWRY, One)), 0x3B))
                    Store (ST83, Index (DerefOf (Index (EWRY, One)), 0x3C))
                    Store (ST84, Index (DerefOf (Index (EWRY, One)), 0x3D))
                    Store (ST85, Index (DerefOf (Index (EWRY, One)), 0x3E))
                    Store (ST86, Index (DerefOf (Index (EWRY, One)), 0x3F))
                    Store (ST87, Index (DerefOf (Index (EWRY, One)), 0x40))
                    Store (ST88, Index (DerefOf (Index (EWRY, One)), 0x41))
                    Store (ST89, Index (DerefOf (Index (EWRY, One)), 0x42))
                    Store (ST8A, Index (DerefOf (Index (EWRY, One)), 0x43))
                    Store (ST8B, Index (DerefOf (Index (EWRY, One)), 0x44))
                    Store (CD30, Index (DerefOf (Index (EWRY, One)), 0x45))
                    Store (CD31, Index (DerefOf (Index (EWRY, One)), 0x46))
                    Store (CD32, Index (DerefOf (Index (EWRY, One)), 0x47))
                    Store (CD33, Index (DerefOf (Index (EWRY, One)), 0x48))
                    Store (CD34, Index (DerefOf (Index (EWRY, One)), 0x49))
                    Store (CD35, Index (DerefOf (Index (EWRY, One)), 0x4A))
                    Store (CD36, Index (DerefOf (Index (EWRY, One)), 0x4B))
                    Store (CD37, Index (DerefOf (Index (EWRY, One)), 0x4C))
                    Store (CD38, Index (DerefOf (Index (EWRY, One)), 0x4D))
                    Store (CD39, Index (DerefOf (Index (EWRY, One)), 0x4E))
                    Store (CD3A, Index (DerefOf (Index (EWRY, One)), 0x4F))
                    Store (CD3B, Index (DerefOf (Index (EWRY, One)), 0x50))
                    Store (CD3C, Index (DerefOf (Index (EWRY, One)), 0x51))
                    Store (CD3D, Index (DerefOf (Index (EWRY, One)), 0x52))
                    Store (CD3E, Index (DerefOf (Index (EWRY, One)), 0x53))
                    Store (CD3F, Index (DerefOf (Index (EWRY, One)), 0x54))
                    Store (CD40, Index (DerefOf (Index (EWRY, One)), 0x55))
                    Store (CD41, Index (DerefOf (Index (EWRY, One)), 0x56))
                    Store (CD42, Index (DerefOf (Index (EWRY, One)), 0x57))
                    Store (CD43, Index (DerefOf (Index (EWRY, One)), 0x58))
                    Store (CD44, Index (DerefOf (Index (EWRY, One)), 0x59))
                    Store (CD45, Index (DerefOf (Index (EWRY, One)), 0x5A))
                    Store (CD46, Index (DerefOf (Index (EWRY, One)), 0x5B))
                    Store (CD47, Index (DerefOf (Index (EWRY, One)), 0x5C))
                    Store (CD48, Index (DerefOf (Index (EWRY, One)), 0x5D))
                    Store (CD49, Index (DerefOf (Index (EWRY, One)), 0x5E))
                    Store (CD4A, Index (DerefOf (Index (EWRY, One)), 0x5F))
                    Store (CD4B, Index (DerefOf (Index (EWRY, One)), 0x60))
                    Store (CD4C, Index (DerefOf (Index (EWRY, One)), 0x61))
                    Store (CD4D, Index (DerefOf (Index (EWRY, One)), 0x62))
                    Store (CD4E, Index (DerefOf (Index (EWRY, One)), 0x63))
                    Store (CD4F, Index (DerefOf (Index (EWRY, One)), 0x64))
                    Store (CD50, Index (DerefOf (Index (EWRY, One)), 0x65))
                    Store (CD51, Index (DerefOf (Index (EWRY, One)), 0x66))
                    Store (CD52, Index (DerefOf (Index (EWRY, One)), 0x67))
                    Store (CD53, Index (DerefOf (Index (EWRY, One)), 0x68))
                    Store (CD54, Index (DerefOf (Index (EWRY, One)), 0x69))
                    Store (CD55, Index (DerefOf (Index (EWRY, One)), 0x6A))
                    Store (CD56, Index (DerefOf (Index (EWRY, One)), 0x6B))
                    Store (CD57, Index (DerefOf (Index (EWRY, One)), 0x6C))
                    Store (CD58, Index (DerefOf (Index (EWRY, One)), 0x6D))
                    Store (CD59, Index (DerefOf (Index (EWRY, One)), 0x6E))
                    Store (CD5A, Index (DerefOf (Index (EWRY, One)), 0x6F))
                    Store (CD5B, Index (DerefOf (Index (EWRY, One)), 0x70))
                    Store (CD5C, Index (DerefOf (Index (EWRY, One)), 0x71))
                    Store (CD5D, Index (DerefOf (Index (EWRY, One)), 0x72))
                    Store (CD5E, Index (DerefOf (Index (EWRY, One)), 0x73))
                    Store (CD5F, Index (DerefOf (Index (EWRY, One)), 0x74))
                    Store (CD60, Index (DerefOf (Index (EWRY, One)), 0x75))
                    Store (CD61, Index (DerefOf (Index (EWRY, One)), 0x76))
                    Store (CD62, Index (DerefOf (Index (EWRY, One)), 0x77))
                    Store (CD63, Index (DerefOf (Index (EWRY, One)), 0x78))
                    Store (CD64, Index (DerefOf (Index (EWRY, One)), 0x79))
                    Store (CD65, Index (DerefOf (Index (EWRY, One)), 0x7A))
                    Store (CD66, Index (DerefOf (Index (EWRY, One)), 0x7B))
                    Store (CD67, Index (DerefOf (Index (EWRY, One)), 0x7C))
                    Store (CD68, Index (DerefOf (Index (EWRY, One)), 0x7D))
                    Store (CD69, Index (DerefOf (Index (EWRY, One)), 0x7E))
                    Store (CD6A, Index (DerefOf (Index (EWRY, One)), 0x7F))
                    Store (CD6B, Index (DerefOf (Index (EWRY, One)), 0x80))
                    Store (CD6C, Index (DerefOf (Index (EWRY, One)), 0x81))
                    Store (CD6D, Index (DerefOf (Index (EWRY, One)), 0x82))
                    Store (CD6E, Index (DerefOf (Index (EWRY, One)), 0x83))
                    Store (CD6F, Index (DerefOf (Index (EWRY, One)), 0x84))
                    Store (CD70, Index (DerefOf (Index (EWRY, One)), 0x85))
                    Store (CD71, Index (DerefOf (Index (EWRY, One)), 0x86))
                    Return (EWRY)
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    Store (SDGN, Index (DerefOf (Index (WGDY, One)), One))
                    Store (SD11, Index (DerefOf (Index (WGDY, One)), 0x02))
                    Store (SD12, Index (DerefOf (Index (WGDY, One)), 0x03))
                    Store (SD13, Index (DerefOf (Index (WGDY, One)), 0x04))
                    Store (SD14, Index (DerefOf (Index (WGDY, One)), 0x05))
                    Store (SD15, Index (DerefOf (Index (WGDY, One)), 0x06))
                    Store (SD16, Index (DerefOf (Index (WGDY, One)), 0x07))
                    Store (SD17, Index (DerefOf (Index (WGDY, One)), 0x08))
                    Store (SD18, Index (DerefOf (Index (WGDY, One)), 0x09))
                    Store (SD19, Index (DerefOf (Index (WGDY, One)), 0x0A))
                    Store (SD21, Index (DerefOf (Index (WGDY, One)), 0x0B))
                    Store (SD22, Index (DerefOf (Index (WGDY, One)), 0x0C))
                    Store (SD23, Index (DerefOf (Index (WGDY, One)), 0x0D))
                    Store (SD24, Index (DerefOf (Index (WGDY, One)), 0x0E))
                    Store (SD25, Index (DerefOf (Index (WGDY, One)), 0x0F))
                    Store (SD26, Index (DerefOf (Index (WGDY, One)), 0x10))
                    Store (SD27, Index (DerefOf (Index (WGDY, One)), 0x11))
                    Store (SD28, Index (DerefOf (Index (WGDY, One)), 0x12))
                    Store (SD29, Index (DerefOf (Index (WGDY, One)), 0x13))
                    Store (SD31, Index (DerefOf (Index (WGDY, One)), 0x14))
                    Store (SD32, Index (DerefOf (Index (WGDY, One)), 0x15))
                    Store (SD33, Index (DerefOf (Index (WGDY, One)), 0x16))
                    Store (SD34, Index (DerefOf (Index (WGDY, One)), 0x17))
                    Store (SD35, Index (DerefOf (Index (WGDY, One)), 0x18))
                    Store (SD36, Index (DerefOf (Index (WGDY, One)), 0x19))
                    Store (SD37, Index (DerefOf (Index (WGDY, One)), 0x1A))
                    Store (SD38, Index (DerefOf (Index (WGDY, One)), 0x1B))
                    Store (SD39, Index (DerefOf (Index (WGDY, One)), 0x1C))
                    Store (SD41, Index (DerefOf (Index (WGDY, One)), 0x1D))
                    Store (SD42, Index (DerefOf (Index (WGDY, One)), 0x1E))
                    Store (SD43, Index (DerefOf (Index (WGDY, One)), 0x1F))
                    Store (SD44, Index (DerefOf (Index (WGDY, One)), 0x20))
                    Store (SD45, Index (DerefOf (Index (WGDY, One)), 0x21))
                    Store (SD46, Index (DerefOf (Index (WGDY, One)), 0x22))
                    Store (SD47, Index (DerefOf (Index (WGDY, One)), 0x23))
                    Store (SD48, Index (DerefOf (Index (WGDY, One)), 0x24))
                    Store (SD49, Index (DerefOf (Index (WGDY, One)), 0x25))
                    Store (SD51, Index (DerefOf (Index (WGDY, One)), 0x26))
                    Store (SD52, Index (DerefOf (Index (WGDY, One)), 0x27))
                    Store (SD53, Index (DerefOf (Index (WGDY, One)), 0x28))
                    Store (SD54, Index (DerefOf (Index (WGDY, One)), 0x29))
                    Store (SD55, Index (DerefOf (Index (WGDY, One)), 0x2A))
                    Store (SD56, Index (DerefOf (Index (WGDY, One)), 0x2B))
                    Store (SD57, Index (DerefOf (Index (WGDY, One)), 0x2C))
                    Store (SD58, Index (DerefOf (Index (WGDY, One)), 0x2D))
                    Store (SD59, Index (DerefOf (Index (WGDY, One)), 0x2E))
                    Store (SD61, Index (DerefOf (Index (WGDY, One)), 0x2F))
                    Store (SD62, Index (DerefOf (Index (WGDY, One)), 0x30))
                    Store (SD63, Index (DerefOf (Index (WGDY, One)), 0x31))
                    Store (SD64, Index (DerefOf (Index (WGDY, One)), 0x32))
                    Store (SD65, Index (DerefOf (Index (WGDY, One)), 0x33))
                    Store (SD66, Index (DerefOf (Index (WGDY, One)), 0x34))
                    Store (SD67, Index (DerefOf (Index (WGDY, One)), 0x35))
                    Store (SD68, Index (DerefOf (Index (WGDY, One)), 0x36))
                    Store (SD69, Index (DerefOf (Index (WGDY, One)), 0x37))
                    Store (SD71, Index (DerefOf (Index (WGDY, One)), 0x38))
                    Store (SD72, Index (DerefOf (Index (WGDY, One)), 0x39))
                    Store (SD73, Index (DerefOf (Index (WGDY, One)), 0x3A))
                    Store (SD74, Index (DerefOf (Index (WGDY, One)), 0x3B))
                    Store (SD75, Index (DerefOf (Index (WGDY, One)), 0x3C))
                    Store (SD76, Index (DerefOf (Index (WGDY, One)), 0x3D))
                    Store (SD77, Index (DerefOf (Index (WGDY, One)), 0x3E))
                    Store (SD78, Index (DerefOf (Index (WGDY, One)), 0x3F))
                    Store (SD79, Index (DerefOf (Index (WGDY, One)), 0x40))
                    Store (SD81, Index (DerefOf (Index (WGDY, One)), 0x41))
                    Store (SD82, Index (DerefOf (Index (WGDY, One)), 0x42))
                    Store (SD83, Index (DerefOf (Index (WGDY, One)), 0x43))
                    Store (SD84, Index (DerefOf (Index (WGDY, One)), 0x44))
                    Store (SD85, Index (DerefOf (Index (WGDY, One)), 0x45))
                    Store (SD86, Index (DerefOf (Index (WGDY, One)), 0x46))
                    Store (SD87, Index (DerefOf (Index (WGDY, One)), 0x47))
                    Store (SD88, Index (DerefOf (Index (WGDY, One)), 0x48))
                    Store (SD89, Index (DerefOf (Index (WGDY, One)), 0x49))
                    Return (WGDY)
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                    Return (ECKY)
                }

                Name (PPAY, Package (0x02)
                {
                    One, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    Store (WAGE, Index (DerefOf (Index (PPAY, One)), One))
                    Store (AGA1, Index (DerefOf (Index (PPAY, One)), 0x02))
                    Store (AGA2, Index (DerefOf (Index (PPAY, One)), 0x03))
                    Store (AGA3, Index (DerefOf (Index (PPAY, One)), 0x04))
                    Store (AGA4, Index (DerefOf (Index (PPAY, One)), 0x05))
                    Store (AGA5, Index (DerefOf (Index (PPAY, One)), 0x06))
                    Store (AGA6, Index (DerefOf (Index (PPAY, One)), 0x07))
                    Store (AGA7, Index (DerefOf (Index (PPAY, One)), 0x08))
                    Store (AGA8, Index (DerefOf (Index (PPAY, One)), 0x09))
                    Store (AGA9, Index (DerefOf (Index (PPAY, One)), 0x0A))
                    Store (AGAA, Index (DerefOf (Index (PPAY, One)), 0x0B))
                    Store (AGAB, Index (DerefOf (Index (PPAY, One)), 0x0C))
                    Store (AGB1, Index (DerefOf (Index (PPAY, One)), 0x0D))
                    Store (AGB2, Index (DerefOf (Index (PPAY, One)), 0x0E))
                    Store (AGB3, Index (DerefOf (Index (PPAY, One)), 0x0F))
                    Store (AGB4, Index (DerefOf (Index (PPAY, One)), 0x10))
                    Store (AGB5, Index (DerefOf (Index (PPAY, One)), 0x11))
                    Store (AGB6, Index (DerefOf (Index (PPAY, One)), 0x12))
                    Store (AGB7, Index (DerefOf (Index (PPAY, One)), 0x13))
                    Store (AGB8, Index (DerefOf (Index (PPAY, One)), 0x14))
                    Store (AGB9, Index (DerefOf (Index (PPAY, One)), 0x15))
                    Store (AGBA, Index (DerefOf (Index (PPAY, One)), 0x16))
                    Store (AGBB, Index (DerefOf (Index (PPAY, One)), 0x17))
                    Return (PPAY)
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    Store (WTSV, Index (DerefOf (Index (WTSY, One)), One))
                    Store (WTLE, Index (DerefOf (Index (WTSY, One)), 0x02))
                    Store (BL01, Index (DerefOf (Index (WTSY, One)), 0x03))
                    Store (BL02, Index (DerefOf (Index (WTSY, One)), 0x04))
                    Store (BL03, Index (DerefOf (Index (WTSY, One)), 0x05))
                    Store (BL04, Index (DerefOf (Index (WTSY, One)), 0x06))
                    Store (BL05, Index (DerefOf (Index (WTSY, One)), 0x07))
                    Store (BL06, Index (DerefOf (Index (WTSY, One)), 0x08))
                    Store (BL07, Index (DerefOf (Index (WTSY, One)), 0x09))
                    Store (BL08, Index (DerefOf (Index (WTSY, One)), 0x0A))
                    Store (BL09, Index (DerefOf (Index (WTSY, One)), 0x0B))
                    Store (BL10, Index (DerefOf (Index (WTSY, One)), 0x0C))
                    Store (BL11, Index (DerefOf (Index (WTSY, One)), 0x0D))
                    Store (BL12, Index (DerefOf (Index (WTSY, One)), 0x0E))
                    Store (BL13, Index (DerefOf (Index (WTSY, One)), 0x0F))
                    Store (BL14, Index (DerefOf (Index (WTSY, One)), 0x10))
                    Store (BL15, Index (DerefOf (Index (WTSY, One)), 0x11))
                    Store (BL16, Index (DerefOf (Index (WTSY, One)), 0x12))
                    Return (WTSY)
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    Store (WLBI, Index (DerefOf (Index (WAIY, One)), One))
                    Store (WHBI, Index (DerefOf (Index (WAIY, One)), 0x02))
                    Return (WAIY)
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                    Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                    Return (SADX)
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX)
                }
            }

            If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If (LNotEqual (GGOV (PRST), WPRP))
                    {
                        DL23 ()
                        SGOV (PRST, WPRP)
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    If (LEqual (Arg0, Zero))
                    {
                        Sleep (TBTG)
                    }
                    ElseIf (LEqual (Arg0, One))
                    {
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, And (Not (PFCP), One))
                        Sleep (TFDI)
                    }
                    Else
                    {
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    SPCO (WCLK, One)
                    SGOV (WFCP, PFCP)
                    Sleep (TN2B)
                    SGOV (WBRS, And (Not (PBRS), One))
                    Sleep (TB2R)
                    SGOV (PRST, And (Not (WPRP), One))
                    L23D ()
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Store (Zero, Local0)
                    While (LAnd (LNotEqual (SVID, WSID), LLess (Local0, WSTO)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    If (LEqual (WWEN, 0x02))
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (Zero)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One)
                        SGOV (PRST, And (Not (WPRP), One))
                        SGOV (WBRS, And (Not (PBRS), One))
                        Sleep (0xC8)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x14))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Sleep (0x0A)
                        Notify (PXSX, One)
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (One)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                }
            }

            If (LOr (WIST (), LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT))))
            {
                PowerResource (DRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        DRST
                    })
                }

                Method (IFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        ShiftLeft (CVPR, Zero, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        If (LEqual (CMDT, One))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Return (^^^CNVW.RSTT)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If (LEqual (CMDT, 0x02))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Store (CMDP, ^^^CNVW.RSTT)
                            }

                            Return (Zero)
                        }

                        If (LEqual (CMDT, 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                Return (^^^CNVW.PRRS)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (Zero)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LEqual (CRFI, One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x01                                     
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Store (ACSD, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Store (I5BS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Store (UHBS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        Store (AXMU, Local0)
                        ShiftLeft (Local0, One, Local0)
                        Or (Local0, AXSU, Local0)
                        Store (AXMR, Local1)
                        ShiftLeft (Local1, One, Local1)
                        Or (Local1, AXSR, Local1)
                        ShiftLeft (Local1, 0x02, Local1)
                        Or (Local0, Local1, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (WFRC)
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (WFUC)
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        Return (UNI4)
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        Return (WFIC)
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (LEqual (Arg0, ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d")))
                        {
                            If (LEqual (Arg2, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                           
                                })
                            }

                            If (LEqual (Arg2, One)){}
                            If (LEqual (Arg2, 0x02)){}
                            If (LEqual (Arg2, 0x03))
                            {
                                If (LEqual (WRTO, One)){}
                                ElseIf (LEqual (WRTO, 0x03)){}
                                Else
                                {
                                }

                                Return (WRTO)
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP20.PXSX))
    {
        Scope (_SB.PC00.RP20.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, Add (GMIO (^_ADR, _ADR), 0x44), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                    Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                    Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                    Return (SPLX)
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                    Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                    Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                    Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                    Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                    Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                    Return (WANX)
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                    Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                    Return (WRDX)
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    Store (STXE, Index (DerefOf (Index (WRDY, One)), One))
                    Store (ST10, Index (DerefOf (Index (WRDY, One)), 0x02))
                    Store (ST11, Index (DerefOf (Index (WRDY, One)), 0x03))
                    Store (ST12, Index (DerefOf (Index (WRDY, One)), 0x04))
                    Store (ST13, Index (DerefOf (Index (WRDY, One)), 0x05))
                    Store (ST14, Index (DerefOf (Index (WRDY, One)), 0x06))
                    Store (ST15, Index (DerefOf (Index (WRDY, One)), 0x07))
                    Store (ST16, Index (DerefOf (Index (WRDY, One)), 0x08))
                    Store (ST17, Index (DerefOf (Index (WRDY, One)), 0x09))
                    Store (ST18, Index (DerefOf (Index (WRDY, One)), 0x0A))
                    Store (ST19, Index (DerefOf (Index (WRDY, One)), 0x0B))
                    Store (ST50, Index (DerefOf (Index (WRDY, One)), 0x0C))
                    Store (ST51, Index (DerefOf (Index (WRDY, One)), 0x0D))
                    Store (ST52, Index (DerefOf (Index (WRDY, One)), 0x0E))
                    Store (ST53, Index (DerefOf (Index (WRDY, One)), 0x0F))
                    Store (ST54, Index (DerefOf (Index (WRDY, One)), 0x10))
                    Store (ST55, Index (DerefOf (Index (WRDY, One)), 0x11))
                    Store (ST56, Index (DerefOf (Index (WRDY, One)), 0x12))
                    Store (ST57, Index (DerefOf (Index (WRDY, One)), 0x13))
                    Store (ST58, Index (DerefOf (Index (WRDY, One)), 0x14))
                    Store (ST59, Index (DerefOf (Index (WRDY, One)), 0x15))
                    Store (ST5A, Index (DerefOf (Index (WRDY, One)), 0x16))
                    Store (ST5B, Index (DerefOf (Index (WRDY, One)), 0x17))
                    Store (CD10, Index (DerefOf (Index (WRDY, One)), 0x18))
                    Store (CD11, Index (DerefOf (Index (WRDY, One)), 0x19))
                    Store (CD12, Index (DerefOf (Index (WRDY, One)), 0x1A))
                    Store (CD13, Index (DerefOf (Index (WRDY, One)), 0x1B))
                    Store (CD14, Index (DerefOf (Index (WRDY, One)), 0x1C))
                    Store (CD15, Index (DerefOf (Index (WRDY, One)), 0x1D))
                    Store (CD16, Index (DerefOf (Index (WRDY, One)), 0x1E))
                    Store (CD17, Index (DerefOf (Index (WRDY, One)), 0x1F))
                    Store (CD18, Index (DerefOf (Index (WRDY, One)), 0x20))
                    Store (CD19, Index (DerefOf (Index (WRDY, One)), 0x21))
                    Store (CD1A, Index (DerefOf (Index (WRDY, One)), 0x22))
                    Store (CD20, Index (DerefOf (Index (WRDY, One)), 0x23))
                    Store (CD21, Index (DerefOf (Index (WRDY, One)), 0x24))
                    Store (CD22, Index (DerefOf (Index (WRDY, One)), 0x25))
                    Store (CD23, Index (DerefOf (Index (WRDY, One)), 0x26))
                    Store (CD24, Index (DerefOf (Index (WRDY, One)), 0x27))
                    Store (CD25, Index (DerefOf (Index (WRDY, One)), 0x28))
                    Store (CD26, Index (DerefOf (Index (WRDY, One)), 0x29))
                    Store (CD27, Index (DerefOf (Index (WRDY, One)), 0x2A))
                    Store (CD28, Index (DerefOf (Index (WRDY, One)), 0x2B))
                    Store (CD29, Index (DerefOf (Index (WRDY, One)), 0x2C))
                    Store (CD2A, Index (DerefOf (Index (WRDY, One)), 0x2D))
                    Return (WRDY)
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    Store (STDE, Index (DerefOf (Index (EWRY, One)), One))
                    Store (STRS, Index (DerefOf (Index (EWRY, One)), 0x02))
                    Store (ST20, Index (DerefOf (Index (EWRY, One)), 0x03))
                    Store (ST21, Index (DerefOf (Index (EWRY, One)), 0x04))
                    Store (ST22, Index (DerefOf (Index (EWRY, One)), 0x05))
                    Store (ST23, Index (DerefOf (Index (EWRY, One)), 0x06))
                    Store (ST24, Index (DerefOf (Index (EWRY, One)), 0x07))
                    Store (ST25, Index (DerefOf (Index (EWRY, One)), 0x08))
                    Store (ST26, Index (DerefOf (Index (EWRY, One)), 0x09))
                    Store (ST27, Index (DerefOf (Index (EWRY, One)), 0x0A))
                    Store (ST28, Index (DerefOf (Index (EWRY, One)), 0x0B))
                    Store (ST29, Index (DerefOf (Index (EWRY, One)), 0x0C))
                    Store (ST60, Index (DerefOf (Index (EWRY, One)), 0x0D))
                    Store (ST61, Index (DerefOf (Index (EWRY, One)), 0x0E))
                    Store (ST62, Index (DerefOf (Index (EWRY, One)), 0x0F))
                    Store (ST63, Index (DerefOf (Index (EWRY, One)), 0x10))
                    Store (ST64, Index (DerefOf (Index (EWRY, One)), 0x11))
                    Store (ST65, Index (DerefOf (Index (EWRY, One)), 0x12))
                    Store (ST66, Index (DerefOf (Index (EWRY, One)), 0x13))
                    Store (ST67, Index (DerefOf (Index (EWRY, One)), 0x14))
                    Store (ST68, Index (DerefOf (Index (EWRY, One)), 0x15))
                    Store (ST69, Index (DerefOf (Index (EWRY, One)), 0x16))
                    Store (ST6A, Index (DerefOf (Index (EWRY, One)), 0x17))
                    Store (ST6B, Index (DerefOf (Index (EWRY, One)), 0x18))
                    Store (ST30, Index (DerefOf (Index (EWRY, One)), 0x19))
                    Store (ST31, Index (DerefOf (Index (EWRY, One)), 0x1A))
                    Store (ST32, Index (DerefOf (Index (EWRY, One)), 0x1B))
                    Store (ST33, Index (DerefOf (Index (EWRY, One)), 0x1C))
                    Store (ST34, Index (DerefOf (Index (EWRY, One)), 0x1D))
                    Store (ST35, Index (DerefOf (Index (EWRY, One)), 0x1E))
                    Store (ST36, Index (DerefOf (Index (EWRY, One)), 0x1F))
                    Store (ST37, Index (DerefOf (Index (EWRY, One)), 0x20))
                    Store (ST38, Index (DerefOf (Index (EWRY, One)), 0x21))
                    Store (ST39, Index (DerefOf (Index (EWRY, One)), 0x22))
                    Store (ST70, Index (DerefOf (Index (EWRY, One)), 0x23))
                    Store (ST71, Index (DerefOf (Index (EWRY, One)), 0x24))
                    Store (ST72, Index (DerefOf (Index (EWRY, One)), 0x25))
                    Store (ST73, Index (DerefOf (Index (EWRY, One)), 0x26))
                    Store (ST74, Index (DerefOf (Index (EWRY, One)), 0x27))
                    Store (ST75, Index (DerefOf (Index (EWRY, One)), 0x28))
                    Store (ST76, Index (DerefOf (Index (EWRY, One)), 0x29))
                    Store (ST77, Index (DerefOf (Index (EWRY, One)), 0x2A))
                    Store (ST78, Index (DerefOf (Index (EWRY, One)), 0x2B))
                    Store (ST79, Index (DerefOf (Index (EWRY, One)), 0x2C))
                    Store (ST7A, Index (DerefOf (Index (EWRY, One)), 0x2D))
                    Store (ST7B, Index (DerefOf (Index (EWRY, One)), 0x2E))
                    Store (ST40, Index (DerefOf (Index (EWRY, One)), 0x2F))
                    Store (ST41, Index (DerefOf (Index (EWRY, One)), 0x30))
                    Store (ST42, Index (DerefOf (Index (EWRY, One)), 0x31))
                    Store (ST43, Index (DerefOf (Index (EWRY, One)), 0x32))
                    Store (ST44, Index (DerefOf (Index (EWRY, One)), 0x33))
                    Store (ST45, Index (DerefOf (Index (EWRY, One)), 0x34))
                    Store (ST46, Index (DerefOf (Index (EWRY, One)), 0x35))
                    Store (ST47, Index (DerefOf (Index (EWRY, One)), 0x36))
                    Store (ST48, Index (DerefOf (Index (EWRY, One)), 0x37))
                    Store (ST49, Index (DerefOf (Index (EWRY, One)), 0x38))
                    Store (ST80, Index (DerefOf (Index (EWRY, One)), 0x39))
                    Store (ST81, Index (DerefOf (Index (EWRY, One)), 0x3A))
                    Store (ST82, Index (DerefOf (Index (EWRY, One)), 0x3B))
                    Store (ST83, Index (DerefOf (Index (EWRY, One)), 0x3C))
                    Store (ST84, Index (DerefOf (Index (EWRY, One)), 0x3D))
                    Store (ST85, Index (DerefOf (Index (EWRY, One)), 0x3E))
                    Store (ST86, Index (DerefOf (Index (EWRY, One)), 0x3F))
                    Store (ST87, Index (DerefOf (Index (EWRY, One)), 0x40))
                    Store (ST88, Index (DerefOf (Index (EWRY, One)), 0x41))
                    Store (ST89, Index (DerefOf (Index (EWRY, One)), 0x42))
                    Store (ST8A, Index (DerefOf (Index (EWRY, One)), 0x43))
                    Store (ST8B, Index (DerefOf (Index (EWRY, One)), 0x44))
                    Store (CD30, Index (DerefOf (Index (EWRY, One)), 0x45))
                    Store (CD31, Index (DerefOf (Index (EWRY, One)), 0x46))
                    Store (CD32, Index (DerefOf (Index (EWRY, One)), 0x47))
                    Store (CD33, Index (DerefOf (Index (EWRY, One)), 0x48))
                    Store (CD34, Index (DerefOf (Index (EWRY, One)), 0x49))
                    Store (CD35, Index (DerefOf (Index (EWRY, One)), 0x4A))
                    Store (CD36, Index (DerefOf (Index (EWRY, One)), 0x4B))
                    Store (CD37, Index (DerefOf (Index (EWRY, One)), 0x4C))
                    Store (CD38, Index (DerefOf (Index (EWRY, One)), 0x4D))
                    Store (CD39, Index (DerefOf (Index (EWRY, One)), 0x4E))
                    Store (CD3A, Index (DerefOf (Index (EWRY, One)), 0x4F))
                    Store (CD3B, Index (DerefOf (Index (EWRY, One)), 0x50))
                    Store (CD3C, Index (DerefOf (Index (EWRY, One)), 0x51))
                    Store (CD3D, Index (DerefOf (Index (EWRY, One)), 0x52))
                    Store (CD3E, Index (DerefOf (Index (EWRY, One)), 0x53))
                    Store (CD3F, Index (DerefOf (Index (EWRY, One)), 0x54))
                    Store (CD40, Index (DerefOf (Index (EWRY, One)), 0x55))
                    Store (CD41, Index (DerefOf (Index (EWRY, One)), 0x56))
                    Store (CD42, Index (DerefOf (Index (EWRY, One)), 0x57))
                    Store (CD43, Index (DerefOf (Index (EWRY, One)), 0x58))
                    Store (CD44, Index (DerefOf (Index (EWRY, One)), 0x59))
                    Store (CD45, Index (DerefOf (Index (EWRY, One)), 0x5A))
                    Store (CD46, Index (DerefOf (Index (EWRY, One)), 0x5B))
                    Store (CD47, Index (DerefOf (Index (EWRY, One)), 0x5C))
                    Store (CD48, Index (DerefOf (Index (EWRY, One)), 0x5D))
                    Store (CD49, Index (DerefOf (Index (EWRY, One)), 0x5E))
                    Store (CD4A, Index (DerefOf (Index (EWRY, One)), 0x5F))
                    Store (CD4B, Index (DerefOf (Index (EWRY, One)), 0x60))
                    Store (CD4C, Index (DerefOf (Index (EWRY, One)), 0x61))
                    Store (CD4D, Index (DerefOf (Index (EWRY, One)), 0x62))
                    Store (CD4E, Index (DerefOf (Index (EWRY, One)), 0x63))
                    Store (CD4F, Index (DerefOf (Index (EWRY, One)), 0x64))
                    Store (CD50, Index (DerefOf (Index (EWRY, One)), 0x65))
                    Store (CD51, Index (DerefOf (Index (EWRY, One)), 0x66))
                    Store (CD52, Index (DerefOf (Index (EWRY, One)), 0x67))
                    Store (CD53, Index (DerefOf (Index (EWRY, One)), 0x68))
                    Store (CD54, Index (DerefOf (Index (EWRY, One)), 0x69))
                    Store (CD55, Index (DerefOf (Index (EWRY, One)), 0x6A))
                    Store (CD56, Index (DerefOf (Index (EWRY, One)), 0x6B))
                    Store (CD57, Index (DerefOf (Index (EWRY, One)), 0x6C))
                    Store (CD58, Index (DerefOf (Index (EWRY, One)), 0x6D))
                    Store (CD59, Index (DerefOf (Index (EWRY, One)), 0x6E))
                    Store (CD5A, Index (DerefOf (Index (EWRY, One)), 0x6F))
                    Store (CD5B, Index (DerefOf (Index (EWRY, One)), 0x70))
                    Store (CD5C, Index (DerefOf (Index (EWRY, One)), 0x71))
                    Store (CD5D, Index (DerefOf (Index (EWRY, One)), 0x72))
                    Store (CD5E, Index (DerefOf (Index (EWRY, One)), 0x73))
                    Store (CD5F, Index (DerefOf (Index (EWRY, One)), 0x74))
                    Store (CD60, Index (DerefOf (Index (EWRY, One)), 0x75))
                    Store (CD61, Index (DerefOf (Index (EWRY, One)), 0x76))
                    Store (CD62, Index (DerefOf (Index (EWRY, One)), 0x77))
                    Store (CD63, Index (DerefOf (Index (EWRY, One)), 0x78))
                    Store (CD64, Index (DerefOf (Index (EWRY, One)), 0x79))
                    Store (CD65, Index (DerefOf (Index (EWRY, One)), 0x7A))
                    Store (CD66, Index (DerefOf (Index (EWRY, One)), 0x7B))
                    Store (CD67, Index (DerefOf (Index (EWRY, One)), 0x7C))
                    Store (CD68, Index (DerefOf (Index (EWRY, One)), 0x7D))
                    Store (CD69, Index (DerefOf (Index (EWRY, One)), 0x7E))
                    Store (CD6A, Index (DerefOf (Index (EWRY, One)), 0x7F))
                    Store (CD6B, Index (DerefOf (Index (EWRY, One)), 0x80))
                    Store (CD6C, Index (DerefOf (Index (EWRY, One)), 0x81))
                    Store (CD6D, Index (DerefOf (Index (EWRY, One)), 0x82))
                    Store (CD6E, Index (DerefOf (Index (EWRY, One)), 0x83))
                    Store (CD6F, Index (DerefOf (Index (EWRY, One)), 0x84))
                    Store (CD70, Index (DerefOf (Index (EWRY, One)), 0x85))
                    Store (CD71, Index (DerefOf (Index (EWRY, One)), 0x86))
                    Return (EWRY)
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    Store (SDGN, Index (DerefOf (Index (WGDY, One)), One))
                    Store (SD11, Index (DerefOf (Index (WGDY, One)), 0x02))
                    Store (SD12, Index (DerefOf (Index (WGDY, One)), 0x03))
                    Store (SD13, Index (DerefOf (Index (WGDY, One)), 0x04))
                    Store (SD14, Index (DerefOf (Index (WGDY, One)), 0x05))
                    Store (SD15, Index (DerefOf (Index (WGDY, One)), 0x06))
                    Store (SD16, Index (DerefOf (Index (WGDY, One)), 0x07))
                    Store (SD17, Index (DerefOf (Index (WGDY, One)), 0x08))
                    Store (SD18, Index (DerefOf (Index (WGDY, One)), 0x09))
                    Store (SD19, Index (DerefOf (Index (WGDY, One)), 0x0A))
                    Store (SD21, Index (DerefOf (Index (WGDY, One)), 0x0B))
                    Store (SD22, Index (DerefOf (Index (WGDY, One)), 0x0C))
                    Store (SD23, Index (DerefOf (Index (WGDY, One)), 0x0D))
                    Store (SD24, Index (DerefOf (Index (WGDY, One)), 0x0E))
                    Store (SD25, Index (DerefOf (Index (WGDY, One)), 0x0F))
                    Store (SD26, Index (DerefOf (Index (WGDY, One)), 0x10))
                    Store (SD27, Index (DerefOf (Index (WGDY, One)), 0x11))
                    Store (SD28, Index (DerefOf (Index (WGDY, One)), 0x12))
                    Store (SD29, Index (DerefOf (Index (WGDY, One)), 0x13))
                    Store (SD31, Index (DerefOf (Index (WGDY, One)), 0x14))
                    Store (SD32, Index (DerefOf (Index (WGDY, One)), 0x15))
                    Store (SD33, Index (DerefOf (Index (WGDY, One)), 0x16))
                    Store (SD34, Index (DerefOf (Index (WGDY, One)), 0x17))
                    Store (SD35, Index (DerefOf (Index (WGDY, One)), 0x18))
                    Store (SD36, Index (DerefOf (Index (WGDY, One)), 0x19))
                    Store (SD37, Index (DerefOf (Index (WGDY, One)), 0x1A))
                    Store (SD38, Index (DerefOf (Index (WGDY, One)), 0x1B))
                    Store (SD39, Index (DerefOf (Index (WGDY, One)), 0x1C))
                    Store (SD41, Index (DerefOf (Index (WGDY, One)), 0x1D))
                    Store (SD42, Index (DerefOf (Index (WGDY, One)), 0x1E))
                    Store (SD43, Index (DerefOf (Index (WGDY, One)), 0x1F))
                    Store (SD44, Index (DerefOf (Index (WGDY, One)), 0x20))
                    Store (SD45, Index (DerefOf (Index (WGDY, One)), 0x21))
                    Store (SD46, Index (DerefOf (Index (WGDY, One)), 0x22))
                    Store (SD47, Index (DerefOf (Index (WGDY, One)), 0x23))
                    Store (SD48, Index (DerefOf (Index (WGDY, One)), 0x24))
                    Store (SD49, Index (DerefOf (Index (WGDY, One)), 0x25))
                    Store (SD51, Index (DerefOf (Index (WGDY, One)), 0x26))
                    Store (SD52, Index (DerefOf (Index (WGDY, One)), 0x27))
                    Store (SD53, Index (DerefOf (Index (WGDY, One)), 0x28))
                    Store (SD54, Index (DerefOf (Index (WGDY, One)), 0x29))
                    Store (SD55, Index (DerefOf (Index (WGDY, One)), 0x2A))
                    Store (SD56, Index (DerefOf (Index (WGDY, One)), 0x2B))
                    Store (SD57, Index (DerefOf (Index (WGDY, One)), 0x2C))
                    Store (SD58, Index (DerefOf (Index (WGDY, One)), 0x2D))
                    Store (SD59, Index (DerefOf (Index (WGDY, One)), 0x2E))
                    Store (SD61, Index (DerefOf (Index (WGDY, One)), 0x2F))
                    Store (SD62, Index (DerefOf (Index (WGDY, One)), 0x30))
                    Store (SD63, Index (DerefOf (Index (WGDY, One)), 0x31))
                    Store (SD64, Index (DerefOf (Index (WGDY, One)), 0x32))
                    Store (SD65, Index (DerefOf (Index (WGDY, One)), 0x33))
                    Store (SD66, Index (DerefOf (Index (WGDY, One)), 0x34))
                    Store (SD67, Index (DerefOf (Index (WGDY, One)), 0x35))
                    Store (SD68, Index (DerefOf (Index (WGDY, One)), 0x36))
                    Store (SD69, Index (DerefOf (Index (WGDY, One)), 0x37))
                    Store (SD71, Index (DerefOf (Index (WGDY, One)), 0x38))
                    Store (SD72, Index (DerefOf (Index (WGDY, One)), 0x39))
                    Store (SD73, Index (DerefOf (Index (WGDY, One)), 0x3A))
                    Store (SD74, Index (DerefOf (Index (WGDY, One)), 0x3B))
                    Store (SD75, Index (DerefOf (Index (WGDY, One)), 0x3C))
                    Store (SD76, Index (DerefOf (Index (WGDY, One)), 0x3D))
                    Store (SD77, Index (DerefOf (Index (WGDY, One)), 0x3E))
                    Store (SD78, Index (DerefOf (Index (WGDY, One)), 0x3F))
                    Store (SD79, Index (DerefOf (Index (WGDY, One)), 0x40))
                    Store (SD81, Index (DerefOf (Index (WGDY, One)), 0x41))
                    Store (SD82, Index (DerefOf (Index (WGDY, One)), 0x42))
                    Store (SD83, Index (DerefOf (Index (WGDY, One)), 0x43))
                    Store (SD84, Index (DerefOf (Index (WGDY, One)), 0x44))
                    Store (SD85, Index (DerefOf (Index (WGDY, One)), 0x45))
                    Store (SD86, Index (DerefOf (Index (WGDY, One)), 0x46))
                    Store (SD87, Index (DerefOf (Index (WGDY, One)), 0x47))
                    Store (SD88, Index (DerefOf (Index (WGDY, One)), 0x48))
                    Store (SD89, Index (DerefOf (Index (WGDY, One)), 0x49))
                    Return (WGDY)
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                    Return (ECKY)
                }

                Name (PPAY, Package (0x02)
                {
                    One, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    Store (WAGE, Index (DerefOf (Index (PPAY, One)), One))
                    Store (AGA1, Index (DerefOf (Index (PPAY, One)), 0x02))
                    Store (AGA2, Index (DerefOf (Index (PPAY, One)), 0x03))
                    Store (AGA3, Index (DerefOf (Index (PPAY, One)), 0x04))
                    Store (AGA4, Index (DerefOf (Index (PPAY, One)), 0x05))
                    Store (AGA5, Index (DerefOf (Index (PPAY, One)), 0x06))
                    Store (AGA6, Index (DerefOf (Index (PPAY, One)), 0x07))
                    Store (AGA7, Index (DerefOf (Index (PPAY, One)), 0x08))
                    Store (AGA8, Index (DerefOf (Index (PPAY, One)), 0x09))
                    Store (AGA9, Index (DerefOf (Index (PPAY, One)), 0x0A))
                    Store (AGAA, Index (DerefOf (Index (PPAY, One)), 0x0B))
                    Store (AGAB, Index (DerefOf (Index (PPAY, One)), 0x0C))
                    Store (AGB1, Index (DerefOf (Index (PPAY, One)), 0x0D))
                    Store (AGB2, Index (DerefOf (Index (PPAY, One)), 0x0E))
                    Store (AGB3, Index (DerefOf (Index (PPAY, One)), 0x0F))
                    Store (AGB4, Index (DerefOf (Index (PPAY, One)), 0x10))
                    Store (AGB5, Index (DerefOf (Index (PPAY, One)), 0x11))
                    Store (AGB6, Index (DerefOf (Index (PPAY, One)), 0x12))
                    Store (AGB7, Index (DerefOf (Index (PPAY, One)), 0x13))
                    Store (AGB8, Index (DerefOf (Index (PPAY, One)), 0x14))
                    Store (AGB9, Index (DerefOf (Index (PPAY, One)), 0x15))
                    Store (AGBA, Index (DerefOf (Index (PPAY, One)), 0x16))
                    Store (AGBB, Index (DerefOf (Index (PPAY, One)), 0x17))
                    Return (PPAY)
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    Store (WTSV, Index (DerefOf (Index (WTSY, One)), One))
                    Store (WTLE, Index (DerefOf (Index (WTSY, One)), 0x02))
                    Store (BL01, Index (DerefOf (Index (WTSY, One)), 0x03))
                    Store (BL02, Index (DerefOf (Index (WTSY, One)), 0x04))
                    Store (BL03, Index (DerefOf (Index (WTSY, One)), 0x05))
                    Store (BL04, Index (DerefOf (Index (WTSY, One)), 0x06))
                    Store (BL05, Index (DerefOf (Index (WTSY, One)), 0x07))
                    Store (BL06, Index (DerefOf (Index (WTSY, One)), 0x08))
                    Store (BL07, Index (DerefOf (Index (WTSY, One)), 0x09))
                    Store (BL08, Index (DerefOf (Index (WTSY, One)), 0x0A))
                    Store (BL09, Index (DerefOf (Index (WTSY, One)), 0x0B))
                    Store (BL10, Index (DerefOf (Index (WTSY, One)), 0x0C))
                    Store (BL11, Index (DerefOf (Index (WTSY, One)), 0x0D))
                    Store (BL12, Index (DerefOf (Index (WTSY, One)), 0x0E))
                    Store (BL13, Index (DerefOf (Index (WTSY, One)), 0x0F))
                    Store (BL14, Index (DerefOf (Index (WTSY, One)), 0x10))
                    Store (BL15, Index (DerefOf (Index (WTSY, One)), 0x11))
                    Store (BL16, Index (DerefOf (Index (WTSY, One)), 0x12))
                    Return (WTSY)
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    Store (WLBI, Index (DerefOf (Index (WAIY, One)), One))
                    Store (WHBI, Index (DerefOf (Index (WAIY, One)), 0x02))
                    Return (WAIY)
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                    Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                    Return (SADX)
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX)
                }
            }

            If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If (LNotEqual (GGOV (PRST), WPRP))
                    {
                        DL23 ()
                        SGOV (PRST, WPRP)
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    If (LEqual (Arg0, Zero))
                    {
                        Sleep (TBTG)
                    }
                    ElseIf (LEqual (Arg0, One))
                    {
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, And (Not (PFCP), One))
                        Sleep (TFDI)
                    }
                    Else
                    {
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    SPCO (WCLK, One)
                    SGOV (WFCP, PFCP)
                    Sleep (TN2B)
                    SGOV (WBRS, And (Not (PBRS), One))
                    Sleep (TB2R)
                    SGOV (PRST, And (Not (WPRP), One))
                    L23D ()
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Store (Zero, Local0)
                    While (LAnd (LNotEqual (SVID, WSID), LLess (Local0, WSTO)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    If (LEqual (WWEN, 0x02))
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (Zero)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One)
                        SGOV (PRST, And (Not (WPRP), One))
                        SGOV (WBRS, And (Not (PBRS), One))
                        Sleep (0xC8)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x14))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Sleep (0x0A)
                        Notify (PXSX, One)
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (One)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                }
            }

            If (LOr (WIST (), LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT))))
            {
                PowerResource (DRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        DRST
                    })
                }

                Method (IFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        ShiftLeft (CVPR, Zero, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        If (LEqual (CMDT, One))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Return (^^^CNVW.RSTT)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If (LEqual (CMDT, 0x02))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Store (CMDP, ^^^CNVW.RSTT)
                            }

                            Return (Zero)
                        }

                        If (LEqual (CMDT, 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                Return (^^^CNVW.PRRS)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (Zero)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LEqual (CRFI, One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x01                                     
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Store (ACSD, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Store (I5BS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Store (UHBS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        Store (AXMU, Local0)
                        ShiftLeft (Local0, One, Local0)
                        Or (Local0, AXSU, Local0)
                        Store (AXMR, Local1)
                        ShiftLeft (Local1, One, Local1)
                        Or (Local1, AXSR, Local1)
                        ShiftLeft (Local1, 0x02, Local1)
                        Or (Local0, Local1, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (WFRC)
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (WFUC)
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        Return (UNI4)
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        Return (WFIC)
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (LEqual (Arg0, ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d")))
                        {
                            If (LEqual (Arg2, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                           
                                })
                            }

                            If (LEqual (Arg2, One)){}
                            If (LEqual (Arg2, 0x02)){}
                            If (LEqual (Arg2, 0x03))
                            {
                                If (LEqual (WRTO, One)){}
                                ElseIf (LEqual (WRTO, 0x03)){}
                                Else
                                {
                                }

                                Return (WRTO)
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP21.PXSX))
    {
        Scope (_SB.PC00.RP21.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, Add (GMIO (^_ADR, _ADR), 0x44), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                    Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                    Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                    Return (SPLX)
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                    Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                    Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                    Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                    Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                    Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                    Return (WANX)
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                    Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                    Return (WRDX)
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    Store (STXE, Index (DerefOf (Index (WRDY, One)), One))
                    Store (ST10, Index (DerefOf (Index (WRDY, One)), 0x02))
                    Store (ST11, Index (DerefOf (Index (WRDY, One)), 0x03))
                    Store (ST12, Index (DerefOf (Index (WRDY, One)), 0x04))
                    Store (ST13, Index (DerefOf (Index (WRDY, One)), 0x05))
                    Store (ST14, Index (DerefOf (Index (WRDY, One)), 0x06))
                    Store (ST15, Index (DerefOf (Index (WRDY, One)), 0x07))
                    Store (ST16, Index (DerefOf (Index (WRDY, One)), 0x08))
                    Store (ST17, Index (DerefOf (Index (WRDY, One)), 0x09))
                    Store (ST18, Index (DerefOf (Index (WRDY, One)), 0x0A))
                    Store (ST19, Index (DerefOf (Index (WRDY, One)), 0x0B))
                    Store (ST50, Index (DerefOf (Index (WRDY, One)), 0x0C))
                    Store (ST51, Index (DerefOf (Index (WRDY, One)), 0x0D))
                    Store (ST52, Index (DerefOf (Index (WRDY, One)), 0x0E))
                    Store (ST53, Index (DerefOf (Index (WRDY, One)), 0x0F))
                    Store (ST54, Index (DerefOf (Index (WRDY, One)), 0x10))
                    Store (ST55, Index (DerefOf (Index (WRDY, One)), 0x11))
                    Store (ST56, Index (DerefOf (Index (WRDY, One)), 0x12))
                    Store (ST57, Index (DerefOf (Index (WRDY, One)), 0x13))
                    Store (ST58, Index (DerefOf (Index (WRDY, One)), 0x14))
                    Store (ST59, Index (DerefOf (Index (WRDY, One)), 0x15))
                    Store (ST5A, Index (DerefOf (Index (WRDY, One)), 0x16))
                    Store (ST5B, Index (DerefOf (Index (WRDY, One)), 0x17))
                    Store (CD10, Index (DerefOf (Index (WRDY, One)), 0x18))
                    Store (CD11, Index (DerefOf (Index (WRDY, One)), 0x19))
                    Store (CD12, Index (DerefOf (Index (WRDY, One)), 0x1A))
                    Store (CD13, Index (DerefOf (Index (WRDY, One)), 0x1B))
                    Store (CD14, Index (DerefOf (Index (WRDY, One)), 0x1C))
                    Store (CD15, Index (DerefOf (Index (WRDY, One)), 0x1D))
                    Store (CD16, Index (DerefOf (Index (WRDY, One)), 0x1E))
                    Store (CD17, Index (DerefOf (Index (WRDY, One)), 0x1F))
                    Store (CD18, Index (DerefOf (Index (WRDY, One)), 0x20))
                    Store (CD19, Index (DerefOf (Index (WRDY, One)), 0x21))
                    Store (CD1A, Index (DerefOf (Index (WRDY, One)), 0x22))
                    Store (CD20, Index (DerefOf (Index (WRDY, One)), 0x23))
                    Store (CD21, Index (DerefOf (Index (WRDY, One)), 0x24))
                    Store (CD22, Index (DerefOf (Index (WRDY, One)), 0x25))
                    Store (CD23, Index (DerefOf (Index (WRDY, One)), 0x26))
                    Store (CD24, Index (DerefOf (Index (WRDY, One)), 0x27))
                    Store (CD25, Index (DerefOf (Index (WRDY, One)), 0x28))
                    Store (CD26, Index (DerefOf (Index (WRDY, One)), 0x29))
                    Store (CD27, Index (DerefOf (Index (WRDY, One)), 0x2A))
                    Store (CD28, Index (DerefOf (Index (WRDY, One)), 0x2B))
                    Store (CD29, Index (DerefOf (Index (WRDY, One)), 0x2C))
                    Store (CD2A, Index (DerefOf (Index (WRDY, One)), 0x2D))
                    Return (WRDY)
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    Store (STDE, Index (DerefOf (Index (EWRY, One)), One))
                    Store (STRS, Index (DerefOf (Index (EWRY, One)), 0x02))
                    Store (ST20, Index (DerefOf (Index (EWRY, One)), 0x03))
                    Store (ST21, Index (DerefOf (Index (EWRY, One)), 0x04))
                    Store (ST22, Index (DerefOf (Index (EWRY, One)), 0x05))
                    Store (ST23, Index (DerefOf (Index (EWRY, One)), 0x06))
                    Store (ST24, Index (DerefOf (Index (EWRY, One)), 0x07))
                    Store (ST25, Index (DerefOf (Index (EWRY, One)), 0x08))
                    Store (ST26, Index (DerefOf (Index (EWRY, One)), 0x09))
                    Store (ST27, Index (DerefOf (Index (EWRY, One)), 0x0A))
                    Store (ST28, Index (DerefOf (Index (EWRY, One)), 0x0B))
                    Store (ST29, Index (DerefOf (Index (EWRY, One)), 0x0C))
                    Store (ST60, Index (DerefOf (Index (EWRY, One)), 0x0D))
                    Store (ST61, Index (DerefOf (Index (EWRY, One)), 0x0E))
                    Store (ST62, Index (DerefOf (Index (EWRY, One)), 0x0F))
                    Store (ST63, Index (DerefOf (Index (EWRY, One)), 0x10))
                    Store (ST64, Index (DerefOf (Index (EWRY, One)), 0x11))
                    Store (ST65, Index (DerefOf (Index (EWRY, One)), 0x12))
                    Store (ST66, Index (DerefOf (Index (EWRY, One)), 0x13))
                    Store (ST67, Index (DerefOf (Index (EWRY, One)), 0x14))
                    Store (ST68, Index (DerefOf (Index (EWRY, One)), 0x15))
                    Store (ST69, Index (DerefOf (Index (EWRY, One)), 0x16))
                    Store (ST6A, Index (DerefOf (Index (EWRY, One)), 0x17))
                    Store (ST6B, Index (DerefOf (Index (EWRY, One)), 0x18))
                    Store (ST30, Index (DerefOf (Index (EWRY, One)), 0x19))
                    Store (ST31, Index (DerefOf (Index (EWRY, One)), 0x1A))
                    Store (ST32, Index (DerefOf (Index (EWRY, One)), 0x1B))
                    Store (ST33, Index (DerefOf (Index (EWRY, One)), 0x1C))
                    Store (ST34, Index (DerefOf (Index (EWRY, One)), 0x1D))
                    Store (ST35, Index (DerefOf (Index (EWRY, One)), 0x1E))
                    Store (ST36, Index (DerefOf (Index (EWRY, One)), 0x1F))
                    Store (ST37, Index (DerefOf (Index (EWRY, One)), 0x20))
                    Store (ST38, Index (DerefOf (Index (EWRY, One)), 0x21))
                    Store (ST39, Index (DerefOf (Index (EWRY, One)), 0x22))
                    Store (ST70, Index (DerefOf (Index (EWRY, One)), 0x23))
                    Store (ST71, Index (DerefOf (Index (EWRY, One)), 0x24))
                    Store (ST72, Index (DerefOf (Index (EWRY, One)), 0x25))
                    Store (ST73, Index (DerefOf (Index (EWRY, One)), 0x26))
                    Store (ST74, Index (DerefOf (Index (EWRY, One)), 0x27))
                    Store (ST75, Index (DerefOf (Index (EWRY, One)), 0x28))
                    Store (ST76, Index (DerefOf (Index (EWRY, One)), 0x29))
                    Store (ST77, Index (DerefOf (Index (EWRY, One)), 0x2A))
                    Store (ST78, Index (DerefOf (Index (EWRY, One)), 0x2B))
                    Store (ST79, Index (DerefOf (Index (EWRY, One)), 0x2C))
                    Store (ST7A, Index (DerefOf (Index (EWRY, One)), 0x2D))
                    Store (ST7B, Index (DerefOf (Index (EWRY, One)), 0x2E))
                    Store (ST40, Index (DerefOf (Index (EWRY, One)), 0x2F))
                    Store (ST41, Index (DerefOf (Index (EWRY, One)), 0x30))
                    Store (ST42, Index (DerefOf (Index (EWRY, One)), 0x31))
                    Store (ST43, Index (DerefOf (Index (EWRY, One)), 0x32))
                    Store (ST44, Index (DerefOf (Index (EWRY, One)), 0x33))
                    Store (ST45, Index (DerefOf (Index (EWRY, One)), 0x34))
                    Store (ST46, Index (DerefOf (Index (EWRY, One)), 0x35))
                    Store (ST47, Index (DerefOf (Index (EWRY, One)), 0x36))
                    Store (ST48, Index (DerefOf (Index (EWRY, One)), 0x37))
                    Store (ST49, Index (DerefOf (Index (EWRY, One)), 0x38))
                    Store (ST80, Index (DerefOf (Index (EWRY, One)), 0x39))
                    Store (ST81, Index (DerefOf (Index (EWRY, One)), 0x3A))
                    Store (ST82, Index (DerefOf (Index (EWRY, One)), 0x3B))
                    Store (ST83, Index (DerefOf (Index (EWRY, One)), 0x3C))
                    Store (ST84, Index (DerefOf (Index (EWRY, One)), 0x3D))
                    Store (ST85, Index (DerefOf (Index (EWRY, One)), 0x3E))
                    Store (ST86, Index (DerefOf (Index (EWRY, One)), 0x3F))
                    Store (ST87, Index (DerefOf (Index (EWRY, One)), 0x40))
                    Store (ST88, Index (DerefOf (Index (EWRY, One)), 0x41))
                    Store (ST89, Index (DerefOf (Index (EWRY, One)), 0x42))
                    Store (ST8A, Index (DerefOf (Index (EWRY, One)), 0x43))
                    Store (ST8B, Index (DerefOf (Index (EWRY, One)), 0x44))
                    Store (CD30, Index (DerefOf (Index (EWRY, One)), 0x45))
                    Store (CD31, Index (DerefOf (Index (EWRY, One)), 0x46))
                    Store (CD32, Index (DerefOf (Index (EWRY, One)), 0x47))
                    Store (CD33, Index (DerefOf (Index (EWRY, One)), 0x48))
                    Store (CD34, Index (DerefOf (Index (EWRY, One)), 0x49))
                    Store (CD35, Index (DerefOf (Index (EWRY, One)), 0x4A))
                    Store (CD36, Index (DerefOf (Index (EWRY, One)), 0x4B))
                    Store (CD37, Index (DerefOf (Index (EWRY, One)), 0x4C))
                    Store (CD38, Index (DerefOf (Index (EWRY, One)), 0x4D))
                    Store (CD39, Index (DerefOf (Index (EWRY, One)), 0x4E))
                    Store (CD3A, Index (DerefOf (Index (EWRY, One)), 0x4F))
                    Store (CD3B, Index (DerefOf (Index (EWRY, One)), 0x50))
                    Store (CD3C, Index (DerefOf (Index (EWRY, One)), 0x51))
                    Store (CD3D, Index (DerefOf (Index (EWRY, One)), 0x52))
                    Store (CD3E, Index (DerefOf (Index (EWRY, One)), 0x53))
                    Store (CD3F, Index (DerefOf (Index (EWRY, One)), 0x54))
                    Store (CD40, Index (DerefOf (Index (EWRY, One)), 0x55))
                    Store (CD41, Index (DerefOf (Index (EWRY, One)), 0x56))
                    Store (CD42, Index (DerefOf (Index (EWRY, One)), 0x57))
                    Store (CD43, Index (DerefOf (Index (EWRY, One)), 0x58))
                    Store (CD44, Index (DerefOf (Index (EWRY, One)), 0x59))
                    Store (CD45, Index (DerefOf (Index (EWRY, One)), 0x5A))
                    Store (CD46, Index (DerefOf (Index (EWRY, One)), 0x5B))
                    Store (CD47, Index (DerefOf (Index (EWRY, One)), 0x5C))
                    Store (CD48, Index (DerefOf (Index (EWRY, One)), 0x5D))
                    Store (CD49, Index (DerefOf (Index (EWRY, One)), 0x5E))
                    Store (CD4A, Index (DerefOf (Index (EWRY, One)), 0x5F))
                    Store (CD4B, Index (DerefOf (Index (EWRY, One)), 0x60))
                    Store (CD4C, Index (DerefOf (Index (EWRY, One)), 0x61))
                    Store (CD4D, Index (DerefOf (Index (EWRY, One)), 0x62))
                    Store (CD4E, Index (DerefOf (Index (EWRY, One)), 0x63))
                    Store (CD4F, Index (DerefOf (Index (EWRY, One)), 0x64))
                    Store (CD50, Index (DerefOf (Index (EWRY, One)), 0x65))
                    Store (CD51, Index (DerefOf (Index (EWRY, One)), 0x66))
                    Store (CD52, Index (DerefOf (Index (EWRY, One)), 0x67))
                    Store (CD53, Index (DerefOf (Index (EWRY, One)), 0x68))
                    Store (CD54, Index (DerefOf (Index (EWRY, One)), 0x69))
                    Store (CD55, Index (DerefOf (Index (EWRY, One)), 0x6A))
                    Store (CD56, Index (DerefOf (Index (EWRY, One)), 0x6B))
                    Store (CD57, Index (DerefOf (Index (EWRY, One)), 0x6C))
                    Store (CD58, Index (DerefOf (Index (EWRY, One)), 0x6D))
                    Store (CD59, Index (DerefOf (Index (EWRY, One)), 0x6E))
                    Store (CD5A, Index (DerefOf (Index (EWRY, One)), 0x6F))
                    Store (CD5B, Index (DerefOf (Index (EWRY, One)), 0x70))
                    Store (CD5C, Index (DerefOf (Index (EWRY, One)), 0x71))
                    Store (CD5D, Index (DerefOf (Index (EWRY, One)), 0x72))
                    Store (CD5E, Index (DerefOf (Index (EWRY, One)), 0x73))
                    Store (CD5F, Index (DerefOf (Index (EWRY, One)), 0x74))
                    Store (CD60, Index (DerefOf (Index (EWRY, One)), 0x75))
                    Store (CD61, Index (DerefOf (Index (EWRY, One)), 0x76))
                    Store (CD62, Index (DerefOf (Index (EWRY, One)), 0x77))
                    Store (CD63, Index (DerefOf (Index (EWRY, One)), 0x78))
                    Store (CD64, Index (DerefOf (Index (EWRY, One)), 0x79))
                    Store (CD65, Index (DerefOf (Index (EWRY, One)), 0x7A))
                    Store (CD66, Index (DerefOf (Index (EWRY, One)), 0x7B))
                    Store (CD67, Index (DerefOf (Index (EWRY, One)), 0x7C))
                    Store (CD68, Index (DerefOf (Index (EWRY, One)), 0x7D))
                    Store (CD69, Index (DerefOf (Index (EWRY, One)), 0x7E))
                    Store (CD6A, Index (DerefOf (Index (EWRY, One)), 0x7F))
                    Store (CD6B, Index (DerefOf (Index (EWRY, One)), 0x80))
                    Store (CD6C, Index (DerefOf (Index (EWRY, One)), 0x81))
                    Store (CD6D, Index (DerefOf (Index (EWRY, One)), 0x82))
                    Store (CD6E, Index (DerefOf (Index (EWRY, One)), 0x83))
                    Store (CD6F, Index (DerefOf (Index (EWRY, One)), 0x84))
                    Store (CD70, Index (DerefOf (Index (EWRY, One)), 0x85))
                    Store (CD71, Index (DerefOf (Index (EWRY, One)), 0x86))
                    Return (EWRY)
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    Store (SDGN, Index (DerefOf (Index (WGDY, One)), One))
                    Store (SD11, Index (DerefOf (Index (WGDY, One)), 0x02))
                    Store (SD12, Index (DerefOf (Index (WGDY, One)), 0x03))
                    Store (SD13, Index (DerefOf (Index (WGDY, One)), 0x04))
                    Store (SD14, Index (DerefOf (Index (WGDY, One)), 0x05))
                    Store (SD15, Index (DerefOf (Index (WGDY, One)), 0x06))
                    Store (SD16, Index (DerefOf (Index (WGDY, One)), 0x07))
                    Store (SD17, Index (DerefOf (Index (WGDY, One)), 0x08))
                    Store (SD18, Index (DerefOf (Index (WGDY, One)), 0x09))
                    Store (SD19, Index (DerefOf (Index (WGDY, One)), 0x0A))
                    Store (SD21, Index (DerefOf (Index (WGDY, One)), 0x0B))
                    Store (SD22, Index (DerefOf (Index (WGDY, One)), 0x0C))
                    Store (SD23, Index (DerefOf (Index (WGDY, One)), 0x0D))
                    Store (SD24, Index (DerefOf (Index (WGDY, One)), 0x0E))
                    Store (SD25, Index (DerefOf (Index (WGDY, One)), 0x0F))
                    Store (SD26, Index (DerefOf (Index (WGDY, One)), 0x10))
                    Store (SD27, Index (DerefOf (Index (WGDY, One)), 0x11))
                    Store (SD28, Index (DerefOf (Index (WGDY, One)), 0x12))
                    Store (SD29, Index (DerefOf (Index (WGDY, One)), 0x13))
                    Store (SD31, Index (DerefOf (Index (WGDY, One)), 0x14))
                    Store (SD32, Index (DerefOf (Index (WGDY, One)), 0x15))
                    Store (SD33, Index (DerefOf (Index (WGDY, One)), 0x16))
                    Store (SD34, Index (DerefOf (Index (WGDY, One)), 0x17))
                    Store (SD35, Index (DerefOf (Index (WGDY, One)), 0x18))
                    Store (SD36, Index (DerefOf (Index (WGDY, One)), 0x19))
                    Store (SD37, Index (DerefOf (Index (WGDY, One)), 0x1A))
                    Store (SD38, Index (DerefOf (Index (WGDY, One)), 0x1B))
                    Store (SD39, Index (DerefOf (Index (WGDY, One)), 0x1C))
                    Store (SD41, Index (DerefOf (Index (WGDY, One)), 0x1D))
                    Store (SD42, Index (DerefOf (Index (WGDY, One)), 0x1E))
                    Store (SD43, Index (DerefOf (Index (WGDY, One)), 0x1F))
                    Store (SD44, Index (DerefOf (Index (WGDY, One)), 0x20))
                    Store (SD45, Index (DerefOf (Index (WGDY, One)), 0x21))
                    Store (SD46, Index (DerefOf (Index (WGDY, One)), 0x22))
                    Store (SD47, Index (DerefOf (Index (WGDY, One)), 0x23))
                    Store (SD48, Index (DerefOf (Index (WGDY, One)), 0x24))
                    Store (SD49, Index (DerefOf (Index (WGDY, One)), 0x25))
                    Store (SD51, Index (DerefOf (Index (WGDY, One)), 0x26))
                    Store (SD52, Index (DerefOf (Index (WGDY, One)), 0x27))
                    Store (SD53, Index (DerefOf (Index (WGDY, One)), 0x28))
                    Store (SD54, Index (DerefOf (Index (WGDY, One)), 0x29))
                    Store (SD55, Index (DerefOf (Index (WGDY, One)), 0x2A))
                    Store (SD56, Index (DerefOf (Index (WGDY, One)), 0x2B))
                    Store (SD57, Index (DerefOf (Index (WGDY, One)), 0x2C))
                    Store (SD58, Index (DerefOf (Index (WGDY, One)), 0x2D))
                    Store (SD59, Index (DerefOf (Index (WGDY, One)), 0x2E))
                    Store (SD61, Index (DerefOf (Index (WGDY, One)), 0x2F))
                    Store (SD62, Index (DerefOf (Index (WGDY, One)), 0x30))
                    Store (SD63, Index (DerefOf (Index (WGDY, One)), 0x31))
                    Store (SD64, Index (DerefOf (Index (WGDY, One)), 0x32))
                    Store (SD65, Index (DerefOf (Index (WGDY, One)), 0x33))
                    Store (SD66, Index (DerefOf (Index (WGDY, One)), 0x34))
                    Store (SD67, Index (DerefOf (Index (WGDY, One)), 0x35))
                    Store (SD68, Index (DerefOf (Index (WGDY, One)), 0x36))
                    Store (SD69, Index (DerefOf (Index (WGDY, One)), 0x37))
                    Store (SD71, Index (DerefOf (Index (WGDY, One)), 0x38))
                    Store (SD72, Index (DerefOf (Index (WGDY, One)), 0x39))
                    Store (SD73, Index (DerefOf (Index (WGDY, One)), 0x3A))
                    Store (SD74, Index (DerefOf (Index (WGDY, One)), 0x3B))
                    Store (SD75, Index (DerefOf (Index (WGDY, One)), 0x3C))
                    Store (SD76, Index (DerefOf (Index (WGDY, One)), 0x3D))
                    Store (SD77, Index (DerefOf (Index (WGDY, One)), 0x3E))
                    Store (SD78, Index (DerefOf (Index (WGDY, One)), 0x3F))
                    Store (SD79, Index (DerefOf (Index (WGDY, One)), 0x40))
                    Store (SD81, Index (DerefOf (Index (WGDY, One)), 0x41))
                    Store (SD82, Index (DerefOf (Index (WGDY, One)), 0x42))
                    Store (SD83, Index (DerefOf (Index (WGDY, One)), 0x43))
                    Store (SD84, Index (DerefOf (Index (WGDY, One)), 0x44))
                    Store (SD85, Index (DerefOf (Index (WGDY, One)), 0x45))
                    Store (SD86, Index (DerefOf (Index (WGDY, One)), 0x46))
                    Store (SD87, Index (DerefOf (Index (WGDY, One)), 0x47))
                    Store (SD88, Index (DerefOf (Index (WGDY, One)), 0x48))
                    Store (SD89, Index (DerefOf (Index (WGDY, One)), 0x49))
                    Return (WGDY)
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                    Return (ECKY)
                }

                Name (PPAY, Package (0x02)
                {
                    One, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    Store (WAGE, Index (DerefOf (Index (PPAY, One)), One))
                    Store (AGA1, Index (DerefOf (Index (PPAY, One)), 0x02))
                    Store (AGA2, Index (DerefOf (Index (PPAY, One)), 0x03))
                    Store (AGA3, Index (DerefOf (Index (PPAY, One)), 0x04))
                    Store (AGA4, Index (DerefOf (Index (PPAY, One)), 0x05))
                    Store (AGA5, Index (DerefOf (Index (PPAY, One)), 0x06))
                    Store (AGA6, Index (DerefOf (Index (PPAY, One)), 0x07))
                    Store (AGA7, Index (DerefOf (Index (PPAY, One)), 0x08))
                    Store (AGA8, Index (DerefOf (Index (PPAY, One)), 0x09))
                    Store (AGA9, Index (DerefOf (Index (PPAY, One)), 0x0A))
                    Store (AGAA, Index (DerefOf (Index (PPAY, One)), 0x0B))
                    Store (AGAB, Index (DerefOf (Index (PPAY, One)), 0x0C))
                    Store (AGB1, Index (DerefOf (Index (PPAY, One)), 0x0D))
                    Store (AGB2, Index (DerefOf (Index (PPAY, One)), 0x0E))
                    Store (AGB3, Index (DerefOf (Index (PPAY, One)), 0x0F))
                    Store (AGB4, Index (DerefOf (Index (PPAY, One)), 0x10))
                    Store (AGB5, Index (DerefOf (Index (PPAY, One)), 0x11))
                    Store (AGB6, Index (DerefOf (Index (PPAY, One)), 0x12))
                    Store (AGB7, Index (DerefOf (Index (PPAY, One)), 0x13))
                    Store (AGB8, Index (DerefOf (Index (PPAY, One)), 0x14))
                    Store (AGB9, Index (DerefOf (Index (PPAY, One)), 0x15))
                    Store (AGBA, Index (DerefOf (Index (PPAY, One)), 0x16))
                    Store (AGBB, Index (DerefOf (Index (PPAY, One)), 0x17))
                    Return (PPAY)
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    Store (WTSV, Index (DerefOf (Index (WTSY, One)), One))
                    Store (WTLE, Index (DerefOf (Index (WTSY, One)), 0x02))
                    Store (BL01, Index (DerefOf (Index (WTSY, One)), 0x03))
                    Store (BL02, Index (DerefOf (Index (WTSY, One)), 0x04))
                    Store (BL03, Index (DerefOf (Index (WTSY, One)), 0x05))
                    Store (BL04, Index (DerefOf (Index (WTSY, One)), 0x06))
                    Store (BL05, Index (DerefOf (Index (WTSY, One)), 0x07))
                    Store (BL06, Index (DerefOf (Index (WTSY, One)), 0x08))
                    Store (BL07, Index (DerefOf (Index (WTSY, One)), 0x09))
                    Store (BL08, Index (DerefOf (Index (WTSY, One)), 0x0A))
                    Store (BL09, Index (DerefOf (Index (WTSY, One)), 0x0B))
                    Store (BL10, Index (DerefOf (Index (WTSY, One)), 0x0C))
                    Store (BL11, Index (DerefOf (Index (WTSY, One)), 0x0D))
                    Store (BL12, Index (DerefOf (Index (WTSY, One)), 0x0E))
                    Store (BL13, Index (DerefOf (Index (WTSY, One)), 0x0F))
                    Store (BL14, Index (DerefOf (Index (WTSY, One)), 0x10))
                    Store (BL15, Index (DerefOf (Index (WTSY, One)), 0x11))
                    Store (BL16, Index (DerefOf (Index (WTSY, One)), 0x12))
                    Return (WTSY)
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    Store (WLBI, Index (DerefOf (Index (WAIY, One)), One))
                    Store (WHBI, Index (DerefOf (Index (WAIY, One)), 0x02))
                    Return (WAIY)
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                    Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                    Return (SADX)
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX)
                }
            }

            If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If (LNotEqual (GGOV (PRST), WPRP))
                    {
                        DL23 ()
                        SGOV (PRST, WPRP)
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    If (LEqual (Arg0, Zero))
                    {
                        Sleep (TBTG)
                    }
                    ElseIf (LEqual (Arg0, One))
                    {
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, And (Not (PFCP), One))
                        Sleep (TFDI)
                    }
                    Else
                    {
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    SPCO (WCLK, One)
                    SGOV (WFCP, PFCP)
                    Sleep (TN2B)
                    SGOV (WBRS, And (Not (PBRS), One))
                    Sleep (TB2R)
                    SGOV (PRST, And (Not (WPRP), One))
                    L23D ()
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Store (Zero, Local0)
                    While (LAnd (LNotEqual (SVID, WSID), LLess (Local0, WSTO)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    If (LEqual (WWEN, 0x02))
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (Zero)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One)
                        SGOV (PRST, And (Not (WPRP), One))
                        SGOV (WBRS, And (Not (PBRS), One))
                        Sleep (0xC8)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x14))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Sleep (0x0A)
                        Notify (PXSX, One)
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (One)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                }
            }

            If (LOr (WIST (), LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT))))
            {
                PowerResource (DRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        DRST
                    })
                }

                Method (IFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        ShiftLeft (CVPR, Zero, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        If (LEqual (CMDT, One))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Return (^^^CNVW.RSTT)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If (LEqual (CMDT, 0x02))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Store (CMDP, ^^^CNVW.RSTT)
                            }

                            Return (Zero)
                        }

                        If (LEqual (CMDT, 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                Return (^^^CNVW.PRRS)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (Zero)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LEqual (CRFI, One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x01                                     
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Store (ACSD, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Store (I5BS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Store (UHBS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        Store (AXMU, Local0)
                        ShiftLeft (Local0, One, Local0)
                        Or (Local0, AXSU, Local0)
                        Store (AXMR, Local1)
                        ShiftLeft (Local1, One, Local1)
                        Or (Local1, AXSR, Local1)
                        ShiftLeft (Local1, 0x02, Local1)
                        Or (Local0, Local1, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (WFRC)
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (WFUC)
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        Return (UNI4)
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        Return (WFIC)
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (LEqual (Arg0, ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d")))
                        {
                            If (LEqual (Arg2, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                           
                                })
                            }

                            If (LEqual (Arg2, One)){}
                            If (LEqual (Arg2, 0x02)){}
                            If (LEqual (Arg2, 0x03))
                            {
                                If (LEqual (WRTO, One)){}
                                ElseIf (LEqual (WRTO, 0x03)){}
                                Else
                                {
                                }

                                Return (WRTO)
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP22.PXSX))
    {
        Scope (_SB.PC00.RP22.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, Add (GMIO (^_ADR, _ADR), 0x44), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                    Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                    Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                    Return (SPLX)
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                    Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                    Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                    Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                    Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                    Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                    Return (WANX)
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                    Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                    Return (WRDX)
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    Store (STXE, Index (DerefOf (Index (WRDY, One)), One))
                    Store (ST10, Index (DerefOf (Index (WRDY, One)), 0x02))
                    Store (ST11, Index (DerefOf (Index (WRDY, One)), 0x03))
                    Store (ST12, Index (DerefOf (Index (WRDY, One)), 0x04))
                    Store (ST13, Index (DerefOf (Index (WRDY, One)), 0x05))
                    Store (ST14, Index (DerefOf (Index (WRDY, One)), 0x06))
                    Store (ST15, Index (DerefOf (Index (WRDY, One)), 0x07))
                    Store (ST16, Index (DerefOf (Index (WRDY, One)), 0x08))
                    Store (ST17, Index (DerefOf (Index (WRDY, One)), 0x09))
                    Store (ST18, Index (DerefOf (Index (WRDY, One)), 0x0A))
                    Store (ST19, Index (DerefOf (Index (WRDY, One)), 0x0B))
                    Store (ST50, Index (DerefOf (Index (WRDY, One)), 0x0C))
                    Store (ST51, Index (DerefOf (Index (WRDY, One)), 0x0D))
                    Store (ST52, Index (DerefOf (Index (WRDY, One)), 0x0E))
                    Store (ST53, Index (DerefOf (Index (WRDY, One)), 0x0F))
                    Store (ST54, Index (DerefOf (Index (WRDY, One)), 0x10))
                    Store (ST55, Index (DerefOf (Index (WRDY, One)), 0x11))
                    Store (ST56, Index (DerefOf (Index (WRDY, One)), 0x12))
                    Store (ST57, Index (DerefOf (Index (WRDY, One)), 0x13))
                    Store (ST58, Index (DerefOf (Index (WRDY, One)), 0x14))
                    Store (ST59, Index (DerefOf (Index (WRDY, One)), 0x15))
                    Store (ST5A, Index (DerefOf (Index (WRDY, One)), 0x16))
                    Store (ST5B, Index (DerefOf (Index (WRDY, One)), 0x17))
                    Store (CD10, Index (DerefOf (Index (WRDY, One)), 0x18))
                    Store (CD11, Index (DerefOf (Index (WRDY, One)), 0x19))
                    Store (CD12, Index (DerefOf (Index (WRDY, One)), 0x1A))
                    Store (CD13, Index (DerefOf (Index (WRDY, One)), 0x1B))
                    Store (CD14, Index (DerefOf (Index (WRDY, One)), 0x1C))
                    Store (CD15, Index (DerefOf (Index (WRDY, One)), 0x1D))
                    Store (CD16, Index (DerefOf (Index (WRDY, One)), 0x1E))
                    Store (CD17, Index (DerefOf (Index (WRDY, One)), 0x1F))
                    Store (CD18, Index (DerefOf (Index (WRDY, One)), 0x20))
                    Store (CD19, Index (DerefOf (Index (WRDY, One)), 0x21))
                    Store (CD1A, Index (DerefOf (Index (WRDY, One)), 0x22))
                    Store (CD20, Index (DerefOf (Index (WRDY, One)), 0x23))
                    Store (CD21, Index (DerefOf (Index (WRDY, One)), 0x24))
                    Store (CD22, Index (DerefOf (Index (WRDY, One)), 0x25))
                    Store (CD23, Index (DerefOf (Index (WRDY, One)), 0x26))
                    Store (CD24, Index (DerefOf (Index (WRDY, One)), 0x27))
                    Store (CD25, Index (DerefOf (Index (WRDY, One)), 0x28))
                    Store (CD26, Index (DerefOf (Index (WRDY, One)), 0x29))
                    Store (CD27, Index (DerefOf (Index (WRDY, One)), 0x2A))
                    Store (CD28, Index (DerefOf (Index (WRDY, One)), 0x2B))
                    Store (CD29, Index (DerefOf (Index (WRDY, One)), 0x2C))
                    Store (CD2A, Index (DerefOf (Index (WRDY, One)), 0x2D))
                    Return (WRDY)
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    Store (STDE, Index (DerefOf (Index (EWRY, One)), One))
                    Store (STRS, Index (DerefOf (Index (EWRY, One)), 0x02))
                    Store (ST20, Index (DerefOf (Index (EWRY, One)), 0x03))
                    Store (ST21, Index (DerefOf (Index (EWRY, One)), 0x04))
                    Store (ST22, Index (DerefOf (Index (EWRY, One)), 0x05))
                    Store (ST23, Index (DerefOf (Index (EWRY, One)), 0x06))
                    Store (ST24, Index (DerefOf (Index (EWRY, One)), 0x07))
                    Store (ST25, Index (DerefOf (Index (EWRY, One)), 0x08))
                    Store (ST26, Index (DerefOf (Index (EWRY, One)), 0x09))
                    Store (ST27, Index (DerefOf (Index (EWRY, One)), 0x0A))
                    Store (ST28, Index (DerefOf (Index (EWRY, One)), 0x0B))
                    Store (ST29, Index (DerefOf (Index (EWRY, One)), 0x0C))
                    Store (ST60, Index (DerefOf (Index (EWRY, One)), 0x0D))
                    Store (ST61, Index (DerefOf (Index (EWRY, One)), 0x0E))
                    Store (ST62, Index (DerefOf (Index (EWRY, One)), 0x0F))
                    Store (ST63, Index (DerefOf (Index (EWRY, One)), 0x10))
                    Store (ST64, Index (DerefOf (Index (EWRY, One)), 0x11))
                    Store (ST65, Index (DerefOf (Index (EWRY, One)), 0x12))
                    Store (ST66, Index (DerefOf (Index (EWRY, One)), 0x13))
                    Store (ST67, Index (DerefOf (Index (EWRY, One)), 0x14))
                    Store (ST68, Index (DerefOf (Index (EWRY, One)), 0x15))
                    Store (ST69, Index (DerefOf (Index (EWRY, One)), 0x16))
                    Store (ST6A, Index (DerefOf (Index (EWRY, One)), 0x17))
                    Store (ST6B, Index (DerefOf (Index (EWRY, One)), 0x18))
                    Store (ST30, Index (DerefOf (Index (EWRY, One)), 0x19))
                    Store (ST31, Index (DerefOf (Index (EWRY, One)), 0x1A))
                    Store (ST32, Index (DerefOf (Index (EWRY, One)), 0x1B))
                    Store (ST33, Index (DerefOf (Index (EWRY, One)), 0x1C))
                    Store (ST34, Index (DerefOf (Index (EWRY, One)), 0x1D))
                    Store (ST35, Index (DerefOf (Index (EWRY, One)), 0x1E))
                    Store (ST36, Index (DerefOf (Index (EWRY, One)), 0x1F))
                    Store (ST37, Index (DerefOf (Index (EWRY, One)), 0x20))
                    Store (ST38, Index (DerefOf (Index (EWRY, One)), 0x21))
                    Store (ST39, Index (DerefOf (Index (EWRY, One)), 0x22))
                    Store (ST70, Index (DerefOf (Index (EWRY, One)), 0x23))
                    Store (ST71, Index (DerefOf (Index (EWRY, One)), 0x24))
                    Store (ST72, Index (DerefOf (Index (EWRY, One)), 0x25))
                    Store (ST73, Index (DerefOf (Index (EWRY, One)), 0x26))
                    Store (ST74, Index (DerefOf (Index (EWRY, One)), 0x27))
                    Store (ST75, Index (DerefOf (Index (EWRY, One)), 0x28))
                    Store (ST76, Index (DerefOf (Index (EWRY, One)), 0x29))
                    Store (ST77, Index (DerefOf (Index (EWRY, One)), 0x2A))
                    Store (ST78, Index (DerefOf (Index (EWRY, One)), 0x2B))
                    Store (ST79, Index (DerefOf (Index (EWRY, One)), 0x2C))
                    Store (ST7A, Index (DerefOf (Index (EWRY, One)), 0x2D))
                    Store (ST7B, Index (DerefOf (Index (EWRY, One)), 0x2E))
                    Store (ST40, Index (DerefOf (Index (EWRY, One)), 0x2F))
                    Store (ST41, Index (DerefOf (Index (EWRY, One)), 0x30))
                    Store (ST42, Index (DerefOf (Index (EWRY, One)), 0x31))
                    Store (ST43, Index (DerefOf (Index (EWRY, One)), 0x32))
                    Store (ST44, Index (DerefOf (Index (EWRY, One)), 0x33))
                    Store (ST45, Index (DerefOf (Index (EWRY, One)), 0x34))
                    Store (ST46, Index (DerefOf (Index (EWRY, One)), 0x35))
                    Store (ST47, Index (DerefOf (Index (EWRY, One)), 0x36))
                    Store (ST48, Index (DerefOf (Index (EWRY, One)), 0x37))
                    Store (ST49, Index (DerefOf (Index (EWRY, One)), 0x38))
                    Store (ST80, Index (DerefOf (Index (EWRY, One)), 0x39))
                    Store (ST81, Index (DerefOf (Index (EWRY, One)), 0x3A))
                    Store (ST82, Index (DerefOf (Index (EWRY, One)), 0x3B))
                    Store (ST83, Index (DerefOf (Index (EWRY, One)), 0x3C))
                    Store (ST84, Index (DerefOf (Index (EWRY, One)), 0x3D))
                    Store (ST85, Index (DerefOf (Index (EWRY, One)), 0x3E))
                    Store (ST86, Index (DerefOf (Index (EWRY, One)), 0x3F))
                    Store (ST87, Index (DerefOf (Index (EWRY, One)), 0x40))
                    Store (ST88, Index (DerefOf (Index (EWRY, One)), 0x41))
                    Store (ST89, Index (DerefOf (Index (EWRY, One)), 0x42))
                    Store (ST8A, Index (DerefOf (Index (EWRY, One)), 0x43))
                    Store (ST8B, Index (DerefOf (Index (EWRY, One)), 0x44))
                    Store (CD30, Index (DerefOf (Index (EWRY, One)), 0x45))
                    Store (CD31, Index (DerefOf (Index (EWRY, One)), 0x46))
                    Store (CD32, Index (DerefOf (Index (EWRY, One)), 0x47))
                    Store (CD33, Index (DerefOf (Index (EWRY, One)), 0x48))
                    Store (CD34, Index (DerefOf (Index (EWRY, One)), 0x49))
                    Store (CD35, Index (DerefOf (Index (EWRY, One)), 0x4A))
                    Store (CD36, Index (DerefOf (Index (EWRY, One)), 0x4B))
                    Store (CD37, Index (DerefOf (Index (EWRY, One)), 0x4C))
                    Store (CD38, Index (DerefOf (Index (EWRY, One)), 0x4D))
                    Store (CD39, Index (DerefOf (Index (EWRY, One)), 0x4E))
                    Store (CD3A, Index (DerefOf (Index (EWRY, One)), 0x4F))
                    Store (CD3B, Index (DerefOf (Index (EWRY, One)), 0x50))
                    Store (CD3C, Index (DerefOf (Index (EWRY, One)), 0x51))
                    Store (CD3D, Index (DerefOf (Index (EWRY, One)), 0x52))
                    Store (CD3E, Index (DerefOf (Index (EWRY, One)), 0x53))
                    Store (CD3F, Index (DerefOf (Index (EWRY, One)), 0x54))
                    Store (CD40, Index (DerefOf (Index (EWRY, One)), 0x55))
                    Store (CD41, Index (DerefOf (Index (EWRY, One)), 0x56))
                    Store (CD42, Index (DerefOf (Index (EWRY, One)), 0x57))
                    Store (CD43, Index (DerefOf (Index (EWRY, One)), 0x58))
                    Store (CD44, Index (DerefOf (Index (EWRY, One)), 0x59))
                    Store (CD45, Index (DerefOf (Index (EWRY, One)), 0x5A))
                    Store (CD46, Index (DerefOf (Index (EWRY, One)), 0x5B))
                    Store (CD47, Index (DerefOf (Index (EWRY, One)), 0x5C))
                    Store (CD48, Index (DerefOf (Index (EWRY, One)), 0x5D))
                    Store (CD49, Index (DerefOf (Index (EWRY, One)), 0x5E))
                    Store (CD4A, Index (DerefOf (Index (EWRY, One)), 0x5F))
                    Store (CD4B, Index (DerefOf (Index (EWRY, One)), 0x60))
                    Store (CD4C, Index (DerefOf (Index (EWRY, One)), 0x61))
                    Store (CD4D, Index (DerefOf (Index (EWRY, One)), 0x62))
                    Store (CD4E, Index (DerefOf (Index (EWRY, One)), 0x63))
                    Store (CD4F, Index (DerefOf (Index (EWRY, One)), 0x64))
                    Store (CD50, Index (DerefOf (Index (EWRY, One)), 0x65))
                    Store (CD51, Index (DerefOf (Index (EWRY, One)), 0x66))
                    Store (CD52, Index (DerefOf (Index (EWRY, One)), 0x67))
                    Store (CD53, Index (DerefOf (Index (EWRY, One)), 0x68))
                    Store (CD54, Index (DerefOf (Index (EWRY, One)), 0x69))
                    Store (CD55, Index (DerefOf (Index (EWRY, One)), 0x6A))
                    Store (CD56, Index (DerefOf (Index (EWRY, One)), 0x6B))
                    Store (CD57, Index (DerefOf (Index (EWRY, One)), 0x6C))
                    Store (CD58, Index (DerefOf (Index (EWRY, One)), 0x6D))
                    Store (CD59, Index (DerefOf (Index (EWRY, One)), 0x6E))
                    Store (CD5A, Index (DerefOf (Index (EWRY, One)), 0x6F))
                    Store (CD5B, Index (DerefOf (Index (EWRY, One)), 0x70))
                    Store (CD5C, Index (DerefOf (Index (EWRY, One)), 0x71))
                    Store (CD5D, Index (DerefOf (Index (EWRY, One)), 0x72))
                    Store (CD5E, Index (DerefOf (Index (EWRY, One)), 0x73))
                    Store (CD5F, Index (DerefOf (Index (EWRY, One)), 0x74))
                    Store (CD60, Index (DerefOf (Index (EWRY, One)), 0x75))
                    Store (CD61, Index (DerefOf (Index (EWRY, One)), 0x76))
                    Store (CD62, Index (DerefOf (Index (EWRY, One)), 0x77))
                    Store (CD63, Index (DerefOf (Index (EWRY, One)), 0x78))
                    Store (CD64, Index (DerefOf (Index (EWRY, One)), 0x79))
                    Store (CD65, Index (DerefOf (Index (EWRY, One)), 0x7A))
                    Store (CD66, Index (DerefOf (Index (EWRY, One)), 0x7B))
                    Store (CD67, Index (DerefOf (Index (EWRY, One)), 0x7C))
                    Store (CD68, Index (DerefOf (Index (EWRY, One)), 0x7D))
                    Store (CD69, Index (DerefOf (Index (EWRY, One)), 0x7E))
                    Store (CD6A, Index (DerefOf (Index (EWRY, One)), 0x7F))
                    Store (CD6B, Index (DerefOf (Index (EWRY, One)), 0x80))
                    Store (CD6C, Index (DerefOf (Index (EWRY, One)), 0x81))
                    Store (CD6D, Index (DerefOf (Index (EWRY, One)), 0x82))
                    Store (CD6E, Index (DerefOf (Index (EWRY, One)), 0x83))
                    Store (CD6F, Index (DerefOf (Index (EWRY, One)), 0x84))
                    Store (CD70, Index (DerefOf (Index (EWRY, One)), 0x85))
                    Store (CD71, Index (DerefOf (Index (EWRY, One)), 0x86))
                    Return (EWRY)
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    Store (SDGN, Index (DerefOf (Index (WGDY, One)), One))
                    Store (SD11, Index (DerefOf (Index (WGDY, One)), 0x02))
                    Store (SD12, Index (DerefOf (Index (WGDY, One)), 0x03))
                    Store (SD13, Index (DerefOf (Index (WGDY, One)), 0x04))
                    Store (SD14, Index (DerefOf (Index (WGDY, One)), 0x05))
                    Store (SD15, Index (DerefOf (Index (WGDY, One)), 0x06))
                    Store (SD16, Index (DerefOf (Index (WGDY, One)), 0x07))
                    Store (SD17, Index (DerefOf (Index (WGDY, One)), 0x08))
                    Store (SD18, Index (DerefOf (Index (WGDY, One)), 0x09))
                    Store (SD19, Index (DerefOf (Index (WGDY, One)), 0x0A))
                    Store (SD21, Index (DerefOf (Index (WGDY, One)), 0x0B))
                    Store (SD22, Index (DerefOf (Index (WGDY, One)), 0x0C))
                    Store (SD23, Index (DerefOf (Index (WGDY, One)), 0x0D))
                    Store (SD24, Index (DerefOf (Index (WGDY, One)), 0x0E))
                    Store (SD25, Index (DerefOf (Index (WGDY, One)), 0x0F))
                    Store (SD26, Index (DerefOf (Index (WGDY, One)), 0x10))
                    Store (SD27, Index (DerefOf (Index (WGDY, One)), 0x11))
                    Store (SD28, Index (DerefOf (Index (WGDY, One)), 0x12))
                    Store (SD29, Index (DerefOf (Index (WGDY, One)), 0x13))
                    Store (SD31, Index (DerefOf (Index (WGDY, One)), 0x14))
                    Store (SD32, Index (DerefOf (Index (WGDY, One)), 0x15))
                    Store (SD33, Index (DerefOf (Index (WGDY, One)), 0x16))
                    Store (SD34, Index (DerefOf (Index (WGDY, One)), 0x17))
                    Store (SD35, Index (DerefOf (Index (WGDY, One)), 0x18))
                    Store (SD36, Index (DerefOf (Index (WGDY, One)), 0x19))
                    Store (SD37, Index (DerefOf (Index (WGDY, One)), 0x1A))
                    Store (SD38, Index (DerefOf (Index (WGDY, One)), 0x1B))
                    Store (SD39, Index (DerefOf (Index (WGDY, One)), 0x1C))
                    Store (SD41, Index (DerefOf (Index (WGDY, One)), 0x1D))
                    Store (SD42, Index (DerefOf (Index (WGDY, One)), 0x1E))
                    Store (SD43, Index (DerefOf (Index (WGDY, One)), 0x1F))
                    Store (SD44, Index (DerefOf (Index (WGDY, One)), 0x20))
                    Store (SD45, Index (DerefOf (Index (WGDY, One)), 0x21))
                    Store (SD46, Index (DerefOf (Index (WGDY, One)), 0x22))
                    Store (SD47, Index (DerefOf (Index (WGDY, One)), 0x23))
                    Store (SD48, Index (DerefOf (Index (WGDY, One)), 0x24))
                    Store (SD49, Index (DerefOf (Index (WGDY, One)), 0x25))
                    Store (SD51, Index (DerefOf (Index (WGDY, One)), 0x26))
                    Store (SD52, Index (DerefOf (Index (WGDY, One)), 0x27))
                    Store (SD53, Index (DerefOf (Index (WGDY, One)), 0x28))
                    Store (SD54, Index (DerefOf (Index (WGDY, One)), 0x29))
                    Store (SD55, Index (DerefOf (Index (WGDY, One)), 0x2A))
                    Store (SD56, Index (DerefOf (Index (WGDY, One)), 0x2B))
                    Store (SD57, Index (DerefOf (Index (WGDY, One)), 0x2C))
                    Store (SD58, Index (DerefOf (Index (WGDY, One)), 0x2D))
                    Store (SD59, Index (DerefOf (Index (WGDY, One)), 0x2E))
                    Store (SD61, Index (DerefOf (Index (WGDY, One)), 0x2F))
                    Store (SD62, Index (DerefOf (Index (WGDY, One)), 0x30))
                    Store (SD63, Index (DerefOf (Index (WGDY, One)), 0x31))
                    Store (SD64, Index (DerefOf (Index (WGDY, One)), 0x32))
                    Store (SD65, Index (DerefOf (Index (WGDY, One)), 0x33))
                    Store (SD66, Index (DerefOf (Index (WGDY, One)), 0x34))
                    Store (SD67, Index (DerefOf (Index (WGDY, One)), 0x35))
                    Store (SD68, Index (DerefOf (Index (WGDY, One)), 0x36))
                    Store (SD69, Index (DerefOf (Index (WGDY, One)), 0x37))
                    Store (SD71, Index (DerefOf (Index (WGDY, One)), 0x38))
                    Store (SD72, Index (DerefOf (Index (WGDY, One)), 0x39))
                    Store (SD73, Index (DerefOf (Index (WGDY, One)), 0x3A))
                    Store (SD74, Index (DerefOf (Index (WGDY, One)), 0x3B))
                    Store (SD75, Index (DerefOf (Index (WGDY, One)), 0x3C))
                    Store (SD76, Index (DerefOf (Index (WGDY, One)), 0x3D))
                    Store (SD77, Index (DerefOf (Index (WGDY, One)), 0x3E))
                    Store (SD78, Index (DerefOf (Index (WGDY, One)), 0x3F))
                    Store (SD79, Index (DerefOf (Index (WGDY, One)), 0x40))
                    Store (SD81, Index (DerefOf (Index (WGDY, One)), 0x41))
                    Store (SD82, Index (DerefOf (Index (WGDY, One)), 0x42))
                    Store (SD83, Index (DerefOf (Index (WGDY, One)), 0x43))
                    Store (SD84, Index (DerefOf (Index (WGDY, One)), 0x44))
                    Store (SD85, Index (DerefOf (Index (WGDY, One)), 0x45))
                    Store (SD86, Index (DerefOf (Index (WGDY, One)), 0x46))
                    Store (SD87, Index (DerefOf (Index (WGDY, One)), 0x47))
                    Store (SD88, Index (DerefOf (Index (WGDY, One)), 0x48))
                    Store (SD89, Index (DerefOf (Index (WGDY, One)), 0x49))
                    Return (WGDY)
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                    Return (ECKY)
                }

                Name (PPAY, Package (0x02)
                {
                    One, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    Store (WAGE, Index (DerefOf (Index (PPAY, One)), One))
                    Store (AGA1, Index (DerefOf (Index (PPAY, One)), 0x02))
                    Store (AGA2, Index (DerefOf (Index (PPAY, One)), 0x03))
                    Store (AGA3, Index (DerefOf (Index (PPAY, One)), 0x04))
                    Store (AGA4, Index (DerefOf (Index (PPAY, One)), 0x05))
                    Store (AGA5, Index (DerefOf (Index (PPAY, One)), 0x06))
                    Store (AGA6, Index (DerefOf (Index (PPAY, One)), 0x07))
                    Store (AGA7, Index (DerefOf (Index (PPAY, One)), 0x08))
                    Store (AGA8, Index (DerefOf (Index (PPAY, One)), 0x09))
                    Store (AGA9, Index (DerefOf (Index (PPAY, One)), 0x0A))
                    Store (AGAA, Index (DerefOf (Index (PPAY, One)), 0x0B))
                    Store (AGAB, Index (DerefOf (Index (PPAY, One)), 0x0C))
                    Store (AGB1, Index (DerefOf (Index (PPAY, One)), 0x0D))
                    Store (AGB2, Index (DerefOf (Index (PPAY, One)), 0x0E))
                    Store (AGB3, Index (DerefOf (Index (PPAY, One)), 0x0F))
                    Store (AGB4, Index (DerefOf (Index (PPAY, One)), 0x10))
                    Store (AGB5, Index (DerefOf (Index (PPAY, One)), 0x11))
                    Store (AGB6, Index (DerefOf (Index (PPAY, One)), 0x12))
                    Store (AGB7, Index (DerefOf (Index (PPAY, One)), 0x13))
                    Store (AGB8, Index (DerefOf (Index (PPAY, One)), 0x14))
                    Store (AGB9, Index (DerefOf (Index (PPAY, One)), 0x15))
                    Store (AGBA, Index (DerefOf (Index (PPAY, One)), 0x16))
                    Store (AGBB, Index (DerefOf (Index (PPAY, One)), 0x17))
                    Return (PPAY)
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    Store (WTSV, Index (DerefOf (Index (WTSY, One)), One))
                    Store (WTLE, Index (DerefOf (Index (WTSY, One)), 0x02))
                    Store (BL01, Index (DerefOf (Index (WTSY, One)), 0x03))
                    Store (BL02, Index (DerefOf (Index (WTSY, One)), 0x04))
                    Store (BL03, Index (DerefOf (Index (WTSY, One)), 0x05))
                    Store (BL04, Index (DerefOf (Index (WTSY, One)), 0x06))
                    Store (BL05, Index (DerefOf (Index (WTSY, One)), 0x07))
                    Store (BL06, Index (DerefOf (Index (WTSY, One)), 0x08))
                    Store (BL07, Index (DerefOf (Index (WTSY, One)), 0x09))
                    Store (BL08, Index (DerefOf (Index (WTSY, One)), 0x0A))
                    Store (BL09, Index (DerefOf (Index (WTSY, One)), 0x0B))
                    Store (BL10, Index (DerefOf (Index (WTSY, One)), 0x0C))
                    Store (BL11, Index (DerefOf (Index (WTSY, One)), 0x0D))
                    Store (BL12, Index (DerefOf (Index (WTSY, One)), 0x0E))
                    Store (BL13, Index (DerefOf (Index (WTSY, One)), 0x0F))
                    Store (BL14, Index (DerefOf (Index (WTSY, One)), 0x10))
                    Store (BL15, Index (DerefOf (Index (WTSY, One)), 0x11))
                    Store (BL16, Index (DerefOf (Index (WTSY, One)), 0x12))
                    Return (WTSY)
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    Store (WLBI, Index (DerefOf (Index (WAIY, One)), One))
                    Store (WHBI, Index (DerefOf (Index (WAIY, One)), 0x02))
                    Return (WAIY)
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                    Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                    Return (SADX)
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX)
                }
            }

            If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If (LNotEqual (GGOV (PRST), WPRP))
                    {
                        DL23 ()
                        SGOV (PRST, WPRP)
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    If (LEqual (Arg0, Zero))
                    {
                        Sleep (TBTG)
                    }
                    ElseIf (LEqual (Arg0, One))
                    {
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, And (Not (PFCP), One))
                        Sleep (TFDI)
                    }
                    Else
                    {
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    SPCO (WCLK, One)
                    SGOV (WFCP, PFCP)
                    Sleep (TN2B)
                    SGOV (WBRS, And (Not (PBRS), One))
                    Sleep (TB2R)
                    SGOV (PRST, And (Not (WPRP), One))
                    L23D ()
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Store (Zero, Local0)
                    While (LAnd (LNotEqual (SVID, WSID), LLess (Local0, WSTO)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    If (LEqual (WWEN, 0x02))
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (Zero)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One)
                        SGOV (PRST, And (Not (WPRP), One))
                        SGOV (WBRS, And (Not (PBRS), One))
                        Sleep (0xC8)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x14))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Sleep (0x0A)
                        Notify (PXSX, One)
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (One)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                }
            }

            If (LOr (WIST (), LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT))))
            {
                PowerResource (DRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        DRST
                    })
                }

                Method (IFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        ShiftLeft (CVPR, Zero, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        If (LEqual (CMDT, One))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Return (^^^CNVW.RSTT)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If (LEqual (CMDT, 0x02))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Store (CMDP, ^^^CNVW.RSTT)
                            }

                            Return (Zero)
                        }

                        If (LEqual (CMDT, 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                Return (^^^CNVW.PRRS)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (Zero)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LEqual (CRFI, One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x01                                     
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Store (ACSD, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Store (I5BS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Store (UHBS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        Store (AXMU, Local0)
                        ShiftLeft (Local0, One, Local0)
                        Or (Local0, AXSU, Local0)
                        Store (AXMR, Local1)
                        ShiftLeft (Local1, One, Local1)
                        Or (Local1, AXSR, Local1)
                        ShiftLeft (Local1, 0x02, Local1)
                        Or (Local0, Local1, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (WFRC)
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (WFUC)
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        Return (UNI4)
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        Return (WFIC)
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (LEqual (Arg0, ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d")))
                        {
                            If (LEqual (Arg2, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                           
                                })
                            }

                            If (LEqual (Arg2, One)){}
                            If (LEqual (Arg2, 0x02)){}
                            If (LEqual (Arg2, 0x03))
                            {
                                If (LEqual (WRTO, One)){}
                                ElseIf (LEqual (WRTO, 0x03)){}
                                Else
                                {
                                }

                                Return (WRTO)
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP23.PXSX))
    {
        Scope (_SB.PC00.RP23.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, Add (GMIO (^_ADR, _ADR), 0x44), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                    Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                    Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                    Return (SPLX)
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                    Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                    Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                    Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                    Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                    Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                    Return (WANX)
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                    Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                    Return (WRDX)
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    Store (STXE, Index (DerefOf (Index (WRDY, One)), One))
                    Store (ST10, Index (DerefOf (Index (WRDY, One)), 0x02))
                    Store (ST11, Index (DerefOf (Index (WRDY, One)), 0x03))
                    Store (ST12, Index (DerefOf (Index (WRDY, One)), 0x04))
                    Store (ST13, Index (DerefOf (Index (WRDY, One)), 0x05))
                    Store (ST14, Index (DerefOf (Index (WRDY, One)), 0x06))
                    Store (ST15, Index (DerefOf (Index (WRDY, One)), 0x07))
                    Store (ST16, Index (DerefOf (Index (WRDY, One)), 0x08))
                    Store (ST17, Index (DerefOf (Index (WRDY, One)), 0x09))
                    Store (ST18, Index (DerefOf (Index (WRDY, One)), 0x0A))
                    Store (ST19, Index (DerefOf (Index (WRDY, One)), 0x0B))
                    Store (ST50, Index (DerefOf (Index (WRDY, One)), 0x0C))
                    Store (ST51, Index (DerefOf (Index (WRDY, One)), 0x0D))
                    Store (ST52, Index (DerefOf (Index (WRDY, One)), 0x0E))
                    Store (ST53, Index (DerefOf (Index (WRDY, One)), 0x0F))
                    Store (ST54, Index (DerefOf (Index (WRDY, One)), 0x10))
                    Store (ST55, Index (DerefOf (Index (WRDY, One)), 0x11))
                    Store (ST56, Index (DerefOf (Index (WRDY, One)), 0x12))
                    Store (ST57, Index (DerefOf (Index (WRDY, One)), 0x13))
                    Store (ST58, Index (DerefOf (Index (WRDY, One)), 0x14))
                    Store (ST59, Index (DerefOf (Index (WRDY, One)), 0x15))
                    Store (ST5A, Index (DerefOf (Index (WRDY, One)), 0x16))
                    Store (ST5B, Index (DerefOf (Index (WRDY, One)), 0x17))
                    Store (CD10, Index (DerefOf (Index (WRDY, One)), 0x18))
                    Store (CD11, Index (DerefOf (Index (WRDY, One)), 0x19))
                    Store (CD12, Index (DerefOf (Index (WRDY, One)), 0x1A))
                    Store (CD13, Index (DerefOf (Index (WRDY, One)), 0x1B))
                    Store (CD14, Index (DerefOf (Index (WRDY, One)), 0x1C))
                    Store (CD15, Index (DerefOf (Index (WRDY, One)), 0x1D))
                    Store (CD16, Index (DerefOf (Index (WRDY, One)), 0x1E))
                    Store (CD17, Index (DerefOf (Index (WRDY, One)), 0x1F))
                    Store (CD18, Index (DerefOf (Index (WRDY, One)), 0x20))
                    Store (CD19, Index (DerefOf (Index (WRDY, One)), 0x21))
                    Store (CD1A, Index (DerefOf (Index (WRDY, One)), 0x22))
                    Store (CD20, Index (DerefOf (Index (WRDY, One)), 0x23))
                    Store (CD21, Index (DerefOf (Index (WRDY, One)), 0x24))
                    Store (CD22, Index (DerefOf (Index (WRDY, One)), 0x25))
                    Store (CD23, Index (DerefOf (Index (WRDY, One)), 0x26))
                    Store (CD24, Index (DerefOf (Index (WRDY, One)), 0x27))
                    Store (CD25, Index (DerefOf (Index (WRDY, One)), 0x28))
                    Store (CD26, Index (DerefOf (Index (WRDY, One)), 0x29))
                    Store (CD27, Index (DerefOf (Index (WRDY, One)), 0x2A))
                    Store (CD28, Index (DerefOf (Index (WRDY, One)), 0x2B))
                    Store (CD29, Index (DerefOf (Index (WRDY, One)), 0x2C))
                    Store (CD2A, Index (DerefOf (Index (WRDY, One)), 0x2D))
                    Return (WRDY)
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    Store (STDE, Index (DerefOf (Index (EWRY, One)), One))
                    Store (STRS, Index (DerefOf (Index (EWRY, One)), 0x02))
                    Store (ST20, Index (DerefOf (Index (EWRY, One)), 0x03))
                    Store (ST21, Index (DerefOf (Index (EWRY, One)), 0x04))
                    Store (ST22, Index (DerefOf (Index (EWRY, One)), 0x05))
                    Store (ST23, Index (DerefOf (Index (EWRY, One)), 0x06))
                    Store (ST24, Index (DerefOf (Index (EWRY, One)), 0x07))
                    Store (ST25, Index (DerefOf (Index (EWRY, One)), 0x08))
                    Store (ST26, Index (DerefOf (Index (EWRY, One)), 0x09))
                    Store (ST27, Index (DerefOf (Index (EWRY, One)), 0x0A))
                    Store (ST28, Index (DerefOf (Index (EWRY, One)), 0x0B))
                    Store (ST29, Index (DerefOf (Index (EWRY, One)), 0x0C))
                    Store (ST60, Index (DerefOf (Index (EWRY, One)), 0x0D))
                    Store (ST61, Index (DerefOf (Index (EWRY, One)), 0x0E))
                    Store (ST62, Index (DerefOf (Index (EWRY, One)), 0x0F))
                    Store (ST63, Index (DerefOf (Index (EWRY, One)), 0x10))
                    Store (ST64, Index (DerefOf (Index (EWRY, One)), 0x11))
                    Store (ST65, Index (DerefOf (Index (EWRY, One)), 0x12))
                    Store (ST66, Index (DerefOf (Index (EWRY, One)), 0x13))
                    Store (ST67, Index (DerefOf (Index (EWRY, One)), 0x14))
                    Store (ST68, Index (DerefOf (Index (EWRY, One)), 0x15))
                    Store (ST69, Index (DerefOf (Index (EWRY, One)), 0x16))
                    Store (ST6A, Index (DerefOf (Index (EWRY, One)), 0x17))
                    Store (ST6B, Index (DerefOf (Index (EWRY, One)), 0x18))
                    Store (ST30, Index (DerefOf (Index (EWRY, One)), 0x19))
                    Store (ST31, Index (DerefOf (Index (EWRY, One)), 0x1A))
                    Store (ST32, Index (DerefOf (Index (EWRY, One)), 0x1B))
                    Store (ST33, Index (DerefOf (Index (EWRY, One)), 0x1C))
                    Store (ST34, Index (DerefOf (Index (EWRY, One)), 0x1D))
                    Store (ST35, Index (DerefOf (Index (EWRY, One)), 0x1E))
                    Store (ST36, Index (DerefOf (Index (EWRY, One)), 0x1F))
                    Store (ST37, Index (DerefOf (Index (EWRY, One)), 0x20))
                    Store (ST38, Index (DerefOf (Index (EWRY, One)), 0x21))
                    Store (ST39, Index (DerefOf (Index (EWRY, One)), 0x22))
                    Store (ST70, Index (DerefOf (Index (EWRY, One)), 0x23))
                    Store (ST71, Index (DerefOf (Index (EWRY, One)), 0x24))
                    Store (ST72, Index (DerefOf (Index (EWRY, One)), 0x25))
                    Store (ST73, Index (DerefOf (Index (EWRY, One)), 0x26))
                    Store (ST74, Index (DerefOf (Index (EWRY, One)), 0x27))
                    Store (ST75, Index (DerefOf (Index (EWRY, One)), 0x28))
                    Store (ST76, Index (DerefOf (Index (EWRY, One)), 0x29))
                    Store (ST77, Index (DerefOf (Index (EWRY, One)), 0x2A))
                    Store (ST78, Index (DerefOf (Index (EWRY, One)), 0x2B))
                    Store (ST79, Index (DerefOf (Index (EWRY, One)), 0x2C))
                    Store (ST7A, Index (DerefOf (Index (EWRY, One)), 0x2D))
                    Store (ST7B, Index (DerefOf (Index (EWRY, One)), 0x2E))
                    Store (ST40, Index (DerefOf (Index (EWRY, One)), 0x2F))
                    Store (ST41, Index (DerefOf (Index (EWRY, One)), 0x30))
                    Store (ST42, Index (DerefOf (Index (EWRY, One)), 0x31))
                    Store (ST43, Index (DerefOf (Index (EWRY, One)), 0x32))
                    Store (ST44, Index (DerefOf (Index (EWRY, One)), 0x33))
                    Store (ST45, Index (DerefOf (Index (EWRY, One)), 0x34))
                    Store (ST46, Index (DerefOf (Index (EWRY, One)), 0x35))
                    Store (ST47, Index (DerefOf (Index (EWRY, One)), 0x36))
                    Store (ST48, Index (DerefOf (Index (EWRY, One)), 0x37))
                    Store (ST49, Index (DerefOf (Index (EWRY, One)), 0x38))
                    Store (ST80, Index (DerefOf (Index (EWRY, One)), 0x39))
                    Store (ST81, Index (DerefOf (Index (EWRY, One)), 0x3A))
                    Store (ST82, Index (DerefOf (Index (EWRY, One)), 0x3B))
                    Store (ST83, Index (DerefOf (Index (EWRY, One)), 0x3C))
                    Store (ST84, Index (DerefOf (Index (EWRY, One)), 0x3D))
                    Store (ST85, Index (DerefOf (Index (EWRY, One)), 0x3E))
                    Store (ST86, Index (DerefOf (Index (EWRY, One)), 0x3F))
                    Store (ST87, Index (DerefOf (Index (EWRY, One)), 0x40))
                    Store (ST88, Index (DerefOf (Index (EWRY, One)), 0x41))
                    Store (ST89, Index (DerefOf (Index (EWRY, One)), 0x42))
                    Store (ST8A, Index (DerefOf (Index (EWRY, One)), 0x43))
                    Store (ST8B, Index (DerefOf (Index (EWRY, One)), 0x44))
                    Store (CD30, Index (DerefOf (Index (EWRY, One)), 0x45))
                    Store (CD31, Index (DerefOf (Index (EWRY, One)), 0x46))
                    Store (CD32, Index (DerefOf (Index (EWRY, One)), 0x47))
                    Store (CD33, Index (DerefOf (Index (EWRY, One)), 0x48))
                    Store (CD34, Index (DerefOf (Index (EWRY, One)), 0x49))
                    Store (CD35, Index (DerefOf (Index (EWRY, One)), 0x4A))
                    Store (CD36, Index (DerefOf (Index (EWRY, One)), 0x4B))
                    Store (CD37, Index (DerefOf (Index (EWRY, One)), 0x4C))
                    Store (CD38, Index (DerefOf (Index (EWRY, One)), 0x4D))
                    Store (CD39, Index (DerefOf (Index (EWRY, One)), 0x4E))
                    Store (CD3A, Index (DerefOf (Index (EWRY, One)), 0x4F))
                    Store (CD3B, Index (DerefOf (Index (EWRY, One)), 0x50))
                    Store (CD3C, Index (DerefOf (Index (EWRY, One)), 0x51))
                    Store (CD3D, Index (DerefOf (Index (EWRY, One)), 0x52))
                    Store (CD3E, Index (DerefOf (Index (EWRY, One)), 0x53))
                    Store (CD3F, Index (DerefOf (Index (EWRY, One)), 0x54))
                    Store (CD40, Index (DerefOf (Index (EWRY, One)), 0x55))
                    Store (CD41, Index (DerefOf (Index (EWRY, One)), 0x56))
                    Store (CD42, Index (DerefOf (Index (EWRY, One)), 0x57))
                    Store (CD43, Index (DerefOf (Index (EWRY, One)), 0x58))
                    Store (CD44, Index (DerefOf (Index (EWRY, One)), 0x59))
                    Store (CD45, Index (DerefOf (Index (EWRY, One)), 0x5A))
                    Store (CD46, Index (DerefOf (Index (EWRY, One)), 0x5B))
                    Store (CD47, Index (DerefOf (Index (EWRY, One)), 0x5C))
                    Store (CD48, Index (DerefOf (Index (EWRY, One)), 0x5D))
                    Store (CD49, Index (DerefOf (Index (EWRY, One)), 0x5E))
                    Store (CD4A, Index (DerefOf (Index (EWRY, One)), 0x5F))
                    Store (CD4B, Index (DerefOf (Index (EWRY, One)), 0x60))
                    Store (CD4C, Index (DerefOf (Index (EWRY, One)), 0x61))
                    Store (CD4D, Index (DerefOf (Index (EWRY, One)), 0x62))
                    Store (CD4E, Index (DerefOf (Index (EWRY, One)), 0x63))
                    Store (CD4F, Index (DerefOf (Index (EWRY, One)), 0x64))
                    Store (CD50, Index (DerefOf (Index (EWRY, One)), 0x65))
                    Store (CD51, Index (DerefOf (Index (EWRY, One)), 0x66))
                    Store (CD52, Index (DerefOf (Index (EWRY, One)), 0x67))
                    Store (CD53, Index (DerefOf (Index (EWRY, One)), 0x68))
                    Store (CD54, Index (DerefOf (Index (EWRY, One)), 0x69))
                    Store (CD55, Index (DerefOf (Index (EWRY, One)), 0x6A))
                    Store (CD56, Index (DerefOf (Index (EWRY, One)), 0x6B))
                    Store (CD57, Index (DerefOf (Index (EWRY, One)), 0x6C))
                    Store (CD58, Index (DerefOf (Index (EWRY, One)), 0x6D))
                    Store (CD59, Index (DerefOf (Index (EWRY, One)), 0x6E))
                    Store (CD5A, Index (DerefOf (Index (EWRY, One)), 0x6F))
                    Store (CD5B, Index (DerefOf (Index (EWRY, One)), 0x70))
                    Store (CD5C, Index (DerefOf (Index (EWRY, One)), 0x71))
                    Store (CD5D, Index (DerefOf (Index (EWRY, One)), 0x72))
                    Store (CD5E, Index (DerefOf (Index (EWRY, One)), 0x73))
                    Store (CD5F, Index (DerefOf (Index (EWRY, One)), 0x74))
                    Store (CD60, Index (DerefOf (Index (EWRY, One)), 0x75))
                    Store (CD61, Index (DerefOf (Index (EWRY, One)), 0x76))
                    Store (CD62, Index (DerefOf (Index (EWRY, One)), 0x77))
                    Store (CD63, Index (DerefOf (Index (EWRY, One)), 0x78))
                    Store (CD64, Index (DerefOf (Index (EWRY, One)), 0x79))
                    Store (CD65, Index (DerefOf (Index (EWRY, One)), 0x7A))
                    Store (CD66, Index (DerefOf (Index (EWRY, One)), 0x7B))
                    Store (CD67, Index (DerefOf (Index (EWRY, One)), 0x7C))
                    Store (CD68, Index (DerefOf (Index (EWRY, One)), 0x7D))
                    Store (CD69, Index (DerefOf (Index (EWRY, One)), 0x7E))
                    Store (CD6A, Index (DerefOf (Index (EWRY, One)), 0x7F))
                    Store (CD6B, Index (DerefOf (Index (EWRY, One)), 0x80))
                    Store (CD6C, Index (DerefOf (Index (EWRY, One)), 0x81))
                    Store (CD6D, Index (DerefOf (Index (EWRY, One)), 0x82))
                    Store (CD6E, Index (DerefOf (Index (EWRY, One)), 0x83))
                    Store (CD6F, Index (DerefOf (Index (EWRY, One)), 0x84))
                    Store (CD70, Index (DerefOf (Index (EWRY, One)), 0x85))
                    Store (CD71, Index (DerefOf (Index (EWRY, One)), 0x86))
                    Return (EWRY)
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    Store (SDGN, Index (DerefOf (Index (WGDY, One)), One))
                    Store (SD11, Index (DerefOf (Index (WGDY, One)), 0x02))
                    Store (SD12, Index (DerefOf (Index (WGDY, One)), 0x03))
                    Store (SD13, Index (DerefOf (Index (WGDY, One)), 0x04))
                    Store (SD14, Index (DerefOf (Index (WGDY, One)), 0x05))
                    Store (SD15, Index (DerefOf (Index (WGDY, One)), 0x06))
                    Store (SD16, Index (DerefOf (Index (WGDY, One)), 0x07))
                    Store (SD17, Index (DerefOf (Index (WGDY, One)), 0x08))
                    Store (SD18, Index (DerefOf (Index (WGDY, One)), 0x09))
                    Store (SD19, Index (DerefOf (Index (WGDY, One)), 0x0A))
                    Store (SD21, Index (DerefOf (Index (WGDY, One)), 0x0B))
                    Store (SD22, Index (DerefOf (Index (WGDY, One)), 0x0C))
                    Store (SD23, Index (DerefOf (Index (WGDY, One)), 0x0D))
                    Store (SD24, Index (DerefOf (Index (WGDY, One)), 0x0E))
                    Store (SD25, Index (DerefOf (Index (WGDY, One)), 0x0F))
                    Store (SD26, Index (DerefOf (Index (WGDY, One)), 0x10))
                    Store (SD27, Index (DerefOf (Index (WGDY, One)), 0x11))
                    Store (SD28, Index (DerefOf (Index (WGDY, One)), 0x12))
                    Store (SD29, Index (DerefOf (Index (WGDY, One)), 0x13))
                    Store (SD31, Index (DerefOf (Index (WGDY, One)), 0x14))
                    Store (SD32, Index (DerefOf (Index (WGDY, One)), 0x15))
                    Store (SD33, Index (DerefOf (Index (WGDY, One)), 0x16))
                    Store (SD34, Index (DerefOf (Index (WGDY, One)), 0x17))
                    Store (SD35, Index (DerefOf (Index (WGDY, One)), 0x18))
                    Store (SD36, Index (DerefOf (Index (WGDY, One)), 0x19))
                    Store (SD37, Index (DerefOf (Index (WGDY, One)), 0x1A))
                    Store (SD38, Index (DerefOf (Index (WGDY, One)), 0x1B))
                    Store (SD39, Index (DerefOf (Index (WGDY, One)), 0x1C))
                    Store (SD41, Index (DerefOf (Index (WGDY, One)), 0x1D))
                    Store (SD42, Index (DerefOf (Index (WGDY, One)), 0x1E))
                    Store (SD43, Index (DerefOf (Index (WGDY, One)), 0x1F))
                    Store (SD44, Index (DerefOf (Index (WGDY, One)), 0x20))
                    Store (SD45, Index (DerefOf (Index (WGDY, One)), 0x21))
                    Store (SD46, Index (DerefOf (Index (WGDY, One)), 0x22))
                    Store (SD47, Index (DerefOf (Index (WGDY, One)), 0x23))
                    Store (SD48, Index (DerefOf (Index (WGDY, One)), 0x24))
                    Store (SD49, Index (DerefOf (Index (WGDY, One)), 0x25))
                    Store (SD51, Index (DerefOf (Index (WGDY, One)), 0x26))
                    Store (SD52, Index (DerefOf (Index (WGDY, One)), 0x27))
                    Store (SD53, Index (DerefOf (Index (WGDY, One)), 0x28))
                    Store (SD54, Index (DerefOf (Index (WGDY, One)), 0x29))
                    Store (SD55, Index (DerefOf (Index (WGDY, One)), 0x2A))
                    Store (SD56, Index (DerefOf (Index (WGDY, One)), 0x2B))
                    Store (SD57, Index (DerefOf (Index (WGDY, One)), 0x2C))
                    Store (SD58, Index (DerefOf (Index (WGDY, One)), 0x2D))
                    Store (SD59, Index (DerefOf (Index (WGDY, One)), 0x2E))
                    Store (SD61, Index (DerefOf (Index (WGDY, One)), 0x2F))
                    Store (SD62, Index (DerefOf (Index (WGDY, One)), 0x30))
                    Store (SD63, Index (DerefOf (Index (WGDY, One)), 0x31))
                    Store (SD64, Index (DerefOf (Index (WGDY, One)), 0x32))
                    Store (SD65, Index (DerefOf (Index (WGDY, One)), 0x33))
                    Store (SD66, Index (DerefOf (Index (WGDY, One)), 0x34))
                    Store (SD67, Index (DerefOf (Index (WGDY, One)), 0x35))
                    Store (SD68, Index (DerefOf (Index (WGDY, One)), 0x36))
                    Store (SD69, Index (DerefOf (Index (WGDY, One)), 0x37))
                    Store (SD71, Index (DerefOf (Index (WGDY, One)), 0x38))
                    Store (SD72, Index (DerefOf (Index (WGDY, One)), 0x39))
                    Store (SD73, Index (DerefOf (Index (WGDY, One)), 0x3A))
                    Store (SD74, Index (DerefOf (Index (WGDY, One)), 0x3B))
                    Store (SD75, Index (DerefOf (Index (WGDY, One)), 0x3C))
                    Store (SD76, Index (DerefOf (Index (WGDY, One)), 0x3D))
                    Store (SD77, Index (DerefOf (Index (WGDY, One)), 0x3E))
                    Store (SD78, Index (DerefOf (Index (WGDY, One)), 0x3F))
                    Store (SD79, Index (DerefOf (Index (WGDY, One)), 0x40))
                    Store (SD81, Index (DerefOf (Index (WGDY, One)), 0x41))
                    Store (SD82, Index (DerefOf (Index (WGDY, One)), 0x42))
                    Store (SD83, Index (DerefOf (Index (WGDY, One)), 0x43))
                    Store (SD84, Index (DerefOf (Index (WGDY, One)), 0x44))
                    Store (SD85, Index (DerefOf (Index (WGDY, One)), 0x45))
                    Store (SD86, Index (DerefOf (Index (WGDY, One)), 0x46))
                    Store (SD87, Index (DerefOf (Index (WGDY, One)), 0x47))
                    Store (SD88, Index (DerefOf (Index (WGDY, One)), 0x48))
                    Store (SD89, Index (DerefOf (Index (WGDY, One)), 0x49))
                    Return (WGDY)
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                    Return (ECKY)
                }

                Name (PPAY, Package (0x02)
                {
                    One, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    Store (WAGE, Index (DerefOf (Index (PPAY, One)), One))
                    Store (AGA1, Index (DerefOf (Index (PPAY, One)), 0x02))
                    Store (AGA2, Index (DerefOf (Index (PPAY, One)), 0x03))
                    Store (AGA3, Index (DerefOf (Index (PPAY, One)), 0x04))
                    Store (AGA4, Index (DerefOf (Index (PPAY, One)), 0x05))
                    Store (AGA5, Index (DerefOf (Index (PPAY, One)), 0x06))
                    Store (AGA6, Index (DerefOf (Index (PPAY, One)), 0x07))
                    Store (AGA7, Index (DerefOf (Index (PPAY, One)), 0x08))
                    Store (AGA8, Index (DerefOf (Index (PPAY, One)), 0x09))
                    Store (AGA9, Index (DerefOf (Index (PPAY, One)), 0x0A))
                    Store (AGAA, Index (DerefOf (Index (PPAY, One)), 0x0B))
                    Store (AGAB, Index (DerefOf (Index (PPAY, One)), 0x0C))
                    Store (AGB1, Index (DerefOf (Index (PPAY, One)), 0x0D))
                    Store (AGB2, Index (DerefOf (Index (PPAY, One)), 0x0E))
                    Store (AGB3, Index (DerefOf (Index (PPAY, One)), 0x0F))
                    Store (AGB4, Index (DerefOf (Index (PPAY, One)), 0x10))
                    Store (AGB5, Index (DerefOf (Index (PPAY, One)), 0x11))
                    Store (AGB6, Index (DerefOf (Index (PPAY, One)), 0x12))
                    Store (AGB7, Index (DerefOf (Index (PPAY, One)), 0x13))
                    Store (AGB8, Index (DerefOf (Index (PPAY, One)), 0x14))
                    Store (AGB9, Index (DerefOf (Index (PPAY, One)), 0x15))
                    Store (AGBA, Index (DerefOf (Index (PPAY, One)), 0x16))
                    Store (AGBB, Index (DerefOf (Index (PPAY, One)), 0x17))
                    Return (PPAY)
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    Store (WTSV, Index (DerefOf (Index (WTSY, One)), One))
                    Store (WTLE, Index (DerefOf (Index (WTSY, One)), 0x02))
                    Store (BL01, Index (DerefOf (Index (WTSY, One)), 0x03))
                    Store (BL02, Index (DerefOf (Index (WTSY, One)), 0x04))
                    Store (BL03, Index (DerefOf (Index (WTSY, One)), 0x05))
                    Store (BL04, Index (DerefOf (Index (WTSY, One)), 0x06))
                    Store (BL05, Index (DerefOf (Index (WTSY, One)), 0x07))
                    Store (BL06, Index (DerefOf (Index (WTSY, One)), 0x08))
                    Store (BL07, Index (DerefOf (Index (WTSY, One)), 0x09))
                    Store (BL08, Index (DerefOf (Index (WTSY, One)), 0x0A))
                    Store (BL09, Index (DerefOf (Index (WTSY, One)), 0x0B))
                    Store (BL10, Index (DerefOf (Index (WTSY, One)), 0x0C))
                    Store (BL11, Index (DerefOf (Index (WTSY, One)), 0x0D))
                    Store (BL12, Index (DerefOf (Index (WTSY, One)), 0x0E))
                    Store (BL13, Index (DerefOf (Index (WTSY, One)), 0x0F))
                    Store (BL14, Index (DerefOf (Index (WTSY, One)), 0x10))
                    Store (BL15, Index (DerefOf (Index (WTSY, One)), 0x11))
                    Store (BL16, Index (DerefOf (Index (WTSY, One)), 0x12))
                    Return (WTSY)
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    Store (WLBI, Index (DerefOf (Index (WAIY, One)), One))
                    Store (WHBI, Index (DerefOf (Index (WAIY, One)), 0x02))
                    Return (WAIY)
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                    Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                    Return (SADX)
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX)
                }
            }

            If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If (LNotEqual (GGOV (PRST), WPRP))
                    {
                        DL23 ()
                        SGOV (PRST, WPRP)
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    If (LEqual (Arg0, Zero))
                    {
                        Sleep (TBTG)
                    }
                    ElseIf (LEqual (Arg0, One))
                    {
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, And (Not (PFCP), One))
                        Sleep (TFDI)
                    }
                    Else
                    {
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    SPCO (WCLK, One)
                    SGOV (WFCP, PFCP)
                    Sleep (TN2B)
                    SGOV (WBRS, And (Not (PBRS), One))
                    Sleep (TB2R)
                    SGOV (PRST, And (Not (WPRP), One))
                    L23D ()
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Store (Zero, Local0)
                    While (LAnd (LNotEqual (SVID, WSID), LLess (Local0, WSTO)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    If (LEqual (WWEN, 0x02))
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (Zero)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One)
                        SGOV (PRST, And (Not (WPRP), One))
                        SGOV (WBRS, And (Not (PBRS), One))
                        Sleep (0xC8)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x14))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Sleep (0x0A)
                        Notify (PXSX, One)
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (One)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                }
            }

            If (LOr (WIST (), LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT))))
            {
                PowerResource (DRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        DRST
                    })
                }

                Method (IFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        ShiftLeft (CVPR, Zero, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        If (LEqual (CMDT, One))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Return (^^^CNVW.RSTT)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If (LEqual (CMDT, 0x02))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Store (CMDP, ^^^CNVW.RSTT)
                            }

                            Return (Zero)
                        }

                        If (LEqual (CMDT, 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                Return (^^^CNVW.PRRS)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (Zero)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LEqual (CRFI, One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x01                                     
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Store (ACSD, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Store (I5BS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Store (UHBS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        Store (AXMU, Local0)
                        ShiftLeft (Local0, One, Local0)
                        Or (Local0, AXSU, Local0)
                        Store (AXMR, Local1)
                        ShiftLeft (Local1, One, Local1)
                        Or (Local1, AXSR, Local1)
                        ShiftLeft (Local1, 0x02, Local1)
                        Or (Local0, Local1, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (WFRC)
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (WFUC)
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        Return (UNI4)
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        Return (WFIC)
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (LEqual (Arg0, ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d")))
                        {
                            If (LEqual (Arg2, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                           
                                })
                            }

                            If (LEqual (Arg2, One)){}
                            If (LEqual (Arg2, 0x02)){}
                            If (LEqual (Arg2, 0x03))
                            {
                                If (LEqual (WRTO, One)){}
                                ElseIf (LEqual (WRTO, 0x03)){}
                                Else
                                {
                                }

                                Return (WRTO)
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    If (CondRefOf (\_SB.PC00.RP24.PXSX))
    {
        Scope (_SB.PC00.RP24.PXSX)
        {
            OperationRegion (RPXX, SystemMemory, GMIO (^_ADR, _ADR), 0x30)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x2C), 
                SVID,   16
            }

            OperationRegion (FLDR, SystemMemory, Add (GMIO (^_ADR, _ADR), 0x44), 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Case (0x271B8086)
                        {
                            Return (One)
                        }
                        Case (0x27238086)
                        {
                            Return (One)
                        }
                        Case (0x27258086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Case (0x75608086)
                        {
                            Return (One)
                        }
                        Case (0x4D7514C3)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (WIST ())
            {
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Name (SPLX, Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                    Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                    Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                    Return (SPLX)
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                    Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                    Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                    Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                    Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                    Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                    Return (WANX)
                }

                Name (WRDX, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                    Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                    Return (WRDX)
                }

                Name (WRDY, Package (0x02)
                {
                    0x02, 
                    Package (0x2E)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    Store (STXE, Index (DerefOf (Index (WRDY, One)), One))
                    Store (ST10, Index (DerefOf (Index (WRDY, One)), 0x02))
                    Store (ST11, Index (DerefOf (Index (WRDY, One)), 0x03))
                    Store (ST12, Index (DerefOf (Index (WRDY, One)), 0x04))
                    Store (ST13, Index (DerefOf (Index (WRDY, One)), 0x05))
                    Store (ST14, Index (DerefOf (Index (WRDY, One)), 0x06))
                    Store (ST15, Index (DerefOf (Index (WRDY, One)), 0x07))
                    Store (ST16, Index (DerefOf (Index (WRDY, One)), 0x08))
                    Store (ST17, Index (DerefOf (Index (WRDY, One)), 0x09))
                    Store (ST18, Index (DerefOf (Index (WRDY, One)), 0x0A))
                    Store (ST19, Index (DerefOf (Index (WRDY, One)), 0x0B))
                    Store (ST50, Index (DerefOf (Index (WRDY, One)), 0x0C))
                    Store (ST51, Index (DerefOf (Index (WRDY, One)), 0x0D))
                    Store (ST52, Index (DerefOf (Index (WRDY, One)), 0x0E))
                    Store (ST53, Index (DerefOf (Index (WRDY, One)), 0x0F))
                    Store (ST54, Index (DerefOf (Index (WRDY, One)), 0x10))
                    Store (ST55, Index (DerefOf (Index (WRDY, One)), 0x11))
                    Store (ST56, Index (DerefOf (Index (WRDY, One)), 0x12))
                    Store (ST57, Index (DerefOf (Index (WRDY, One)), 0x13))
                    Store (ST58, Index (DerefOf (Index (WRDY, One)), 0x14))
                    Store (ST59, Index (DerefOf (Index (WRDY, One)), 0x15))
                    Store (ST5A, Index (DerefOf (Index (WRDY, One)), 0x16))
                    Store (ST5B, Index (DerefOf (Index (WRDY, One)), 0x17))
                    Store (CD10, Index (DerefOf (Index (WRDY, One)), 0x18))
                    Store (CD11, Index (DerefOf (Index (WRDY, One)), 0x19))
                    Store (CD12, Index (DerefOf (Index (WRDY, One)), 0x1A))
                    Store (CD13, Index (DerefOf (Index (WRDY, One)), 0x1B))
                    Store (CD14, Index (DerefOf (Index (WRDY, One)), 0x1C))
                    Store (CD15, Index (DerefOf (Index (WRDY, One)), 0x1D))
                    Store (CD16, Index (DerefOf (Index (WRDY, One)), 0x1E))
                    Store (CD17, Index (DerefOf (Index (WRDY, One)), 0x1F))
                    Store (CD18, Index (DerefOf (Index (WRDY, One)), 0x20))
                    Store (CD19, Index (DerefOf (Index (WRDY, One)), 0x21))
                    Store (CD1A, Index (DerefOf (Index (WRDY, One)), 0x22))
                    Store (CD20, Index (DerefOf (Index (WRDY, One)), 0x23))
                    Store (CD21, Index (DerefOf (Index (WRDY, One)), 0x24))
                    Store (CD22, Index (DerefOf (Index (WRDY, One)), 0x25))
                    Store (CD23, Index (DerefOf (Index (WRDY, One)), 0x26))
                    Store (CD24, Index (DerefOf (Index (WRDY, One)), 0x27))
                    Store (CD25, Index (DerefOf (Index (WRDY, One)), 0x28))
                    Store (CD26, Index (DerefOf (Index (WRDY, One)), 0x29))
                    Store (CD27, Index (DerefOf (Index (WRDY, One)), 0x2A))
                    Store (CD28, Index (DerefOf (Index (WRDY, One)), 0x2B))
                    Store (CD29, Index (DerefOf (Index (WRDY, One)), 0x2C))
                    Store (CD2A, Index (DerefOf (Index (WRDY, One)), 0x2D))
                    Return (WRDY)
                }

                Name (EWRY, Package (0x02)
                {
                    0x02, 
                    Package (0x87)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    Store (STDE, Index (DerefOf (Index (EWRY, One)), One))
                    Store (STRS, Index (DerefOf (Index (EWRY, One)), 0x02))
                    Store (ST20, Index (DerefOf (Index (EWRY, One)), 0x03))
                    Store (ST21, Index (DerefOf (Index (EWRY, One)), 0x04))
                    Store (ST22, Index (DerefOf (Index (EWRY, One)), 0x05))
                    Store (ST23, Index (DerefOf (Index (EWRY, One)), 0x06))
                    Store (ST24, Index (DerefOf (Index (EWRY, One)), 0x07))
                    Store (ST25, Index (DerefOf (Index (EWRY, One)), 0x08))
                    Store (ST26, Index (DerefOf (Index (EWRY, One)), 0x09))
                    Store (ST27, Index (DerefOf (Index (EWRY, One)), 0x0A))
                    Store (ST28, Index (DerefOf (Index (EWRY, One)), 0x0B))
                    Store (ST29, Index (DerefOf (Index (EWRY, One)), 0x0C))
                    Store (ST60, Index (DerefOf (Index (EWRY, One)), 0x0D))
                    Store (ST61, Index (DerefOf (Index (EWRY, One)), 0x0E))
                    Store (ST62, Index (DerefOf (Index (EWRY, One)), 0x0F))
                    Store (ST63, Index (DerefOf (Index (EWRY, One)), 0x10))
                    Store (ST64, Index (DerefOf (Index (EWRY, One)), 0x11))
                    Store (ST65, Index (DerefOf (Index (EWRY, One)), 0x12))
                    Store (ST66, Index (DerefOf (Index (EWRY, One)), 0x13))
                    Store (ST67, Index (DerefOf (Index (EWRY, One)), 0x14))
                    Store (ST68, Index (DerefOf (Index (EWRY, One)), 0x15))
                    Store (ST69, Index (DerefOf (Index (EWRY, One)), 0x16))
                    Store (ST6A, Index (DerefOf (Index (EWRY, One)), 0x17))
                    Store (ST6B, Index (DerefOf (Index (EWRY, One)), 0x18))
                    Store (ST30, Index (DerefOf (Index (EWRY, One)), 0x19))
                    Store (ST31, Index (DerefOf (Index (EWRY, One)), 0x1A))
                    Store (ST32, Index (DerefOf (Index (EWRY, One)), 0x1B))
                    Store (ST33, Index (DerefOf (Index (EWRY, One)), 0x1C))
                    Store (ST34, Index (DerefOf (Index (EWRY, One)), 0x1D))
                    Store (ST35, Index (DerefOf (Index (EWRY, One)), 0x1E))
                    Store (ST36, Index (DerefOf (Index (EWRY, One)), 0x1F))
                    Store (ST37, Index (DerefOf (Index (EWRY, One)), 0x20))
                    Store (ST38, Index (DerefOf (Index (EWRY, One)), 0x21))
                    Store (ST39, Index (DerefOf (Index (EWRY, One)), 0x22))
                    Store (ST70, Index (DerefOf (Index (EWRY, One)), 0x23))
                    Store (ST71, Index (DerefOf (Index (EWRY, One)), 0x24))
                    Store (ST72, Index (DerefOf (Index (EWRY, One)), 0x25))
                    Store (ST73, Index (DerefOf (Index (EWRY, One)), 0x26))
                    Store (ST74, Index (DerefOf (Index (EWRY, One)), 0x27))
                    Store (ST75, Index (DerefOf (Index (EWRY, One)), 0x28))
                    Store (ST76, Index (DerefOf (Index (EWRY, One)), 0x29))
                    Store (ST77, Index (DerefOf (Index (EWRY, One)), 0x2A))
                    Store (ST78, Index (DerefOf (Index (EWRY, One)), 0x2B))
                    Store (ST79, Index (DerefOf (Index (EWRY, One)), 0x2C))
                    Store (ST7A, Index (DerefOf (Index (EWRY, One)), 0x2D))
                    Store (ST7B, Index (DerefOf (Index (EWRY, One)), 0x2E))
                    Store (ST40, Index (DerefOf (Index (EWRY, One)), 0x2F))
                    Store (ST41, Index (DerefOf (Index (EWRY, One)), 0x30))
                    Store (ST42, Index (DerefOf (Index (EWRY, One)), 0x31))
                    Store (ST43, Index (DerefOf (Index (EWRY, One)), 0x32))
                    Store (ST44, Index (DerefOf (Index (EWRY, One)), 0x33))
                    Store (ST45, Index (DerefOf (Index (EWRY, One)), 0x34))
                    Store (ST46, Index (DerefOf (Index (EWRY, One)), 0x35))
                    Store (ST47, Index (DerefOf (Index (EWRY, One)), 0x36))
                    Store (ST48, Index (DerefOf (Index (EWRY, One)), 0x37))
                    Store (ST49, Index (DerefOf (Index (EWRY, One)), 0x38))
                    Store (ST80, Index (DerefOf (Index (EWRY, One)), 0x39))
                    Store (ST81, Index (DerefOf (Index (EWRY, One)), 0x3A))
                    Store (ST82, Index (DerefOf (Index (EWRY, One)), 0x3B))
                    Store (ST83, Index (DerefOf (Index (EWRY, One)), 0x3C))
                    Store (ST84, Index (DerefOf (Index (EWRY, One)), 0x3D))
                    Store (ST85, Index (DerefOf (Index (EWRY, One)), 0x3E))
                    Store (ST86, Index (DerefOf (Index (EWRY, One)), 0x3F))
                    Store (ST87, Index (DerefOf (Index (EWRY, One)), 0x40))
                    Store (ST88, Index (DerefOf (Index (EWRY, One)), 0x41))
                    Store (ST89, Index (DerefOf (Index (EWRY, One)), 0x42))
                    Store (ST8A, Index (DerefOf (Index (EWRY, One)), 0x43))
                    Store (ST8B, Index (DerefOf (Index (EWRY, One)), 0x44))
                    Store (CD30, Index (DerefOf (Index (EWRY, One)), 0x45))
                    Store (CD31, Index (DerefOf (Index (EWRY, One)), 0x46))
                    Store (CD32, Index (DerefOf (Index (EWRY, One)), 0x47))
                    Store (CD33, Index (DerefOf (Index (EWRY, One)), 0x48))
                    Store (CD34, Index (DerefOf (Index (EWRY, One)), 0x49))
                    Store (CD35, Index (DerefOf (Index (EWRY, One)), 0x4A))
                    Store (CD36, Index (DerefOf (Index (EWRY, One)), 0x4B))
                    Store (CD37, Index (DerefOf (Index (EWRY, One)), 0x4C))
                    Store (CD38, Index (DerefOf (Index (EWRY, One)), 0x4D))
                    Store (CD39, Index (DerefOf (Index (EWRY, One)), 0x4E))
                    Store (CD3A, Index (DerefOf (Index (EWRY, One)), 0x4F))
                    Store (CD3B, Index (DerefOf (Index (EWRY, One)), 0x50))
                    Store (CD3C, Index (DerefOf (Index (EWRY, One)), 0x51))
                    Store (CD3D, Index (DerefOf (Index (EWRY, One)), 0x52))
                    Store (CD3E, Index (DerefOf (Index (EWRY, One)), 0x53))
                    Store (CD3F, Index (DerefOf (Index (EWRY, One)), 0x54))
                    Store (CD40, Index (DerefOf (Index (EWRY, One)), 0x55))
                    Store (CD41, Index (DerefOf (Index (EWRY, One)), 0x56))
                    Store (CD42, Index (DerefOf (Index (EWRY, One)), 0x57))
                    Store (CD43, Index (DerefOf (Index (EWRY, One)), 0x58))
                    Store (CD44, Index (DerefOf (Index (EWRY, One)), 0x59))
                    Store (CD45, Index (DerefOf (Index (EWRY, One)), 0x5A))
                    Store (CD46, Index (DerefOf (Index (EWRY, One)), 0x5B))
                    Store (CD47, Index (DerefOf (Index (EWRY, One)), 0x5C))
                    Store (CD48, Index (DerefOf (Index (EWRY, One)), 0x5D))
                    Store (CD49, Index (DerefOf (Index (EWRY, One)), 0x5E))
                    Store (CD4A, Index (DerefOf (Index (EWRY, One)), 0x5F))
                    Store (CD4B, Index (DerefOf (Index (EWRY, One)), 0x60))
                    Store (CD4C, Index (DerefOf (Index (EWRY, One)), 0x61))
                    Store (CD4D, Index (DerefOf (Index (EWRY, One)), 0x62))
                    Store (CD4E, Index (DerefOf (Index (EWRY, One)), 0x63))
                    Store (CD4F, Index (DerefOf (Index (EWRY, One)), 0x64))
                    Store (CD50, Index (DerefOf (Index (EWRY, One)), 0x65))
                    Store (CD51, Index (DerefOf (Index (EWRY, One)), 0x66))
                    Store (CD52, Index (DerefOf (Index (EWRY, One)), 0x67))
                    Store (CD53, Index (DerefOf (Index (EWRY, One)), 0x68))
                    Store (CD54, Index (DerefOf (Index (EWRY, One)), 0x69))
                    Store (CD55, Index (DerefOf (Index (EWRY, One)), 0x6A))
                    Store (CD56, Index (DerefOf (Index (EWRY, One)), 0x6B))
                    Store (CD57, Index (DerefOf (Index (EWRY, One)), 0x6C))
                    Store (CD58, Index (DerefOf (Index (EWRY, One)), 0x6D))
                    Store (CD59, Index (DerefOf (Index (EWRY, One)), 0x6E))
                    Store (CD5A, Index (DerefOf (Index (EWRY, One)), 0x6F))
                    Store (CD5B, Index (DerefOf (Index (EWRY, One)), 0x70))
                    Store (CD5C, Index (DerefOf (Index (EWRY, One)), 0x71))
                    Store (CD5D, Index (DerefOf (Index (EWRY, One)), 0x72))
                    Store (CD5E, Index (DerefOf (Index (EWRY, One)), 0x73))
                    Store (CD5F, Index (DerefOf (Index (EWRY, One)), 0x74))
                    Store (CD60, Index (DerefOf (Index (EWRY, One)), 0x75))
                    Store (CD61, Index (DerefOf (Index (EWRY, One)), 0x76))
                    Store (CD62, Index (DerefOf (Index (EWRY, One)), 0x77))
                    Store (CD63, Index (DerefOf (Index (EWRY, One)), 0x78))
                    Store (CD64, Index (DerefOf (Index (EWRY, One)), 0x79))
                    Store (CD65, Index (DerefOf (Index (EWRY, One)), 0x7A))
                    Store (CD66, Index (DerefOf (Index (EWRY, One)), 0x7B))
                    Store (CD67, Index (DerefOf (Index (EWRY, One)), 0x7C))
                    Store (CD68, Index (DerefOf (Index (EWRY, One)), 0x7D))
                    Store (CD69, Index (DerefOf (Index (EWRY, One)), 0x7E))
                    Store (CD6A, Index (DerefOf (Index (EWRY, One)), 0x7F))
                    Store (CD6B, Index (DerefOf (Index (EWRY, One)), 0x80))
                    Store (CD6C, Index (DerefOf (Index (EWRY, One)), 0x81))
                    Store (CD6D, Index (DerefOf (Index (EWRY, One)), 0x82))
                    Store (CD6E, Index (DerefOf (Index (EWRY, One)), 0x83))
                    Store (CD6F, Index (DerefOf (Index (EWRY, One)), 0x84))
                    Store (CD70, Index (DerefOf (Index (EWRY, One)), 0x85))
                    Store (CD71, Index (DerefOf (Index (EWRY, One)), 0x86))
                    Return (EWRY)
                }

                Name (WGDY, Package (0x02)
                {
                    0x03, 
                    Package (0x4A)
                    {
                        0x07, 
                        0x03, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    Store (SDGN, Index (DerefOf (Index (WGDY, One)), One))
                    Store (SD11, Index (DerefOf (Index (WGDY, One)), 0x02))
                    Store (SD12, Index (DerefOf (Index (WGDY, One)), 0x03))
                    Store (SD13, Index (DerefOf (Index (WGDY, One)), 0x04))
                    Store (SD14, Index (DerefOf (Index (WGDY, One)), 0x05))
                    Store (SD15, Index (DerefOf (Index (WGDY, One)), 0x06))
                    Store (SD16, Index (DerefOf (Index (WGDY, One)), 0x07))
                    Store (SD17, Index (DerefOf (Index (WGDY, One)), 0x08))
                    Store (SD18, Index (DerefOf (Index (WGDY, One)), 0x09))
                    Store (SD19, Index (DerefOf (Index (WGDY, One)), 0x0A))
                    Store (SD21, Index (DerefOf (Index (WGDY, One)), 0x0B))
                    Store (SD22, Index (DerefOf (Index (WGDY, One)), 0x0C))
                    Store (SD23, Index (DerefOf (Index (WGDY, One)), 0x0D))
                    Store (SD24, Index (DerefOf (Index (WGDY, One)), 0x0E))
                    Store (SD25, Index (DerefOf (Index (WGDY, One)), 0x0F))
                    Store (SD26, Index (DerefOf (Index (WGDY, One)), 0x10))
                    Store (SD27, Index (DerefOf (Index (WGDY, One)), 0x11))
                    Store (SD28, Index (DerefOf (Index (WGDY, One)), 0x12))
                    Store (SD29, Index (DerefOf (Index (WGDY, One)), 0x13))
                    Store (SD31, Index (DerefOf (Index (WGDY, One)), 0x14))
                    Store (SD32, Index (DerefOf (Index (WGDY, One)), 0x15))
                    Store (SD33, Index (DerefOf (Index (WGDY, One)), 0x16))
                    Store (SD34, Index (DerefOf (Index (WGDY, One)), 0x17))
                    Store (SD35, Index (DerefOf (Index (WGDY, One)), 0x18))
                    Store (SD36, Index (DerefOf (Index (WGDY, One)), 0x19))
                    Store (SD37, Index (DerefOf (Index (WGDY, One)), 0x1A))
                    Store (SD38, Index (DerefOf (Index (WGDY, One)), 0x1B))
                    Store (SD39, Index (DerefOf (Index (WGDY, One)), 0x1C))
                    Store (SD41, Index (DerefOf (Index (WGDY, One)), 0x1D))
                    Store (SD42, Index (DerefOf (Index (WGDY, One)), 0x1E))
                    Store (SD43, Index (DerefOf (Index (WGDY, One)), 0x1F))
                    Store (SD44, Index (DerefOf (Index (WGDY, One)), 0x20))
                    Store (SD45, Index (DerefOf (Index (WGDY, One)), 0x21))
                    Store (SD46, Index (DerefOf (Index (WGDY, One)), 0x22))
                    Store (SD47, Index (DerefOf (Index (WGDY, One)), 0x23))
                    Store (SD48, Index (DerefOf (Index (WGDY, One)), 0x24))
                    Store (SD49, Index (DerefOf (Index (WGDY, One)), 0x25))
                    Store (SD51, Index (DerefOf (Index (WGDY, One)), 0x26))
                    Store (SD52, Index (DerefOf (Index (WGDY, One)), 0x27))
                    Store (SD53, Index (DerefOf (Index (WGDY, One)), 0x28))
                    Store (SD54, Index (DerefOf (Index (WGDY, One)), 0x29))
                    Store (SD55, Index (DerefOf (Index (WGDY, One)), 0x2A))
                    Store (SD56, Index (DerefOf (Index (WGDY, One)), 0x2B))
                    Store (SD57, Index (DerefOf (Index (WGDY, One)), 0x2C))
                    Store (SD58, Index (DerefOf (Index (WGDY, One)), 0x2D))
                    Store (SD59, Index (DerefOf (Index (WGDY, One)), 0x2E))
                    Store (SD61, Index (DerefOf (Index (WGDY, One)), 0x2F))
                    Store (SD62, Index (DerefOf (Index (WGDY, One)), 0x30))
                    Store (SD63, Index (DerefOf (Index (WGDY, One)), 0x31))
                    Store (SD64, Index (DerefOf (Index (WGDY, One)), 0x32))
                    Store (SD65, Index (DerefOf (Index (WGDY, One)), 0x33))
                    Store (SD66, Index (DerefOf (Index (WGDY, One)), 0x34))
                    Store (SD67, Index (DerefOf (Index (WGDY, One)), 0x35))
                    Store (SD68, Index (DerefOf (Index (WGDY, One)), 0x36))
                    Store (SD69, Index (DerefOf (Index (WGDY, One)), 0x37))
                    Store (SD71, Index (DerefOf (Index (WGDY, One)), 0x38))
                    Store (SD72, Index (DerefOf (Index (WGDY, One)), 0x39))
                    Store (SD73, Index (DerefOf (Index (WGDY, One)), 0x3A))
                    Store (SD74, Index (DerefOf (Index (WGDY, One)), 0x3B))
                    Store (SD75, Index (DerefOf (Index (WGDY, One)), 0x3C))
                    Store (SD76, Index (DerefOf (Index (WGDY, One)), 0x3D))
                    Store (SD77, Index (DerefOf (Index (WGDY, One)), 0x3E))
                    Store (SD78, Index (DerefOf (Index (WGDY, One)), 0x3F))
                    Store (SD79, Index (DerefOf (Index (WGDY, One)), 0x40))
                    Store (SD81, Index (DerefOf (Index (WGDY, One)), 0x41))
                    Store (SD82, Index (DerefOf (Index (WGDY, One)), 0x42))
                    Store (SD83, Index (DerefOf (Index (WGDY, One)), 0x43))
                    Store (SD84, Index (DerefOf (Index (WGDY, One)), 0x44))
                    Store (SD85, Index (DerefOf (Index (WGDY, One)), 0x45))
                    Store (SD86, Index (DerefOf (Index (WGDY, One)), 0x46))
                    Store (SD87, Index (DerefOf (Index (WGDY, One)), 0x47))
                    Store (SD88, Index (DerefOf (Index (WGDY, One)), 0x48))
                    Store (SD89, Index (DerefOf (Index (WGDY, One)), 0x49))
                    Return (WGDY)
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                    Return (ECKY)
                }

                Name (PPAY, Package (0x02)
                {
                    One, 
                    Package (0x18)
                    {
                        0x07, 
                        Zero, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x18, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28, 
                        0x28
                    }
                })
                Method (PPAG, 0, Serialized)
                {
                    Store (WAGE, Index (DerefOf (Index (PPAY, One)), One))
                    Store (AGA1, Index (DerefOf (Index (PPAY, One)), 0x02))
                    Store (AGA2, Index (DerefOf (Index (PPAY, One)), 0x03))
                    Store (AGA3, Index (DerefOf (Index (PPAY, One)), 0x04))
                    Store (AGA4, Index (DerefOf (Index (PPAY, One)), 0x05))
                    Store (AGA5, Index (DerefOf (Index (PPAY, One)), 0x06))
                    Store (AGA6, Index (DerefOf (Index (PPAY, One)), 0x07))
                    Store (AGA7, Index (DerefOf (Index (PPAY, One)), 0x08))
                    Store (AGA8, Index (DerefOf (Index (PPAY, One)), 0x09))
                    Store (AGA9, Index (DerefOf (Index (PPAY, One)), 0x0A))
                    Store (AGAA, Index (DerefOf (Index (PPAY, One)), 0x0B))
                    Store (AGAB, Index (DerefOf (Index (PPAY, One)), 0x0C))
                    Store (AGB1, Index (DerefOf (Index (PPAY, One)), 0x0D))
                    Store (AGB2, Index (DerefOf (Index (PPAY, One)), 0x0E))
                    Store (AGB3, Index (DerefOf (Index (PPAY, One)), 0x0F))
                    Store (AGB4, Index (DerefOf (Index (PPAY, One)), 0x10))
                    Store (AGB5, Index (DerefOf (Index (PPAY, One)), 0x11))
                    Store (AGB6, Index (DerefOf (Index (PPAY, One)), 0x12))
                    Store (AGB7, Index (DerefOf (Index (PPAY, One)), 0x13))
                    Store (AGB8, Index (DerefOf (Index (PPAY, One)), 0x14))
                    Store (AGB9, Index (DerefOf (Index (PPAY, One)), 0x15))
                    Store (AGBA, Index (DerefOf (Index (PPAY, One)), 0x16))
                    Store (AGBB, Index (DerefOf (Index (PPAY, One)), 0x17))
                    Return (PPAY)
                }

                Name (WTSY, Package (0x02)
                {
                    One, 
                    Package (0x13)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WTAS, 0, Serialized)
                {
                    Store (WTSV, Index (DerefOf (Index (WTSY, One)), One))
                    Store (WTLE, Index (DerefOf (Index (WTSY, One)), 0x02))
                    Store (BL01, Index (DerefOf (Index (WTSY, One)), 0x03))
                    Store (BL02, Index (DerefOf (Index (WTSY, One)), 0x04))
                    Store (BL03, Index (DerefOf (Index (WTSY, One)), 0x05))
                    Store (BL04, Index (DerefOf (Index (WTSY, One)), 0x06))
                    Store (BL05, Index (DerefOf (Index (WTSY, One)), 0x07))
                    Store (BL06, Index (DerefOf (Index (WTSY, One)), 0x08))
                    Store (BL07, Index (DerefOf (Index (WTSY, One)), 0x09))
                    Store (BL08, Index (DerefOf (Index (WTSY, One)), 0x0A))
                    Store (BL09, Index (DerefOf (Index (WTSY, One)), 0x0B))
                    Store (BL10, Index (DerefOf (Index (WTSY, One)), 0x0C))
                    Store (BL11, Index (DerefOf (Index (WTSY, One)), 0x0D))
                    Store (BL12, Index (DerefOf (Index (WTSY, One)), 0x0E))
                    Store (BL13, Index (DerefOf (Index (WTSY, One)), 0x0F))
                    Store (BL14, Index (DerefOf (Index (WTSY, One)), 0x10))
                    Store (BL15, Index (DerefOf (Index (WTSY, One)), 0x11))
                    Store (BL16, Index (DerefOf (Index (WTSY, One)), 0x12))
                    Return (WTSY)
                }

                Name (WAIY, Package (0x02)
                {
                    Zero, 
                    Package (0x04)
                    {
                        0x07, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (WAIS, 0, Serialized)
                {
                    Store (WLBI, Index (DerefOf (Index (WAIY, One)), One))
                    Store (WHBI, Index (DerefOf (Index (WAIY, One)), 0x02))
                    Return (WAIY)
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                    Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                    Return (SADX)
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX)
                }
            }

            If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
            {
                Method (FHRF, 1, NotSerialized)
                {
                    If (LNotEqual (GGOV (PRST), WPRP))
                    {
                        DL23 ()
                        SGOV (PRST, WPRP)
                    }
                    Else
                    {
                        ADBG ("Assume WWAN DL23() is already done")
                    }

                    Sleep (TR2B)
                    SGOV (WBRS, PBRS)
                    If (LEqual (Arg0, Zero))
                    {
                        Sleep (TBTG)
                    }
                    ElseIf (LEqual (Arg0, One))
                    {
                        SPCO (WCLK, Zero)
                        Sleep (TB2F)
                        SGOV (WFCP, And (Not (PFCP), One))
                        Sleep (TFDI)
                    }
                    Else
                    {
                    }
                }

                Method (SHRF, 0, NotSerialized)
                {
                    PSD0 (SLOT)
                    SPCO (WCLK, One)
                    SGOV (WFCP, PFCP)
                    Sleep (TN2B)
                    SGOV (WBRS, And (Not (PBRS), One))
                    Sleep (TB2R)
                    SGOV (PRST, And (Not (WPRP), One))
                    L23D ()
                }

                Method (DOSV, 0, NotSerialized)
                {
                    Store (Zero, Local0)
                    While (LAnd (LNotEqual (SVID, WSID), LLess (Local0, WSTO)))
                    {
                        Increment (Local0)
                        Sleep (One)
                    }
                }

                Method (_RST, 0, Serialized)  // _RST: Device Reset
                {
                    If (LEqual (WWEN, 0x02))
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (Zero)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                    Else
                    {
                        SGOV (WBRS, PBRS)
                        Sleep (0xC8)
                        Notify (PXSX, One)
                        SGOV (PRST, And (Not (WPRP), One))
                        SGOV (WBRS, And (Not (PBRS), One))
                        Sleep (0xC8)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x14))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Sleep (0x0A)
                        Notify (PXSX, One)
                    }
                }

                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, Serialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, Serialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        Store (Acquire (WWMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            FHRF (One)
                            SHRF ()
                            Release (WWMT)
                            DOSV ()
                        }
                    }
                }
            }

            If (LOr (WIST (), LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT))))
            {
                PowerResource (DRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        If (And (DCAP, 0x10000000))
                        {
                            Store (DCTR, Local0)
                            Or (Local0, 0x8000, Local0)
                            Store (Local0, DCTR)
                        }
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If (WIST ())
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        DRST
                    })
                }

                Method (IFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        ShiftLeft (CVPR, Zero, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        CreateWordField (Arg3, Zero, CMDT)
                        CreateWordField (Arg3, 0x02, CMDP)
                        If (LEqual (CMDT, One))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Return (^^^CNVW.RSTT)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If (LEqual (CMDT, 0x02))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                            {
                                Store (CMDP, ^^^CNVW.RSTT)
                            }

                            Return (Zero)
                        }

                        If (LEqual (CMDT, 0x03))
                        {
                            If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                            {
                                Return (^^^CNVW.PRRS)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (Zero)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LEqual (CRFI, One))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Return (Zero)
                }

                Method (IDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (EFUN, 4, Serialized)
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0xFF, 0x01                                     
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Store (ACSD, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Store (I5BS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Store (UHBS, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        Store (AXMU, Local0)
                        ShiftLeft (Local0, One, Local0)
                        Or (Local0, AXSU, Local0)
                        Store (AXMR, Local1)
                        ShiftLeft (Local1, One, Local1)
                        Or (Local1, AXSR, Local1)
                        ShiftLeft (Local1, 0x02, Local1)
                        Or (Local0, Local1, Local0)
                        Return (Local0)
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (WFRC)
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (WFUC)
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        Return (UNI4)
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        Return (WFIC)
                    }

                    Return (Zero)
                }

                Method (EDSM, 1, Serialized)
                {
                    If (LEqual (Arg0, ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (WIST ())
                    {
                        If (EDSM (Arg0))
                        {
                            Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                        }

                        If (IDSM (Arg0))
                        {
                            Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                    {
                        If (LEqual (Arg0, ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d")))
                        {
                            If (LEqual (Arg2, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x09                                           
                                })
                            }

                            If (LEqual (Arg2, One)){}
                            If (LEqual (Arg2, 0x02)){}
                            If (LEqual (Arg2, 0x03))
                            {
                                If (LEqual (WRTO, One)){}
                                ElseIf (LEqual (WRTO, 0x03)){}
                                Else
                                {
                                }

                                Return (WRTO)
                            }
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }
            }
        }
    }

    If (LEqual (PCHS, 0x04))
    {
        If (CondRefOf (\_SB.PC00.RP25.PXSX))
        {
            Scope (_SB.PC00.RP25.PXSX)
            {
                OperationRegion (RPXX, SystemMemory, GMIO (^_ADR, _ADR), 0x30)
                Field (RPXX, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x2C), 
                    SVID,   16
                }

                OperationRegion (FLDR, SystemMemory, Add (GMIO (^_ADR, _ADR), 0x44), 0x06)
                Field (FLDR, ByteAcc, NoLock, Preserve)
                {
                    DCAP,   32, 
                    DCTR,   16
                }

                Method (WIST, 0, Serialized)
                {
                    If (CondRefOf (VDID))
                    {
                        Switch (ToInteger (VDID))
                        {
                            Case (0x25268086)
                            {
                                Return (One)
                            }
                            Case (0x271B8086)
                            {
                                Return (One)
                            }
                            Case (0x27238086)
                            {
                                Return (One)
                            }
                            Case (0x27258086)
                            {
                                Return (One)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (WWST, 0, Serialized)
                {
                    If (CondRefOf (VDID))
                    {
                        Switch (ToInteger (VDID))
                        {
                            Case (0x73608086)
                            {
                                Return (One)
                            }
                            Case (0x75608086)
                            {
                                Return (One)
                            }
                            Case (0x4D7514C3)
                            {
                                Return (One)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                If (WIST ())
                {
                    PowerResource (WRST, 0x05, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (One)
                        }

                        Method (_ON, 0, NotSerialized)  // _ON_: Power On
                        {
                        }

                        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                        {
                        }

                        Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                        {
                            If (And (DCAP, 0x10000000))
                            {
                                Store (DCTR, Local0)
                                Or (Local0, 0x8000, Local0)
                                Store (Local0, DCTR)
                            }
                        }
                    }

                    Name (SPLX, Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0x80000000, 
                            0x80000000, 
                            0x80000000
                        }
                    })
                    Method (SPLC, 0, Serialized)
                    {
                        Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                        Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                        Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                        Return (SPLX)
                    }

                    Name (WANX, Package (0x03)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0x80000000, 
                            0x80000000, 
                            0x80000000
                        }, 

                        Package (0x03)
                        {
                            0x80000000, 
                            0x80000000, 
                            0x80000000
                        }
                    })
                    Method (WAND, 0, Serialized)
                    {
                        Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                        Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                        Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                        Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                        Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                        Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                        Return (WANX)
                    }

                    Name (WRDX, Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x80000000, 
                            0x8000
                        }
                    })
                    Method (WRDD, 0, Serialized)
                    {
                        Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                        Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                        Return (WRDX)
                    }

                    Name (WRDY, Package (0x02)
                    {
                        0x02, 
                        Package (0x2E)
                        {
                            0x07, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80
                        }
                    })
                    Method (WRDS, 0, Serialized)
                    {
                        Store (STXE, Index (DerefOf (Index (WRDY, One)), One))
                        Store (ST10, Index (DerefOf (Index (WRDY, One)), 0x02))
                        Store (ST11, Index (DerefOf (Index (WRDY, One)), 0x03))
                        Store (ST12, Index (DerefOf (Index (WRDY, One)), 0x04))
                        Store (ST13, Index (DerefOf (Index (WRDY, One)), 0x05))
                        Store (ST14, Index (DerefOf (Index (WRDY, One)), 0x06))
                        Store (ST15, Index (DerefOf (Index (WRDY, One)), 0x07))
                        Store (ST16, Index (DerefOf (Index (WRDY, One)), 0x08))
                        Store (ST17, Index (DerefOf (Index (WRDY, One)), 0x09))
                        Store (ST18, Index (DerefOf (Index (WRDY, One)), 0x0A))
                        Store (ST19, Index (DerefOf (Index (WRDY, One)), 0x0B))
                        Store (ST50, Index (DerefOf (Index (WRDY, One)), 0x0C))
                        Store (ST51, Index (DerefOf (Index (WRDY, One)), 0x0D))
                        Store (ST52, Index (DerefOf (Index (WRDY, One)), 0x0E))
                        Store (ST53, Index (DerefOf (Index (WRDY, One)), 0x0F))
                        Store (ST54, Index (DerefOf (Index (WRDY, One)), 0x10))
                        Store (ST55, Index (DerefOf (Index (WRDY, One)), 0x11))
                        Store (ST56, Index (DerefOf (Index (WRDY, One)), 0x12))
                        Store (ST57, Index (DerefOf (Index (WRDY, One)), 0x13))
                        Store (ST58, Index (DerefOf (Index (WRDY, One)), 0x14))
                        Store (ST59, Index (DerefOf (Index (WRDY, One)), 0x15))
                        Store (ST5A, Index (DerefOf (Index (WRDY, One)), 0x16))
                        Store (ST5B, Index (DerefOf (Index (WRDY, One)), 0x17))
                        Store (CD10, Index (DerefOf (Index (WRDY, One)), 0x18))
                        Store (CD11, Index (DerefOf (Index (WRDY, One)), 0x19))
                        Store (CD12, Index (DerefOf (Index (WRDY, One)), 0x1A))
                        Store (CD13, Index (DerefOf (Index (WRDY, One)), 0x1B))
                        Store (CD14, Index (DerefOf (Index (WRDY, One)), 0x1C))
                        Store (CD15, Index (DerefOf (Index (WRDY, One)), 0x1D))
                        Store (CD16, Index (DerefOf (Index (WRDY, One)), 0x1E))
                        Store (CD17, Index (DerefOf (Index (WRDY, One)), 0x1F))
                        Store (CD18, Index (DerefOf (Index (WRDY, One)), 0x20))
                        Store (CD19, Index (DerefOf (Index (WRDY, One)), 0x21))
                        Store (CD1A, Index (DerefOf (Index (WRDY, One)), 0x22))
                        Store (CD20, Index (DerefOf (Index (WRDY, One)), 0x23))
                        Store (CD21, Index (DerefOf (Index (WRDY, One)), 0x24))
                        Store (CD22, Index (DerefOf (Index (WRDY, One)), 0x25))
                        Store (CD23, Index (DerefOf (Index (WRDY, One)), 0x26))
                        Store (CD24, Index (DerefOf (Index (WRDY, One)), 0x27))
                        Store (CD25, Index (DerefOf (Index (WRDY, One)), 0x28))
                        Store (CD26, Index (DerefOf (Index (WRDY, One)), 0x29))
                        Store (CD27, Index (DerefOf (Index (WRDY, One)), 0x2A))
                        Store (CD28, Index (DerefOf (Index (WRDY, One)), 0x2B))
                        Store (CD29, Index (DerefOf (Index (WRDY, One)), 0x2C))
                        Store (CD2A, Index (DerefOf (Index (WRDY, One)), 0x2D))
                        Return (WRDY)
                    }

                    Name (EWRY, Package (0x02)
                    {
                        0x02, 
                        Package (0x87)
                        {
                            0x07, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80
                        }
                    })
                    Method (EWRD, 0, Serialized)
                    {
                        Store (STDE, Index (DerefOf (Index (EWRY, One)), One))
                        Store (STRS, Index (DerefOf (Index (EWRY, One)), 0x02))
                        Store (ST20, Index (DerefOf (Index (EWRY, One)), 0x03))
                        Store (ST21, Index (DerefOf (Index (EWRY, One)), 0x04))
                        Store (ST22, Index (DerefOf (Index (EWRY, One)), 0x05))
                        Store (ST23, Index (DerefOf (Index (EWRY, One)), 0x06))
                        Store (ST24, Index (DerefOf (Index (EWRY, One)), 0x07))
                        Store (ST25, Index (DerefOf (Index (EWRY, One)), 0x08))
                        Store (ST26, Index (DerefOf (Index (EWRY, One)), 0x09))
                        Store (ST27, Index (DerefOf (Index (EWRY, One)), 0x0A))
                        Store (ST28, Index (DerefOf (Index (EWRY, One)), 0x0B))
                        Store (ST29, Index (DerefOf (Index (EWRY, One)), 0x0C))
                        Store (ST60, Index (DerefOf (Index (EWRY, One)), 0x0D))
                        Store (ST61, Index (DerefOf (Index (EWRY, One)), 0x0E))
                        Store (ST62, Index (DerefOf (Index (EWRY, One)), 0x0F))
                        Store (ST63, Index (DerefOf (Index (EWRY, One)), 0x10))
                        Store (ST64, Index (DerefOf (Index (EWRY, One)), 0x11))
                        Store (ST65, Index (DerefOf (Index (EWRY, One)), 0x12))
                        Store (ST66, Index (DerefOf (Index (EWRY, One)), 0x13))
                        Store (ST67, Index (DerefOf (Index (EWRY, One)), 0x14))
                        Store (ST68, Index (DerefOf (Index (EWRY, One)), 0x15))
                        Store (ST69, Index (DerefOf (Index (EWRY, One)), 0x16))
                        Store (ST6A, Index (DerefOf (Index (EWRY, One)), 0x17))
                        Store (ST6B, Index (DerefOf (Index (EWRY, One)), 0x18))
                        Store (ST30, Index (DerefOf (Index (EWRY, One)), 0x19))
                        Store (ST31, Index (DerefOf (Index (EWRY, One)), 0x1A))
                        Store (ST32, Index (DerefOf (Index (EWRY, One)), 0x1B))
                        Store (ST33, Index (DerefOf (Index (EWRY, One)), 0x1C))
                        Store (ST34, Index (DerefOf (Index (EWRY, One)), 0x1D))
                        Store (ST35, Index (DerefOf (Index (EWRY, One)), 0x1E))
                        Store (ST36, Index (DerefOf (Index (EWRY, One)), 0x1F))
                        Store (ST37, Index (DerefOf (Index (EWRY, One)), 0x20))
                        Store (ST38, Index (DerefOf (Index (EWRY, One)), 0x21))
                        Store (ST39, Index (DerefOf (Index (EWRY, One)), 0x22))
                        Store (ST70, Index (DerefOf (Index (EWRY, One)), 0x23))
                        Store (ST71, Index (DerefOf (Index (EWRY, One)), 0x24))
                        Store (ST72, Index (DerefOf (Index (EWRY, One)), 0x25))
                        Store (ST73, Index (DerefOf (Index (EWRY, One)), 0x26))
                        Store (ST74, Index (DerefOf (Index (EWRY, One)), 0x27))
                        Store (ST75, Index (DerefOf (Index (EWRY, One)), 0x28))
                        Store (ST76, Index (DerefOf (Index (EWRY, One)), 0x29))
                        Store (ST77, Index (DerefOf (Index (EWRY, One)), 0x2A))
                        Store (ST78, Index (DerefOf (Index (EWRY, One)), 0x2B))
                        Store (ST79, Index (DerefOf (Index (EWRY, One)), 0x2C))
                        Store (ST7A, Index (DerefOf (Index (EWRY, One)), 0x2D))
                        Store (ST7B, Index (DerefOf (Index (EWRY, One)), 0x2E))
                        Store (ST40, Index (DerefOf (Index (EWRY, One)), 0x2F))
                        Store (ST41, Index (DerefOf (Index (EWRY, One)), 0x30))
                        Store (ST42, Index (DerefOf (Index (EWRY, One)), 0x31))
                        Store (ST43, Index (DerefOf (Index (EWRY, One)), 0x32))
                        Store (ST44, Index (DerefOf (Index (EWRY, One)), 0x33))
                        Store (ST45, Index (DerefOf (Index (EWRY, One)), 0x34))
                        Store (ST46, Index (DerefOf (Index (EWRY, One)), 0x35))
                        Store (ST47, Index (DerefOf (Index (EWRY, One)), 0x36))
                        Store (ST48, Index (DerefOf (Index (EWRY, One)), 0x37))
                        Store (ST49, Index (DerefOf (Index (EWRY, One)), 0x38))
                        Store (ST80, Index (DerefOf (Index (EWRY, One)), 0x39))
                        Store (ST81, Index (DerefOf (Index (EWRY, One)), 0x3A))
                        Store (ST82, Index (DerefOf (Index (EWRY, One)), 0x3B))
                        Store (ST83, Index (DerefOf (Index (EWRY, One)), 0x3C))
                        Store (ST84, Index (DerefOf (Index (EWRY, One)), 0x3D))
                        Store (ST85, Index (DerefOf (Index (EWRY, One)), 0x3E))
                        Store (ST86, Index (DerefOf (Index (EWRY, One)), 0x3F))
                        Store (ST87, Index (DerefOf (Index (EWRY, One)), 0x40))
                        Store (ST88, Index (DerefOf (Index (EWRY, One)), 0x41))
                        Store (ST89, Index (DerefOf (Index (EWRY, One)), 0x42))
                        Store (ST8A, Index (DerefOf (Index (EWRY, One)), 0x43))
                        Store (ST8B, Index (DerefOf (Index (EWRY, One)), 0x44))
                        Store (CD30, Index (DerefOf (Index (EWRY, One)), 0x45))
                        Store (CD31, Index (DerefOf (Index (EWRY, One)), 0x46))
                        Store (CD32, Index (DerefOf (Index (EWRY, One)), 0x47))
                        Store (CD33, Index (DerefOf (Index (EWRY, One)), 0x48))
                        Store (CD34, Index (DerefOf (Index (EWRY, One)), 0x49))
                        Store (CD35, Index (DerefOf (Index (EWRY, One)), 0x4A))
                        Store (CD36, Index (DerefOf (Index (EWRY, One)), 0x4B))
                        Store (CD37, Index (DerefOf (Index (EWRY, One)), 0x4C))
                        Store (CD38, Index (DerefOf (Index (EWRY, One)), 0x4D))
                        Store (CD39, Index (DerefOf (Index (EWRY, One)), 0x4E))
                        Store (CD3A, Index (DerefOf (Index (EWRY, One)), 0x4F))
                        Store (CD3B, Index (DerefOf (Index (EWRY, One)), 0x50))
                        Store (CD3C, Index (DerefOf (Index (EWRY, One)), 0x51))
                        Store (CD3D, Index (DerefOf (Index (EWRY, One)), 0x52))
                        Store (CD3E, Index (DerefOf (Index (EWRY, One)), 0x53))
                        Store (CD3F, Index (DerefOf (Index (EWRY, One)), 0x54))
                        Store (CD40, Index (DerefOf (Index (EWRY, One)), 0x55))
                        Store (CD41, Index (DerefOf (Index (EWRY, One)), 0x56))
                        Store (CD42, Index (DerefOf (Index (EWRY, One)), 0x57))
                        Store (CD43, Index (DerefOf (Index (EWRY, One)), 0x58))
                        Store (CD44, Index (DerefOf (Index (EWRY, One)), 0x59))
                        Store (CD45, Index (DerefOf (Index (EWRY, One)), 0x5A))
                        Store (CD46, Index (DerefOf (Index (EWRY, One)), 0x5B))
                        Store (CD47, Index (DerefOf (Index (EWRY, One)), 0x5C))
                        Store (CD48, Index (DerefOf (Index (EWRY, One)), 0x5D))
                        Store (CD49, Index (DerefOf (Index (EWRY, One)), 0x5E))
                        Store (CD4A, Index (DerefOf (Index (EWRY, One)), 0x5F))
                        Store (CD4B, Index (DerefOf (Index (EWRY, One)), 0x60))
                        Store (CD4C, Index (DerefOf (Index (EWRY, One)), 0x61))
                        Store (CD4D, Index (DerefOf (Index (EWRY, One)), 0x62))
                        Store (CD4E, Index (DerefOf (Index (EWRY, One)), 0x63))
                        Store (CD4F, Index (DerefOf (Index (EWRY, One)), 0x64))
                        Store (CD50, Index (DerefOf (Index (EWRY, One)), 0x65))
                        Store (CD51, Index (DerefOf (Index (EWRY, One)), 0x66))
                        Store (CD52, Index (DerefOf (Index (EWRY, One)), 0x67))
                        Store (CD53, Index (DerefOf (Index (EWRY, One)), 0x68))
                        Store (CD54, Index (DerefOf (Index (EWRY, One)), 0x69))
                        Store (CD55, Index (DerefOf (Index (EWRY, One)), 0x6A))
                        Store (CD56, Index (DerefOf (Index (EWRY, One)), 0x6B))
                        Store (CD57, Index (DerefOf (Index (EWRY, One)), 0x6C))
                        Store (CD58, Index (DerefOf (Index (EWRY, One)), 0x6D))
                        Store (CD59, Index (DerefOf (Index (EWRY, One)), 0x6E))
                        Store (CD5A, Index (DerefOf (Index (EWRY, One)), 0x6F))
                        Store (CD5B, Index (DerefOf (Index (EWRY, One)), 0x70))
                        Store (CD5C, Index (DerefOf (Index (EWRY, One)), 0x71))
                        Store (CD5D, Index (DerefOf (Index (EWRY, One)), 0x72))
                        Store (CD5E, Index (DerefOf (Index (EWRY, One)), 0x73))
                        Store (CD5F, Index (DerefOf (Index (EWRY, One)), 0x74))
                        Store (CD60, Index (DerefOf (Index (EWRY, One)), 0x75))
                        Store (CD61, Index (DerefOf (Index (EWRY, One)), 0x76))
                        Store (CD62, Index (DerefOf (Index (EWRY, One)), 0x77))
                        Store (CD63, Index (DerefOf (Index (EWRY, One)), 0x78))
                        Store (CD64, Index (DerefOf (Index (EWRY, One)), 0x79))
                        Store (CD65, Index (DerefOf (Index (EWRY, One)), 0x7A))
                        Store (CD66, Index (DerefOf (Index (EWRY, One)), 0x7B))
                        Store (CD67, Index (DerefOf (Index (EWRY, One)), 0x7C))
                        Store (CD68, Index (DerefOf (Index (EWRY, One)), 0x7D))
                        Store (CD69, Index (DerefOf (Index (EWRY, One)), 0x7E))
                        Store (CD6A, Index (DerefOf (Index (EWRY, One)), 0x7F))
                        Store (CD6B, Index (DerefOf (Index (EWRY, One)), 0x80))
                        Store (CD6C, Index (DerefOf (Index (EWRY, One)), 0x81))
                        Store (CD6D, Index (DerefOf (Index (EWRY, One)), 0x82))
                        Store (CD6E, Index (DerefOf (Index (EWRY, One)), 0x83))
                        Store (CD6F, Index (DerefOf (Index (EWRY, One)), 0x84))
                        Store (CD70, Index (DerefOf (Index (EWRY, One)), 0x85))
                        Store (CD71, Index (DerefOf (Index (EWRY, One)), 0x86))
                        Return (EWRY)
                    }

                    Name (WGDY, Package (0x02)
                    {
                        0x03, 
                        Package (0x4A)
                        {
                            0x07, 
                            0x03, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80
                        }
                    })
                    Method (WGDS, 0, Serialized)
                    {
                        Store (SDGN, Index (DerefOf (Index (WGDY, One)), One))
                        Store (SD11, Index (DerefOf (Index (WGDY, One)), 0x02))
                        Store (SD12, Index (DerefOf (Index (WGDY, One)), 0x03))
                        Store (SD13, Index (DerefOf (Index (WGDY, One)), 0x04))
                        Store (SD14, Index (DerefOf (Index (WGDY, One)), 0x05))
                        Store (SD15, Index (DerefOf (Index (WGDY, One)), 0x06))
                        Store (SD16, Index (DerefOf (Index (WGDY, One)), 0x07))
                        Store (SD17, Index (DerefOf (Index (WGDY, One)), 0x08))
                        Store (SD18, Index (DerefOf (Index (WGDY, One)), 0x09))
                        Store (SD19, Index (DerefOf (Index (WGDY, One)), 0x0A))
                        Store (SD21, Index (DerefOf (Index (WGDY, One)), 0x0B))
                        Store (SD22, Index (DerefOf (Index (WGDY, One)), 0x0C))
                        Store (SD23, Index (DerefOf (Index (WGDY, One)), 0x0D))
                        Store (SD24, Index (DerefOf (Index (WGDY, One)), 0x0E))
                        Store (SD25, Index (DerefOf (Index (WGDY, One)), 0x0F))
                        Store (SD26, Index (DerefOf (Index (WGDY, One)), 0x10))
                        Store (SD27, Index (DerefOf (Index (WGDY, One)), 0x11))
                        Store (SD28, Index (DerefOf (Index (WGDY, One)), 0x12))
                        Store (SD29, Index (DerefOf (Index (WGDY, One)), 0x13))
                        Store (SD31, Index (DerefOf (Index (WGDY, One)), 0x14))
                        Store (SD32, Index (DerefOf (Index (WGDY, One)), 0x15))
                        Store (SD33, Index (DerefOf (Index (WGDY, One)), 0x16))
                        Store (SD34, Index (DerefOf (Index (WGDY, One)), 0x17))
                        Store (SD35, Index (DerefOf (Index (WGDY, One)), 0x18))
                        Store (SD36, Index (DerefOf (Index (WGDY, One)), 0x19))
                        Store (SD37, Index (DerefOf (Index (WGDY, One)), 0x1A))
                        Store (SD38, Index (DerefOf (Index (WGDY, One)), 0x1B))
                        Store (SD39, Index (DerefOf (Index (WGDY, One)), 0x1C))
                        Store (SD41, Index (DerefOf (Index (WGDY, One)), 0x1D))
                        Store (SD42, Index (DerefOf (Index (WGDY, One)), 0x1E))
                        Store (SD43, Index (DerefOf (Index (WGDY, One)), 0x1F))
                        Store (SD44, Index (DerefOf (Index (WGDY, One)), 0x20))
                        Store (SD45, Index (DerefOf (Index (WGDY, One)), 0x21))
                        Store (SD46, Index (DerefOf (Index (WGDY, One)), 0x22))
                        Store (SD47, Index (DerefOf (Index (WGDY, One)), 0x23))
                        Store (SD48, Index (DerefOf (Index (WGDY, One)), 0x24))
                        Store (SD49, Index (DerefOf (Index (WGDY, One)), 0x25))
                        Store (SD51, Index (DerefOf (Index (WGDY, One)), 0x26))
                        Store (SD52, Index (DerefOf (Index (WGDY, One)), 0x27))
                        Store (SD53, Index (DerefOf (Index (WGDY, One)), 0x28))
                        Store (SD54, Index (DerefOf (Index (WGDY, One)), 0x29))
                        Store (SD55, Index (DerefOf (Index (WGDY, One)), 0x2A))
                        Store (SD56, Index (DerefOf (Index (WGDY, One)), 0x2B))
                        Store (SD57, Index (DerefOf (Index (WGDY, One)), 0x2C))
                        Store (SD58, Index (DerefOf (Index (WGDY, One)), 0x2D))
                        Store (SD59, Index (DerefOf (Index (WGDY, One)), 0x2E))
                        Store (SD61, Index (DerefOf (Index (WGDY, One)), 0x2F))
                        Store (SD62, Index (DerefOf (Index (WGDY, One)), 0x30))
                        Store (SD63, Index (DerefOf (Index (WGDY, One)), 0x31))
                        Store (SD64, Index (DerefOf (Index (WGDY, One)), 0x32))
                        Store (SD65, Index (DerefOf (Index (WGDY, One)), 0x33))
                        Store (SD66, Index (DerefOf (Index (WGDY, One)), 0x34))
                        Store (SD67, Index (DerefOf (Index (WGDY, One)), 0x35))
                        Store (SD68, Index (DerefOf (Index (WGDY, One)), 0x36))
                        Store (SD69, Index (DerefOf (Index (WGDY, One)), 0x37))
                        Store (SD71, Index (DerefOf (Index (WGDY, One)), 0x38))
                        Store (SD72, Index (DerefOf (Index (WGDY, One)), 0x39))
                        Store (SD73, Index (DerefOf (Index (WGDY, One)), 0x3A))
                        Store (SD74, Index (DerefOf (Index (WGDY, One)), 0x3B))
                        Store (SD75, Index (DerefOf (Index (WGDY, One)), 0x3C))
                        Store (SD76, Index (DerefOf (Index (WGDY, One)), 0x3D))
                        Store (SD77, Index (DerefOf (Index (WGDY, One)), 0x3E))
                        Store (SD78, Index (DerefOf (Index (WGDY, One)), 0x3F))
                        Store (SD79, Index (DerefOf (Index (WGDY, One)), 0x40))
                        Store (SD81, Index (DerefOf (Index (WGDY, One)), 0x41))
                        Store (SD82, Index (DerefOf (Index (WGDY, One)), 0x42))
                        Store (SD83, Index (DerefOf (Index (WGDY, One)), 0x43))
                        Store (SD84, Index (DerefOf (Index (WGDY, One)), 0x44))
                        Store (SD85, Index (DerefOf (Index (WGDY, One)), 0x45))
                        Store (SD86, Index (DerefOf (Index (WGDY, One)), 0x46))
                        Store (SD87, Index (DerefOf (Index (WGDY, One)), 0x47))
                        Store (SD88, Index (DerefOf (Index (WGDY, One)), 0x48))
                        Store (SD89, Index (DerefOf (Index (WGDY, One)), 0x49))
                        Return (WGDY)
                    }

                    Name (ECKY, Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            Zero
                        }
                    })
                    Method (ECKV, 0, Serialized)
                    {
                        Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                        Return (ECKY)
                    }

                    Name (PPAY, Package (0x02)
                    {
                        One, 
                        Package (0x18)
                        {
                            0x07, 
                            Zero, 
                            0x18, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x18, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28
                        }
                    })
                    Method (PPAG, 0, Serialized)
                    {
                        Store (WAGE, Index (DerefOf (Index (PPAY, One)), One))
                        Store (AGA1, Index (DerefOf (Index (PPAY, One)), 0x02))
                        Store (AGA2, Index (DerefOf (Index (PPAY, One)), 0x03))
                        Store (AGA3, Index (DerefOf (Index (PPAY, One)), 0x04))
                        Store (AGA4, Index (DerefOf (Index (PPAY, One)), 0x05))
                        Store (AGA5, Index (DerefOf (Index (PPAY, One)), 0x06))
                        Store (AGA6, Index (DerefOf (Index (PPAY, One)), 0x07))
                        Store (AGA7, Index (DerefOf (Index (PPAY, One)), 0x08))
                        Store (AGA8, Index (DerefOf (Index (PPAY, One)), 0x09))
                        Store (AGA9, Index (DerefOf (Index (PPAY, One)), 0x0A))
                        Store (AGAA, Index (DerefOf (Index (PPAY, One)), 0x0B))
                        Store (AGAB, Index (DerefOf (Index (PPAY, One)), 0x0C))
                        Store (AGB1, Index (DerefOf (Index (PPAY, One)), 0x0D))
                        Store (AGB2, Index (DerefOf (Index (PPAY, One)), 0x0E))
                        Store (AGB3, Index (DerefOf (Index (PPAY, One)), 0x0F))
                        Store (AGB4, Index (DerefOf (Index (PPAY, One)), 0x10))
                        Store (AGB5, Index (DerefOf (Index (PPAY, One)), 0x11))
                        Store (AGB6, Index (DerefOf (Index (PPAY, One)), 0x12))
                        Store (AGB7, Index (DerefOf (Index (PPAY, One)), 0x13))
                        Store (AGB8, Index (DerefOf (Index (PPAY, One)), 0x14))
                        Store (AGB9, Index (DerefOf (Index (PPAY, One)), 0x15))
                        Store (AGBA, Index (DerefOf (Index (PPAY, One)), 0x16))
                        Store (AGBB, Index (DerefOf (Index (PPAY, One)), 0x17))
                        Return (PPAY)
                    }

                    Name (WTSY, Package (0x02)
                    {
                        One, 
                        Package (0x13)
                        {
                            0x07, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    })
                    Method (WTAS, 0, Serialized)
                    {
                        Store (WTSV, Index (DerefOf (Index (WTSY, One)), One))
                        Store (WTLE, Index (DerefOf (Index (WTSY, One)), 0x02))
                        Store (BL01, Index (DerefOf (Index (WTSY, One)), 0x03))
                        Store (BL02, Index (DerefOf (Index (WTSY, One)), 0x04))
                        Store (BL03, Index (DerefOf (Index (WTSY, One)), 0x05))
                        Store (BL04, Index (DerefOf (Index (WTSY, One)), 0x06))
                        Store (BL05, Index (DerefOf (Index (WTSY, One)), 0x07))
                        Store (BL06, Index (DerefOf (Index (WTSY, One)), 0x08))
                        Store (BL07, Index (DerefOf (Index (WTSY, One)), 0x09))
                        Store (BL08, Index (DerefOf (Index (WTSY, One)), 0x0A))
                        Store (BL09, Index (DerefOf (Index (WTSY, One)), 0x0B))
                        Store (BL10, Index (DerefOf (Index (WTSY, One)), 0x0C))
                        Store (BL11, Index (DerefOf (Index (WTSY, One)), 0x0D))
                        Store (BL12, Index (DerefOf (Index (WTSY, One)), 0x0E))
                        Store (BL13, Index (DerefOf (Index (WTSY, One)), 0x0F))
                        Store (BL14, Index (DerefOf (Index (WTSY, One)), 0x10))
                        Store (BL15, Index (DerefOf (Index (WTSY, One)), 0x11))
                        Store (BL16, Index (DerefOf (Index (WTSY, One)), 0x12))
                        Return (WTSY)
                    }

                    Name (WAIY, Package (0x02)
                    {
                        Zero, 
                        Package (0x04)
                        {
                            0x07, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    })
                    Method (WAIS, 0, Serialized)
                    {
                        Store (WLBI, Index (DerefOf (Index (WAIY, One)), One))
                        Store (WHBI, Index (DerefOf (Index (WAIY, One)), 0x02))
                        Return (WAIY)
                    }

                    Name (SADX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            0x80000000
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            0x80000000
                        }
                    })
                    Method (SADS, 0, Serialized)
                    {
                        Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                        Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                        Return (SADX)
                    }

                    Name (GPCX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }
                    })
                    Method (GPC, 0, Serialized)
                    {
                        Return (GPCX)
                    }
                }

                If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                {
                    Method (FHRF, 1, NotSerialized)
                    {
                        If (LNotEqual (GGOV (PRST), WPRP))
                        {
                            DL23 ()
                            SGOV (PRST, WPRP)
                        }
                        Else
                        {
                            ADBG ("Assume WWAN DL23() is already done")
                        }

                        Sleep (TR2B)
                        SGOV (WBRS, PBRS)
                        If (LEqual (Arg0, Zero))
                        {
                            Sleep (TBTG)
                        }
                        ElseIf (LEqual (Arg0, One))
                        {
                            SPCO (WCLK, Zero)
                            Sleep (TB2F)
                            SGOV (WFCP, And (Not (PFCP), One))
                            Sleep (TFDI)
                        }
                        Else
                        {
                        }
                    }

                    Method (SHRF, 0, NotSerialized)
                    {
                        PSD0 (SLOT)
                        SPCO (WCLK, One)
                        SGOV (WFCP, PFCP)
                        Sleep (TN2B)
                        SGOV (WBRS, And (Not (PBRS), One))
                        Sleep (TB2R)
                        SGOV (PRST, And (Not (WPRP), One))
                        L23D ()
                    }

                    Method (DOSV, 0, NotSerialized)
                    {
                        Store (Zero, Local0)
                        While (LAnd (LNotEqual (SVID, WSID), LLess (Local0, WSTO)))
                        {
                            Increment (Local0)
                            Sleep (One)
                        }
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        If (LEqual (WWEN, 0x02))
                        {
                            Store (Acquire (WWMT, 0x03E8), Local0)
                            If (LEqual (Local0, Zero))
                            {
                                FHRF (Zero)
                                SHRF ()
                                Release (WWMT)
                                DOSV ()
                            }
                        }
                        Else
                        {
                            SGOV (WBRS, PBRS)
                            Sleep (0xC8)
                            Notify (PXSX, One)
                            SGOV (PRST, And (Not (WPRP), One))
                            SGOV (WBRS, And (Not (PBRS), One))
                            Sleep (0xC8)
                            Store (Zero, Local0)
                            While (LEqual (LASX, Zero))
                            {
                                If (LGreater (Local0, 0x14))
                                {
                                    Break
                                }

                                Sleep (0x10)
                                Increment (Local0)
                            }

                            Sleep (0x0A)
                            Notify (PXSX, One)
                        }
                    }

                    PowerResource (MRST, 0x05, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Return (One)
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                        }

                        Method (_RST, 0, Serialized)  // _RST: Device Reset
                        {
                            Store (Acquire (WWMT, 0x03E8), Local0)
                            If (LEqual (Local0, Zero))
                            {
                                FHRF (One)
                                SHRF ()
                                Release (WWMT)
                                DOSV ()
                            }
                        }
                    }
                }

                If (LOr (WIST (), LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT))))
                {
                    PowerResource (DRST, 0x05, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (One)
                        }

                        Method (_ON, 0, NotSerialized)  // _ON_: Power On
                        {
                        }

                        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                        {
                        }

                        Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                        {
                            If (And (DCAP, 0x10000000))
                            {
                                Store (DCTR, Local0)
                                Or (Local0, 0x8000, Local0)
                                Store (Local0, DCTR)
                            }
                        }
                    }

                    Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                    {
                        If (WIST ())
                        {
                            If (CondRefOf (WRST))
                            {
                                Return (Package (0x01)
                                {
                                    WRST
                                })
                            }
                        }

                        If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                        {
                            If (CondRefOf (MRST))
                            {
                                Return (Package (0x01)
                                {
                                    MRST
                                })
                            }
                        }

                        Return (Package (0x01)
                        {
                            DRST
                        })
                    }

                    Method (IFUN, 4, Serialized)
                    {
                        If (LEqual (Arg2, Zero))
                        {
                            If (LEqual (Arg1, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                           
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If (LEqual (Arg2, One))
                        {
                            ShiftLeft (CVPR, Zero, Local0)
                            Return (Local0)
                        }

                        If (LEqual (Arg2, 0x02))
                        {
                            CreateWordField (Arg3, Zero, CMDT)
                            CreateWordField (Arg3, 0x02, CMDP)
                            If (LEqual (CMDT, One))
                            {
                                If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                                {
                                    Return (^^^CNVW.RSTT)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If (LEqual (CMDT, 0x02))
                            {
                                If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                                {
                                    Store (CMDP, ^^^CNVW.RSTT)
                                }

                                Return (Zero)
                            }

                            If (LEqual (CMDT, 0x03))
                            {
                                If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                                {
                                    Return (^^^CNVW.PRRS)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Return (Zero)
                        }

                        If (LEqual (Arg2, 0x03))
                        {
                            If (LEqual (CRFI, One))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        Return (Zero)
                    }

                    Method (IDSM, 1, Serialized)
                    {
                        If (LEqual (Arg0, ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd")))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (EFUN, 4, Serialized)
                    {
                        If (LEqual (Arg2, Zero))
                        {
                            If (LEqual (Arg1, Zero))
                            {
                                Return (Buffer (0x02)
                                {
                                     0xFF, 0x01                                     
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If (LEqual (Arg2, One))
                        {
                            Store (ACSD, Local0)
                            Return (Local0)
                        }

                        If (LEqual (Arg2, 0x02))
                        {
                            Store (I5BS, Local0)
                            Return (Local0)
                        }

                        If (LEqual (Arg2, 0x03))
                        {
                            Store (UHBS, Local0)
                            Return (Local0)
                        }

                        If (LEqual (Arg2, 0x06))
                        {
                            Store (AXMU, Local0)
                            ShiftLeft (Local0, One, Local0)
                            Or (Local0, AXSU, Local0)
                            Store (AXMR, Local1)
                            ShiftLeft (Local1, One, Local1)
                            Or (Local1, AXSR, Local1)
                            ShiftLeft (Local1, 0x02, Local1)
                            Or (Local0, Local1, Local0)
                            Return (Local0)
                        }

                        If (LEqual (Arg2, 0x04))
                        {
                            Return (WFRC)
                        }

                        If (LEqual (Arg2, 0x05))
                        {
                            Return (WFUC)
                        }

                        If (LEqual (Arg2, 0x07))
                        {
                            Return (UNI4)
                        }

                        If (LEqual (Arg2, 0x08))
                        {
                            Return (WFIC)
                        }

                        Return (Zero)
                    }

                    Method (EDSM, 1, Serialized)
                    {
                        If (LEqual (Arg0, ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (WIST ())
                        {
                            If (EDSM (Arg0))
                            {
                                Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                            }

                            If (IDSM (Arg0))
                            {
                                Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                            }
                        }

                        If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                        {
                            If (LEqual (Arg0, ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d")))
                            {
                                If (LEqual (Arg2, Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x09                                           
                                    })
                                }

                                If (LEqual (Arg2, One)){}
                                If (LEqual (Arg2, 0x02)){}
                                If (LEqual (Arg2, 0x03))
                                {
                                    If (LEqual (WRTO, One)){}
                                    ElseIf (LEqual (WRTO, 0x03)){}
                                    Else
                                    {
                                    }

                                    Return (WRTO)
                                }
                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }
            }
        }

        If (CondRefOf (\_SB.PC00.RP26.PXSX))
        {
            Scope (_SB.PC00.RP26.PXSX)
            {
                OperationRegion (RPXX, SystemMemory, GMIO (^_ADR, _ADR), 0x30)
                Field (RPXX, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x2C), 
                    SVID,   16
                }

                OperationRegion (FLDR, SystemMemory, Add (GMIO (^_ADR, _ADR), 0x44), 0x06)
                Field (FLDR, ByteAcc, NoLock, Preserve)
                {
                    DCAP,   32, 
                    DCTR,   16
                }

                Method (WIST, 0, Serialized)
                {
                    If (CondRefOf (VDID))
                    {
                        Switch (ToInteger (VDID))
                        {
                            Case (0x25268086)
                            {
                                Return (One)
                            }
                            Case (0x271B8086)
                            {
                                Return (One)
                            }
                            Case (0x27238086)
                            {
                                Return (One)
                            }
                            Case (0x27258086)
                            {
                                Return (One)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (WWST, 0, Serialized)
                {
                    If (CondRefOf (VDID))
                    {
                        Switch (ToInteger (VDID))
                        {
                            Case (0x73608086)
                            {
                                Return (One)
                            }
                            Case (0x75608086)
                            {
                                Return (One)
                            }
                            Case (0x4D7514C3)
                            {
                                Return (One)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                If (WIST ())
                {
                    PowerResource (WRST, 0x05, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (One)
                        }

                        Method (_ON, 0, NotSerialized)  // _ON_: Power On
                        {
                        }

                        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                        {
                        }

                        Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                        {
                            If (And (DCAP, 0x10000000))
                            {
                                Store (DCTR, Local0)
                                Or (Local0, 0x8000, Local0)
                                Store (Local0, DCTR)
                            }
                        }
                    }

                    Name (SPLX, Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0x80000000, 
                            0x80000000, 
                            0x80000000
                        }
                    })
                    Method (SPLC, 0, Serialized)
                    {
                        Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                        Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                        Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                        Return (SPLX)
                    }

                    Name (WANX, Package (0x03)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0x80000000, 
                            0x80000000, 
                            0x80000000
                        }, 

                        Package (0x03)
                        {
                            0x80000000, 
                            0x80000000, 
                            0x80000000
                        }
                    })
                    Method (WAND, 0, Serialized)
                    {
                        Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                        Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                        Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                        Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                        Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                        Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                        Return (WANX)
                    }

                    Name (WRDX, Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x80000000, 
                            0x8000
                        }
                    })
                    Method (WRDD, 0, Serialized)
                    {
                        Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                        Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                        Return (WRDX)
                    }

                    Name (WRDY, Package (0x02)
                    {
                        0x02, 
                        Package (0x2E)
                        {
                            0x07, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80
                        }
                    })
                    Method (WRDS, 0, Serialized)
                    {
                        Store (STXE, Index (DerefOf (Index (WRDY, One)), One))
                        Store (ST10, Index (DerefOf (Index (WRDY, One)), 0x02))
                        Store (ST11, Index (DerefOf (Index (WRDY, One)), 0x03))
                        Store (ST12, Index (DerefOf (Index (WRDY, One)), 0x04))
                        Store (ST13, Index (DerefOf (Index (WRDY, One)), 0x05))
                        Store (ST14, Index (DerefOf (Index (WRDY, One)), 0x06))
                        Store (ST15, Index (DerefOf (Index (WRDY, One)), 0x07))
                        Store (ST16, Index (DerefOf (Index (WRDY, One)), 0x08))
                        Store (ST17, Index (DerefOf (Index (WRDY, One)), 0x09))
                        Store (ST18, Index (DerefOf (Index (WRDY, One)), 0x0A))
                        Store (ST19, Index (DerefOf (Index (WRDY, One)), 0x0B))
                        Store (ST50, Index (DerefOf (Index (WRDY, One)), 0x0C))
                        Store (ST51, Index (DerefOf (Index (WRDY, One)), 0x0D))
                        Store (ST52, Index (DerefOf (Index (WRDY, One)), 0x0E))
                        Store (ST53, Index (DerefOf (Index (WRDY, One)), 0x0F))
                        Store (ST54, Index (DerefOf (Index (WRDY, One)), 0x10))
                        Store (ST55, Index (DerefOf (Index (WRDY, One)), 0x11))
                        Store (ST56, Index (DerefOf (Index (WRDY, One)), 0x12))
                        Store (ST57, Index (DerefOf (Index (WRDY, One)), 0x13))
                        Store (ST58, Index (DerefOf (Index (WRDY, One)), 0x14))
                        Store (ST59, Index (DerefOf (Index (WRDY, One)), 0x15))
                        Store (ST5A, Index (DerefOf (Index (WRDY, One)), 0x16))
                        Store (ST5B, Index (DerefOf (Index (WRDY, One)), 0x17))
                        Store (CD10, Index (DerefOf (Index (WRDY, One)), 0x18))
                        Store (CD11, Index (DerefOf (Index (WRDY, One)), 0x19))
                        Store (CD12, Index (DerefOf (Index (WRDY, One)), 0x1A))
                        Store (CD13, Index (DerefOf (Index (WRDY, One)), 0x1B))
                        Store (CD14, Index (DerefOf (Index (WRDY, One)), 0x1C))
                        Store (CD15, Index (DerefOf (Index (WRDY, One)), 0x1D))
                        Store (CD16, Index (DerefOf (Index (WRDY, One)), 0x1E))
                        Store (CD17, Index (DerefOf (Index (WRDY, One)), 0x1F))
                        Store (CD18, Index (DerefOf (Index (WRDY, One)), 0x20))
                        Store (CD19, Index (DerefOf (Index (WRDY, One)), 0x21))
                        Store (CD1A, Index (DerefOf (Index (WRDY, One)), 0x22))
                        Store (CD20, Index (DerefOf (Index (WRDY, One)), 0x23))
                        Store (CD21, Index (DerefOf (Index (WRDY, One)), 0x24))
                        Store (CD22, Index (DerefOf (Index (WRDY, One)), 0x25))
                        Store (CD23, Index (DerefOf (Index (WRDY, One)), 0x26))
                        Store (CD24, Index (DerefOf (Index (WRDY, One)), 0x27))
                        Store (CD25, Index (DerefOf (Index (WRDY, One)), 0x28))
                        Store (CD26, Index (DerefOf (Index (WRDY, One)), 0x29))
                        Store (CD27, Index (DerefOf (Index (WRDY, One)), 0x2A))
                        Store (CD28, Index (DerefOf (Index (WRDY, One)), 0x2B))
                        Store (CD29, Index (DerefOf (Index (WRDY, One)), 0x2C))
                        Store (CD2A, Index (DerefOf (Index (WRDY, One)), 0x2D))
                        Return (WRDY)
                    }

                    Name (EWRY, Package (0x02)
                    {
                        0x02, 
                        Package (0x87)
                        {
                            0x07, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80
                        }
                    })
                    Method (EWRD, 0, Serialized)
                    {
                        Store (STDE, Index (DerefOf (Index (EWRY, One)), One))
                        Store (STRS, Index (DerefOf (Index (EWRY, One)), 0x02))
                        Store (ST20, Index (DerefOf (Index (EWRY, One)), 0x03))
                        Store (ST21, Index (DerefOf (Index (EWRY, One)), 0x04))
                        Store (ST22, Index (DerefOf (Index (EWRY, One)), 0x05))
                        Store (ST23, Index (DerefOf (Index (EWRY, One)), 0x06))
                        Store (ST24, Index (DerefOf (Index (EWRY, One)), 0x07))
                        Store (ST25, Index (DerefOf (Index (EWRY, One)), 0x08))
                        Store (ST26, Index (DerefOf (Index (EWRY, One)), 0x09))
                        Store (ST27, Index (DerefOf (Index (EWRY, One)), 0x0A))
                        Store (ST28, Index (DerefOf (Index (EWRY, One)), 0x0B))
                        Store (ST29, Index (DerefOf (Index (EWRY, One)), 0x0C))
                        Store (ST60, Index (DerefOf (Index (EWRY, One)), 0x0D))
                        Store (ST61, Index (DerefOf (Index (EWRY, One)), 0x0E))
                        Store (ST62, Index (DerefOf (Index (EWRY, One)), 0x0F))
                        Store (ST63, Index (DerefOf (Index (EWRY, One)), 0x10))
                        Store (ST64, Index (DerefOf (Index (EWRY, One)), 0x11))
                        Store (ST65, Index (DerefOf (Index (EWRY, One)), 0x12))
                        Store (ST66, Index (DerefOf (Index (EWRY, One)), 0x13))
                        Store (ST67, Index (DerefOf (Index (EWRY, One)), 0x14))
                        Store (ST68, Index (DerefOf (Index (EWRY, One)), 0x15))
                        Store (ST69, Index (DerefOf (Index (EWRY, One)), 0x16))
                        Store (ST6A, Index (DerefOf (Index (EWRY, One)), 0x17))
                        Store (ST6B, Index (DerefOf (Index (EWRY, One)), 0x18))
                        Store (ST30, Index (DerefOf (Index (EWRY, One)), 0x19))
                        Store (ST31, Index (DerefOf (Index (EWRY, One)), 0x1A))
                        Store (ST32, Index (DerefOf (Index (EWRY, One)), 0x1B))
                        Store (ST33, Index (DerefOf (Index (EWRY, One)), 0x1C))
                        Store (ST34, Index (DerefOf (Index (EWRY, One)), 0x1D))
                        Store (ST35, Index (DerefOf (Index (EWRY, One)), 0x1E))
                        Store (ST36, Index (DerefOf (Index (EWRY, One)), 0x1F))
                        Store (ST37, Index (DerefOf (Index (EWRY, One)), 0x20))
                        Store (ST38, Index (DerefOf (Index (EWRY, One)), 0x21))
                        Store (ST39, Index (DerefOf (Index (EWRY, One)), 0x22))
                        Store (ST70, Index (DerefOf (Index (EWRY, One)), 0x23))
                        Store (ST71, Index (DerefOf (Index (EWRY, One)), 0x24))
                        Store (ST72, Index (DerefOf (Index (EWRY, One)), 0x25))
                        Store (ST73, Index (DerefOf (Index (EWRY, One)), 0x26))
                        Store (ST74, Index (DerefOf (Index (EWRY, One)), 0x27))
                        Store (ST75, Index (DerefOf (Index (EWRY, One)), 0x28))
                        Store (ST76, Index (DerefOf (Index (EWRY, One)), 0x29))
                        Store (ST77, Index (DerefOf (Index (EWRY, One)), 0x2A))
                        Store (ST78, Index (DerefOf (Index (EWRY, One)), 0x2B))
                        Store (ST79, Index (DerefOf (Index (EWRY, One)), 0x2C))
                        Store (ST7A, Index (DerefOf (Index (EWRY, One)), 0x2D))
                        Store (ST7B, Index (DerefOf (Index (EWRY, One)), 0x2E))
                        Store (ST40, Index (DerefOf (Index (EWRY, One)), 0x2F))
                        Store (ST41, Index (DerefOf (Index (EWRY, One)), 0x30))
                        Store (ST42, Index (DerefOf (Index (EWRY, One)), 0x31))
                        Store (ST43, Index (DerefOf (Index (EWRY, One)), 0x32))
                        Store (ST44, Index (DerefOf (Index (EWRY, One)), 0x33))
                        Store (ST45, Index (DerefOf (Index (EWRY, One)), 0x34))
                        Store (ST46, Index (DerefOf (Index (EWRY, One)), 0x35))
                        Store (ST47, Index (DerefOf (Index (EWRY, One)), 0x36))
                        Store (ST48, Index (DerefOf (Index (EWRY, One)), 0x37))
                        Store (ST49, Index (DerefOf (Index (EWRY, One)), 0x38))
                        Store (ST80, Index (DerefOf (Index (EWRY, One)), 0x39))
                        Store (ST81, Index (DerefOf (Index (EWRY, One)), 0x3A))
                        Store (ST82, Index (DerefOf (Index (EWRY, One)), 0x3B))
                        Store (ST83, Index (DerefOf (Index (EWRY, One)), 0x3C))
                        Store (ST84, Index (DerefOf (Index (EWRY, One)), 0x3D))
                        Store (ST85, Index (DerefOf (Index (EWRY, One)), 0x3E))
                        Store (ST86, Index (DerefOf (Index (EWRY, One)), 0x3F))
                        Store (ST87, Index (DerefOf (Index (EWRY, One)), 0x40))
                        Store (ST88, Index (DerefOf (Index (EWRY, One)), 0x41))
                        Store (ST89, Index (DerefOf (Index (EWRY, One)), 0x42))
                        Store (ST8A, Index (DerefOf (Index (EWRY, One)), 0x43))
                        Store (ST8B, Index (DerefOf (Index (EWRY, One)), 0x44))
                        Store (CD30, Index (DerefOf (Index (EWRY, One)), 0x45))
                        Store (CD31, Index (DerefOf (Index (EWRY, One)), 0x46))
                        Store (CD32, Index (DerefOf (Index (EWRY, One)), 0x47))
                        Store (CD33, Index (DerefOf (Index (EWRY, One)), 0x48))
                        Store (CD34, Index (DerefOf (Index (EWRY, One)), 0x49))
                        Store (CD35, Index (DerefOf (Index (EWRY, One)), 0x4A))
                        Store (CD36, Index (DerefOf (Index (EWRY, One)), 0x4B))
                        Store (CD37, Index (DerefOf (Index (EWRY, One)), 0x4C))
                        Store (CD38, Index (DerefOf (Index (EWRY, One)), 0x4D))
                        Store (CD39, Index (DerefOf (Index (EWRY, One)), 0x4E))
                        Store (CD3A, Index (DerefOf (Index (EWRY, One)), 0x4F))
                        Store (CD3B, Index (DerefOf (Index (EWRY, One)), 0x50))
                        Store (CD3C, Index (DerefOf (Index (EWRY, One)), 0x51))
                        Store (CD3D, Index (DerefOf (Index (EWRY, One)), 0x52))
                        Store (CD3E, Index (DerefOf (Index (EWRY, One)), 0x53))
                        Store (CD3F, Index (DerefOf (Index (EWRY, One)), 0x54))
                        Store (CD40, Index (DerefOf (Index (EWRY, One)), 0x55))
                        Store (CD41, Index (DerefOf (Index (EWRY, One)), 0x56))
                        Store (CD42, Index (DerefOf (Index (EWRY, One)), 0x57))
                        Store (CD43, Index (DerefOf (Index (EWRY, One)), 0x58))
                        Store (CD44, Index (DerefOf (Index (EWRY, One)), 0x59))
                        Store (CD45, Index (DerefOf (Index (EWRY, One)), 0x5A))
                        Store (CD46, Index (DerefOf (Index (EWRY, One)), 0x5B))
                        Store (CD47, Index (DerefOf (Index (EWRY, One)), 0x5C))
                        Store (CD48, Index (DerefOf (Index (EWRY, One)), 0x5D))
                        Store (CD49, Index (DerefOf (Index (EWRY, One)), 0x5E))
                        Store (CD4A, Index (DerefOf (Index (EWRY, One)), 0x5F))
                        Store (CD4B, Index (DerefOf (Index (EWRY, One)), 0x60))
                        Store (CD4C, Index (DerefOf (Index (EWRY, One)), 0x61))
                        Store (CD4D, Index (DerefOf (Index (EWRY, One)), 0x62))
                        Store (CD4E, Index (DerefOf (Index (EWRY, One)), 0x63))
                        Store (CD4F, Index (DerefOf (Index (EWRY, One)), 0x64))
                        Store (CD50, Index (DerefOf (Index (EWRY, One)), 0x65))
                        Store (CD51, Index (DerefOf (Index (EWRY, One)), 0x66))
                        Store (CD52, Index (DerefOf (Index (EWRY, One)), 0x67))
                        Store (CD53, Index (DerefOf (Index (EWRY, One)), 0x68))
                        Store (CD54, Index (DerefOf (Index (EWRY, One)), 0x69))
                        Store (CD55, Index (DerefOf (Index (EWRY, One)), 0x6A))
                        Store (CD56, Index (DerefOf (Index (EWRY, One)), 0x6B))
                        Store (CD57, Index (DerefOf (Index (EWRY, One)), 0x6C))
                        Store (CD58, Index (DerefOf (Index (EWRY, One)), 0x6D))
                        Store (CD59, Index (DerefOf (Index (EWRY, One)), 0x6E))
                        Store (CD5A, Index (DerefOf (Index (EWRY, One)), 0x6F))
                        Store (CD5B, Index (DerefOf (Index (EWRY, One)), 0x70))
                        Store (CD5C, Index (DerefOf (Index (EWRY, One)), 0x71))
                        Store (CD5D, Index (DerefOf (Index (EWRY, One)), 0x72))
                        Store (CD5E, Index (DerefOf (Index (EWRY, One)), 0x73))
                        Store (CD5F, Index (DerefOf (Index (EWRY, One)), 0x74))
                        Store (CD60, Index (DerefOf (Index (EWRY, One)), 0x75))
                        Store (CD61, Index (DerefOf (Index (EWRY, One)), 0x76))
                        Store (CD62, Index (DerefOf (Index (EWRY, One)), 0x77))
                        Store (CD63, Index (DerefOf (Index (EWRY, One)), 0x78))
                        Store (CD64, Index (DerefOf (Index (EWRY, One)), 0x79))
                        Store (CD65, Index (DerefOf (Index (EWRY, One)), 0x7A))
                        Store (CD66, Index (DerefOf (Index (EWRY, One)), 0x7B))
                        Store (CD67, Index (DerefOf (Index (EWRY, One)), 0x7C))
                        Store (CD68, Index (DerefOf (Index (EWRY, One)), 0x7D))
                        Store (CD69, Index (DerefOf (Index (EWRY, One)), 0x7E))
                        Store (CD6A, Index (DerefOf (Index (EWRY, One)), 0x7F))
                        Store (CD6B, Index (DerefOf (Index (EWRY, One)), 0x80))
                        Store (CD6C, Index (DerefOf (Index (EWRY, One)), 0x81))
                        Store (CD6D, Index (DerefOf (Index (EWRY, One)), 0x82))
                        Store (CD6E, Index (DerefOf (Index (EWRY, One)), 0x83))
                        Store (CD6F, Index (DerefOf (Index (EWRY, One)), 0x84))
                        Store (CD70, Index (DerefOf (Index (EWRY, One)), 0x85))
                        Store (CD71, Index (DerefOf (Index (EWRY, One)), 0x86))
                        Return (EWRY)
                    }

                    Name (WGDY, Package (0x02)
                    {
                        0x03, 
                        Package (0x4A)
                        {
                            0x07, 
                            0x03, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80
                        }
                    })
                    Method (WGDS, 0, Serialized)
                    {
                        Store (SDGN, Index (DerefOf (Index (WGDY, One)), One))
                        Store (SD11, Index (DerefOf (Index (WGDY, One)), 0x02))
                        Store (SD12, Index (DerefOf (Index (WGDY, One)), 0x03))
                        Store (SD13, Index (DerefOf (Index (WGDY, One)), 0x04))
                        Store (SD14, Index (DerefOf (Index (WGDY, One)), 0x05))
                        Store (SD15, Index (DerefOf (Index (WGDY, One)), 0x06))
                        Store (SD16, Index (DerefOf (Index (WGDY, One)), 0x07))
                        Store (SD17, Index (DerefOf (Index (WGDY, One)), 0x08))
                        Store (SD18, Index (DerefOf (Index (WGDY, One)), 0x09))
                        Store (SD19, Index (DerefOf (Index (WGDY, One)), 0x0A))
                        Store (SD21, Index (DerefOf (Index (WGDY, One)), 0x0B))
                        Store (SD22, Index (DerefOf (Index (WGDY, One)), 0x0C))
                        Store (SD23, Index (DerefOf (Index (WGDY, One)), 0x0D))
                        Store (SD24, Index (DerefOf (Index (WGDY, One)), 0x0E))
                        Store (SD25, Index (DerefOf (Index (WGDY, One)), 0x0F))
                        Store (SD26, Index (DerefOf (Index (WGDY, One)), 0x10))
                        Store (SD27, Index (DerefOf (Index (WGDY, One)), 0x11))
                        Store (SD28, Index (DerefOf (Index (WGDY, One)), 0x12))
                        Store (SD29, Index (DerefOf (Index (WGDY, One)), 0x13))
                        Store (SD31, Index (DerefOf (Index (WGDY, One)), 0x14))
                        Store (SD32, Index (DerefOf (Index (WGDY, One)), 0x15))
                        Store (SD33, Index (DerefOf (Index (WGDY, One)), 0x16))
                        Store (SD34, Index (DerefOf (Index (WGDY, One)), 0x17))
                        Store (SD35, Index (DerefOf (Index (WGDY, One)), 0x18))
                        Store (SD36, Index (DerefOf (Index (WGDY, One)), 0x19))
                        Store (SD37, Index (DerefOf (Index (WGDY, One)), 0x1A))
                        Store (SD38, Index (DerefOf (Index (WGDY, One)), 0x1B))
                        Store (SD39, Index (DerefOf (Index (WGDY, One)), 0x1C))
                        Store (SD41, Index (DerefOf (Index (WGDY, One)), 0x1D))
                        Store (SD42, Index (DerefOf (Index (WGDY, One)), 0x1E))
                        Store (SD43, Index (DerefOf (Index (WGDY, One)), 0x1F))
                        Store (SD44, Index (DerefOf (Index (WGDY, One)), 0x20))
                        Store (SD45, Index (DerefOf (Index (WGDY, One)), 0x21))
                        Store (SD46, Index (DerefOf (Index (WGDY, One)), 0x22))
                        Store (SD47, Index (DerefOf (Index (WGDY, One)), 0x23))
                        Store (SD48, Index (DerefOf (Index (WGDY, One)), 0x24))
                        Store (SD49, Index (DerefOf (Index (WGDY, One)), 0x25))
                        Store (SD51, Index (DerefOf (Index (WGDY, One)), 0x26))
                        Store (SD52, Index (DerefOf (Index (WGDY, One)), 0x27))
                        Store (SD53, Index (DerefOf (Index (WGDY, One)), 0x28))
                        Store (SD54, Index (DerefOf (Index (WGDY, One)), 0x29))
                        Store (SD55, Index (DerefOf (Index (WGDY, One)), 0x2A))
                        Store (SD56, Index (DerefOf (Index (WGDY, One)), 0x2B))
                        Store (SD57, Index (DerefOf (Index (WGDY, One)), 0x2C))
                        Store (SD58, Index (DerefOf (Index (WGDY, One)), 0x2D))
                        Store (SD59, Index (DerefOf (Index (WGDY, One)), 0x2E))
                        Store (SD61, Index (DerefOf (Index (WGDY, One)), 0x2F))
                        Store (SD62, Index (DerefOf (Index (WGDY, One)), 0x30))
                        Store (SD63, Index (DerefOf (Index (WGDY, One)), 0x31))
                        Store (SD64, Index (DerefOf (Index (WGDY, One)), 0x32))
                        Store (SD65, Index (DerefOf (Index (WGDY, One)), 0x33))
                        Store (SD66, Index (DerefOf (Index (WGDY, One)), 0x34))
                        Store (SD67, Index (DerefOf (Index (WGDY, One)), 0x35))
                        Store (SD68, Index (DerefOf (Index (WGDY, One)), 0x36))
                        Store (SD69, Index (DerefOf (Index (WGDY, One)), 0x37))
                        Store (SD71, Index (DerefOf (Index (WGDY, One)), 0x38))
                        Store (SD72, Index (DerefOf (Index (WGDY, One)), 0x39))
                        Store (SD73, Index (DerefOf (Index (WGDY, One)), 0x3A))
                        Store (SD74, Index (DerefOf (Index (WGDY, One)), 0x3B))
                        Store (SD75, Index (DerefOf (Index (WGDY, One)), 0x3C))
                        Store (SD76, Index (DerefOf (Index (WGDY, One)), 0x3D))
                        Store (SD77, Index (DerefOf (Index (WGDY, One)), 0x3E))
                        Store (SD78, Index (DerefOf (Index (WGDY, One)), 0x3F))
                        Store (SD79, Index (DerefOf (Index (WGDY, One)), 0x40))
                        Store (SD81, Index (DerefOf (Index (WGDY, One)), 0x41))
                        Store (SD82, Index (DerefOf (Index (WGDY, One)), 0x42))
                        Store (SD83, Index (DerefOf (Index (WGDY, One)), 0x43))
                        Store (SD84, Index (DerefOf (Index (WGDY, One)), 0x44))
                        Store (SD85, Index (DerefOf (Index (WGDY, One)), 0x45))
                        Store (SD86, Index (DerefOf (Index (WGDY, One)), 0x46))
                        Store (SD87, Index (DerefOf (Index (WGDY, One)), 0x47))
                        Store (SD88, Index (DerefOf (Index (WGDY, One)), 0x48))
                        Store (SD89, Index (DerefOf (Index (WGDY, One)), 0x49))
                        Return (WGDY)
                    }

                    Name (ECKY, Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            Zero
                        }
                    })
                    Method (ECKV, 0, Serialized)
                    {
                        Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                        Return (ECKY)
                    }

                    Name (PPAY, Package (0x02)
                    {
                        One, 
                        Package (0x18)
                        {
                            0x07, 
                            Zero, 
                            0x18, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x18, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28
                        }
                    })
                    Method (PPAG, 0, Serialized)
                    {
                        Store (WAGE, Index (DerefOf (Index (PPAY, One)), One))
                        Store (AGA1, Index (DerefOf (Index (PPAY, One)), 0x02))
                        Store (AGA2, Index (DerefOf (Index (PPAY, One)), 0x03))
                        Store (AGA3, Index (DerefOf (Index (PPAY, One)), 0x04))
                        Store (AGA4, Index (DerefOf (Index (PPAY, One)), 0x05))
                        Store (AGA5, Index (DerefOf (Index (PPAY, One)), 0x06))
                        Store (AGA6, Index (DerefOf (Index (PPAY, One)), 0x07))
                        Store (AGA7, Index (DerefOf (Index (PPAY, One)), 0x08))
                        Store (AGA8, Index (DerefOf (Index (PPAY, One)), 0x09))
                        Store (AGA9, Index (DerefOf (Index (PPAY, One)), 0x0A))
                        Store (AGAA, Index (DerefOf (Index (PPAY, One)), 0x0B))
                        Store (AGAB, Index (DerefOf (Index (PPAY, One)), 0x0C))
                        Store (AGB1, Index (DerefOf (Index (PPAY, One)), 0x0D))
                        Store (AGB2, Index (DerefOf (Index (PPAY, One)), 0x0E))
                        Store (AGB3, Index (DerefOf (Index (PPAY, One)), 0x0F))
                        Store (AGB4, Index (DerefOf (Index (PPAY, One)), 0x10))
                        Store (AGB5, Index (DerefOf (Index (PPAY, One)), 0x11))
                        Store (AGB6, Index (DerefOf (Index (PPAY, One)), 0x12))
                        Store (AGB7, Index (DerefOf (Index (PPAY, One)), 0x13))
                        Store (AGB8, Index (DerefOf (Index (PPAY, One)), 0x14))
                        Store (AGB9, Index (DerefOf (Index (PPAY, One)), 0x15))
                        Store (AGBA, Index (DerefOf (Index (PPAY, One)), 0x16))
                        Store (AGBB, Index (DerefOf (Index (PPAY, One)), 0x17))
                        Return (PPAY)
                    }

                    Name (WTSY, Package (0x02)
                    {
                        One, 
                        Package (0x13)
                        {
                            0x07, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    })
                    Method (WTAS, 0, Serialized)
                    {
                        Store (WTSV, Index (DerefOf (Index (WTSY, One)), One))
                        Store (WTLE, Index (DerefOf (Index (WTSY, One)), 0x02))
                        Store (BL01, Index (DerefOf (Index (WTSY, One)), 0x03))
                        Store (BL02, Index (DerefOf (Index (WTSY, One)), 0x04))
                        Store (BL03, Index (DerefOf (Index (WTSY, One)), 0x05))
                        Store (BL04, Index (DerefOf (Index (WTSY, One)), 0x06))
                        Store (BL05, Index (DerefOf (Index (WTSY, One)), 0x07))
                        Store (BL06, Index (DerefOf (Index (WTSY, One)), 0x08))
                        Store (BL07, Index (DerefOf (Index (WTSY, One)), 0x09))
                        Store (BL08, Index (DerefOf (Index (WTSY, One)), 0x0A))
                        Store (BL09, Index (DerefOf (Index (WTSY, One)), 0x0B))
                        Store (BL10, Index (DerefOf (Index (WTSY, One)), 0x0C))
                        Store (BL11, Index (DerefOf (Index (WTSY, One)), 0x0D))
                        Store (BL12, Index (DerefOf (Index (WTSY, One)), 0x0E))
                        Store (BL13, Index (DerefOf (Index (WTSY, One)), 0x0F))
                        Store (BL14, Index (DerefOf (Index (WTSY, One)), 0x10))
                        Store (BL15, Index (DerefOf (Index (WTSY, One)), 0x11))
                        Store (BL16, Index (DerefOf (Index (WTSY, One)), 0x12))
                        Return (WTSY)
                    }

                    Name (WAIY, Package (0x02)
                    {
                        Zero, 
                        Package (0x04)
                        {
                            0x07, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    })
                    Method (WAIS, 0, Serialized)
                    {
                        Store (WLBI, Index (DerefOf (Index (WAIY, One)), One))
                        Store (WHBI, Index (DerefOf (Index (WAIY, One)), 0x02))
                        Return (WAIY)
                    }

                    Name (SADX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            0x80000000
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            0x80000000
                        }
                    })
                    Method (SADS, 0, Serialized)
                    {
                        Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                        Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                        Return (SADX)
                    }

                    Name (GPCX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }
                    })
                    Method (GPC, 0, Serialized)
                    {
                        Return (GPCX)
                    }
                }

                If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                {
                    Method (FHRF, 1, NotSerialized)
                    {
                        If (LNotEqual (GGOV (PRST), WPRP))
                        {
                            DL23 ()
                            SGOV (PRST, WPRP)
                        }
                        Else
                        {
                            ADBG ("Assume WWAN DL23() is already done")
                        }

                        Sleep (TR2B)
                        SGOV (WBRS, PBRS)
                        If (LEqual (Arg0, Zero))
                        {
                            Sleep (TBTG)
                        }
                        ElseIf (LEqual (Arg0, One))
                        {
                            SPCO (WCLK, Zero)
                            Sleep (TB2F)
                            SGOV (WFCP, And (Not (PFCP), One))
                            Sleep (TFDI)
                        }
                        Else
                        {
                        }
                    }

                    Method (SHRF, 0, NotSerialized)
                    {
                        PSD0 (SLOT)
                        SPCO (WCLK, One)
                        SGOV (WFCP, PFCP)
                        Sleep (TN2B)
                        SGOV (WBRS, And (Not (PBRS), One))
                        Sleep (TB2R)
                        SGOV (PRST, And (Not (WPRP), One))
                        L23D ()
                    }

                    Method (DOSV, 0, NotSerialized)
                    {
                        Store (Zero, Local0)
                        While (LAnd (LNotEqual (SVID, WSID), LLess (Local0, WSTO)))
                        {
                            Increment (Local0)
                            Sleep (One)
                        }
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        If (LEqual (WWEN, 0x02))
                        {
                            Store (Acquire (WWMT, 0x03E8), Local0)
                            If (LEqual (Local0, Zero))
                            {
                                FHRF (Zero)
                                SHRF ()
                                Release (WWMT)
                                DOSV ()
                            }
                        }
                        Else
                        {
                            SGOV (WBRS, PBRS)
                            Sleep (0xC8)
                            Notify (PXSX, One)
                            SGOV (PRST, And (Not (WPRP), One))
                            SGOV (WBRS, And (Not (PBRS), One))
                            Sleep (0xC8)
                            Store (Zero, Local0)
                            While (LEqual (LASX, Zero))
                            {
                                If (LGreater (Local0, 0x14))
                                {
                                    Break
                                }

                                Sleep (0x10)
                                Increment (Local0)
                            }

                            Sleep (0x0A)
                            Notify (PXSX, One)
                        }
                    }

                    PowerResource (MRST, 0x05, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Return (One)
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                        }

                        Method (_RST, 0, Serialized)  // _RST: Device Reset
                        {
                            Store (Acquire (WWMT, 0x03E8), Local0)
                            If (LEqual (Local0, Zero))
                            {
                                FHRF (One)
                                SHRF ()
                                Release (WWMT)
                                DOSV ()
                            }
                        }
                    }
                }

                If (LOr (WIST (), LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT))))
                {
                    PowerResource (DRST, 0x05, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (One)
                        }

                        Method (_ON, 0, NotSerialized)  // _ON_: Power On
                        {
                        }

                        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                        {
                        }

                        Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                        {
                            If (And (DCAP, 0x10000000))
                            {
                                Store (DCTR, Local0)
                                Or (Local0, 0x8000, Local0)
                                Store (Local0, DCTR)
                            }
                        }
                    }

                    Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                    {
                        If (WIST ())
                        {
                            If (CondRefOf (WRST))
                            {
                                Return (Package (0x01)
                                {
                                    WRST
                                })
                            }
                        }

                        If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                        {
                            If (CondRefOf (MRST))
                            {
                                Return (Package (0x01)
                                {
                                    MRST
                                })
                            }
                        }

                        Return (Package (0x01)
                        {
                            DRST
                        })
                    }

                    Method (IFUN, 4, Serialized)
                    {
                        If (LEqual (Arg2, Zero))
                        {
                            If (LEqual (Arg1, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                           
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If (LEqual (Arg2, One))
                        {
                            ShiftLeft (CVPR, Zero, Local0)
                            Return (Local0)
                        }

                        If (LEqual (Arg2, 0x02))
                        {
                            CreateWordField (Arg3, Zero, CMDT)
                            CreateWordField (Arg3, 0x02, CMDP)
                            If (LEqual (CMDT, One))
                            {
                                If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                                {
                                    Return (^^^CNVW.RSTT)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If (LEqual (CMDT, 0x02))
                            {
                                If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                                {
                                    Store (CMDP, ^^^CNVW.RSTT)
                                }

                                Return (Zero)
                            }

                            If (LEqual (CMDT, 0x03))
                            {
                                If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                                {
                                    Return (^^^CNVW.PRRS)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Return (Zero)
                        }

                        If (LEqual (Arg2, 0x03))
                        {
                            If (LEqual (CRFI, One))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        Return (Zero)
                    }

                    Method (IDSM, 1, Serialized)
                    {
                        If (LEqual (Arg0, ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd")))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (EFUN, 4, Serialized)
                    {
                        If (LEqual (Arg2, Zero))
                        {
                            If (LEqual (Arg1, Zero))
                            {
                                Return (Buffer (0x02)
                                {
                                     0xFF, 0x01                                     
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If (LEqual (Arg2, One))
                        {
                            Store (ACSD, Local0)
                            Return (Local0)
                        }

                        If (LEqual (Arg2, 0x02))
                        {
                            Store (I5BS, Local0)
                            Return (Local0)
                        }

                        If (LEqual (Arg2, 0x03))
                        {
                            Store (UHBS, Local0)
                            Return (Local0)
                        }

                        If (LEqual (Arg2, 0x06))
                        {
                            Store (AXMU, Local0)
                            ShiftLeft (Local0, One, Local0)
                            Or (Local0, AXSU, Local0)
                            Store (AXMR, Local1)
                            ShiftLeft (Local1, One, Local1)
                            Or (Local1, AXSR, Local1)
                            ShiftLeft (Local1, 0x02, Local1)
                            Or (Local0, Local1, Local0)
                            Return (Local0)
                        }

                        If (LEqual (Arg2, 0x04))
                        {
                            Return (WFRC)
                        }

                        If (LEqual (Arg2, 0x05))
                        {
                            Return (WFUC)
                        }

                        If (LEqual (Arg2, 0x07))
                        {
                            Return (UNI4)
                        }

                        If (LEqual (Arg2, 0x08))
                        {
                            Return (WFIC)
                        }

                        Return (Zero)
                    }

                    Method (EDSM, 1, Serialized)
                    {
                        If (LEqual (Arg0, ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (WIST ())
                        {
                            If (EDSM (Arg0))
                            {
                                Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                            }

                            If (IDSM (Arg0))
                            {
                                Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                            }
                        }

                        If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                        {
                            If (LEqual (Arg0, ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d")))
                            {
                                If (LEqual (Arg2, Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x09                                           
                                    })
                                }

                                If (LEqual (Arg2, One)){}
                                If (LEqual (Arg2, 0x02)){}
                                If (LEqual (Arg2, 0x03))
                                {
                                    If (LEqual (WRTO, One)){}
                                    ElseIf (LEqual (WRTO, 0x03)){}
                                    Else
                                    {
                                    }

                                    Return (WRTO)
                                }
                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }
            }
        }

        If (CondRefOf (\_SB.PC00.RP27.PXSX))
        {
            Scope (_SB.PC00.RP27.PXSX)
            {
                OperationRegion (RPXX, SystemMemory, GMIO (^_ADR, _ADR), 0x30)
                Field (RPXX, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x2C), 
                    SVID,   16
                }

                OperationRegion (FLDR, SystemMemory, Add (GMIO (^_ADR, _ADR), 0x44), 0x06)
                Field (FLDR, ByteAcc, NoLock, Preserve)
                {
                    DCAP,   32, 
                    DCTR,   16
                }

                Method (WIST, 0, Serialized)
                {
                    If (CondRefOf (VDID))
                    {
                        Switch (ToInteger (VDID))
                        {
                            Case (0x25268086)
                            {
                                Return (One)
                            }
                            Case (0x271B8086)
                            {
                                Return (One)
                            }
                            Case (0x27238086)
                            {
                                Return (One)
                            }
                            Case (0x27258086)
                            {
                                Return (One)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (WWST, 0, Serialized)
                {
                    If (CondRefOf (VDID))
                    {
                        Switch (ToInteger (VDID))
                        {
                            Case (0x73608086)
                            {
                                Return (One)
                            }
                            Case (0x75608086)
                            {
                                Return (One)
                            }
                            Case (0x4D7514C3)
                            {
                                Return (One)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                If (WIST ())
                {
                    PowerResource (WRST, 0x05, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (One)
                        }

                        Method (_ON, 0, NotSerialized)  // _ON_: Power On
                        {
                        }

                        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                        {
                        }

                        Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                        {
                            If (And (DCAP, 0x10000000))
                            {
                                Store (DCTR, Local0)
                                Or (Local0, 0x8000, Local0)
                                Store (Local0, DCTR)
                            }
                        }
                    }

                    Name (SPLX, Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0x80000000, 
                            0x80000000, 
                            0x80000000
                        }
                    })
                    Method (SPLC, 0, Serialized)
                    {
                        Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                        Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                        Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                        Return (SPLX)
                    }

                    Name (WANX, Package (0x03)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0x80000000, 
                            0x80000000, 
                            0x80000000
                        }, 

                        Package (0x03)
                        {
                            0x80000000, 
                            0x80000000, 
                            0x80000000
                        }
                    })
                    Method (WAND, 0, Serialized)
                    {
                        Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                        Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                        Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                        Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                        Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                        Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                        Return (WANX)
                    }

                    Name (WRDX, Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x80000000, 
                            0x8000
                        }
                    })
                    Method (WRDD, 0, Serialized)
                    {
                        Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                        Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                        Return (WRDX)
                    }

                    Name (WRDY, Package (0x02)
                    {
                        0x02, 
                        Package (0x2E)
                        {
                            0x07, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80
                        }
                    })
                    Method (WRDS, 0, Serialized)
                    {
                        Store (STXE, Index (DerefOf (Index (WRDY, One)), One))
                        Store (ST10, Index (DerefOf (Index (WRDY, One)), 0x02))
                        Store (ST11, Index (DerefOf (Index (WRDY, One)), 0x03))
                        Store (ST12, Index (DerefOf (Index (WRDY, One)), 0x04))
                        Store (ST13, Index (DerefOf (Index (WRDY, One)), 0x05))
                        Store (ST14, Index (DerefOf (Index (WRDY, One)), 0x06))
                        Store (ST15, Index (DerefOf (Index (WRDY, One)), 0x07))
                        Store (ST16, Index (DerefOf (Index (WRDY, One)), 0x08))
                        Store (ST17, Index (DerefOf (Index (WRDY, One)), 0x09))
                        Store (ST18, Index (DerefOf (Index (WRDY, One)), 0x0A))
                        Store (ST19, Index (DerefOf (Index (WRDY, One)), 0x0B))
                        Store (ST50, Index (DerefOf (Index (WRDY, One)), 0x0C))
                        Store (ST51, Index (DerefOf (Index (WRDY, One)), 0x0D))
                        Store (ST52, Index (DerefOf (Index (WRDY, One)), 0x0E))
                        Store (ST53, Index (DerefOf (Index (WRDY, One)), 0x0F))
                        Store (ST54, Index (DerefOf (Index (WRDY, One)), 0x10))
                        Store (ST55, Index (DerefOf (Index (WRDY, One)), 0x11))
                        Store (ST56, Index (DerefOf (Index (WRDY, One)), 0x12))
                        Store (ST57, Index (DerefOf (Index (WRDY, One)), 0x13))
                        Store (ST58, Index (DerefOf (Index (WRDY, One)), 0x14))
                        Store (ST59, Index (DerefOf (Index (WRDY, One)), 0x15))
                        Store (ST5A, Index (DerefOf (Index (WRDY, One)), 0x16))
                        Store (ST5B, Index (DerefOf (Index (WRDY, One)), 0x17))
                        Store (CD10, Index (DerefOf (Index (WRDY, One)), 0x18))
                        Store (CD11, Index (DerefOf (Index (WRDY, One)), 0x19))
                        Store (CD12, Index (DerefOf (Index (WRDY, One)), 0x1A))
                        Store (CD13, Index (DerefOf (Index (WRDY, One)), 0x1B))
                        Store (CD14, Index (DerefOf (Index (WRDY, One)), 0x1C))
                        Store (CD15, Index (DerefOf (Index (WRDY, One)), 0x1D))
                        Store (CD16, Index (DerefOf (Index (WRDY, One)), 0x1E))
                        Store (CD17, Index (DerefOf (Index (WRDY, One)), 0x1F))
                        Store (CD18, Index (DerefOf (Index (WRDY, One)), 0x20))
                        Store (CD19, Index (DerefOf (Index (WRDY, One)), 0x21))
                        Store (CD1A, Index (DerefOf (Index (WRDY, One)), 0x22))
                        Store (CD20, Index (DerefOf (Index (WRDY, One)), 0x23))
                        Store (CD21, Index (DerefOf (Index (WRDY, One)), 0x24))
                        Store (CD22, Index (DerefOf (Index (WRDY, One)), 0x25))
                        Store (CD23, Index (DerefOf (Index (WRDY, One)), 0x26))
                        Store (CD24, Index (DerefOf (Index (WRDY, One)), 0x27))
                        Store (CD25, Index (DerefOf (Index (WRDY, One)), 0x28))
                        Store (CD26, Index (DerefOf (Index (WRDY, One)), 0x29))
                        Store (CD27, Index (DerefOf (Index (WRDY, One)), 0x2A))
                        Store (CD28, Index (DerefOf (Index (WRDY, One)), 0x2B))
                        Store (CD29, Index (DerefOf (Index (WRDY, One)), 0x2C))
                        Store (CD2A, Index (DerefOf (Index (WRDY, One)), 0x2D))
                        Return (WRDY)
                    }

                    Name (EWRY, Package (0x02)
                    {
                        0x02, 
                        Package (0x87)
                        {
                            0x07, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80
                        }
                    })
                    Method (EWRD, 0, Serialized)
                    {
                        Store (STDE, Index (DerefOf (Index (EWRY, One)), One))
                        Store (STRS, Index (DerefOf (Index (EWRY, One)), 0x02))
                        Store (ST20, Index (DerefOf (Index (EWRY, One)), 0x03))
                        Store (ST21, Index (DerefOf (Index (EWRY, One)), 0x04))
                        Store (ST22, Index (DerefOf (Index (EWRY, One)), 0x05))
                        Store (ST23, Index (DerefOf (Index (EWRY, One)), 0x06))
                        Store (ST24, Index (DerefOf (Index (EWRY, One)), 0x07))
                        Store (ST25, Index (DerefOf (Index (EWRY, One)), 0x08))
                        Store (ST26, Index (DerefOf (Index (EWRY, One)), 0x09))
                        Store (ST27, Index (DerefOf (Index (EWRY, One)), 0x0A))
                        Store (ST28, Index (DerefOf (Index (EWRY, One)), 0x0B))
                        Store (ST29, Index (DerefOf (Index (EWRY, One)), 0x0C))
                        Store (ST60, Index (DerefOf (Index (EWRY, One)), 0x0D))
                        Store (ST61, Index (DerefOf (Index (EWRY, One)), 0x0E))
                        Store (ST62, Index (DerefOf (Index (EWRY, One)), 0x0F))
                        Store (ST63, Index (DerefOf (Index (EWRY, One)), 0x10))
                        Store (ST64, Index (DerefOf (Index (EWRY, One)), 0x11))
                        Store (ST65, Index (DerefOf (Index (EWRY, One)), 0x12))
                        Store (ST66, Index (DerefOf (Index (EWRY, One)), 0x13))
                        Store (ST67, Index (DerefOf (Index (EWRY, One)), 0x14))
                        Store (ST68, Index (DerefOf (Index (EWRY, One)), 0x15))
                        Store (ST69, Index (DerefOf (Index (EWRY, One)), 0x16))
                        Store (ST6A, Index (DerefOf (Index (EWRY, One)), 0x17))
                        Store (ST6B, Index (DerefOf (Index (EWRY, One)), 0x18))
                        Store (ST30, Index (DerefOf (Index (EWRY, One)), 0x19))
                        Store (ST31, Index (DerefOf (Index (EWRY, One)), 0x1A))
                        Store (ST32, Index (DerefOf (Index (EWRY, One)), 0x1B))
                        Store (ST33, Index (DerefOf (Index (EWRY, One)), 0x1C))
                        Store (ST34, Index (DerefOf (Index (EWRY, One)), 0x1D))
                        Store (ST35, Index (DerefOf (Index (EWRY, One)), 0x1E))
                        Store (ST36, Index (DerefOf (Index (EWRY, One)), 0x1F))
                        Store (ST37, Index (DerefOf (Index (EWRY, One)), 0x20))
                        Store (ST38, Index (DerefOf (Index (EWRY, One)), 0x21))
                        Store (ST39, Index (DerefOf (Index (EWRY, One)), 0x22))
                        Store (ST70, Index (DerefOf (Index (EWRY, One)), 0x23))
                        Store (ST71, Index (DerefOf (Index (EWRY, One)), 0x24))
                        Store (ST72, Index (DerefOf (Index (EWRY, One)), 0x25))
                        Store (ST73, Index (DerefOf (Index (EWRY, One)), 0x26))
                        Store (ST74, Index (DerefOf (Index (EWRY, One)), 0x27))
                        Store (ST75, Index (DerefOf (Index (EWRY, One)), 0x28))
                        Store (ST76, Index (DerefOf (Index (EWRY, One)), 0x29))
                        Store (ST77, Index (DerefOf (Index (EWRY, One)), 0x2A))
                        Store (ST78, Index (DerefOf (Index (EWRY, One)), 0x2B))
                        Store (ST79, Index (DerefOf (Index (EWRY, One)), 0x2C))
                        Store (ST7A, Index (DerefOf (Index (EWRY, One)), 0x2D))
                        Store (ST7B, Index (DerefOf (Index (EWRY, One)), 0x2E))
                        Store (ST40, Index (DerefOf (Index (EWRY, One)), 0x2F))
                        Store (ST41, Index (DerefOf (Index (EWRY, One)), 0x30))
                        Store (ST42, Index (DerefOf (Index (EWRY, One)), 0x31))
                        Store (ST43, Index (DerefOf (Index (EWRY, One)), 0x32))
                        Store (ST44, Index (DerefOf (Index (EWRY, One)), 0x33))
                        Store (ST45, Index (DerefOf (Index (EWRY, One)), 0x34))
                        Store (ST46, Index (DerefOf (Index (EWRY, One)), 0x35))
                        Store (ST47, Index (DerefOf (Index (EWRY, One)), 0x36))
                        Store (ST48, Index (DerefOf (Index (EWRY, One)), 0x37))
                        Store (ST49, Index (DerefOf (Index (EWRY, One)), 0x38))
                        Store (ST80, Index (DerefOf (Index (EWRY, One)), 0x39))
                        Store (ST81, Index (DerefOf (Index (EWRY, One)), 0x3A))
                        Store (ST82, Index (DerefOf (Index (EWRY, One)), 0x3B))
                        Store (ST83, Index (DerefOf (Index (EWRY, One)), 0x3C))
                        Store (ST84, Index (DerefOf (Index (EWRY, One)), 0x3D))
                        Store (ST85, Index (DerefOf (Index (EWRY, One)), 0x3E))
                        Store (ST86, Index (DerefOf (Index (EWRY, One)), 0x3F))
                        Store (ST87, Index (DerefOf (Index (EWRY, One)), 0x40))
                        Store (ST88, Index (DerefOf (Index (EWRY, One)), 0x41))
                        Store (ST89, Index (DerefOf (Index (EWRY, One)), 0x42))
                        Store (ST8A, Index (DerefOf (Index (EWRY, One)), 0x43))
                        Store (ST8B, Index (DerefOf (Index (EWRY, One)), 0x44))
                        Store (CD30, Index (DerefOf (Index (EWRY, One)), 0x45))
                        Store (CD31, Index (DerefOf (Index (EWRY, One)), 0x46))
                        Store (CD32, Index (DerefOf (Index (EWRY, One)), 0x47))
                        Store (CD33, Index (DerefOf (Index (EWRY, One)), 0x48))
                        Store (CD34, Index (DerefOf (Index (EWRY, One)), 0x49))
                        Store (CD35, Index (DerefOf (Index (EWRY, One)), 0x4A))
                        Store (CD36, Index (DerefOf (Index (EWRY, One)), 0x4B))
                        Store (CD37, Index (DerefOf (Index (EWRY, One)), 0x4C))
                        Store (CD38, Index (DerefOf (Index (EWRY, One)), 0x4D))
                        Store (CD39, Index (DerefOf (Index (EWRY, One)), 0x4E))
                        Store (CD3A, Index (DerefOf (Index (EWRY, One)), 0x4F))
                        Store (CD3B, Index (DerefOf (Index (EWRY, One)), 0x50))
                        Store (CD3C, Index (DerefOf (Index (EWRY, One)), 0x51))
                        Store (CD3D, Index (DerefOf (Index (EWRY, One)), 0x52))
                        Store (CD3E, Index (DerefOf (Index (EWRY, One)), 0x53))
                        Store (CD3F, Index (DerefOf (Index (EWRY, One)), 0x54))
                        Store (CD40, Index (DerefOf (Index (EWRY, One)), 0x55))
                        Store (CD41, Index (DerefOf (Index (EWRY, One)), 0x56))
                        Store (CD42, Index (DerefOf (Index (EWRY, One)), 0x57))
                        Store (CD43, Index (DerefOf (Index (EWRY, One)), 0x58))
                        Store (CD44, Index (DerefOf (Index (EWRY, One)), 0x59))
                        Store (CD45, Index (DerefOf (Index (EWRY, One)), 0x5A))
                        Store (CD46, Index (DerefOf (Index (EWRY, One)), 0x5B))
                        Store (CD47, Index (DerefOf (Index (EWRY, One)), 0x5C))
                        Store (CD48, Index (DerefOf (Index (EWRY, One)), 0x5D))
                        Store (CD49, Index (DerefOf (Index (EWRY, One)), 0x5E))
                        Store (CD4A, Index (DerefOf (Index (EWRY, One)), 0x5F))
                        Store (CD4B, Index (DerefOf (Index (EWRY, One)), 0x60))
                        Store (CD4C, Index (DerefOf (Index (EWRY, One)), 0x61))
                        Store (CD4D, Index (DerefOf (Index (EWRY, One)), 0x62))
                        Store (CD4E, Index (DerefOf (Index (EWRY, One)), 0x63))
                        Store (CD4F, Index (DerefOf (Index (EWRY, One)), 0x64))
                        Store (CD50, Index (DerefOf (Index (EWRY, One)), 0x65))
                        Store (CD51, Index (DerefOf (Index (EWRY, One)), 0x66))
                        Store (CD52, Index (DerefOf (Index (EWRY, One)), 0x67))
                        Store (CD53, Index (DerefOf (Index (EWRY, One)), 0x68))
                        Store (CD54, Index (DerefOf (Index (EWRY, One)), 0x69))
                        Store (CD55, Index (DerefOf (Index (EWRY, One)), 0x6A))
                        Store (CD56, Index (DerefOf (Index (EWRY, One)), 0x6B))
                        Store (CD57, Index (DerefOf (Index (EWRY, One)), 0x6C))
                        Store (CD58, Index (DerefOf (Index (EWRY, One)), 0x6D))
                        Store (CD59, Index (DerefOf (Index (EWRY, One)), 0x6E))
                        Store (CD5A, Index (DerefOf (Index (EWRY, One)), 0x6F))
                        Store (CD5B, Index (DerefOf (Index (EWRY, One)), 0x70))
                        Store (CD5C, Index (DerefOf (Index (EWRY, One)), 0x71))
                        Store (CD5D, Index (DerefOf (Index (EWRY, One)), 0x72))
                        Store (CD5E, Index (DerefOf (Index (EWRY, One)), 0x73))
                        Store (CD5F, Index (DerefOf (Index (EWRY, One)), 0x74))
                        Store (CD60, Index (DerefOf (Index (EWRY, One)), 0x75))
                        Store (CD61, Index (DerefOf (Index (EWRY, One)), 0x76))
                        Store (CD62, Index (DerefOf (Index (EWRY, One)), 0x77))
                        Store (CD63, Index (DerefOf (Index (EWRY, One)), 0x78))
                        Store (CD64, Index (DerefOf (Index (EWRY, One)), 0x79))
                        Store (CD65, Index (DerefOf (Index (EWRY, One)), 0x7A))
                        Store (CD66, Index (DerefOf (Index (EWRY, One)), 0x7B))
                        Store (CD67, Index (DerefOf (Index (EWRY, One)), 0x7C))
                        Store (CD68, Index (DerefOf (Index (EWRY, One)), 0x7D))
                        Store (CD69, Index (DerefOf (Index (EWRY, One)), 0x7E))
                        Store (CD6A, Index (DerefOf (Index (EWRY, One)), 0x7F))
                        Store (CD6B, Index (DerefOf (Index (EWRY, One)), 0x80))
                        Store (CD6C, Index (DerefOf (Index (EWRY, One)), 0x81))
                        Store (CD6D, Index (DerefOf (Index (EWRY, One)), 0x82))
                        Store (CD6E, Index (DerefOf (Index (EWRY, One)), 0x83))
                        Store (CD6F, Index (DerefOf (Index (EWRY, One)), 0x84))
                        Store (CD70, Index (DerefOf (Index (EWRY, One)), 0x85))
                        Store (CD71, Index (DerefOf (Index (EWRY, One)), 0x86))
                        Return (EWRY)
                    }

                    Name (WGDY, Package (0x02)
                    {
                        0x03, 
                        Package (0x4A)
                        {
                            0x07, 
                            0x03, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80
                        }
                    })
                    Method (WGDS, 0, Serialized)
                    {
                        Store (SDGN, Index (DerefOf (Index (WGDY, One)), One))
                        Store (SD11, Index (DerefOf (Index (WGDY, One)), 0x02))
                        Store (SD12, Index (DerefOf (Index (WGDY, One)), 0x03))
                        Store (SD13, Index (DerefOf (Index (WGDY, One)), 0x04))
                        Store (SD14, Index (DerefOf (Index (WGDY, One)), 0x05))
                        Store (SD15, Index (DerefOf (Index (WGDY, One)), 0x06))
                        Store (SD16, Index (DerefOf (Index (WGDY, One)), 0x07))
                        Store (SD17, Index (DerefOf (Index (WGDY, One)), 0x08))
                        Store (SD18, Index (DerefOf (Index (WGDY, One)), 0x09))
                        Store (SD19, Index (DerefOf (Index (WGDY, One)), 0x0A))
                        Store (SD21, Index (DerefOf (Index (WGDY, One)), 0x0B))
                        Store (SD22, Index (DerefOf (Index (WGDY, One)), 0x0C))
                        Store (SD23, Index (DerefOf (Index (WGDY, One)), 0x0D))
                        Store (SD24, Index (DerefOf (Index (WGDY, One)), 0x0E))
                        Store (SD25, Index (DerefOf (Index (WGDY, One)), 0x0F))
                        Store (SD26, Index (DerefOf (Index (WGDY, One)), 0x10))
                        Store (SD27, Index (DerefOf (Index (WGDY, One)), 0x11))
                        Store (SD28, Index (DerefOf (Index (WGDY, One)), 0x12))
                        Store (SD29, Index (DerefOf (Index (WGDY, One)), 0x13))
                        Store (SD31, Index (DerefOf (Index (WGDY, One)), 0x14))
                        Store (SD32, Index (DerefOf (Index (WGDY, One)), 0x15))
                        Store (SD33, Index (DerefOf (Index (WGDY, One)), 0x16))
                        Store (SD34, Index (DerefOf (Index (WGDY, One)), 0x17))
                        Store (SD35, Index (DerefOf (Index (WGDY, One)), 0x18))
                        Store (SD36, Index (DerefOf (Index (WGDY, One)), 0x19))
                        Store (SD37, Index (DerefOf (Index (WGDY, One)), 0x1A))
                        Store (SD38, Index (DerefOf (Index (WGDY, One)), 0x1B))
                        Store (SD39, Index (DerefOf (Index (WGDY, One)), 0x1C))
                        Store (SD41, Index (DerefOf (Index (WGDY, One)), 0x1D))
                        Store (SD42, Index (DerefOf (Index (WGDY, One)), 0x1E))
                        Store (SD43, Index (DerefOf (Index (WGDY, One)), 0x1F))
                        Store (SD44, Index (DerefOf (Index (WGDY, One)), 0x20))
                        Store (SD45, Index (DerefOf (Index (WGDY, One)), 0x21))
                        Store (SD46, Index (DerefOf (Index (WGDY, One)), 0x22))
                        Store (SD47, Index (DerefOf (Index (WGDY, One)), 0x23))
                        Store (SD48, Index (DerefOf (Index (WGDY, One)), 0x24))
                        Store (SD49, Index (DerefOf (Index (WGDY, One)), 0x25))
                        Store (SD51, Index (DerefOf (Index (WGDY, One)), 0x26))
                        Store (SD52, Index (DerefOf (Index (WGDY, One)), 0x27))
                        Store (SD53, Index (DerefOf (Index (WGDY, One)), 0x28))
                        Store (SD54, Index (DerefOf (Index (WGDY, One)), 0x29))
                        Store (SD55, Index (DerefOf (Index (WGDY, One)), 0x2A))
                        Store (SD56, Index (DerefOf (Index (WGDY, One)), 0x2B))
                        Store (SD57, Index (DerefOf (Index (WGDY, One)), 0x2C))
                        Store (SD58, Index (DerefOf (Index (WGDY, One)), 0x2D))
                        Store (SD59, Index (DerefOf (Index (WGDY, One)), 0x2E))
                        Store (SD61, Index (DerefOf (Index (WGDY, One)), 0x2F))
                        Store (SD62, Index (DerefOf (Index (WGDY, One)), 0x30))
                        Store (SD63, Index (DerefOf (Index (WGDY, One)), 0x31))
                        Store (SD64, Index (DerefOf (Index (WGDY, One)), 0x32))
                        Store (SD65, Index (DerefOf (Index (WGDY, One)), 0x33))
                        Store (SD66, Index (DerefOf (Index (WGDY, One)), 0x34))
                        Store (SD67, Index (DerefOf (Index (WGDY, One)), 0x35))
                        Store (SD68, Index (DerefOf (Index (WGDY, One)), 0x36))
                        Store (SD69, Index (DerefOf (Index (WGDY, One)), 0x37))
                        Store (SD71, Index (DerefOf (Index (WGDY, One)), 0x38))
                        Store (SD72, Index (DerefOf (Index (WGDY, One)), 0x39))
                        Store (SD73, Index (DerefOf (Index (WGDY, One)), 0x3A))
                        Store (SD74, Index (DerefOf (Index (WGDY, One)), 0x3B))
                        Store (SD75, Index (DerefOf (Index (WGDY, One)), 0x3C))
                        Store (SD76, Index (DerefOf (Index (WGDY, One)), 0x3D))
                        Store (SD77, Index (DerefOf (Index (WGDY, One)), 0x3E))
                        Store (SD78, Index (DerefOf (Index (WGDY, One)), 0x3F))
                        Store (SD79, Index (DerefOf (Index (WGDY, One)), 0x40))
                        Store (SD81, Index (DerefOf (Index (WGDY, One)), 0x41))
                        Store (SD82, Index (DerefOf (Index (WGDY, One)), 0x42))
                        Store (SD83, Index (DerefOf (Index (WGDY, One)), 0x43))
                        Store (SD84, Index (DerefOf (Index (WGDY, One)), 0x44))
                        Store (SD85, Index (DerefOf (Index (WGDY, One)), 0x45))
                        Store (SD86, Index (DerefOf (Index (WGDY, One)), 0x46))
                        Store (SD87, Index (DerefOf (Index (WGDY, One)), 0x47))
                        Store (SD88, Index (DerefOf (Index (WGDY, One)), 0x48))
                        Store (SD89, Index (DerefOf (Index (WGDY, One)), 0x49))
                        Return (WGDY)
                    }

                    Name (ECKY, Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            Zero
                        }
                    })
                    Method (ECKV, 0, Serialized)
                    {
                        Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                        Return (ECKY)
                    }

                    Name (PPAY, Package (0x02)
                    {
                        One, 
                        Package (0x18)
                        {
                            0x07, 
                            Zero, 
                            0x18, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x18, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28
                        }
                    })
                    Method (PPAG, 0, Serialized)
                    {
                        Store (WAGE, Index (DerefOf (Index (PPAY, One)), One))
                        Store (AGA1, Index (DerefOf (Index (PPAY, One)), 0x02))
                        Store (AGA2, Index (DerefOf (Index (PPAY, One)), 0x03))
                        Store (AGA3, Index (DerefOf (Index (PPAY, One)), 0x04))
                        Store (AGA4, Index (DerefOf (Index (PPAY, One)), 0x05))
                        Store (AGA5, Index (DerefOf (Index (PPAY, One)), 0x06))
                        Store (AGA6, Index (DerefOf (Index (PPAY, One)), 0x07))
                        Store (AGA7, Index (DerefOf (Index (PPAY, One)), 0x08))
                        Store (AGA8, Index (DerefOf (Index (PPAY, One)), 0x09))
                        Store (AGA9, Index (DerefOf (Index (PPAY, One)), 0x0A))
                        Store (AGAA, Index (DerefOf (Index (PPAY, One)), 0x0B))
                        Store (AGAB, Index (DerefOf (Index (PPAY, One)), 0x0C))
                        Store (AGB1, Index (DerefOf (Index (PPAY, One)), 0x0D))
                        Store (AGB2, Index (DerefOf (Index (PPAY, One)), 0x0E))
                        Store (AGB3, Index (DerefOf (Index (PPAY, One)), 0x0F))
                        Store (AGB4, Index (DerefOf (Index (PPAY, One)), 0x10))
                        Store (AGB5, Index (DerefOf (Index (PPAY, One)), 0x11))
                        Store (AGB6, Index (DerefOf (Index (PPAY, One)), 0x12))
                        Store (AGB7, Index (DerefOf (Index (PPAY, One)), 0x13))
                        Store (AGB8, Index (DerefOf (Index (PPAY, One)), 0x14))
                        Store (AGB9, Index (DerefOf (Index (PPAY, One)), 0x15))
                        Store (AGBA, Index (DerefOf (Index (PPAY, One)), 0x16))
                        Store (AGBB, Index (DerefOf (Index (PPAY, One)), 0x17))
                        Return (PPAY)
                    }

                    Name (WTSY, Package (0x02)
                    {
                        One, 
                        Package (0x13)
                        {
                            0x07, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    })
                    Method (WTAS, 0, Serialized)
                    {
                        Store (WTSV, Index (DerefOf (Index (WTSY, One)), One))
                        Store (WTLE, Index (DerefOf (Index (WTSY, One)), 0x02))
                        Store (BL01, Index (DerefOf (Index (WTSY, One)), 0x03))
                        Store (BL02, Index (DerefOf (Index (WTSY, One)), 0x04))
                        Store (BL03, Index (DerefOf (Index (WTSY, One)), 0x05))
                        Store (BL04, Index (DerefOf (Index (WTSY, One)), 0x06))
                        Store (BL05, Index (DerefOf (Index (WTSY, One)), 0x07))
                        Store (BL06, Index (DerefOf (Index (WTSY, One)), 0x08))
                        Store (BL07, Index (DerefOf (Index (WTSY, One)), 0x09))
                        Store (BL08, Index (DerefOf (Index (WTSY, One)), 0x0A))
                        Store (BL09, Index (DerefOf (Index (WTSY, One)), 0x0B))
                        Store (BL10, Index (DerefOf (Index (WTSY, One)), 0x0C))
                        Store (BL11, Index (DerefOf (Index (WTSY, One)), 0x0D))
                        Store (BL12, Index (DerefOf (Index (WTSY, One)), 0x0E))
                        Store (BL13, Index (DerefOf (Index (WTSY, One)), 0x0F))
                        Store (BL14, Index (DerefOf (Index (WTSY, One)), 0x10))
                        Store (BL15, Index (DerefOf (Index (WTSY, One)), 0x11))
                        Store (BL16, Index (DerefOf (Index (WTSY, One)), 0x12))
                        Return (WTSY)
                    }

                    Name (WAIY, Package (0x02)
                    {
                        Zero, 
                        Package (0x04)
                        {
                            0x07, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    })
                    Method (WAIS, 0, Serialized)
                    {
                        Store (WLBI, Index (DerefOf (Index (WAIY, One)), One))
                        Store (WHBI, Index (DerefOf (Index (WAIY, One)), 0x02))
                        Return (WAIY)
                    }

                    Name (SADX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            0x80000000
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            0x80000000
                        }
                    })
                    Method (SADS, 0, Serialized)
                    {
                        Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                        Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                        Return (SADX)
                    }

                    Name (GPCX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }
                    })
                    Method (GPC, 0, Serialized)
                    {
                        Return (GPCX)
                    }
                }

                If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                {
                    Method (FHRF, 1, NotSerialized)
                    {
                        If (LNotEqual (GGOV (PRST), WPRP))
                        {
                            DL23 ()
                            SGOV (PRST, WPRP)
                        }
                        Else
                        {
                            ADBG ("Assume WWAN DL23() is already done")
                        }

                        Sleep (TR2B)
                        SGOV (WBRS, PBRS)
                        If (LEqual (Arg0, Zero))
                        {
                            Sleep (TBTG)
                        }
                        ElseIf (LEqual (Arg0, One))
                        {
                            SPCO (WCLK, Zero)
                            Sleep (TB2F)
                            SGOV (WFCP, And (Not (PFCP), One))
                            Sleep (TFDI)
                        }
                        Else
                        {
                        }
                    }

                    Method (SHRF, 0, NotSerialized)
                    {
                        PSD0 (SLOT)
                        SPCO (WCLK, One)
                        SGOV (WFCP, PFCP)
                        Sleep (TN2B)
                        SGOV (WBRS, And (Not (PBRS), One))
                        Sleep (TB2R)
                        SGOV (PRST, And (Not (WPRP), One))
                        L23D ()
                    }

                    Method (DOSV, 0, NotSerialized)
                    {
                        Store (Zero, Local0)
                        While (LAnd (LNotEqual (SVID, WSID), LLess (Local0, WSTO)))
                        {
                            Increment (Local0)
                            Sleep (One)
                        }
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        If (LEqual (WWEN, 0x02))
                        {
                            Store (Acquire (WWMT, 0x03E8), Local0)
                            If (LEqual (Local0, Zero))
                            {
                                FHRF (Zero)
                                SHRF ()
                                Release (WWMT)
                                DOSV ()
                            }
                        }
                        Else
                        {
                            SGOV (WBRS, PBRS)
                            Sleep (0xC8)
                            Notify (PXSX, One)
                            SGOV (PRST, And (Not (WPRP), One))
                            SGOV (WBRS, And (Not (PBRS), One))
                            Sleep (0xC8)
                            Store (Zero, Local0)
                            While (LEqual (LASX, Zero))
                            {
                                If (LGreater (Local0, 0x14))
                                {
                                    Break
                                }

                                Sleep (0x10)
                                Increment (Local0)
                            }

                            Sleep (0x0A)
                            Notify (PXSX, One)
                        }
                    }

                    PowerResource (MRST, 0x05, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Return (One)
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                        }

                        Method (_RST, 0, Serialized)  // _RST: Device Reset
                        {
                            Store (Acquire (WWMT, 0x03E8), Local0)
                            If (LEqual (Local0, Zero))
                            {
                                FHRF (One)
                                SHRF ()
                                Release (WWMT)
                                DOSV ()
                            }
                        }
                    }
                }

                If (LOr (WIST (), LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT))))
                {
                    PowerResource (DRST, 0x05, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (One)
                        }

                        Method (_ON, 0, NotSerialized)  // _ON_: Power On
                        {
                        }

                        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                        {
                        }

                        Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                        {
                            If (And (DCAP, 0x10000000))
                            {
                                Store (DCTR, Local0)
                                Or (Local0, 0x8000, Local0)
                                Store (Local0, DCTR)
                            }
                        }
                    }

                    Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                    {
                        If (WIST ())
                        {
                            If (CondRefOf (WRST))
                            {
                                Return (Package (0x01)
                                {
                                    WRST
                                })
                            }
                        }

                        If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                        {
                            If (CondRefOf (MRST))
                            {
                                Return (Package (0x01)
                                {
                                    MRST
                                })
                            }
                        }

                        Return (Package (0x01)
                        {
                            DRST
                        })
                    }

                    Method (IFUN, 4, Serialized)
                    {
                        If (LEqual (Arg2, Zero))
                        {
                            If (LEqual (Arg1, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                           
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If (LEqual (Arg2, One))
                        {
                            ShiftLeft (CVPR, Zero, Local0)
                            Return (Local0)
                        }

                        If (LEqual (Arg2, 0x02))
                        {
                            CreateWordField (Arg3, Zero, CMDT)
                            CreateWordField (Arg3, 0x02, CMDP)
                            If (LEqual (CMDT, One))
                            {
                                If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                                {
                                    Return (^^^CNVW.RSTT)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If (LEqual (CMDT, 0x02))
                            {
                                If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                                {
                                    Store (CMDP, ^^^CNVW.RSTT)
                                }

                                Return (Zero)
                            }

                            If (LEqual (CMDT, 0x03))
                            {
                                If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                                {
                                    Return (^^^CNVW.PRRS)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Return (Zero)
                        }

                        If (LEqual (Arg2, 0x03))
                        {
                            If (LEqual (CRFI, One))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        Return (Zero)
                    }

                    Method (IDSM, 1, Serialized)
                    {
                        If (LEqual (Arg0, ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd")))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (EFUN, 4, Serialized)
                    {
                        If (LEqual (Arg2, Zero))
                        {
                            If (LEqual (Arg1, Zero))
                            {
                                Return (Buffer (0x02)
                                {
                                     0xFF, 0x01                                     
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If (LEqual (Arg2, One))
                        {
                            Store (ACSD, Local0)
                            Return (Local0)
                        }

                        If (LEqual (Arg2, 0x02))
                        {
                            Store (I5BS, Local0)
                            Return (Local0)
                        }

                        If (LEqual (Arg2, 0x03))
                        {
                            Store (UHBS, Local0)
                            Return (Local0)
                        }

                        If (LEqual (Arg2, 0x06))
                        {
                            Store (AXMU, Local0)
                            ShiftLeft (Local0, One, Local0)
                            Or (Local0, AXSU, Local0)
                            Store (AXMR, Local1)
                            ShiftLeft (Local1, One, Local1)
                            Or (Local1, AXSR, Local1)
                            ShiftLeft (Local1, 0x02, Local1)
                            Or (Local0, Local1, Local0)
                            Return (Local0)
                        }

                        If (LEqual (Arg2, 0x04))
                        {
                            Return (WFRC)
                        }

                        If (LEqual (Arg2, 0x05))
                        {
                            Return (WFUC)
                        }

                        If (LEqual (Arg2, 0x07))
                        {
                            Return (UNI4)
                        }

                        If (LEqual (Arg2, 0x08))
                        {
                            Return (WFIC)
                        }

                        Return (Zero)
                    }

                    Method (EDSM, 1, Serialized)
                    {
                        If (LEqual (Arg0, ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (WIST ())
                        {
                            If (EDSM (Arg0))
                            {
                                Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                            }

                            If (IDSM (Arg0))
                            {
                                Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                            }
                        }

                        If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                        {
                            If (LEqual (Arg0, ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d")))
                            {
                                If (LEqual (Arg2, Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x09                                           
                                    })
                                }

                                If (LEqual (Arg2, One)){}
                                If (LEqual (Arg2, 0x02)){}
                                If (LEqual (Arg2, 0x03))
                                {
                                    If (LEqual (WRTO, One)){}
                                    ElseIf (LEqual (WRTO, 0x03)){}
                                    Else
                                    {
                                    }

                                    Return (WRTO)
                                }
                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }
            }
        }

        If (CondRefOf (\_SB.PC00.RP28.PXSX))
        {
            Scope (_SB.PC00.RP28.PXSX)
            {
                OperationRegion (RPXX, SystemMemory, GMIO (^_ADR, _ADR), 0x30)
                Field (RPXX, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x2C), 
                    SVID,   16
                }

                OperationRegion (FLDR, SystemMemory, Add (GMIO (^_ADR, _ADR), 0x44), 0x06)
                Field (FLDR, ByteAcc, NoLock, Preserve)
                {
                    DCAP,   32, 
                    DCTR,   16
                }

                Method (WIST, 0, Serialized)
                {
                    If (CondRefOf (VDID))
                    {
                        Switch (ToInteger (VDID))
                        {
                            Case (0x25268086)
                            {
                                Return (One)
                            }
                            Case (0x271B8086)
                            {
                                Return (One)
                            }
                            Case (0x27238086)
                            {
                                Return (One)
                            }
                            Case (0x27258086)
                            {
                                Return (One)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (WWST, 0, Serialized)
                {
                    If (CondRefOf (VDID))
                    {
                        Switch (ToInteger (VDID))
                        {
                            Case (0x73608086)
                            {
                                Return (One)
                            }
                            Case (0x75608086)
                            {
                                Return (One)
                            }
                            Case (0x4D7514C3)
                            {
                                Return (One)
                            }
                            Default
                            {
                                Return (Zero)
                            }

                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                If (WIST ())
                {
                    PowerResource (WRST, 0x05, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (One)
                        }

                        Method (_ON, 0, NotSerialized)  // _ON_: Power On
                        {
                        }

                        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                        {
                        }

                        Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                        {
                            If (And (DCAP, 0x10000000))
                            {
                                Store (DCTR, Local0)
                                Or (Local0, 0x8000, Local0)
                                Store (Local0, DCTR)
                            }
                        }
                    }

                    Name (SPLX, Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0x80000000, 
                            0x80000000, 
                            0x80000000
                        }
                    })
                    Method (SPLC, 0, Serialized)
                    {
                        Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                        Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                        Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                        Return (SPLX)
                    }

                    Name (WANX, Package (0x03)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0x80000000, 
                            0x80000000, 
                            0x80000000
                        }, 

                        Package (0x03)
                        {
                            0x80000000, 
                            0x80000000, 
                            0x80000000
                        }
                    })
                    Method (WAND, 0, Serialized)
                    {
                        Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                        Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                        Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                        Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                        Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                        Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                        Return (WANX)
                    }

                    Name (WRDX, Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x80000000, 
                            0x8000
                        }
                    })
                    Method (WRDD, 0, Serialized)
                    {
                        Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                        Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                        Return (WRDX)
                    }

                    Name (WRDY, Package (0x02)
                    {
                        0x02, 
                        Package (0x2E)
                        {
                            0x07, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80
                        }
                    })
                    Method (WRDS, 0, Serialized)
                    {
                        Store (STXE, Index (DerefOf (Index (WRDY, One)), One))
                        Store (ST10, Index (DerefOf (Index (WRDY, One)), 0x02))
                        Store (ST11, Index (DerefOf (Index (WRDY, One)), 0x03))
                        Store (ST12, Index (DerefOf (Index (WRDY, One)), 0x04))
                        Store (ST13, Index (DerefOf (Index (WRDY, One)), 0x05))
                        Store (ST14, Index (DerefOf (Index (WRDY, One)), 0x06))
                        Store (ST15, Index (DerefOf (Index (WRDY, One)), 0x07))
                        Store (ST16, Index (DerefOf (Index (WRDY, One)), 0x08))
                        Store (ST17, Index (DerefOf (Index (WRDY, One)), 0x09))
                        Store (ST18, Index (DerefOf (Index (WRDY, One)), 0x0A))
                        Store (ST19, Index (DerefOf (Index (WRDY, One)), 0x0B))
                        Store (ST50, Index (DerefOf (Index (WRDY, One)), 0x0C))
                        Store (ST51, Index (DerefOf (Index (WRDY, One)), 0x0D))
                        Store (ST52, Index (DerefOf (Index (WRDY, One)), 0x0E))
                        Store (ST53, Index (DerefOf (Index (WRDY, One)), 0x0F))
                        Store (ST54, Index (DerefOf (Index (WRDY, One)), 0x10))
                        Store (ST55, Index (DerefOf (Index (WRDY, One)), 0x11))
                        Store (ST56, Index (DerefOf (Index (WRDY, One)), 0x12))
                        Store (ST57, Index (DerefOf (Index (WRDY, One)), 0x13))
                        Store (ST58, Index (DerefOf (Index (WRDY, One)), 0x14))
                        Store (ST59, Index (DerefOf (Index (WRDY, One)), 0x15))
                        Store (ST5A, Index (DerefOf (Index (WRDY, One)), 0x16))
                        Store (ST5B, Index (DerefOf (Index (WRDY, One)), 0x17))
                        Store (CD10, Index (DerefOf (Index (WRDY, One)), 0x18))
                        Store (CD11, Index (DerefOf (Index (WRDY, One)), 0x19))
                        Store (CD12, Index (DerefOf (Index (WRDY, One)), 0x1A))
                        Store (CD13, Index (DerefOf (Index (WRDY, One)), 0x1B))
                        Store (CD14, Index (DerefOf (Index (WRDY, One)), 0x1C))
                        Store (CD15, Index (DerefOf (Index (WRDY, One)), 0x1D))
                        Store (CD16, Index (DerefOf (Index (WRDY, One)), 0x1E))
                        Store (CD17, Index (DerefOf (Index (WRDY, One)), 0x1F))
                        Store (CD18, Index (DerefOf (Index (WRDY, One)), 0x20))
                        Store (CD19, Index (DerefOf (Index (WRDY, One)), 0x21))
                        Store (CD1A, Index (DerefOf (Index (WRDY, One)), 0x22))
                        Store (CD20, Index (DerefOf (Index (WRDY, One)), 0x23))
                        Store (CD21, Index (DerefOf (Index (WRDY, One)), 0x24))
                        Store (CD22, Index (DerefOf (Index (WRDY, One)), 0x25))
                        Store (CD23, Index (DerefOf (Index (WRDY, One)), 0x26))
                        Store (CD24, Index (DerefOf (Index (WRDY, One)), 0x27))
                        Store (CD25, Index (DerefOf (Index (WRDY, One)), 0x28))
                        Store (CD26, Index (DerefOf (Index (WRDY, One)), 0x29))
                        Store (CD27, Index (DerefOf (Index (WRDY, One)), 0x2A))
                        Store (CD28, Index (DerefOf (Index (WRDY, One)), 0x2B))
                        Store (CD29, Index (DerefOf (Index (WRDY, One)), 0x2C))
                        Store (CD2A, Index (DerefOf (Index (WRDY, One)), 0x2D))
                        Return (WRDY)
                    }

                    Name (EWRY, Package (0x02)
                    {
                        0x02, 
                        Package (0x87)
                        {
                            0x07, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80
                        }
                    })
                    Method (EWRD, 0, Serialized)
                    {
                        Store (STDE, Index (DerefOf (Index (EWRY, One)), One))
                        Store (STRS, Index (DerefOf (Index (EWRY, One)), 0x02))
                        Store (ST20, Index (DerefOf (Index (EWRY, One)), 0x03))
                        Store (ST21, Index (DerefOf (Index (EWRY, One)), 0x04))
                        Store (ST22, Index (DerefOf (Index (EWRY, One)), 0x05))
                        Store (ST23, Index (DerefOf (Index (EWRY, One)), 0x06))
                        Store (ST24, Index (DerefOf (Index (EWRY, One)), 0x07))
                        Store (ST25, Index (DerefOf (Index (EWRY, One)), 0x08))
                        Store (ST26, Index (DerefOf (Index (EWRY, One)), 0x09))
                        Store (ST27, Index (DerefOf (Index (EWRY, One)), 0x0A))
                        Store (ST28, Index (DerefOf (Index (EWRY, One)), 0x0B))
                        Store (ST29, Index (DerefOf (Index (EWRY, One)), 0x0C))
                        Store (ST60, Index (DerefOf (Index (EWRY, One)), 0x0D))
                        Store (ST61, Index (DerefOf (Index (EWRY, One)), 0x0E))
                        Store (ST62, Index (DerefOf (Index (EWRY, One)), 0x0F))
                        Store (ST63, Index (DerefOf (Index (EWRY, One)), 0x10))
                        Store (ST64, Index (DerefOf (Index (EWRY, One)), 0x11))
                        Store (ST65, Index (DerefOf (Index (EWRY, One)), 0x12))
                        Store (ST66, Index (DerefOf (Index (EWRY, One)), 0x13))
                        Store (ST67, Index (DerefOf (Index (EWRY, One)), 0x14))
                        Store (ST68, Index (DerefOf (Index (EWRY, One)), 0x15))
                        Store (ST69, Index (DerefOf (Index (EWRY, One)), 0x16))
                        Store (ST6A, Index (DerefOf (Index (EWRY, One)), 0x17))
                        Store (ST6B, Index (DerefOf (Index (EWRY, One)), 0x18))
                        Store (ST30, Index (DerefOf (Index (EWRY, One)), 0x19))
                        Store (ST31, Index (DerefOf (Index (EWRY, One)), 0x1A))
                        Store (ST32, Index (DerefOf (Index (EWRY, One)), 0x1B))
                        Store (ST33, Index (DerefOf (Index (EWRY, One)), 0x1C))
                        Store (ST34, Index (DerefOf (Index (EWRY, One)), 0x1D))
                        Store (ST35, Index (DerefOf (Index (EWRY, One)), 0x1E))
                        Store (ST36, Index (DerefOf (Index (EWRY, One)), 0x1F))
                        Store (ST37, Index (DerefOf (Index (EWRY, One)), 0x20))
                        Store (ST38, Index (DerefOf (Index (EWRY, One)), 0x21))
                        Store (ST39, Index (DerefOf (Index (EWRY, One)), 0x22))
                        Store (ST70, Index (DerefOf (Index (EWRY, One)), 0x23))
                        Store (ST71, Index (DerefOf (Index (EWRY, One)), 0x24))
                        Store (ST72, Index (DerefOf (Index (EWRY, One)), 0x25))
                        Store (ST73, Index (DerefOf (Index (EWRY, One)), 0x26))
                        Store (ST74, Index (DerefOf (Index (EWRY, One)), 0x27))
                        Store (ST75, Index (DerefOf (Index (EWRY, One)), 0x28))
                        Store (ST76, Index (DerefOf (Index (EWRY, One)), 0x29))
                        Store (ST77, Index (DerefOf (Index (EWRY, One)), 0x2A))
                        Store (ST78, Index (DerefOf (Index (EWRY, One)), 0x2B))
                        Store (ST79, Index (DerefOf (Index (EWRY, One)), 0x2C))
                        Store (ST7A, Index (DerefOf (Index (EWRY, One)), 0x2D))
                        Store (ST7B, Index (DerefOf (Index (EWRY, One)), 0x2E))
                        Store (ST40, Index (DerefOf (Index (EWRY, One)), 0x2F))
                        Store (ST41, Index (DerefOf (Index (EWRY, One)), 0x30))
                        Store (ST42, Index (DerefOf (Index (EWRY, One)), 0x31))
                        Store (ST43, Index (DerefOf (Index (EWRY, One)), 0x32))
                        Store (ST44, Index (DerefOf (Index (EWRY, One)), 0x33))
                        Store (ST45, Index (DerefOf (Index (EWRY, One)), 0x34))
                        Store (ST46, Index (DerefOf (Index (EWRY, One)), 0x35))
                        Store (ST47, Index (DerefOf (Index (EWRY, One)), 0x36))
                        Store (ST48, Index (DerefOf (Index (EWRY, One)), 0x37))
                        Store (ST49, Index (DerefOf (Index (EWRY, One)), 0x38))
                        Store (ST80, Index (DerefOf (Index (EWRY, One)), 0x39))
                        Store (ST81, Index (DerefOf (Index (EWRY, One)), 0x3A))
                        Store (ST82, Index (DerefOf (Index (EWRY, One)), 0x3B))
                        Store (ST83, Index (DerefOf (Index (EWRY, One)), 0x3C))
                        Store (ST84, Index (DerefOf (Index (EWRY, One)), 0x3D))
                        Store (ST85, Index (DerefOf (Index (EWRY, One)), 0x3E))
                        Store (ST86, Index (DerefOf (Index (EWRY, One)), 0x3F))
                        Store (ST87, Index (DerefOf (Index (EWRY, One)), 0x40))
                        Store (ST88, Index (DerefOf (Index (EWRY, One)), 0x41))
                        Store (ST89, Index (DerefOf (Index (EWRY, One)), 0x42))
                        Store (ST8A, Index (DerefOf (Index (EWRY, One)), 0x43))
                        Store (ST8B, Index (DerefOf (Index (EWRY, One)), 0x44))
                        Store (CD30, Index (DerefOf (Index (EWRY, One)), 0x45))
                        Store (CD31, Index (DerefOf (Index (EWRY, One)), 0x46))
                        Store (CD32, Index (DerefOf (Index (EWRY, One)), 0x47))
                        Store (CD33, Index (DerefOf (Index (EWRY, One)), 0x48))
                        Store (CD34, Index (DerefOf (Index (EWRY, One)), 0x49))
                        Store (CD35, Index (DerefOf (Index (EWRY, One)), 0x4A))
                        Store (CD36, Index (DerefOf (Index (EWRY, One)), 0x4B))
                        Store (CD37, Index (DerefOf (Index (EWRY, One)), 0x4C))
                        Store (CD38, Index (DerefOf (Index (EWRY, One)), 0x4D))
                        Store (CD39, Index (DerefOf (Index (EWRY, One)), 0x4E))
                        Store (CD3A, Index (DerefOf (Index (EWRY, One)), 0x4F))
                        Store (CD3B, Index (DerefOf (Index (EWRY, One)), 0x50))
                        Store (CD3C, Index (DerefOf (Index (EWRY, One)), 0x51))
                        Store (CD3D, Index (DerefOf (Index (EWRY, One)), 0x52))
                        Store (CD3E, Index (DerefOf (Index (EWRY, One)), 0x53))
                        Store (CD3F, Index (DerefOf (Index (EWRY, One)), 0x54))
                        Store (CD40, Index (DerefOf (Index (EWRY, One)), 0x55))
                        Store (CD41, Index (DerefOf (Index (EWRY, One)), 0x56))
                        Store (CD42, Index (DerefOf (Index (EWRY, One)), 0x57))
                        Store (CD43, Index (DerefOf (Index (EWRY, One)), 0x58))
                        Store (CD44, Index (DerefOf (Index (EWRY, One)), 0x59))
                        Store (CD45, Index (DerefOf (Index (EWRY, One)), 0x5A))
                        Store (CD46, Index (DerefOf (Index (EWRY, One)), 0x5B))
                        Store (CD47, Index (DerefOf (Index (EWRY, One)), 0x5C))
                        Store (CD48, Index (DerefOf (Index (EWRY, One)), 0x5D))
                        Store (CD49, Index (DerefOf (Index (EWRY, One)), 0x5E))
                        Store (CD4A, Index (DerefOf (Index (EWRY, One)), 0x5F))
                        Store (CD4B, Index (DerefOf (Index (EWRY, One)), 0x60))
                        Store (CD4C, Index (DerefOf (Index (EWRY, One)), 0x61))
                        Store (CD4D, Index (DerefOf (Index (EWRY, One)), 0x62))
                        Store (CD4E, Index (DerefOf (Index (EWRY, One)), 0x63))
                        Store (CD4F, Index (DerefOf (Index (EWRY, One)), 0x64))
                        Store (CD50, Index (DerefOf (Index (EWRY, One)), 0x65))
                        Store (CD51, Index (DerefOf (Index (EWRY, One)), 0x66))
                        Store (CD52, Index (DerefOf (Index (EWRY, One)), 0x67))
                        Store (CD53, Index (DerefOf (Index (EWRY, One)), 0x68))
                        Store (CD54, Index (DerefOf (Index (EWRY, One)), 0x69))
                        Store (CD55, Index (DerefOf (Index (EWRY, One)), 0x6A))
                        Store (CD56, Index (DerefOf (Index (EWRY, One)), 0x6B))
                        Store (CD57, Index (DerefOf (Index (EWRY, One)), 0x6C))
                        Store (CD58, Index (DerefOf (Index (EWRY, One)), 0x6D))
                        Store (CD59, Index (DerefOf (Index (EWRY, One)), 0x6E))
                        Store (CD5A, Index (DerefOf (Index (EWRY, One)), 0x6F))
                        Store (CD5B, Index (DerefOf (Index (EWRY, One)), 0x70))
                        Store (CD5C, Index (DerefOf (Index (EWRY, One)), 0x71))
                        Store (CD5D, Index (DerefOf (Index (EWRY, One)), 0x72))
                        Store (CD5E, Index (DerefOf (Index (EWRY, One)), 0x73))
                        Store (CD5F, Index (DerefOf (Index (EWRY, One)), 0x74))
                        Store (CD60, Index (DerefOf (Index (EWRY, One)), 0x75))
                        Store (CD61, Index (DerefOf (Index (EWRY, One)), 0x76))
                        Store (CD62, Index (DerefOf (Index (EWRY, One)), 0x77))
                        Store (CD63, Index (DerefOf (Index (EWRY, One)), 0x78))
                        Store (CD64, Index (DerefOf (Index (EWRY, One)), 0x79))
                        Store (CD65, Index (DerefOf (Index (EWRY, One)), 0x7A))
                        Store (CD66, Index (DerefOf (Index (EWRY, One)), 0x7B))
                        Store (CD67, Index (DerefOf (Index (EWRY, One)), 0x7C))
                        Store (CD68, Index (DerefOf (Index (EWRY, One)), 0x7D))
                        Store (CD69, Index (DerefOf (Index (EWRY, One)), 0x7E))
                        Store (CD6A, Index (DerefOf (Index (EWRY, One)), 0x7F))
                        Store (CD6B, Index (DerefOf (Index (EWRY, One)), 0x80))
                        Store (CD6C, Index (DerefOf (Index (EWRY, One)), 0x81))
                        Store (CD6D, Index (DerefOf (Index (EWRY, One)), 0x82))
                        Store (CD6E, Index (DerefOf (Index (EWRY, One)), 0x83))
                        Store (CD6F, Index (DerefOf (Index (EWRY, One)), 0x84))
                        Store (CD70, Index (DerefOf (Index (EWRY, One)), 0x85))
                        Store (CD71, Index (DerefOf (Index (EWRY, One)), 0x86))
                        Return (EWRY)
                    }

                    Name (WGDY, Package (0x02)
                    {
                        0x03, 
                        Package (0x4A)
                        {
                            0x07, 
                            0x03, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80
                        }
                    })
                    Method (WGDS, 0, Serialized)
                    {
                        Store (SDGN, Index (DerefOf (Index (WGDY, One)), One))
                        Store (SD11, Index (DerefOf (Index (WGDY, One)), 0x02))
                        Store (SD12, Index (DerefOf (Index (WGDY, One)), 0x03))
                        Store (SD13, Index (DerefOf (Index (WGDY, One)), 0x04))
                        Store (SD14, Index (DerefOf (Index (WGDY, One)), 0x05))
                        Store (SD15, Index (DerefOf (Index (WGDY, One)), 0x06))
                        Store (SD16, Index (DerefOf (Index (WGDY, One)), 0x07))
                        Store (SD17, Index (DerefOf (Index (WGDY, One)), 0x08))
                        Store (SD18, Index (DerefOf (Index (WGDY, One)), 0x09))
                        Store (SD19, Index (DerefOf (Index (WGDY, One)), 0x0A))
                        Store (SD21, Index (DerefOf (Index (WGDY, One)), 0x0B))
                        Store (SD22, Index (DerefOf (Index (WGDY, One)), 0x0C))
                        Store (SD23, Index (DerefOf (Index (WGDY, One)), 0x0D))
                        Store (SD24, Index (DerefOf (Index (WGDY, One)), 0x0E))
                        Store (SD25, Index (DerefOf (Index (WGDY, One)), 0x0F))
                        Store (SD26, Index (DerefOf (Index (WGDY, One)), 0x10))
                        Store (SD27, Index (DerefOf (Index (WGDY, One)), 0x11))
                        Store (SD28, Index (DerefOf (Index (WGDY, One)), 0x12))
                        Store (SD29, Index (DerefOf (Index (WGDY, One)), 0x13))
                        Store (SD31, Index (DerefOf (Index (WGDY, One)), 0x14))
                        Store (SD32, Index (DerefOf (Index (WGDY, One)), 0x15))
                        Store (SD33, Index (DerefOf (Index (WGDY, One)), 0x16))
                        Store (SD34, Index (DerefOf (Index (WGDY, One)), 0x17))
                        Store (SD35, Index (DerefOf (Index (WGDY, One)), 0x18))
                        Store (SD36, Index (DerefOf (Index (WGDY, One)), 0x19))
                        Store (SD37, Index (DerefOf (Index (WGDY, One)), 0x1A))
                        Store (SD38, Index (DerefOf (Index (WGDY, One)), 0x1B))
                        Store (SD39, Index (DerefOf (Index (WGDY, One)), 0x1C))
                        Store (SD41, Index (DerefOf (Index (WGDY, One)), 0x1D))
                        Store (SD42, Index (DerefOf (Index (WGDY, One)), 0x1E))
                        Store (SD43, Index (DerefOf (Index (WGDY, One)), 0x1F))
                        Store (SD44, Index (DerefOf (Index (WGDY, One)), 0x20))
                        Store (SD45, Index (DerefOf (Index (WGDY, One)), 0x21))
                        Store (SD46, Index (DerefOf (Index (WGDY, One)), 0x22))
                        Store (SD47, Index (DerefOf (Index (WGDY, One)), 0x23))
                        Store (SD48, Index (DerefOf (Index (WGDY, One)), 0x24))
                        Store (SD49, Index (DerefOf (Index (WGDY, One)), 0x25))
                        Store (SD51, Index (DerefOf (Index (WGDY, One)), 0x26))
                        Store (SD52, Index (DerefOf (Index (WGDY, One)), 0x27))
                        Store (SD53, Index (DerefOf (Index (WGDY, One)), 0x28))
                        Store (SD54, Index (DerefOf (Index (WGDY, One)), 0x29))
                        Store (SD55, Index (DerefOf (Index (WGDY, One)), 0x2A))
                        Store (SD56, Index (DerefOf (Index (WGDY, One)), 0x2B))
                        Store (SD57, Index (DerefOf (Index (WGDY, One)), 0x2C))
                        Store (SD58, Index (DerefOf (Index (WGDY, One)), 0x2D))
                        Store (SD59, Index (DerefOf (Index (WGDY, One)), 0x2E))
                        Store (SD61, Index (DerefOf (Index (WGDY, One)), 0x2F))
                        Store (SD62, Index (DerefOf (Index (WGDY, One)), 0x30))
                        Store (SD63, Index (DerefOf (Index (WGDY, One)), 0x31))
                        Store (SD64, Index (DerefOf (Index (WGDY, One)), 0x32))
                        Store (SD65, Index (DerefOf (Index (WGDY, One)), 0x33))
                        Store (SD66, Index (DerefOf (Index (WGDY, One)), 0x34))
                        Store (SD67, Index (DerefOf (Index (WGDY, One)), 0x35))
                        Store (SD68, Index (DerefOf (Index (WGDY, One)), 0x36))
                        Store (SD69, Index (DerefOf (Index (WGDY, One)), 0x37))
                        Store (SD71, Index (DerefOf (Index (WGDY, One)), 0x38))
                        Store (SD72, Index (DerefOf (Index (WGDY, One)), 0x39))
                        Store (SD73, Index (DerefOf (Index (WGDY, One)), 0x3A))
                        Store (SD74, Index (DerefOf (Index (WGDY, One)), 0x3B))
                        Store (SD75, Index (DerefOf (Index (WGDY, One)), 0x3C))
                        Store (SD76, Index (DerefOf (Index (WGDY, One)), 0x3D))
                        Store (SD77, Index (DerefOf (Index (WGDY, One)), 0x3E))
                        Store (SD78, Index (DerefOf (Index (WGDY, One)), 0x3F))
                        Store (SD79, Index (DerefOf (Index (WGDY, One)), 0x40))
                        Store (SD81, Index (DerefOf (Index (WGDY, One)), 0x41))
                        Store (SD82, Index (DerefOf (Index (WGDY, One)), 0x42))
                        Store (SD83, Index (DerefOf (Index (WGDY, One)), 0x43))
                        Store (SD84, Index (DerefOf (Index (WGDY, One)), 0x44))
                        Store (SD85, Index (DerefOf (Index (WGDY, One)), 0x45))
                        Store (SD86, Index (DerefOf (Index (WGDY, One)), 0x46))
                        Store (SD87, Index (DerefOf (Index (WGDY, One)), 0x47))
                        Store (SD88, Index (DerefOf (Index (WGDY, One)), 0x48))
                        Store (SD89, Index (DerefOf (Index (WGDY, One)), 0x49))
                        Return (WGDY)
                    }

                    Name (ECKY, Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            Zero
                        }
                    })
                    Method (ECKV, 0, Serialized)
                    {
                        Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                        Return (ECKY)
                    }

                    Name (PPAY, Package (0x02)
                    {
                        One, 
                        Package (0x18)
                        {
                            0x07, 
                            Zero, 
                            0x18, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x18, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28, 
                            0x28
                        }
                    })
                    Method (PPAG, 0, Serialized)
                    {
                        Store (WAGE, Index (DerefOf (Index (PPAY, One)), One))
                        Store (AGA1, Index (DerefOf (Index (PPAY, One)), 0x02))
                        Store (AGA2, Index (DerefOf (Index (PPAY, One)), 0x03))
                        Store (AGA3, Index (DerefOf (Index (PPAY, One)), 0x04))
                        Store (AGA4, Index (DerefOf (Index (PPAY, One)), 0x05))
                        Store (AGA5, Index (DerefOf (Index (PPAY, One)), 0x06))
                        Store (AGA6, Index (DerefOf (Index (PPAY, One)), 0x07))
                        Store (AGA7, Index (DerefOf (Index (PPAY, One)), 0x08))
                        Store (AGA8, Index (DerefOf (Index (PPAY, One)), 0x09))
                        Store (AGA9, Index (DerefOf (Index (PPAY, One)), 0x0A))
                        Store (AGAA, Index (DerefOf (Index (PPAY, One)), 0x0B))
                        Store (AGAB, Index (DerefOf (Index (PPAY, One)), 0x0C))
                        Store (AGB1, Index (DerefOf (Index (PPAY, One)), 0x0D))
                        Store (AGB2, Index (DerefOf (Index (PPAY, One)), 0x0E))
                        Store (AGB3, Index (DerefOf (Index (PPAY, One)), 0x0F))
                        Store (AGB4, Index (DerefOf (Index (PPAY, One)), 0x10))
                        Store (AGB5, Index (DerefOf (Index (PPAY, One)), 0x11))
                        Store (AGB6, Index (DerefOf (Index (PPAY, One)), 0x12))
                        Store (AGB7, Index (DerefOf (Index (PPAY, One)), 0x13))
                        Store (AGB8, Index (DerefOf (Index (PPAY, One)), 0x14))
                        Store (AGB9, Index (DerefOf (Index (PPAY, One)), 0x15))
                        Store (AGBA, Index (DerefOf (Index (PPAY, One)), 0x16))
                        Store (AGBB, Index (DerefOf (Index (PPAY, One)), 0x17))
                        Return (PPAY)
                    }

                    Name (WTSY, Package (0x02)
                    {
                        One, 
                        Package (0x13)
                        {
                            0x07, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    })
                    Method (WTAS, 0, Serialized)
                    {
                        Store (WTSV, Index (DerefOf (Index (WTSY, One)), One))
                        Store (WTLE, Index (DerefOf (Index (WTSY, One)), 0x02))
                        Store (BL01, Index (DerefOf (Index (WTSY, One)), 0x03))
                        Store (BL02, Index (DerefOf (Index (WTSY, One)), 0x04))
                        Store (BL03, Index (DerefOf (Index (WTSY, One)), 0x05))
                        Store (BL04, Index (DerefOf (Index (WTSY, One)), 0x06))
                        Store (BL05, Index (DerefOf (Index (WTSY, One)), 0x07))
                        Store (BL06, Index (DerefOf (Index (WTSY, One)), 0x08))
                        Store (BL07, Index (DerefOf (Index (WTSY, One)), 0x09))
                        Store (BL08, Index (DerefOf (Index (WTSY, One)), 0x0A))
                        Store (BL09, Index (DerefOf (Index (WTSY, One)), 0x0B))
                        Store (BL10, Index (DerefOf (Index (WTSY, One)), 0x0C))
                        Store (BL11, Index (DerefOf (Index (WTSY, One)), 0x0D))
                        Store (BL12, Index (DerefOf (Index (WTSY, One)), 0x0E))
                        Store (BL13, Index (DerefOf (Index (WTSY, One)), 0x0F))
                        Store (BL14, Index (DerefOf (Index (WTSY, One)), 0x10))
                        Store (BL15, Index (DerefOf (Index (WTSY, One)), 0x11))
                        Store (BL16, Index (DerefOf (Index (WTSY, One)), 0x12))
                        Return (WTSY)
                    }

                    Name (WAIY, Package (0x02)
                    {
                        Zero, 
                        Package (0x04)
                        {
                            0x07, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    })
                    Method (WAIS, 0, Serialized)
                    {
                        Store (WLBI, Index (DerefOf (Index (WAIY, One)), One))
                        Store (WHBI, Index (DerefOf (Index (WAIY, One)), 0x02))
                        Return (WAIY)
                    }

                    Name (SADX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            0x80000000
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            0x80000000
                        }
                    })
                    Method (SADS, 0, Serialized)
                    {
                        Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                        Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                        Return (SADX)
                    }

                    Name (GPCX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }
                    })
                    Method (GPC, 0, Serialized)
                    {
                        Return (GPCX)
                    }
                }

                If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                {
                    Method (FHRF, 1, NotSerialized)
                    {
                        If (LNotEqual (GGOV (PRST), WPRP))
                        {
                            DL23 ()
                            SGOV (PRST, WPRP)
                        }
                        Else
                        {
                            ADBG ("Assume WWAN DL23() is already done")
                        }

                        Sleep (TR2B)
                        SGOV (WBRS, PBRS)
                        If (LEqual (Arg0, Zero))
                        {
                            Sleep (TBTG)
                        }
                        ElseIf (LEqual (Arg0, One))
                        {
                            SPCO (WCLK, Zero)
                            Sleep (TB2F)
                            SGOV (WFCP, And (Not (PFCP), One))
                            Sleep (TFDI)
                        }
                        Else
                        {
                        }
                    }

                    Method (SHRF, 0, NotSerialized)
                    {
                        PSD0 (SLOT)
                        SPCO (WCLK, One)
                        SGOV (WFCP, PFCP)
                        Sleep (TN2B)
                        SGOV (WBRS, And (Not (PBRS), One))
                        Sleep (TB2R)
                        SGOV (PRST, And (Not (WPRP), One))
                        L23D ()
                    }

                    Method (DOSV, 0, NotSerialized)
                    {
                        Store (Zero, Local0)
                        While (LAnd (LNotEqual (SVID, WSID), LLess (Local0, WSTO)))
                        {
                            Increment (Local0)
                            Sleep (One)
                        }
                    }

                    Method (_RST, 0, Serialized)  // _RST: Device Reset
                    {
                        If (LEqual (WWEN, 0x02))
                        {
                            Store (Acquire (WWMT, 0x03E8), Local0)
                            If (LEqual (Local0, Zero))
                            {
                                FHRF (Zero)
                                SHRF ()
                                Release (WWMT)
                                DOSV ()
                            }
                        }
                        Else
                        {
                            SGOV (WBRS, PBRS)
                            Sleep (0xC8)
                            Notify (PXSX, One)
                            SGOV (PRST, And (Not (WPRP), One))
                            SGOV (WBRS, And (Not (PBRS), One))
                            Sleep (0xC8)
                            Store (Zero, Local0)
                            While (LEqual (LASX, Zero))
                            {
                                If (LGreater (Local0, 0x14))
                                {
                                    Break
                                }

                                Sleep (0x10)
                                Increment (Local0)
                            }

                            Sleep (0x0A)
                            Notify (PXSX, One)
                        }
                    }

                    PowerResource (MRST, 0x05, 0x0000)
                    {
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            Return (One)
                        }

                        Method (_ON, 0, Serialized)  // _ON_: Power On
                        {
                        }

                        Method (_OFF, 0, Serialized)  // _OFF: Power Off
                        {
                        }

                        Method (_RST, 0, Serialized)  // _RST: Device Reset
                        {
                            Store (Acquire (WWMT, 0x03E8), Local0)
                            If (LEqual (Local0, Zero))
                            {
                                FHRF (One)
                                SHRF ()
                                Release (WWMT)
                                DOSV ()
                            }
                        }
                    }
                }

                If (LOr (WIST (), LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT))))
                {
                    PowerResource (DRST, 0x05, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (One)
                        }

                        Method (_ON, 0, NotSerialized)  // _ON_: Power On
                        {
                        }

                        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                        {
                        }

                        Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                        {
                            If (And (DCAP, 0x10000000))
                            {
                                Store (DCTR, Local0)
                                Or (Local0, 0x8000, Local0)
                                Store (Local0, DCTR)
                            }
                        }
                    }

                    Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                    {
                        If (WIST ())
                        {
                            If (CondRefOf (WRST))
                            {
                                Return (Package (0x01)
                                {
                                    WRST
                                })
                            }
                        }

                        If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                        {
                            If (CondRefOf (MRST))
                            {
                                Return (Package (0x01)
                                {
                                    MRST
                                })
                            }
                        }

                        Return (Package (0x01)
                        {
                            DRST
                        })
                    }

                    Method (IFUN, 4, Serialized)
                    {
                        If (LEqual (Arg2, Zero))
                        {
                            If (LEqual (Arg1, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x0F                                           
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If (LEqual (Arg2, One))
                        {
                            ShiftLeft (CVPR, Zero, Local0)
                            Return (Local0)
                        }

                        If (LEqual (Arg2, 0x02))
                        {
                            CreateWordField (Arg3, Zero, CMDT)
                            CreateWordField (Arg3, 0x02, CMDP)
                            If (LEqual (CMDT, One))
                            {
                                If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                                {
                                    Return (^^^CNVW.RSTT)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            If (LEqual (CMDT, 0x02))
                            {
                                If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                                {
                                    Store (CMDP, ^^^CNVW.RSTT)
                                }

                                Return (Zero)
                            }

                            If (LEqual (CMDT, 0x03))
                            {
                                If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                                {
                                    Return (^^^CNVW.PRRS)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Return (Zero)
                        }

                        If (LEqual (Arg2, 0x03))
                        {
                            If (LEqual (CRFI, One))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }

                        Return (Zero)
                    }

                    Method (IDSM, 1, Serialized)
                    {
                        If (LEqual (Arg0, ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd")))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (EFUN, 4, Serialized)
                    {
                        If (LEqual (Arg2, Zero))
                        {
                            If (LEqual (Arg1, Zero))
                            {
                                Return (Buffer (0x02)
                                {
                                     0xFF, 0x01                                     
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If (LEqual (Arg2, One))
                        {
                            Store (ACSD, Local0)
                            Return (Local0)
                        }

                        If (LEqual (Arg2, 0x02))
                        {
                            Store (I5BS, Local0)
                            Return (Local0)
                        }

                        If (LEqual (Arg2, 0x03))
                        {
                            Store (UHBS, Local0)
                            Return (Local0)
                        }

                        If (LEqual (Arg2, 0x06))
                        {
                            Store (AXMU, Local0)
                            ShiftLeft (Local0, One, Local0)
                            Or (Local0, AXSU, Local0)
                            Store (AXMR, Local1)
                            ShiftLeft (Local1, One, Local1)
                            Or (Local1, AXSR, Local1)
                            ShiftLeft (Local1, 0x02, Local1)
                            Or (Local0, Local1, Local0)
                            Return (Local0)
                        }

                        If (LEqual (Arg2, 0x04))
                        {
                            Return (WFRC)
                        }

                        If (LEqual (Arg2, 0x05))
                        {
                            Return (WFUC)
                        }

                        If (LEqual (Arg2, 0x07))
                        {
                            Return (UNI4)
                        }

                        If (LEqual (Arg2, 0x08))
                        {
                            Return (WFIC)
                        }

                        Return (Zero)
                    }

                    Method (EDSM, 1, Serialized)
                    {
                        If (LEqual (Arg0, ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (WIST ())
                        {
                            If (EDSM (Arg0))
                            {
                                Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                            }

                            If (IDSM (Arg0))
                            {
                                Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                            }
                        }

                        If (LAnd (LNotEqual (WWEN, Zero), LEqual (WWRP, SLOT)))
                        {
                            If (LEqual (Arg0, ToUUID ("bad01b75-22a8-4f48-8792-bdde9467747d")))
                            {
                                If (LEqual (Arg2, Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x09                                           
                                    })
                                }

                                If (LEqual (Arg2, One)){}
                                If (LEqual (Arg2, 0x02)){}
                                If (LEqual (Arg2, 0x03))
                                {
                                    If (LEqual (WRTO, One)){}
                                    ElseIf (LEqual (WRTO, 0x03)){}
                                    Else
                                    {
                                    }

                                    Return (WRTO)
                                }
                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }
            }
        }
    }

    Scope (_SB)
    {
        Name (PDAT, Zero)
        Name (DSSI, Zero)
        Device (WFDE)
        {
            Name (_HID, "PNP0C14")  // _HID: Hardware ID
            Name (_UID, "DSarDev")  // _UID: Unique ID
            Name (_WDG, Buffer (0x3C)
            {
                /* 0000 */  0xEF, 0x9D, 0xC4, 0x2B, 0x15, 0x7B, 0x05, 0x4F,
                /* 0008 */  0x8B, 0xB7, 0xEE, 0x37, 0xB9, 0x54, 0x7C, 0x0B,
                /* 0010 */  0x44, 0x45, 0x01, 0x02, 0x3E, 0xA3, 0xFE, 0xA6,
                /* 0018 */  0xBF, 0xDA, 0xF5, 0x46, 0xBF, 0xC8, 0x46, 0x0D,
                /* 0020 */  0x96, 0x1B, 0xEC, 0x9F, 0xD0, 0x00, 0x01, 0x08,
                /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,
                /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,
                /* 0038 */  0x43, 0x43, 0x01, 0x00                         
            })
            Method (WMDE, 3, NotSerialized)
            {
                If (LEqual (Arg1, One))
                {
                    Return (One)
                }

                If (LEqual (Arg1, 0x02))
                {
                    If (LEqual (DSSI, Zero))
                    {
                        Store (0x00010001, PDAT)
                        Store (One, DSSI)
                    }

                    Return (One)
                }

                If (LEqual (Arg1, 0x03))
                {
                    Return (PDAT)
                }

                Return (Zero)
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event
            {
                If (LEqual (Arg0, 0xD0))
                {
                    Return (PDAT)
                }

                Return (Zero)
            }

            Name (WQCC, Buffer (0x0482)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,
                /* 0008 */  0x72, 0x04, 0x00, 0x00, 0xF4, 0x0F, 0x00, 0x00,
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,
                /* 0018 */  0x18, 0xC2, 0x87, 0x00, 0x01, 0x06, 0x18, 0x42,
                /* 0020 */  0x10, 0x05, 0x10, 0x8A, 0xA4, 0x82, 0x42, 0x04,
                /* 0028 */  0x8A, 0x43, 0x24, 0xC1, 0x0E, 0x60, 0x30, 0x1A,
                /* 0030 */  0x40, 0x24, 0x07, 0x42, 0x2E, 0x98, 0x98, 0x00,
                /* 0038 */  0x11, 0x10, 0xF2, 0x2A, 0xC0, 0xA6, 0x00, 0x93,
                /* 0040 */  0x20, 0xEA, 0xDF, 0x1F, 0xA2, 0x24, 0x38, 0x94,
                /* 0048 */  0x10, 0x08, 0x49, 0x14, 0x60, 0x5E, 0x80, 0x6E,
                /* 0050 */  0x01, 0x86, 0x05, 0xD8, 0x16, 0x60, 0x5A, 0x80,
                /* 0058 */  0x63, 0x48, 0x2A, 0x0D, 0x9C, 0x12, 0x58, 0x0A,
                /* 0060 */  0x84, 0x84, 0x0A, 0x50, 0x2E, 0xC0, 0xB7, 0x00,
                /* 0068 */  0xED, 0x88, 0x92, 0x2C, 0xC0, 0x32, 0x8C, 0x08,
                /* 0070 */  0x3C, 0x0A, 0x86, 0xC6, 0xA1, 0xB1, 0xC3, 0xB0,
                /* 0078 */  0x4C, 0x30, 0x0D, 0xE2, 0x30, 0xCA, 0x46, 0x16,
                /* 0080 */  0x81, 0x71, 0x3B, 0x15, 0x20, 0x57, 0x80, 0x30,
                /* 0088 */  0x01, 0xE2, 0x51, 0x85, 0xD1, 0x1C, 0x14, 0x09,
                /* 0090 */  0x00, 0x8D, 0x12, 0x33, 0x26, 0x02, 0xDB, 0x39,
                /* 0098 */  0xB6, 0x46, 0x71, 0x2A, 0x85, 0x0B, 0x90, 0x8E,
                /* 00A0 */  0xA1, 0x11, 0x1C, 0x57, 0x82, 0xE8, 0xC1, 0x82,
                /* 00A8 */  0x44, 0x8B, 0x13, 0xAD, 0x20, 0x4C, 0xCD, 0x22,
                /* 00B0 */  0x5C, 0x88, 0x28, 0x31, 0x8A, 0x86, 0x21, 0x28,
                /* 00B8 */  0x15, 0x8E, 0x49, 0x3E, 0x41, 0x85, 0x12, 0xD6,
                /* 00C0 */  0x48, 0x06, 0x8B, 0x7C, 0x6E, 0x71, 0x3D, 0x07,
                /* 00C8 */  0x4F, 0xEC, 0xF0, 0x8C, 0x53, 0x29, 0x88, 0xD0,
                /* 00D0 */  0x82, 0x99, 0xC0, 0xE3, 0x3A, 0x20, 0x8C, 0x0C,
                /* 00D8 */  0x08, 0x79, 0x16, 0x60, 0x7D, 0xA4, 0x84, 0xC0,
                /* 00E0 */  0xEE, 0x05, 0x28, 0x9B, 0x85, 0x1C, 0xCE, 0x4D,
                /* 00E8 */  0x63, 0x3B, 0x82, 0x16, 0x05, 0x68, 0x14, 0x60,
                /* 00F0 */  0x4B, 0x80, 0x37, 0x24, 0x19, 0x13, 0x60, 0x0D,
                /* 00F8 */  0x45, 0x58, 0x81, 0xCE, 0x30, 0x8A, 0xC5, 0x41,
                /* 0100 */  0x09, 0x21, 0x5A, 0x94, 0x90, 0x11, 0x3A, 0x83,
                /* 0108 */  0x24, 0xC8, 0xD1, 0x22, 0x46, 0x89, 0x1F, 0x32,
                /* 0110 */  0x4E, 0xFB, 0x83, 0x20, 0x11, 0xCF, 0x05, 0x92,
                /* 0118 */  0x70, 0x3C, 0xF0, 0x68, 0x50, 0x67, 0x81, 0x04,
                /* 0120 */  0xCF, 0x06, 0x1E, 0xDF, 0x79, 0x7A, 0x94, 0x06,
                /* 0128 */  0x39, 0xDF, 0x13, 0xAB, 0xF3, 0x50, 0x40, 0x86,
                /* 0130 */  0xCF, 0xB0, 0x12, 0xFC, 0xFF, 0xFF, 0x13, 0x7C,
                /* 0138 */  0x4A, 0xC0, 0xBB, 0x06, 0xD4, 0xF5, 0xE0, 0xE1,
                /* 0140 */  0x80, 0xCD, 0xD1, 0x70, 0x7C, 0x88, 0x9E, 0xEA,
                /* 0148 */  0x99, 0xB2, 0x91, 0x30, 0x88, 0x33, 0x7A, 0x2E,
                /* 0150 */  0xC0, 0x0E, 0xEB, 0x64, 0x1E, 0x0A, 0x4A, 0x15,
                /* 0158 */  0x60, 0xF6, 0x80, 0xA0, 0xD1, 0x25, 0x38, 0x1E,
                /* 0160 */  0xCF, 0xDC, 0xF3, 0x39, 0xE1, 0x04, 0x96, 0x3F,
                /* 0168 */  0x08, 0xD4, 0xC8, 0x0C, 0x6D, 0x83, 0xD3, 0xD2,
                /* 0170 */  0xA5, 0xC0, 0x57, 0x00, 0x13, 0x58, 0xEC, 0x91,
                /* 0178 */  0x82, 0x8E, 0x07, 0xFC, 0x8A, 0x6F, 0x09, 0x42,
                /* 0180 */  0x78, 0x73, 0xF0, 0x7C, 0x4D, 0x10, 0x2D, 0x30,
                /* 0188 */  0x76, 0x40, 0xF6, 0x2B, 0x00, 0x21, 0xF8, 0x4B,
                /* 0190 */  0xC4, 0x11, 0xBD, 0x27, 0x44, 0x78, 0x9E, 0xF0,
                /* 0198 */  0x90, 0x1E, 0x08, 0x42, 0xC4, 0xEA, 0xF1, 0xDA,
                /* 01A0 */  0x40, 0xCE, 0x09, 0xBE, 0x5F, 0xF8, 0xE8, 0x80,
                /* 01A8 */  0xBB, 0x39, 0x70, 0x02, 0x8B, 0x3C, 0x4A, 0xA0,
                /* 01B0 */  0x47, 0xC1, 0x8F, 0x02, 0x27, 0x71, 0x4C, 0x67,
                /* 01B8 */  0x14, 0xFC, 0x98, 0xA2, 0x9C, 0xC8, 0x41, 0xF9,
                /* 01C0 */  0x90, 0x61, 0x84, 0xE8, 0xCF, 0x16, 0xCF, 0x1A,
                /* 01C8 */  0xD6, 0x3C, 0x01, 0x9D, 0x1A, 0xCE, 0xEB, 0x8D,
                /* 01D0 */  0xC0, 0x63, 0x94, 0x87, 0x33, 0x01, 0x13, 0xBE,
                /* 01D8 */  0x5C, 0xD9, 0xF8, 0x40, 0xB0, 0x81, 0x92, 0x28,
                /* 01E0 */  0xE7, 0x04, 0x8D, 0x2A, 0xE6, 0x09, 0x7A, 0x52,
                /* 01E8 */  0xC6, 0x3D, 0x25, 0x1C, 0x12, 0xD3, 0x3A, 0x33,
                /* 01F0 */  0x82, 0xF4, 0x94, 0xC1, 0x25, 0x43, 0xEB, 0x90,
                /* 01F8 */  0xC2, 0xC5, 0x52, 0x48, 0x2A, 0x84, 0x86, 0xE5,
                /* 0200 */  0x51, 0x58, 0x1C, 0x1C, 0x05, 0xF1, 0x49, 0xC0,
                /* 0208 */  0xFF, 0xFF, 0xE0, 0x10, 0x72, 0x72, 0x7A, 0x40,
                /* 0210 */  0x4F, 0x04, 0x37, 0x0E, 0x7C, 0x40, 0x08, 0x9D,
                /* 0218 */  0x25, 0x7C, 0x7A, 0xC0, 0xE3, 0x1D, 0xE3, 0x29,
                /* 0220 */  0x7A, 0x26, 0x9E, 0xEC, 0xF3, 0x08, 0x58, 0xE6,
                /* 0228 */  0xC7, 0x8E, 0x21, 0xEC, 0x44, 0x82, 0x99, 0x0C,
                /* 0230 */  0x7E, 0x2C, 0xEC, 0x47, 0x43, 0x87, 0x41, 0x6E,
                /* 0238 */  0x0A, 0x27, 0x91, 0x80, 0x9F, 0x18, 0xE0, 0xDF,
                /* 0240 */  0x46, 0x3C, 0x83, 0x33, 0x79, 0xFF, 0x78, 0x1A,
                /* 0248 */  0x49, 0x60, 0x81, 0x27, 0x06, 0x50, 0x00, 0xF9,
                /* 0250 */  0x76, 0xE0, 0x4B, 0xCA, 0x13, 0x02, 0x9B, 0x43,
                /* 0258 */  0x88, 0x30, 0xD1, 0x0C, 0x8F, 0x09, 0x39, 0x2A,
                /* 0260 */  0x2A, 0x6B, 0x5C, 0xA8, 0xB1, 0xFA, 0x6C, 0xF0,
                /* 0268 */  0xAE, 0x63, 0xEC, 0xD3, 0xF4, 0x05, 0xE6, 0x04,
                /* 0270 */  0x5F, 0x15, 0x0E, 0xEA, 0xE5, 0xC2, 0xA7, 0x01,
                /* 0278 */  0xC3, 0x7A, 0xF4, 0x1C, 0xD6, 0x68, 0x61, 0x0F,
                /* 0280 */  0xFA, 0xC1, 0xC2, 0x97, 0x12, 0xCF, 0xCC, 0x18,
                /* 0288 */  0x61, 0x7D, 0x02, 0x30, 0xFC, 0x13, 0x00, 0x58,
                /* 0290 */  0x0E, 0x17, 0x7C, 0xF8, 0x0F, 0x22, 0x0F, 0x17,
                /* 0298 */  0xFC, 0xDA, 0x63, 0xA0, 0xB8, 0x6F, 0x01, 0x38,
                /* 02A0 */  0x3C, 0x9F, 0x05, 0x7C, 0xB7, 0x61, 0xF7, 0x00,
                /* 02A8 */  0xCC, 0xFF, 0x5F, 0xF6, 0x61, 0x02, 0x64, 0x83,
                /* 02B0 */  0x3E, 0x80, 0x68, 0xE1, 0x03, 0xFA, 0x1E, 0xF2,
                /* 02B8 */  0x40, 0xC4, 0x0F, 0x13, 0xE0, 0xDE, 0x8E, 0x27,
                /* 02C0 */  0x82, 0x1F, 0x08, 0x3E, 0xDE, 0x69, 0x02, 0x14,
                /* 02C8 */  0xF7, 0x83, 0x87, 0x25, 0x70, 0x0E, 0x12, 0xD6,
                /* 02D0 */  0x61, 0x02, 0x70, 0x12, 0xF1, 0x30, 0x01, 0xBA,
                /* 02D8 */  0xB3, 0x80, 0x0F, 0x13, 0xE0, 0xF8, 0xFF, 0x1F,
                /* 02E0 */  0x26, 0x38, 0x88, 0x0F, 0x13, 0x60, 0x3B, 0xF8,
                /* 02E8 */  0x60, 0x0E, 0x13, 0xEC, 0x1A, 0x00, 0x06, 0x99,
                /* 02F0 */  0x67, 0x09, 0xD4, 0xD9, 0xCD, 0xD2, 0xCF, 0x12,
                /* 02F8 */  0x90, 0x6F, 0x42, 0x18, 0xA1, 0x07, 0x09, 0x94,
                /* 0300 */  0x44, 0x0A, 0x09, 0x3C, 0x48, 0xA0, 0x24, 0xC1,
                /* 0308 */  0x51, 0x10, 0x8F, 0xD6, 0x71, 0x0F, 0x12, 0xE8,
                /* 0310 */  0x31, 0xFA, 0x7C, 0x04, 0x2F, 0xD8, 0x31, 0x02,
                /* 0318 */  0x14, 0x07, 0x04, 0xDC, 0x11, 0x0E, 0x8C, 0x67,
                /* 0320 */  0x08, 0xC0, 0xD0, 0xFF, 0xFF, 0x0C, 0x01, 0x0E,
                /* 0328 */  0x58, 0x7E, 0x86, 0x00, 0xA6, 0xD7, 0x26, 0x58,
                /* 0330 */  0xE7, 0x03, 0x5C, 0xD0, 0xE7, 0x81, 0x09, 0x24,
                /* 0338 */  0xF7, 0xB8, 0xA0, 0x68, 0x30, 0x28, 0x0B, 0x27,
                /* 0340 */  0x4B, 0x20, 0x8A, 0xEC, 0x93, 0x25, 0xE6, 0xF0,
                /* 0348 */  0xE0, 0xD1, 0x82, 0xE3, 0x4E, 0xF0, 0x42, 0xE4,
                /* 0350 */  0xC1, 0x7B, 0x90, 0x8F, 0x89, 0x21, 0xA2, 0xBC,
                /* 0358 */  0xB4, 0x19, 0xEF, 0x9D, 0xED, 0x90, 0xE2, 0x1C,
                /* 0360 */  0xC8, 0x4B, 0x24, 0x0E, 0x2D, 0xD6, 0x11, 0xFB,
                /* 0368 */  0x8E, 0xE0, 0xDB, 0xA4, 0x6F, 0x7E, 0x1C, 0x22,
                /* 0370 */  0xC8, 0x83, 0xA1, 0x4F, 0x92, 0xB0, 0xB1, 0x6B,
                /* 0378 */  0xBB, 0x07, 0x68, 0x30, 0x41, 0x1E, 0x20, 0x22,
                /* 0380 */  0x04, 0x39, 0x97, 0xA3, 0x0A, 0xF3, 0xF4, 0xF8,
                /* 0388 */  0x2E, 0xE9, 0x89, 0x86, 0xF3, 0x49, 0xD2, 0xFF,
                /* 0390 */  0x7F, 0x20, 0x1F, 0x20, 0x5E, 0x25, 0x43, 0xB1,
                /* 0398 */  0x4B, 0x45, 0xC8, 0x17, 0xC9, 0x20, 0xAF, 0x94,
                /* 03A0 */  0xC1, 0x22, 0x07, 0x0B, 0x13, 0xEF, 0x49, 0x92,
                /* 03A8 */  0x89, 0x7D, 0x31, 0xE8, 0xC0, 0xEA, 0x93, 0x24,
                /* 03B0 */  0xC0, 0x0F, 0x91, 0x27, 0x0A, 0x1D, 0x68, 0x70,
                /* 03B8 */  0xA3, 0xF0, 0x81, 0xE1, 0xF5, 0x02, 0x23, 0xEA,
                /* 03C0 */  0x64, 0x41, 0x45, 0x9D, 0x47, 0x50, 0x27, 0x09,
                /* 03C8 */  0x1F, 0x22, 0x18, 0x28, 0x3F, 0xBD, 0x61, 0x06,
                /* 03D0 */  0x06, 0x1F, 0x10, 0xEF, 0x7D, 0xCA, 0xE4, 0x4E,
                /* 03D8 */  0x62, 0x40, 0x16, 0xE2, 0x58, 0x01, 0xFD, 0xFF,
                /* 03E0 */  0x7F, 0xAC, 0xE0, 0xD7, 0x87, 0x38, 0x67, 0x71,
                /* 03E8 */  0x3E, 0x06, 0x3C, 0x8A, 0xD7, 0x12, 0xCC, 0x20,
                /* 03F0 */  0xCE, 0xC1, 0x77, 0x96, 0x28, 0xC6, 0x78, 0xF2,
                /* 03F8 */  0x30, 0x8C, 0x91, 0x0C, 0xEA, 0x93, 0x1C, 0x76,
                /* 0400 */  0x00, 0xEC, 0xFE, 0x6B, 0x88, 0x40, 0xAF, 0x18,
                /* 0408 */  0x7C, 0x6C, 0xEC, 0xAC, 0x03, 0xBE, 0x93, 0xE7,
                /* 0410 */  0xB3, 0x29, 0x98, 0x6E, 0x2E, 0xB8, 0xF3, 0xC4,
                /* 0418 */  0x43, 0x08, 0x1F, 0x9B, 0x07, 0xE5, 0x89, 0xB2,
                /* 0420 */  0xE3, 0x08, 0xE6, 0x74, 0x0A, 0x4C, 0xAE, 0x48,
                /* 0428 */  0x1E, 0x02, 0x3F, 0x68, 0x78, 0x08, 0x7C, 0x00,
                /* 0430 */  0xAD, 0xCE, 0x92, 0xDC, 0x4E, 0xCE, 0x0D, 0x77,
                /* 0438 */  0x52, 0xE0, 0x53, 0xC2, 0x0D, 0x00, 0xA3, 0xD0,
                /* 0440 */  0xA6, 0x4F, 0x8D, 0x46, 0xAD, 0x1A, 0x94, 0xA9,
                /* 0448 */  0x51, 0xA6, 0x41, 0xAD, 0x3E, 0x95, 0x1A, 0x33,
                /* 0450 */  0x76, 0x4A, 0xB0, 0xC0, 0x87, 0x85, 0x4E, 0x0E,
                /* 0458 */  0x8E, 0x07, 0x42, 0x23, 0x1D, 0x75, 0x64, 0xE4,
                /* 0460 */  0x44, 0x6A, 0x10, 0x01, 0x59, 0xCA, 0xE9, 0x55,
                /* 0468 */  0x40, 0x3E, 0xBF, 0x72, 0xC1, 0x26, 0x80, 0x98,
                /* 0470 */  0x7C, 0x10, 0x01, 0x93, 0x47, 0x83, 0x40, 0x2C,
                /* 0478 */  0xC8, 0x06, 0x08, 0x13, 0xAD, 0x03, 0x84, 0xFD,
                /* 0480 */  0xFF, 0x01                                     
            })
        }

        Device (WFTE)
        {
            Name (_HID, "PNP0C14")  // _HID: Hardware ID
            Name (_UID, "TestDev")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x7F, 0xAB, 0x13, 0x1F, 0x20, 0x62, 0x10, 0x42,
                /* 0008 */  0x8F, 0x8E, 0x8B, 0xB5, 0xE7, 0x1E, 0xE9, 0x69,
                /* 0010 */  0x54, 0x45, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x43, 0x43, 0x01, 0x00 
            })
            Method (WMTE, 3, NotSerialized)
            {
                If (LEqual (Arg1, One))
                {
                    Store (Arg2, PDAT)
                    Notify (WFDE, 0xD0)
                    Return (PDAT)
                }

                Return (Zero)
            }

            Name (WQCC, Buffer (0x02F1)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,
                /* 0008 */  0xE1, 0x02, 0x00, 0x00, 0xC2, 0x06, 0x00, 0x00,
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,
                /* 0018 */  0xA8, 0x5D, 0x83, 0x00, 0x01, 0x06, 0x18, 0x42,
                /* 0020 */  0x20, 0x14, 0x03, 0x89, 0xC0, 0xA2, 0x69, 0x24,
                /* 0028 */  0xC7, 0x01, 0x0C, 0x86, 0xCB, 0x72, 0x20, 0xE4,
                /* 0030 */  0x82, 0x89, 0x09, 0x10, 0x01, 0x21, 0xAF, 0x02,
                /* 0038 */  0x6C, 0x0A, 0x30, 0x09, 0xA2, 0xFE, 0xFD, 0x21,
                /* 0040 */  0x4A, 0x82, 0x43, 0x09, 0x81, 0x90, 0x64, 0x01,
                /* 0048 */  0xE6, 0x05, 0xE8, 0x16, 0x60, 0x58, 0x80, 0x6D,
                /* 0050 */  0x01, 0xA6, 0x05, 0x38, 0x86, 0xA4, 0xD2, 0xC0,
                /* 0058 */  0x29, 0x81, 0xA5, 0x40, 0x48, 0xB8, 0x00, 0xE5,
                /* 0060 */  0x02, 0x7C, 0x0B, 0xD0, 0x8E, 0x28, 0xDC, 0x96,
                /* 0068 */  0x61, 0x44, 0xE0, 0x51, 0x44, 0xB6, 0x50, 0x34,
                /* 0070 */  0x0A, 0x8D, 0x1D, 0x86, 0x65, 0x82, 0x69, 0x10,
                /* 0078 */  0x87, 0x51, 0x36, 0xB2, 0x08, 0x3C, 0xA1, 0x4E,
                /* 0080 */  0x05, 0xC8, 0x15, 0x20, 0x4C, 0x80, 0x78, 0x54,
                /* 0088 */  0x61, 0x34, 0x07, 0x45, 0x20, 0x43, 0x63, 0xC4,
                /* 0090 */  0x40, 0x48, 0x22, 0xAC, 0x9C, 0x63, 0x6B, 0x14,
                /* 0098 */  0xA7, 0x71, 0x34, 0xA5, 0x63, 0x68, 0x04, 0xC7,
                /* 00A0 */  0x75, 0x40, 0x06, 0xE9, 0x7D, 0x3A, 0x44, 0xD0,
                /* 00A8 */  0x84, 0x34, 0x8A, 0x68, 0x21, 0xA2, 0x04, 0x3D,
                /* 00B0 */  0x8E, 0x20, 0x81, 0x23, 0x24, 0x30, 0xCC, 0x31,
                /* 00B8 */  0x60, 0x64, 0x40, 0xC8, 0xB3, 0x00, 0xEB, 0x83,
                /* 00C0 */  0x23, 0x04, 0x76, 0x2F, 0xC0, 0x98, 0x00, 0x8D,
                /* 00C8 */  0x10, 0x72, 0x26, 0xC0, 0xA0, 0x00, 0x85, 0x02,
                /* 00D0 */  0xBC, 0xC1, 0xC8, 0x96, 0x00, 0x6D, 0x02, 0x94,
                /* 00D8 */  0x21, 0x68, 0x4A, 0x51, 0x0E, 0x2A, 0x48, 0xB8,
                /* 00E0 */  0x28, 0x16, 0x87, 0x26, 0x88, 0x16, 0x51, 0x08,
                /* 00E8 */  0x68, 0x84, 0xD6, 0x60, 0x84, 0x1B, 0x2E, 0x46,
                /* 00F0 */  0x84, 0x93, 0x8B, 0x1C, 0xA2, 0xFD, 0x41, 0x90,
                /* 00F8 */  0x68, 0x47, 0x01, 0x49, 0x00, 0x51, 0xA4, 0xD1,
                /* 0100 */  0xA0, 0x86, 0x9F, 0xE0, 0x71, 0xC0, 0x47, 0x81,
                /* 0108 */  0x93, 0x3B, 0xA9, 0x13, 0x33, 0xC8, 0x89, 0x1D,
                /* 0110 */  0x5D, 0x9D, 0xE7, 0x00, 0x32, 0x62, 0x86, 0x95,
                /* 0118 */  0xE0, 0xD7, 0xC0, 0x07, 0x03, 0xBC, 0x6B, 0x40,
                /* 0120 */  0xDD, 0x08, 0x9E, 0x07, 0xD8, 0x30, 0xC3, 0x61,
                /* 0128 */  0x86, 0xE8, 0xD1, 0x86, 0xFB, 0xFF, 0x9F, 0xC0,
                /* 0130 */  0x21, 0x32, 0x40, 0x0F, 0xED, 0x51, 0x00, 0xEB,
                /* 0138 */  0x70, 0x32, 0x3A, 0x07, 0x94, 0x2A, 0xC0, 0xEC,
                /* 0140 */  0x99, 0x40, 0x33, 0x4B, 0x70, 0x3C, 0x3E, 0x00,
                /* 0148 */  0x78, 0x3E, 0x27, 0x9C, 0xC0, 0xF2, 0x07, 0x81,
                /* 0150 */  0x1A, 0x99, 0xA1, 0x3D, 0xE3, 0xD3, 0x7A, 0x0F,
                /* 0158 */  0xF0, 0xF1, 0xE0, 0xB0, 0x98, 0x58, 0x08, 0x29,
                /* 0160 */  0x80, 0xD0, 0x78, 0xC0, 0xAF, 0xF8, 0x68, 0x20,
                /* 0168 */  0x84, 0x97, 0x05, 0xCF, 0xD7, 0x87, 0x04, 0x03,
                /* 0170 */  0x63, 0x07, 0x64, 0xBF, 0x02, 0x10, 0x82, 0xBF,
                /* 0178 */  0x2E, 0x1C, 0xD1, 0x43, 0x43, 0x84, 0x04, 0x2F,
                /* 0180 */  0x03, 0x47, 0x50, 0x29, 0xBE, 0xB0, 0x0E, 0x21,
                /* 0188 */  0x46, 0xA4, 0x18, 0x51, 0x82, 0xD4, 0x0A, 0xA1,
                /* 0190 */  0xE9, 0x87, 0x49, 0x50, 0xE4, 0xC9, 0x01, 0x3D,
                /* 0198 */  0x02, 0x8E, 0x77, 0x02, 0xC7, 0x13, 0xD9, 0xE3,
                /* 01A0 */  0x89, 0x72, 0x12, 0x07, 0xE4, 0x33, 0x85, 0x11,
                /* 01A8 */  0x4E, 0xF3, 0x51, 0xE2, 0xD1, 0xC2, 0x9A, 0x67,
                /* 01B0 */  0xA4, 0x13, 0xC3, 0x39, 0xBD, 0x0D, 0x98, 0xA0,
                /* 01B8 */  0xB2, 0xE7, 0x80, 0x8E, 0x1F, 0x56, 0x05, 0x22,
                /* 01C0 */  0x1B, 0x4B, 0xF5, 0x39, 0x83, 0x6A, 0x5E, 0xAE,
                /* 01C8 */  0x46, 0x74, 0xCC, 0xC7, 0xEA, 0x11, 0x9C, 0xB4,
                /* 01D0 */  0xA7, 0x17, 0xD9, 0x4A, 0xC1, 0x04, 0xEC, 0x61,
                /* 01D8 */  0x5B, 0x23, 0x85, 0xD4, 0xD0, 0x68, 0x3C, 0x06,
                /* 01E0 */  0x77, 0xFE, 0x13, 0x09, 0x05, 0x31, 0xA0, 0xC3,
                /* 01E8 */  0x41, 0xC8, 0xC9, 0x49, 0x00, 0xA5, 0x62, 0xBC,
                /* 01F0 */  0xE4, 0x68, 0xC1, 0x08, 0xA6, 0x81, 0xD0, 0xDD,
                /* 01F8 */  0xC1, 0xF3, 0xF3, 0x3D, 0x80, 0xDF, 0x4C, 0x7C,
                /* 0200 */  0x32, 0x30, 0xB0, 0xEF, 0x13, 0x6F, 0x1C, 0xF0,
                /* 0208 */  0xFF, 0xFF, 0x37, 0x0E, 0x36, 0x09, 0x8C, 0x9A,
                /* 0210 */  0x23, 0x04, 0x9D, 0x02, 0xBF, 0x00, 0xBC, 0x0A,
                /* 0218 */  0x98, 0xC0, 0xBA, 0x2E, 0x06, 0xD0, 0x4F, 0x1D,
                /* 0220 */  0x1E, 0xA8, 0xAF, 0x1C, 0x67, 0x63, 0x7D, 0x07,
                /* 0228 */  0x03, 0x50, 0x00, 0xF9, 0x22, 0xE0, 0x93, 0xC1,
                /* 0230 */  0xC3, 0x00, 0xBB, 0x19, 0x18, 0x26, 0x9A, 0xD1,
                /* 0238 */  0xB9, 0xA8, 0x69, 0xA3, 0x64, 0xC0, 0x68, 0xDA,
                /* 0240 */  0x06, 0xF1, 0xB4, 0x1D, 0x71, 0xDA, 0x68, 0x68,
                /* 0248 */  0x5F, 0x05, 0x7C, 0x11, 0x70, 0xA8, 0x61, 0xD3,
                /* 0250 */  0x3B, 0x07, 0x7E, 0xAE, 0x67, 0x16, 0xD0, 0x93,
                /* 0258 */  0xF0, 0x91, 0xE4, 0xB8, 0xC1, 0x32, 0x0A, 0x06,
                /* 0260 */  0x1E, 0x24, 0x8E, 0x47, 0xC1, 0x26, 0xCE, 0x07,
                /* 0268 */  0xE0, 0x89, 0xF3, 0x71, 0xF9, 0x86, 0x01, 0x7F,
                /* 0270 */  0xE4, 0x58, 0x82, 0x02, 0x67, 0x0E, 0x72, 0x78,
                /* 0278 */  0x4C, 0xB0, 0x51, 0x51, 0x59, 0xE3, 0x42, 0x8D,
                /* 0280 */  0xD2, 0x57, 0x20, 0x86, 0x7D, 0x82, 0x16, 0x3D,
                /* 0288 */  0x48, 0x9D, 0x2F, 0x0E, 0xEA, 0x69, 0xC4, 0x63,
                /* 0290 */  0x33, 0xAC, 0xC7, 0xFD, 0xFF, 0x0F, 0x8B, 0x41,
                /* 0298 */  0x0B, 0x7B, 0xB8, 0x2F, 0x22, 0x3E, 0xC5, 0x78,
                /* 02A0 */  0x66, 0xC6, 0x08, 0xEB, 0xB1, 0x7B, 0x40, 0x8F,
                /* 02A8 */  0x10, 0xE0, 0x01, 0x7B, 0x35, 0x39, 0xD3, 0x07,
                /* 02B0 */  0x97, 0x3F, 0x8E, 0xEA, 0x20, 0x74, 0xDF, 0xE0,
                /* 02B8 */  0x28, 0x21, 0x1E, 0x38, 0x30, 0x04, 0x15, 0xDA,
                /* 02C0 */  0xF4, 0xA9, 0xD1, 0xA8, 0x55, 0x83, 0x32, 0x35,
                /* 02C8 */  0xCA, 0x34, 0xA8, 0xD5, 0xA7, 0x52, 0x63, 0xC6,
                /* 02D0 */  0x3C, 0x5C, 0x8E, 0xE8, 0x41, 0x81, 0xBC, 0x13,
                /* 02D8 */  0x34, 0x42, 0x87, 0x00, 0xA1, 0x42, 0x9E, 0x08,
                /* 02E0 */  0x32, 0x72, 0x0F, 0x31, 0x88, 0x80, 0xAC, 0xCC,
                /* 02E8 */  0x02, 0x10, 0xD3, 0x09, 0x22, 0x20, 0xFF, 0xFF,
                /* 02F0 */  0x01                                           
            })
        }

        Method (USSV, 1, Serialized)
        {
            Store (Arg0, PDAT)
        }

        Method (GSSV, 0, Serialized)
        {
            Return (PDAT)
        }
    }

    Scope (_SB.PC00.RP01.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If (LEqual (BCCX, 0x02))
            {
                If (LEqual (SCCX, Zero))
                {
                    If (LEqual (PIXX, Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If (LEqual (PRMV, One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If (LEqual (PRTP, 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP02.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If (LEqual (BCCX, 0x02))
            {
                If (LEqual (SCCX, Zero))
                {
                    If (LEqual (PIXX, Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If (LEqual (PRMV, One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If (LEqual (PRTP, 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP03.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If (LEqual (BCCX, 0x02))
            {
                If (LEqual (SCCX, Zero))
                {
                    If (LEqual (PIXX, Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If (LEqual (PRMV, One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If (LEqual (PRTP, 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP04.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If (LEqual (BCCX, 0x02))
            {
                If (LEqual (SCCX, Zero))
                {
                    If (LEqual (PIXX, Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If (LEqual (PRMV, One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If (LEqual (PRTP, 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP05.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If (LEqual (BCCX, 0x02))
            {
                If (LEqual (SCCX, Zero))
                {
                    If (LEqual (PIXX, Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If (LEqual (PRMV, One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If (LEqual (PRTP, 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP06.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If (LEqual (BCCX, 0x02))
            {
                If (LEqual (SCCX, Zero))
                {
                    If (LEqual (PIXX, Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If (LEqual (PRMV, One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If (LEqual (PRTP, 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP07.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If (LEqual (BCCX, 0x02))
            {
                If (LEqual (SCCX, Zero))
                {
                    If (LEqual (PIXX, Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If (LEqual (PRMV, One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If (LEqual (PRTP, 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP08.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If (LEqual (BCCX, 0x02))
            {
                If (LEqual (SCCX, Zero))
                {
                    If (LEqual (PIXX, Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If (LEqual (PRMV, One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If (LEqual (PRTP, 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP09.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If (LEqual (BCCX, 0x02))
            {
                If (LEqual (SCCX, Zero))
                {
                    If (LEqual (PIXX, Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If (LEqual (PRMV, One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If (LEqual (PRTP, 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP10.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If (LEqual (BCCX, 0x02))
            {
                If (LEqual (SCCX, Zero))
                {
                    If (LEqual (PIXX, Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If (LEqual (PRMV, One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If (LEqual (PRTP, 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP11.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If (LEqual (BCCX, 0x02))
            {
                If (LEqual (SCCX, Zero))
                {
                    If (LEqual (PIXX, Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If (LEqual (PRMV, One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If (LEqual (PRTP, 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP12.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If (LEqual (BCCX, 0x02))
            {
                If (LEqual (SCCX, Zero))
                {
                    If (LEqual (PIXX, Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If (LEqual (PRMV, One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If (LEqual (PRTP, 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP13.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If (LEqual (BCCX, 0x02))
            {
                If (LEqual (SCCX, Zero))
                {
                    If (LEqual (PIXX, Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If (LEqual (PRMV, One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If (LEqual (PRTP, 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP14.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If (LEqual (BCCX, 0x02))
            {
                If (LEqual (SCCX, Zero))
                {
                    If (LEqual (PIXX, Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If (LEqual (PRMV, One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If (LEqual (PRTP, 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP15.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If (LEqual (BCCX, 0x02))
            {
                If (LEqual (SCCX, Zero))
                {
                    If (LEqual (PIXX, Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If (LEqual (PRMV, One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If (LEqual (PRTP, 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP16.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If (LEqual (BCCX, 0x02))
            {
                If (LEqual (SCCX, Zero))
                {
                    If (LEqual (PIXX, Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If (LEqual (PRMV, One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If (LEqual (PRTP, 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP17.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If (LEqual (BCCX, 0x02))
            {
                If (LEqual (SCCX, Zero))
                {
                    If (LEqual (PIXX, Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If (LEqual (PRMV, One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If (LEqual (PRTP, 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP18.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If (LEqual (BCCX, 0x02))
            {
                If (LEqual (SCCX, Zero))
                {
                    If (LEqual (PIXX, Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If (LEqual (PRMV, One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If (LEqual (PRTP, 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP19.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If (LEqual (BCCX, 0x02))
            {
                If (LEqual (SCCX, Zero))
                {
                    If (LEqual (PIXX, Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If (LEqual (PRMV, One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If (LEqual (PRTP, 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP20.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If (LEqual (BCCX, 0x02))
            {
                If (LEqual (SCCX, Zero))
                {
                    If (LEqual (PIXX, Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If (LEqual (PRMV, One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If (LEqual (PRTP, 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP21.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If (LEqual (BCCX, 0x02))
            {
                If (LEqual (SCCX, Zero))
                {
                    If (LEqual (PIXX, Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If (LEqual (PRMV, One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If (LEqual (PRTP, 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP22.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If (LEqual (BCCX, 0x02))
            {
                If (LEqual (SCCX, Zero))
                {
                    If (LEqual (PIXX, Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If (LEqual (PRMV, One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If (LEqual (PRTP, 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP23.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If (LEqual (BCCX, 0x02))
            {
                If (LEqual (SCCX, Zero))
                {
                    If (LEqual (PIXX, Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If (LEqual (PRMV, One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If (LEqual (PRTP, 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.RP24.PXSX)
    {
        Method (ISLN, 0, Serialized)
        {
            If (LEqual (BCCX, 0x02))
            {
                If (LEqual (SCCX, Zero))
                {
                    If (LEqual (PIXX, Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If (LEqual (PRMV, One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If (LEqual (PRTP, 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    If (LEqual (PCHS, PCHX))
    {
        Scope (_SB.PC00.RP25.PXSX)
        {
            Method (ISLN, 0, Serialized)
            {
                If (LEqual (BCCX, 0x02))
                {
                    If (LEqual (SCCX, Zero))
                    {
                        If (LEqual (PIXX, Zero))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }

            Method (ISDT, 0, Serialized)
            {
                If (CondRefOf (\DTFS))
                {
                    If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                    {
                        ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (GRPT, 0, Serialized)
            {
                If (CondRefOf (^^PRMV))
                {
                    If (LEqual (PRMV, One))
                    {
                        Return (0x63)
                    }
                }

                If (PRES ())
                {
                    If (LOr (PAHC (), PNVM ()))
                    {
                        Return (One)
                    }

                    If (ISGX ())
                    {
                        Return (0x04)
                    }

                    If (LEqual (PRTP, 0x02))
                    {
                        If (ISLN ())
                        {
                            Return (0x02)
                        }

                        If (CondRefOf (WIST))
                        {
                            If (WIST ())
                            {
                                Return (0x03)
                            }
                        }

                        If (ISDT ())
                        {
                            Return (0x05)
                        }

                        If (CondRefOf (WWST))
                        {
                            If (WWST ())
                            {
                                Return (0x06)
                            }
                        }
                    }

                    Return (Zero)
                }

                Return (0x63)
            }
        }

        Scope (_SB.PC00.RP26.PXSX)
        {
            Method (ISLN, 0, Serialized)
            {
                If (LEqual (BCCX, 0x02))
                {
                    If (LEqual (SCCX, Zero))
                    {
                        If (LEqual (PIXX, Zero))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }

            Method (ISDT, 0, Serialized)
            {
                If (CondRefOf (\DTFS))
                {
                    If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                    {
                        ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (GRPT, 0, Serialized)
            {
                If (CondRefOf (^^PRMV))
                {
                    If (LEqual (PRMV, One))
                    {
                        Return (0x63)
                    }
                }

                If (PRES ())
                {
                    If (LOr (PAHC (), PNVM ()))
                    {
                        Return (One)
                    }

                    If (ISGX ())
                    {
                        Return (0x04)
                    }

                    If (LEqual (PRTP, 0x02))
                    {
                        If (ISLN ())
                        {
                            Return (0x02)
                        }

                        If (CondRefOf (WIST))
                        {
                            If (WIST ())
                            {
                                Return (0x03)
                            }
                        }

                        If (ISDT ())
                        {
                            Return (0x05)
                        }

                        If (CondRefOf (WWST))
                        {
                            If (WWST ())
                            {
                                Return (0x06)
                            }
                        }
                    }

                    Return (Zero)
                }

                Return (0x63)
            }
        }

        Scope (_SB.PC00.RP27.PXSX)
        {
            Method (ISLN, 0, Serialized)
            {
                If (LEqual (BCCX, 0x02))
                {
                    If (LEqual (SCCX, Zero))
                    {
                        If (LEqual (PIXX, Zero))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }

            Method (ISDT, 0, Serialized)
            {
                If (CondRefOf (\DTFS))
                {
                    If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                    {
                        ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (GRPT, 0, Serialized)
            {
                If (CondRefOf (^^PRMV))
                {
                    If (LEqual (PRMV, One))
                    {
                        Return (0x63)
                    }
                }

                If (PRES ())
                {
                    If (LOr (PAHC (), PNVM ()))
                    {
                        Return (One)
                    }

                    If (ISGX ())
                    {
                        Return (0x04)
                    }

                    If (LEqual (PRTP, 0x02))
                    {
                        If (ISLN ())
                        {
                            Return (0x02)
                        }

                        If (CondRefOf (WIST))
                        {
                            If (WIST ())
                            {
                                Return (0x03)
                            }
                        }

                        If (ISDT ())
                        {
                            Return (0x05)
                        }

                        If (CondRefOf (WWST))
                        {
                            If (WWST ())
                            {
                                Return (0x06)
                            }
                        }
                    }

                    Return (Zero)
                }

                Return (0x63)
            }
        }

        Scope (_SB.PC00.RP28.PXSX)
        {
            Method (ISLN, 0, Serialized)
            {
                If (LEqual (BCCX, 0x02))
                {
                    If (LEqual (SCCX, Zero))
                    {
                        If (LEqual (PIXX, Zero))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }

            Method (ISDT, 0, Serialized)
            {
                If (CondRefOf (\DTFS))
                {
                    If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                    {
                        ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (GRPT, 0, Serialized)
            {
                If (CondRefOf (^^PRMV))
                {
                    If (LEqual (PRMV, One))
                    {
                        Return (0x63)
                    }
                }

                If (PRES ())
                {
                    If (LOr (PAHC (), PNVM ()))
                    {
                        Return (One)
                    }

                    If (ISGX ())
                    {
                        Return (0x04)
                    }

                    If (LEqual (PRTP, 0x02))
                    {
                        If (ISLN ())
                        {
                            Return (0x02)
                        }

                        If (CondRefOf (WIST))
                        {
                            If (WIST ())
                            {
                                Return (0x03)
                            }
                        }

                        If (ISDT ())
                        {
                            Return (0x05)
                        }

                        If (CondRefOf (WWST))
                        {
                            If (WWST ())
                            {
                                Return (0x06)
                            }
                        }
                    }

                    Return (Zero)
                }

                Return (0x63)
            }
        }
    }

    Scope (_SB.PC00.PEG0.PEGP)
    {
        Method (ISLN, 0, Serialized)
        {
            If (LEqual (BCCX, 0x02))
            {
                If (LEqual (SCCX, Zero))
                {
                    If (LEqual (PIXX, Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If (LEqual (PRMV, One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If (LEqual (PRTP, 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.PEG1.PEGP)
    {
        Method (ISLN, 0, Serialized)
        {
            If (LEqual (BCCX, 0x02))
            {
                If (LEqual (SCCX, Zero))
                {
                    If (LEqual (PIXX, Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If (LEqual (PRMV, One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If (LEqual (PRTP, 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB.PC00.PEG2.PEGP)
    {
        Method (ISLN, 0, Serialized)
        {
            If (LEqual (BCCX, 0x02))
            {
                If (LEqual (SCCX, Zero))
                {
                    If (LEqual (PIXX, Zero))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (ISDT, 0, Serialized)
        {
            If (CondRefOf (\DTFS))
            {
                If (LAnd (LEqual (DTFS, One), LOr (LAnd (LEqual (RPS0, SLOT), RPN0), LAnd (LEqual (RPS1, SLOT), RPN1))))
                {
                    ADBG (Concatenate ("DTBT PEP Constraint is successfully SET for PCH RP = ", ToDecimalString (SLOT)))
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (GRPT, 0, Serialized)
        {
            If (CondRefOf (^^PRMV))
            {
                If (LEqual (PRMV, One))
                {
                    Return (0x63)
                }
            }

            If (PRES ())
            {
                If (LOr (PAHC (), PNVM ()))
                {
                    Return (One)
                }

                If (ISGX ())
                {
                    Return (0x04)
                }

                If (LEqual (PRTP, 0x02))
                {
                    If (ISLN ())
                    {
                        Return (0x02)
                    }

                    If (CondRefOf (WIST))
                    {
                        If (WIST ())
                        {
                            Return (0x03)
                        }
                    }

                    If (ISDT ())
                    {
                        Return (0x05)
                    }

                    If (CondRefOf (WWST))
                    {
                        If (WWST ())
                        {
                            Return (0x06)
                        }
                    }
                }

                Return (Zero)
            }

            Return (0x63)
        }
    }

    Scope (_SB)
    {
        Device (PEPD)
        {
            Name (_HID, "INT33A1")  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0D80"))  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (LBUF, Buffer (0xC0){})
            Name (PPD0, Package (0x03)
            {
                "\\_SB.PC00.SAT0", 
                Zero, 
                Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0xFF, 
                        Zero, 
                        0x81
                    }
                }
            })
            Name (PPD3, Package (0x03)
            {
                "\\_SB.PC00.SAT0", 
                Zero, 
                Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0xFF, 
                        0x03
                    }
                }
            })
            Name (WWD3, Package (0x03)
            {
                "\\_SB.PC00.RP04", 
                Zero, 
                Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0xFF, 
                        0x03
                    }
                }
            })
            Name (PKD0, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0xFF, 
                    Zero, 
                    0x81
                }
            })
            Name (PKD3, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0xFF, 
                    0x03
                }
            })
            Name (DEVY, Package (0x6B)
            {
                Package (0x03)
                {
                    "\\_SB.PR00", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR01", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR02", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR03", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR04", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR05", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR06", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR07", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.GFX0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SAT0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.UA00", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.UA01", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C1", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.XHCI", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.HDAS", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.EMMC", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.PSDC", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C2", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C3", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C4", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C5", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.UA02", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SPI0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SPI1", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP01", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP02", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP03", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP04", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP05", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP06", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP07", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP08", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP09", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP10", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP11", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP12", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP13", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP14", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP15", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP16", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP17", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP18", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP19", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP20", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SAT0.VOL0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR08", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR09", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR10", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR11", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR12", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR13", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR14", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR15", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SPI2", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.CNVW", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.IPU0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.HECI", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.GLAN", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.PEG0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.THC0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.THC1", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Depreciate IDA", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "USB\\VID_8087&PID_0AC9&MI*", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x02
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C6", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.PEG1", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR16", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR17", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR18", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR19", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR20", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR21", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR22", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR23", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.GNA0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.VMD0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP21", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP22", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP23", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP24", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved For DTBT RP0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "Reserved For DTBT RP1", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP25", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP26", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP27", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.RP28", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SAT0.PRT0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SAT0.PRT1", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SAT0.PRT2", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SAT0.PRT3", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SAT0.PRT4", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SAT0.PRT5", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SAT0.PRT6", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.SAT0.PRT7", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.HEC3", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.PEG2", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR24", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR25", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR26", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR27", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR28", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR29", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR30", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR31", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.PUF0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.PUF1", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PC00.I2C7", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }
            })
            Method (GUCP, 2, Serialized)
            {
                If (LEqual (And (PEPC, Arg0), Arg0))
                {
                    If (LEqual (And (PEPC, Or (Arg1, Arg0)), Or (Arg1, Arg0)))
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        Return (One)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (GRPC, 1, Serialized)
            {
                If (LEqual (Arg0, One))
                {
                    Return (GUCP (0x0000000200000000, 0x0000000400000000))
                }

                If (LEqual (Arg0, 0x02))
                {
                    Return (GUCP (0x0000000800000000, 0x0000001000000000))
                }

                If (LEqual (Arg0, 0x03))
                {
                    If (LGreaterEqual (OSYS, 0x07DF))
                    {
                        Return (GUCP (0x0000002000000000, 0x0000004000000000))
                    }

                    Return (Zero)
                }

                If (LEqual (Arg0, 0x04))
                {
                    Return (GUCP (0x0000008000000000, 0x0000010000000000))
                }

                If (LEqual (Arg0, 0x05))
                {
                    Return (GUCP (0x20000000, 0x20000000))
                }

                If (LEqual (Arg0, 0x06))
                {
                    If (LEqual (WRTO, 0x03))
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        If (LEqual (WRTO, One))
                        {
                            DSDF (WRTO, 0x3F)
                        }

                        Return (Zero)
                    }
                }

                If (LEqual (Arg0, Zero))
                {
                    Return (GUCP (0x0000020000000000, 0x0000040000000000))
                }

                Return (Zero)
            }

            Method (DSDF, 2, Serialized)
            {
                If (LNotEqual (Arg1, Ones))
                {
                    Store (Arg1, Local0)
                    If (LEqual (Arg0, Zero))
                    {
                        Store (Zero, Index (DerefOf (Index (DEVY, Local0)), One))
                    }
                    Else
                    {
                        If (LEqual (Arg0, 0x03))
                        {
                            Store (PKD3, Index (DerefOf (Index (DEVY, Local0)), 0x02))
                        }

                        If (LEqual (Arg0, One))
                        {
                            Store (PKD0, Index (DerefOf (Index (DEVY, Local0)), 0x02))
                        }

                        Store (One, Index (DerefOf (Index (DEVY, Local0)), One))
                    }
                }
            }

            Method (PARS, 1, Serialized)
            {
                Store (SizeOf (DEVY), Local0)
                Store (Zero, Local1)
                While (LGreater (Local0, Local1))
                {
                    Store (DerefOf (Index (DEVY, Local1)), Local2)
                    Store (DerefOf (Index (Local2, Zero)), Local3)
                    If (LEqual (Local3, Arg0))
                    {
                        Return (Local1)
                    }

                    Increment (Local1)
                }

                Return (Ones)
            }

            Method (RPPC, 0, Serialized)
            {
                DSDF (GRPC (^^PC00.RP01.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP01"))
                DSDF (GRPC (^^PC00.RP02.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP02"))
                DSDF (GRPC (^^PC00.RP03.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP03"))
                DSDF (GRPC (^^PC00.RP04.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP04"))
                DSDF (GRPC (^^PC00.RP05.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP05"))
                DSDF (GRPC (^^PC00.RP06.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP06"))
                DSDF (GRPC (^^PC00.RP07.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP07"))
                DSDF (GRPC (^^PC00.RP08.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP08"))
                DSDF (GRPC (^^PC00.RP09.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP09"))
                DSDF (GRPC (^^PC00.RP10.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP10"))
                DSDF (GRPC (^^PC00.RP11.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP11"))
                DSDF (GRPC (^^PC00.RP12.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP12"))
                DSDF (GRPC (^^PC00.RP13.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP13"))
                DSDF (GRPC (^^PC00.RP14.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP14"))
                DSDF (GRPC (^^PC00.RP15.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP15"))
                DSDF (GRPC (^^PC00.RP16.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP16"))
                DSDF (GRPC (^^PC00.RP17.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP17"))
                DSDF (GRPC (^^PC00.RP18.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP18"))
                DSDF (GRPC (^^PC00.RP19.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP19"))
                DSDF (GRPC (^^PC00.RP20.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP20"))
                DSDF (GRPC (^^PC00.RP21.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP21"))
                DSDF (GRPC (^^PC00.RP22.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP22"))
                DSDF (GRPC (^^PC00.RP23.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP23"))
                DSDF (GRPC (^^PC00.RP24.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP24"))
                If (LEqual (PCHS, PCHX))
                {
                    DSDF (GRPC (^^PC00.RP25.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP25"))
                    DSDF (GRPC (^^PC00.RP26.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP26"))
                    DSDF (GRPC (^^PC00.RP27.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP27"))
                    DSDF (GRPC (^^PC00.RP28.PXSX.GRPT ()), PARS ("\\_SB.PC00.RP28"))
                }

                DSDF (GRPC (^^PC00.PEG0.PEGP.GRPT ()), PARS ("\\_SB.PC00.PEG0"))
                DSDF (GRPC (^^PC00.PEG1.PEGP.GRPT ()), PARS ("\\_SB.PC00.PEG1"))
                DSDF (GRPC (^^PC00.PEG2.PEGP.GRPT ()), PARS ("\\_SB.PC00.PEG2"))
            }

            Method (SPDE, 0, Serialized)
            {
                If (LNot (ESPC))
                {
                    Return (Zero)
                }

                If (^^PC00.SAT0.PRT0.PRES ())
                {
                    Store (One, Index (DerefOf (Index (DEVY, 0x56)), One))
                }

                If (^^PC00.SAT0.PRT1.PRES ())
                {
                    Store (One, Index (DerefOf (Index (DEVY, 0x57)), One))
                }

                If (^^PC00.SAT0.PRT2.PRES ())
                {
                    Store (One, Index (DerefOf (Index (DEVY, 0x58)), One))
                }

                If (^^PC00.SAT0.PRT3.PRES ())
                {
                    Store (One, Index (DerefOf (Index (DEVY, 0x59)), One))
                }

                If (^^PC00.SAT0.PRT4.PRES ())
                {
                    Store (One, Index (DerefOf (Index (DEVY, 0x5A)), One))
                }

                If (^^PC00.SAT0.PRT5.PRES ())
                {
                    Store (One, Index (DerefOf (Index (DEVY, 0x5B)), One))
                }

                If (^^PC00.SAT0.PRT6.PRES ())
                {
                    Store (One, Index (DerefOf (Index (DEVY, 0x5C)), One))
                }

                If (^^PC00.SAT0.PRT7.PRES ())
                {
                    Store (One, Index (DerefOf (Index (DEVY, 0x5D)), One))
                }
                
                Return (Zero)
            }

            Name (BCCD, Package (0x00){})
            OperationRegion (LS0I, SystemMemory, LPMR, 0xC0)
            Field (LS0I, ByteAcc, Lock, Preserve)
            {
                L0IX,   1536
            }

            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "intel-cec-pson-switching-enabled-in-s0", 
                        Zero
                    }
                }
            })
            Method (PSOP, 0, NotSerialized)
            {
                Store (Zero, Local0)
                While (LLess (Local0, SizeOf (_DSD)))
                {
                    If (LNotEqual (DerefOf (Index (_DSD, Local0)), ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */))
                    {
                        Continue
                    }

                    Store (DerefOf (Index (_DSD, Add (Local0, One))), Local1)
                    Store (Zero, Local2)
                    While (LLess (Local2, SizeOf (Local1)))
                    {
                        Store (DerefOf (Index (Local1, Local2)), Local3)
                        If (LAnd (LEqual ("intel-cec-pson-switching-enabled-in-s0", DerefOf (Index (Local3, Zero))), PSON))
                        {
                            Store (One, Index (DerefOf (Index (DerefOf (Index (_DSD, Add (Local0, One))), Local2)), One))
                        }

                        Increment (Local2)
                    }

                    Add (Local0, 0x02, Local0)
                }

                Return (Zero)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (LOr (LGreaterEqual (OSYS, 0x07DF), LAnd (LGreaterEqual (OSYS, 0x07DC), LEqual (S0ID, One))))
                {
                    PSOP ()
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("c4eb40a0-6cd2-11e2-bcfd-0800200c9a66")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x7F                                           
                        })
                    }

                    If (LEqual (Arg2, One))
                    {
                        If (LEqual (S0ID, Zero))
                        {
                            Return (Package (0x00){})
                        }

                        SPDE ()
                        If (LEqual (And (PEPC, One), One))
                        {
                            If (LEqual (And (PEPC, 0x03), One))
                            {
                                Store (PPD0, Index (DEVY, 0x09))
                            }
                            ElseIf (LEqual (And (PEPC, 0x03), 0x03))
                            {
                                Store (PPD3, Index (DEVY, 0x09))
                            }

                            Store (One, Index (DerefOf (Index (DEVY, 0x09)), One))
                        }
                        ElseIf (LEqual (And (PEPC, 0x03), 0x02))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x2D)), One))
                        }

                        RPPC ()
                        If (LEqual (And (PEPC, 0x04), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x0A)), One))
                        }

                        If (LEqual (And (PEPC, 0x08), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x0B)), One))
                        }

                        If (LEqual (And (PEPC, 0x10), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x0C)), One))
                        }

                        If (LEqual (And (PEPC, 0x20), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x0D)), One))
                        }

                        If (LEqual (And (PEPC, 0x40), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x0E)), One))
                        }

                        DSDF (GUCP (0x80, 0x0100), PARS ("\\_SB.PC00.HDAS"))
                        If (LEqual (And (PEPC, 0x0200), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x08)), One))
                        }

                        If (LGreaterEqual (TCNT, One))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, Zero)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x02))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, One)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x03))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x02)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x04))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x03)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x05))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x04)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x06))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x05)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x07))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x06)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x08))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x07)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x09))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x2E)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x0A))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x2F)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x0B))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x30)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x0C))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x31)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x0D))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x32)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x0E))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x33)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x0F))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x34)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x10))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x35)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x11))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x42)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x12))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x43)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x13))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x44)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x14))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x45)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x15))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x46)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x16))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x47)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x17))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x48)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x18))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x49)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x19))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x60)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x1A))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x61)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x1B))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x62)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x1C))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x63)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x1D))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x64)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x1E))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x65)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x1F))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x66)), One))
                        }

                        If (LGreaterEqual (TCNT, 0x20))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x67)), One))
                        }

                        If (LEqual (And (PEPC, 0x0400), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, Zero)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, One)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x02)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x03)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x04)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x05)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x06)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x07)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x2E)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x2F)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x30)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x31)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x32)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x33)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x34)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x35)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x42)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x43)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x44)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x45)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x46)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x47)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x48)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x49)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x60)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x61)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x62)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x63)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x64)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x65)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x66)), One))
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x67)), One))
                        }

                        If (LOr (LEqual (And (PEPC, 0x0800), Zero), LEqual (EMCE, Zero)))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x10)), One))
                        }

                        If (LOr (LEqual (And (PEPC, 0x1000), Zero), LEqual (SDCE, Zero)))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x11)), One))
                        }

                        If (LEqual (And (PEPC, 0x2000), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x12)), One))
                        }

                        If (LEqual (And (PEPC, 0x4000), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x13)), One))
                        }

                        If (LEqual (And (PEPC, 0x8000), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x14)), One))
                        }

                        If (LEqual (And (PEPC, 0x00010000), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x15)), One))
                        }

                        If (LEqual (And (PEPC, 0x0000400000000000), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x6A)), One))
                        }

                        If (LEqual (And (PEPC, 0x00020000), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x16)), One))
                        }

                        If (LEqual (And (PEPC, 0x00040000), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x17)), One))
                        }

                        If (LEqual (And (PEPC, 0x00080000), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x18)), One))
                        }

                        If (LEqual (And (PEPC, 0x00100000), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x36)), One))
                        }

                        If (LEqual (And (PEPC, 0x00200000), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x38)), One))
                        }

                        If (LEqual (And (PEPC, 0x00400000), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x39)), One))
                        }

                        If (LOr (LEqual (And (PEPC, 0x00800000), Zero), LEqual (GBES, Zero)))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x3A)), One))
                        }

                        If (LEqual (And (PEPC, 0x02000000), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x3C)), One))
                        }

                        If (LEqual (And (PEPC, 0x04000000), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x3D)), One))
                        }

                        If (LEqual (And (PEPC, 0x10000000), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x40)), One))
                        }

                        If (LNotEqual (And (PEPC, 0x0000080000000000), Zero))
                        {
                            Store (One, Index (DerefOf (Index (DEVY, 0x41)), One))
                        }

                        If (LEqual (And (PEPC, 0x0000100000000000), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x68)), One))
                        }

                        If (LEqual (And (PEPC, 0x0000200000000000), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x69)), One))
                        }

                        If (LEqual (And (PEPC, 0x40000000), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x4A)), One))
                        }

                        If (LEqual (And (PEPC, 0x80000000), Zero))
                        {
                            Store (Zero, Index (DerefOf (Index (DEVY, 0x4B)), One))
                        }

                        If (CondRefOf (\_SB.PC00.HEC3))
                        {
                            If (LNotEqual (And (PEPC, 0x0000000100000000), Zero))
                            {
                                Store (One, Index (DerefOf (Index (DEVY, 0x5E)), One))
                            }
                        }

                        If (LGreaterEqual (OSYS, 0x07DF))
                        {
                            If (LNotEqual (^^PC00.CNVW.VDID, 0xFFFFFFFF))
                            {
                                Store (0x03, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 0x37)), 0x02)), One)), One))
                                Store (Zero, Index (DerefOf (Index (DerefOf (Index (DerefOf (Index (DEVY, 0x37)), 0x02)), One)), 0x02))
                                Store (One, Index (DerefOf (Index (DEVY, 0x37)), One))
                            }
                        }

                        Return (DEVY)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (BCCD)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LEqual (S0ID, One))
                        {
                            D8XH (Zero, 0xC5)
                            D8XH (One, Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        If (LEqual (S0ID, One))
                        {
                            D8XH (Zero, 0xC5)
                            D8XH (One, 0xAB)
                        }
                    }

                    Store (One, Local0)
                    ADBG (Concatenate ("All Monitor off flag(default): ", ToHexString (Local0)))
                    If (LEqual (Arg2, 0x05))
                    {
                        If (CondRefOf (\_SB.PC00.PEG1.DHDW))
                        {
                            ^^PC00.PEG1.DHDW ()
                            Store (One, ^^PC00.PEG1.DGCE)
                        }

                        If (LEqual (S0ID, One))
                        {
                            GUAM (One)
                        }

                        If (ECON)
                        {
                            ^^PC00.LPCB.H_EC.ECNT (One)
                        }

                        If (CondRefOf (\_SB.PC00.TXHC))
                        {
                            If (LEqual (^^PC00.TDM0._STA, 0x0F))
                            {
                                If (LEqual (^^PC00.TDM0.SCME, One))
                                {
                                    Store (Zero, Local0)
                                    ADBG (Concatenate ("TDM0 set DPOF to  ", ToHexString (Local0)))
                                }
                            }
                            ElseIf (LEqual (^^PC00.TDM1._STA, 0x0F))
                            {
                                If (LEqual (^^PC00.TDM1.SCME, One))
                                {
                                    Store (Zero, Local0)
                                    ADBG (Concatenate ("TDM1 set DPOF to  ", ToHexString (Local0)))
                                }
                            }

                            ADBG (Concatenate ("All Monitor off flag: ", ToHexString (Local0)))
                            If (LEqual (Local0, One))
                            {
                                Store (One, ^^PC00.DPOF)
                            }
                        }

                        If (CondRefOf (\_SB.PC00.XHCI.PSLI))
                        {
                            ^^PC00.XHCI.PSLI (0x05)
                        }
                        Else
                        {
                        }

                        If (CondRefOf (\GPRV))
                        {
                            GPRV (0x03, Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        If (CondRefOf (\_SB.PC00.PEG1.DGCE))
                        {
                            Store (Zero, ^^PC00.PEG1.DGCE)
                        }

                        If (LEqual (S0ID, One))
                        {
                            GUAM (Zero)
                        }

                        If (ECON)
                        {
                            ^^PC00.LPCB.H_EC.ECNT (Zero)
                        }

                        If (CondRefOf (\_SB.PC00.TXHC))
                        {
                            Store (Zero, ^^PC00.DPOF)
                        }

                        If (CondRefOf (\_SB.PC00.XHCI.PSLI))
                        {
                            ^^PC00.XHCI.PSLI (0x06)
                        }
                        Else
                        {
                        }

                        If (CondRefOf (\GPRV))
                        {
                            GPRV (0x03, One)
                        }
                    }
                }

                If (LEqual (Arg0, ToUUID ("57a6512e-3979-4e9d-9708-ff13b2508972")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                           
                        })
                    }

                    If (LEqual (Arg2, One))
                    {
                        Store (L0IX, LBUF)
                        Return (LBUF)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }
    }

    Device (PSM)
    {
        Name (_HID, EisaId ("INT3420"))  // _HID: Hardware ID
        Name (_UID, Zero)  // _UID: Unique ID
        Name (_STR, Unicode ("Power Sharing Manager"))  // _STR: Description String
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If (LEqual (PSME, One))
            {
                Return (0x0F)
            }
            Else
            {
                Return (Zero)
            }
        }

        Name (SPLX, Package (0x02)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (SPLC, 0, Serialized)
        {
            Store (PDT1, Index (DerefOf (Index (SPLX, One)), Zero))
            Store (PLM1, Index (DerefOf (Index (SPLX, One)), One))
            Store (PTW1, Index (DerefOf (Index (SPLX, One)), 0x02))
            Return (SPLX)
        }

        Name (DPLX, Package (0x02)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                Package (0x06)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            }
        })
        Method (DPLC, 0, Serialized)
        {
            Store (DDT1, Index (DerefOf (Index (DPLX, One)), Zero))
            Store (DDP1, Index (DerefOf (Index (DPLX, One)), One))
            Store (DLI1, Index (DerefOf (Index (DerefOf (Index (DPLX, One)), 0x02)), Zero))
            Store (DPL1, Index (DerefOf (Index (DerefOf (Index (DPLX, One)), 0x02)), One))
            Store (DTW1, Index (DerefOf (Index (DerefOf (Index (DPLX, One)), 0x02)), 0x02))
            Store (DMI1, Index (DerefOf (Index (DerefOf (Index (DPLX, One)), 0x02)), 0x03))
            Store (DMA1, Index (DerefOf (Index (DerefOf (Index (DPLX, One)), 0x02)), 0x04))
            Store (DMT1, Index (DerefOf (Index (DerefOf (Index (DPLX, One)), 0x02)), 0x05))
            Return (DPLX)
        }
    }

    Scope (_SB)
    {
        Method (BTRK, 1, Serialized)
        {
            If (LNotEqual (GBTK, Zero))
            {
                SGOV (GBTK, Arg0)
            }
        }

        Method (GBTR, 0, NotSerialized)
        {
            Return (GGOV (GBTK))
        }
    }

    If (\_SB.PC00.CNIP ())
    {
        Scope (_SB.PC00.CNVW)
        {
            Name (SPLX, Package (0x02)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                Store (DOM1, Index (DerefOf (Index (SPLX, One)), Zero))
                Store (LIM1, Index (DerefOf (Index (SPLX, One)), One))
                Store (TIM1, Index (DerefOf (Index (SPLX, One)), 0x02))
                Return (SPLX)
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                Store (Zero, Index (DerefOf (Index (WANX, One)), Zero))
                Store (TRD0, Index (DerefOf (Index (WANX, One)), One))
                Store (TRL0, Index (DerefOf (Index (WANX, One)), 0x02))
                Store (One, Index (DerefOf (Index (WANX, 0x02)), Zero))
                Store (TRD1, Index (DerefOf (Index (WANX, 0x02)), One))
                Store (TRL1, Index (DerefOf (Index (WANX, 0x02)), 0x02))
                Return (WANX)
            }

            Name (WRDX, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                Store (WDM1, Index (DerefOf (Index (WRDX, One)), Zero))
                Store (CID1, Index (DerefOf (Index (WRDX, One)), One))
                Return (WRDX)
            }

            Name (WRDY, Package (0x02)
            {
                0x02, 
                Package (0x2E)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                Store (STXE, Index (DerefOf (Index (WRDY, One)), One))
                Store (ST10, Index (DerefOf (Index (WRDY, One)), 0x02))
                Store (ST11, Index (DerefOf (Index (WRDY, One)), 0x03))
                Store (ST12, Index (DerefOf (Index (WRDY, One)), 0x04))
                Store (ST13, Index (DerefOf (Index (WRDY, One)), 0x05))
                Store (ST14, Index (DerefOf (Index (WRDY, One)), 0x06))
                Store (ST15, Index (DerefOf (Index (WRDY, One)), 0x07))
                Store (ST16, Index (DerefOf (Index (WRDY, One)), 0x08))
                Store (ST17, Index (DerefOf (Index (WRDY, One)), 0x09))
                Store (ST18, Index (DerefOf (Index (WRDY, One)), 0x0A))
                Store (ST19, Index (DerefOf (Index (WRDY, One)), 0x0B))
                Store (ST50, Index (DerefOf (Index (WRDY, One)), 0x0C))
                Store (ST51, Index (DerefOf (Index (WRDY, One)), 0x0D))
                Store (ST52, Index (DerefOf (Index (WRDY, One)), 0x0E))
                Store (ST53, Index (DerefOf (Index (WRDY, One)), 0x0F))
                Store (ST54, Index (DerefOf (Index (WRDY, One)), 0x10))
                Store (ST55, Index (DerefOf (Index (WRDY, One)), 0x11))
                Store (ST56, Index (DerefOf (Index (WRDY, One)), 0x12))
                Store (ST57, Index (DerefOf (Index (WRDY, One)), 0x13))
                Store (ST58, Index (DerefOf (Index (WRDY, One)), 0x14))
                Store (ST59, Index (DerefOf (Index (WRDY, One)), 0x15))
                Store (ST5A, Index (DerefOf (Index (WRDY, One)), 0x16))
                Store (ST5B, Index (DerefOf (Index (WRDY, One)), 0x17))
                Store (CD10, Index (DerefOf (Index (WRDY, One)), 0x18))
                Store (CD11, Index (DerefOf (Index (WRDY, One)), 0x19))
                Store (CD12, Index (DerefOf (Index (WRDY, One)), 0x1A))
                Store (CD13, Index (DerefOf (Index (WRDY, One)), 0x1B))
                Store (CD14, Index (DerefOf (Index (WRDY, One)), 0x1C))
                Store (CD15, Index (DerefOf (Index (WRDY, One)), 0x1D))
                Store (CD16, Index (DerefOf (Index (WRDY, One)), 0x1E))
                Store (CD17, Index (DerefOf (Index (WRDY, One)), 0x1F))
                Store (CD18, Index (DerefOf (Index (WRDY, One)), 0x20))
                Store (CD19, Index (DerefOf (Index (WRDY, One)), 0x21))
                Store (CD1A, Index (DerefOf (Index (WRDY, One)), 0x22))
                Store (CD20, Index (DerefOf (Index (WRDY, One)), 0x23))
                Store (CD21, Index (DerefOf (Index (WRDY, One)), 0x24))
                Store (CD22, Index (DerefOf (Index (WRDY, One)), 0x25))
                Store (CD23, Index (DerefOf (Index (WRDY, One)), 0x26))
                Store (CD24, Index (DerefOf (Index (WRDY, One)), 0x27))
                Store (CD25, Index (DerefOf (Index (WRDY, One)), 0x28))
                Store (CD26, Index (DerefOf (Index (WRDY, One)), 0x29))
                Store (CD27, Index (DerefOf (Index (WRDY, One)), 0x2A))
                Store (CD28, Index (DerefOf (Index (WRDY, One)), 0x2B))
                Store (CD29, Index (DerefOf (Index (WRDY, One)), 0x2C))
                Store (CD2A, Index (DerefOf (Index (WRDY, One)), 0x2D))
                Return (WRDY)
            }

            Name (EWRY, Package (0x02)
            {
                0x02, 
                Package (0x87)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                Store (STDE, Index (DerefOf (Index (EWRY, One)), One))
                Store (STRS, Index (DerefOf (Index (EWRY, One)), 0x02))
                Store (ST20, Index (DerefOf (Index (EWRY, One)), 0x03))
                Store (ST21, Index (DerefOf (Index (EWRY, One)), 0x04))
                Store (ST22, Index (DerefOf (Index (EWRY, One)), 0x05))
                Store (ST23, Index (DerefOf (Index (EWRY, One)), 0x06))
                Store (ST24, Index (DerefOf (Index (EWRY, One)), 0x07))
                Store (ST25, Index (DerefOf (Index (EWRY, One)), 0x08))
                Store (ST26, Index (DerefOf (Index (EWRY, One)), 0x09))
                Store (ST27, Index (DerefOf (Index (EWRY, One)), 0x0A))
                Store (ST28, Index (DerefOf (Index (EWRY, One)), 0x0B))
                Store (ST29, Index (DerefOf (Index (EWRY, One)), 0x0C))
                Store (ST60, Index (DerefOf (Index (EWRY, One)), 0x0D))
                Store (ST61, Index (DerefOf (Index (EWRY, One)), 0x0E))
                Store (ST62, Index (DerefOf (Index (EWRY, One)), 0x0F))
                Store (ST63, Index (DerefOf (Index (EWRY, One)), 0x10))
                Store (ST64, Index (DerefOf (Index (EWRY, One)), 0x11))
                Store (ST65, Index (DerefOf (Index (EWRY, One)), 0x12))
                Store (ST66, Index (DerefOf (Index (EWRY, One)), 0x13))
                Store (ST67, Index (DerefOf (Index (EWRY, One)), 0x14))
                Store (ST68, Index (DerefOf (Index (EWRY, One)), 0x15))
                Store (ST69, Index (DerefOf (Index (EWRY, One)), 0x16))
                Store (ST6A, Index (DerefOf (Index (EWRY, One)), 0x17))
                Store (ST6B, Index (DerefOf (Index (EWRY, One)), 0x18))
                Store (ST30, Index (DerefOf (Index (EWRY, One)), 0x19))
                Store (ST31, Index (DerefOf (Index (EWRY, One)), 0x1A))
                Store (ST32, Index (DerefOf (Index (EWRY, One)), 0x1B))
                Store (ST33, Index (DerefOf (Index (EWRY, One)), 0x1C))
                Store (ST34, Index (DerefOf (Index (EWRY, One)), 0x1D))
                Store (ST35, Index (DerefOf (Index (EWRY, One)), 0x1E))
                Store (ST36, Index (DerefOf (Index (EWRY, One)), 0x1F))
                Store (ST37, Index (DerefOf (Index (EWRY, One)), 0x20))
                Store (ST38, Index (DerefOf (Index (EWRY, One)), 0x21))
                Store (ST39, Index (DerefOf (Index (EWRY, One)), 0x22))
                Store (ST70, Index (DerefOf (Index (EWRY, One)), 0x23))
                Store (ST71, Index (DerefOf (Index (EWRY, One)), 0x24))
                Store (ST72, Index (DerefOf (Index (EWRY, One)), 0x25))
                Store (ST73, Index (DerefOf (Index (EWRY, One)), 0x26))
                Store (ST74, Index (DerefOf (Index (EWRY, One)), 0x27))
                Store (ST75, Index (DerefOf (Index (EWRY, One)), 0x28))
                Store (ST76, Index (DerefOf (Index (EWRY, One)), 0x29))
                Store (ST77, Index (DerefOf (Index (EWRY, One)), 0x2A))
                Store (ST78, Index (DerefOf (Index (EWRY, One)), 0x2B))
                Store (ST79, Index (DerefOf (Index (EWRY, One)), 0x2C))
                Store (ST7A, Index (DerefOf (Index (EWRY, One)), 0x2D))
                Store (ST7B, Index (DerefOf (Index (EWRY, One)), 0x2E))
                Store (ST40, Index (DerefOf (Index (EWRY, One)), 0x2F))
                Store (ST41, Index (DerefOf (Index (EWRY, One)), 0x30))
                Store (ST42, Index (DerefOf (Index (EWRY, One)), 0x31))
                Store (ST43, Index (DerefOf (Index (EWRY, One)), 0x32))
                Store (ST44, Index (DerefOf (Index (EWRY, One)), 0x33))
                Store (ST45, Index (DerefOf (Index (EWRY, One)), 0x34))
                Store (ST46, Index (DerefOf (Index (EWRY, One)), 0x35))
                Store (ST47, Index (DerefOf (Index (EWRY, One)), 0x36))
                Store (ST48, Index (DerefOf (Index (EWRY, One)), 0x37))
                Store (ST49, Index (DerefOf (Index (EWRY, One)), 0x38))
                Store (ST80, Index (DerefOf (Index (EWRY, One)), 0x39))
                Store (ST81, Index (DerefOf (Index (EWRY, One)), 0x3A))
                Store (ST82, Index (DerefOf (Index (EWRY, One)), 0x3B))
                Store (ST83, Index (DerefOf (Index (EWRY, One)), 0x3C))
                Store (ST84, Index (DerefOf (Index (EWRY, One)), 0x3D))
                Store (ST85, Index (DerefOf (Index (EWRY, One)), 0x3E))
                Store (ST86, Index (DerefOf (Index (EWRY, One)), 0x3F))
                Store (ST87, Index (DerefOf (Index (EWRY, One)), 0x40))
                Store (ST88, Index (DerefOf (Index (EWRY, One)), 0x41))
                Store (ST89, Index (DerefOf (Index (EWRY, One)), 0x42))
                Store (ST8A, Index (DerefOf (Index (EWRY, One)), 0x43))
                Store (ST8B, Index (DerefOf (Index (EWRY, One)), 0x44))
                Store (CD30, Index (DerefOf (Index (EWRY, One)), 0x45))
                Store (CD31, Index (DerefOf (Index (EWRY, One)), 0x46))
                Store (CD32, Index (DerefOf (Index (EWRY, One)), 0x47))
                Store (CD33, Index (DerefOf (Index (EWRY, One)), 0x48))
                Store (CD34, Index (DerefOf (Index (EWRY, One)), 0x49))
                Store (CD35, Index (DerefOf (Index (EWRY, One)), 0x4A))
                Store (CD36, Index (DerefOf (Index (EWRY, One)), 0x4B))
                Store (CD37, Index (DerefOf (Index (EWRY, One)), 0x4C))
                Store (CD38, Index (DerefOf (Index (EWRY, One)), 0x4D))
                Store (CD39, Index (DerefOf (Index (EWRY, One)), 0x4E))
                Store (CD3A, Index (DerefOf (Index (EWRY, One)), 0x4F))
                Store (CD3B, Index (DerefOf (Index (EWRY, One)), 0x50))
                Store (CD3C, Index (DerefOf (Index (EWRY, One)), 0x51))
                Store (CD3D, Index (DerefOf (Index (EWRY, One)), 0x52))
                Store (CD3E, Index (DerefOf (Index (EWRY, One)), 0x53))
                Store (CD3F, Index (DerefOf (Index (EWRY, One)), 0x54))
                Store (CD40, Index (DerefOf (Index (EWRY, One)), 0x55))
                Store (CD41, Index (DerefOf (Index (EWRY, One)), 0x56))
                Store (CD42, Index (DerefOf (Index (EWRY, One)), 0x57))
                Store (CD43, Index (DerefOf (Index (EWRY, One)), 0x58))
                Store (CD44, Index (DerefOf (Index (EWRY, One)), 0x59))
                Store (CD45, Index (DerefOf (Index (EWRY, One)), 0x5A))
                Store (CD46, Index (DerefOf (Index (EWRY, One)), 0x5B))
                Store (CD47, Index (DerefOf (Index (EWRY, One)), 0x5C))
                Store (CD48, Index (DerefOf (Index (EWRY, One)), 0x5D))
                Store (CD49, Index (DerefOf (Index (EWRY, One)), 0x5E))
                Store (CD4A, Index (DerefOf (Index (EWRY, One)), 0x5F))
                Store (CD4B, Index (DerefOf (Index (EWRY, One)), 0x60))
                Store (CD4C, Index (DerefOf (Index (EWRY, One)), 0x61))
                Store (CD4D, Index (DerefOf (Index (EWRY, One)), 0x62))
                Store (CD4E, Index (DerefOf (Index (EWRY, One)), 0x63))
                Store (CD4F, Index (DerefOf (Index (EWRY, One)), 0x64))
                Store (CD50, Index (DerefOf (Index (EWRY, One)), 0x65))
                Store (CD51, Index (DerefOf (Index (EWRY, One)), 0x66))
                Store (CD52, Index (DerefOf (Index (EWRY, One)), 0x67))
                Store (CD53, Index (DerefOf (Index (EWRY, One)), 0x68))
                Store (CD54, Index (DerefOf (Index (EWRY, One)), 0x69))
                Store (CD55, Index (DerefOf (Index (EWRY, One)), 0x6A))
                Store (CD56, Index (DerefOf (Index (EWRY, One)), 0x6B))
                Store (CD57, Index (DerefOf (Index (EWRY, One)), 0x6C))
                Store (CD58, Index (DerefOf (Index (EWRY, One)), 0x6D))
                Store (CD59, Index (DerefOf (Index (EWRY, One)), 0x6E))
                Store (CD5A, Index (DerefOf (Index (EWRY, One)), 0x6F))
                Store (CD5B, Index (DerefOf (Index (EWRY, One)), 0x70))
                Store (CD5C, Index (DerefOf (Index (EWRY, One)), 0x71))
                Store (CD5D, Index (DerefOf (Index (EWRY, One)), 0x72))
                Store (CD5E, Index (DerefOf (Index (EWRY, One)), 0x73))
                Store (CD5F, Index (DerefOf (Index (EWRY, One)), 0x74))
                Store (CD60, Index (DerefOf (Index (EWRY, One)), 0x75))
                Store (CD61, Index (DerefOf (Index (EWRY, One)), 0x76))
                Store (CD62, Index (DerefOf (Index (EWRY, One)), 0x77))
                Store (CD63, Index (DerefOf (Index (EWRY, One)), 0x78))
                Store (CD64, Index (DerefOf (Index (EWRY, One)), 0x79))
                Store (CD65, Index (DerefOf (Index (EWRY, One)), 0x7A))
                Store (CD66, Index (DerefOf (Index (EWRY, One)), 0x7B))
                Store (CD67, Index (DerefOf (Index (EWRY, One)), 0x7C))
                Store (CD68, Index (DerefOf (Index (EWRY, One)), 0x7D))
                Store (CD69, Index (DerefOf (Index (EWRY, One)), 0x7E))
                Store (CD6A, Index (DerefOf (Index (EWRY, One)), 0x7F))
                Store (CD6B, Index (DerefOf (Index (EWRY, One)), 0x80))
                Store (CD6C, Index (DerefOf (Index (EWRY, One)), 0x81))
                Store (CD6D, Index (DerefOf (Index (EWRY, One)), 0x82))
                Store (CD6E, Index (DerefOf (Index (EWRY, One)), 0x83))
                Store (CD6F, Index (DerefOf (Index (EWRY, One)), 0x84))
                Store (CD70, Index (DerefOf (Index (EWRY, One)), 0x85))
                Store (CD71, Index (DerefOf (Index (EWRY, One)), 0x86))
                Return (EWRY)
            }

            Name (WGDY, Package (0x02)
            {
                0x03, 
                Package (0x4A)
                {
                    0x07, 
                    0x03, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                Store (SDGN, Index (DerefOf (Index (WGDY, One)), One))
                Store (SD11, Index (DerefOf (Index (WGDY, One)), 0x02))
                Store (SD12, Index (DerefOf (Index (WGDY, One)), 0x03))
                Store (SD13, Index (DerefOf (Index (WGDY, One)), 0x04))
                Store (SD14, Index (DerefOf (Index (WGDY, One)), 0x05))
                Store (SD15, Index (DerefOf (Index (WGDY, One)), 0x06))
                Store (SD16, Index (DerefOf (Index (WGDY, One)), 0x07))
                Store (SD17, Index (DerefOf (Index (WGDY, One)), 0x08))
                Store (SD18, Index (DerefOf (Index (WGDY, One)), 0x09))
                Store (SD19, Index (DerefOf (Index (WGDY, One)), 0x0A))
                Store (SD21, Index (DerefOf (Index (WGDY, One)), 0x0B))
                Store (SD22, Index (DerefOf (Index (WGDY, One)), 0x0C))
                Store (SD23, Index (DerefOf (Index (WGDY, One)), 0x0D))
                Store (SD24, Index (DerefOf (Index (WGDY, One)), 0x0E))
                Store (SD25, Index (DerefOf (Index (WGDY, One)), 0x0F))
                Store (SD26, Index (DerefOf (Index (WGDY, One)), 0x10))
                Store (SD27, Index (DerefOf (Index (WGDY, One)), 0x11))
                Store (SD28, Index (DerefOf (Index (WGDY, One)), 0x12))
                Store (SD29, Index (DerefOf (Index (WGDY, One)), 0x13))
                Store (SD31, Index (DerefOf (Index (WGDY, One)), 0x14))
                Store (SD32, Index (DerefOf (Index (WGDY, One)), 0x15))
                Store (SD33, Index (DerefOf (Index (WGDY, One)), 0x16))
                Store (SD34, Index (DerefOf (Index (WGDY, One)), 0x17))
                Store (SD35, Index (DerefOf (Index (WGDY, One)), 0x18))
                Store (SD36, Index (DerefOf (Index (WGDY, One)), 0x19))
                Store (SD37, Index (DerefOf (Index (WGDY, One)), 0x1A))
                Store (SD38, Index (DerefOf (Index (WGDY, One)), 0x1B))
                Store (SD39, Index (DerefOf (Index (WGDY, One)), 0x1C))
                Store (SD41, Index (DerefOf (Index (WGDY, One)), 0x1D))
                Store (SD42, Index (DerefOf (Index (WGDY, One)), 0x1E))
                Store (SD43, Index (DerefOf (Index (WGDY, One)), 0x1F))
                Store (SD44, Index (DerefOf (Index (WGDY, One)), 0x20))
                Store (SD45, Index (DerefOf (Index (WGDY, One)), 0x21))
                Store (SD46, Index (DerefOf (Index (WGDY, One)), 0x22))
                Store (SD47, Index (DerefOf (Index (WGDY, One)), 0x23))
                Store (SD48, Index (DerefOf (Index (WGDY, One)), 0x24))
                Store (SD49, Index (DerefOf (Index (WGDY, One)), 0x25))
                Store (SD51, Index (DerefOf (Index (WGDY, One)), 0x26))
                Store (SD52, Index (DerefOf (Index (WGDY, One)), 0x27))
                Store (SD53, Index (DerefOf (Index (WGDY, One)), 0x28))
                Store (SD54, Index (DerefOf (Index (WGDY, One)), 0x29))
                Store (SD55, Index (DerefOf (Index (WGDY, One)), 0x2A))
                Store (SD56, Index (DerefOf (Index (WGDY, One)), 0x2B))
                Store (SD57, Index (DerefOf (Index (WGDY, One)), 0x2C))
                Store (SD58, Index (DerefOf (Index (WGDY, One)), 0x2D))
                Store (SD59, Index (DerefOf (Index (WGDY, One)), 0x2E))
                Store (SD61, Index (DerefOf (Index (WGDY, One)), 0x2F))
                Store (SD62, Index (DerefOf (Index (WGDY, One)), 0x30))
                Store (SD63, Index (DerefOf (Index (WGDY, One)), 0x31))
                Store (SD64, Index (DerefOf (Index (WGDY, One)), 0x32))
                Store (SD65, Index (DerefOf (Index (WGDY, One)), 0x33))
                Store (SD66, Index (DerefOf (Index (WGDY, One)), 0x34))
                Store (SD67, Index (DerefOf (Index (WGDY, One)), 0x35))
                Store (SD68, Index (DerefOf (Index (WGDY, One)), 0x36))
                Store (SD69, Index (DerefOf (Index (WGDY, One)), 0x37))
                Store (SD71, Index (DerefOf (Index (WGDY, One)), 0x38))
                Store (SD72, Index (DerefOf (Index (WGDY, One)), 0x39))
                Store (SD73, Index (DerefOf (Index (WGDY, One)), 0x3A))
                Store (SD74, Index (DerefOf (Index (WGDY, One)), 0x3B))
                Store (SD75, Index (DerefOf (Index (WGDY, One)), 0x3C))
                Store (SD76, Index (DerefOf (Index (WGDY, One)), 0x3D))
                Store (SD77, Index (DerefOf (Index (WGDY, One)), 0x3E))
                Store (SD78, Index (DerefOf (Index (WGDY, One)), 0x3F))
                Store (SD79, Index (DerefOf (Index (WGDY, One)), 0x40))
                Store (SD81, Index (DerefOf (Index (WGDY, One)), 0x41))
                Store (SD82, Index (DerefOf (Index (WGDY, One)), 0x42))
                Store (SD83, Index (DerefOf (Index (WGDY, One)), 0x43))
                Store (SD84, Index (DerefOf (Index (WGDY, One)), 0x44))
                Store (SD85, Index (DerefOf (Index (WGDY, One)), 0x45))
                Store (SD86, Index (DerefOf (Index (WGDY, One)), 0x46))
                Store (SD87, Index (DerefOf (Index (WGDY, One)), 0x47))
                Store (SD88, Index (DerefOf (Index (WGDY, One)), 0x48))
                Store (SD89, Index (DerefOf (Index (WGDY, One)), 0x49))
                Return (WGDY)
            }

            Name (ECKY, Package (0x02)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Zero
                }
            })
            Method (ECKV, 0, Serialized)
            {
                Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                Return (ECKY)
            }

            Name (PPAY, Package (0x02)
            {
                One, 
                Package (0x18)
                {
                    0x07, 
                    Zero, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x18, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28, 
                    0x28
                }
            })
            Method (PPAG, 0, Serialized)
            {
                Store (WAGE, Index (DerefOf (Index (PPAY, One)), One))
                Store (AGA1, Index (DerefOf (Index (PPAY, One)), 0x02))
                Store (AGA2, Index (DerefOf (Index (PPAY, One)), 0x03))
                Store (AGA3, Index (DerefOf (Index (PPAY, One)), 0x04))
                Store (AGA4, Index (DerefOf (Index (PPAY, One)), 0x05))
                Store (AGA5, Index (DerefOf (Index (PPAY, One)), 0x06))
                Store (AGA6, Index (DerefOf (Index (PPAY, One)), 0x07))
                Store (AGA7, Index (DerefOf (Index (PPAY, One)), 0x08))
                Store (AGA8, Index (DerefOf (Index (PPAY, One)), 0x09))
                Store (AGA9, Index (DerefOf (Index (PPAY, One)), 0x0A))
                Store (AGAA, Index (DerefOf (Index (PPAY, One)), 0x0B))
                Store (AGAB, Index (DerefOf (Index (PPAY, One)), 0x0C))
                Store (AGB1, Index (DerefOf (Index (PPAY, One)), 0x0D))
                Store (AGB2, Index (DerefOf (Index (PPAY, One)), 0x0E))
                Store (AGB3, Index (DerefOf (Index (PPAY, One)), 0x0F))
                Store (AGB4, Index (DerefOf (Index (PPAY, One)), 0x10))
                Store (AGB5, Index (DerefOf (Index (PPAY, One)), 0x11))
                Store (AGB6, Index (DerefOf (Index (PPAY, One)), 0x12))
                Store (AGB7, Index (DerefOf (Index (PPAY, One)), 0x13))
                Store (AGB8, Index (DerefOf (Index (PPAY, One)), 0x14))
                Store (AGB9, Index (DerefOf (Index (PPAY, One)), 0x15))
                Store (AGBA, Index (DerefOf (Index (PPAY, One)), 0x16))
                Store (AGBB, Index (DerefOf (Index (PPAY, One)), 0x17))
                Return (PPAY)
            }

            Name (WTSY, Package (0x02)
            {
                One, 
                Package (0x13)
                {
                    0x07, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                }
            })
            Method (WTAS, 0, Serialized)
            {
                Store (WTSV, Index (DerefOf (Index (WTSY, One)), One))
                Store (WTLE, Index (DerefOf (Index (WTSY, One)), 0x02))
                Store (BL01, Index (DerefOf (Index (WTSY, One)), 0x03))
                Store (BL02, Index (DerefOf (Index (WTSY, One)), 0x04))
                Store (BL03, Index (DerefOf (Index (WTSY, One)), 0x05))
                Store (BL04, Index (DerefOf (Index (WTSY, One)), 0x06))
                Store (BL05, Index (DerefOf (Index (WTSY, One)), 0x07))
                Store (BL06, Index (DerefOf (Index (WTSY, One)), 0x08))
                Store (BL07, Index (DerefOf (Index (WTSY, One)), 0x09))
                Store (BL08, Index (DerefOf (Index (WTSY, One)), 0x0A))
                Store (BL09, Index (DerefOf (Index (WTSY, One)), 0x0B))
                Store (BL10, Index (DerefOf (Index (WTSY, One)), 0x0C))
                Store (BL11, Index (DerefOf (Index (WTSY, One)), 0x0D))
                Store (BL12, Index (DerefOf (Index (WTSY, One)), 0x0E))
                Store (BL13, Index (DerefOf (Index (WTSY, One)), 0x0F))
                Store (BL14, Index (DerefOf (Index (WTSY, One)), 0x10))
                Store (BL15, Index (DerefOf (Index (WTSY, One)), 0x11))
                Store (BL16, Index (DerefOf (Index (WTSY, One)), 0x12))
                Return (WTSY)
            }

            Name (WAIY, Package (0x02)
            {
                Zero, 
                Package (0x04)
                {
                    0x07, 
                    Zero, 
                    Zero, 
                    Zero
                }
            })
            Method (WAIS, 0, Serialized)
            {
                Store (WLBI, Index (DerefOf (Index (WAIY, One)), One))
                Store (WHBI, Index (DerefOf (Index (WAIY, One)), 0x02))
                Return (WAIY)
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                Return (SADX)
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX)
            }

            Method (IFUN, 4, Serialized)
            {
                If (LEqual (Arg2, Zero))
                {
                    If (LEqual (Arg1, Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x0F                                           
                        })
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }

                If (LEqual (Arg2, One))
                {
                    ShiftLeft (CVPR, Zero, Local0)
                    Return (Local0)
                }

                If (LEqual (Arg2, 0x02))
                {
                    CreateWordField (Arg3, Zero, CMDT)
                    CreateWordField (Arg3, 0x02, CMDP)
                    If (LEqual (CMDT, One))
                    {
                        If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                        {
                            Return (RSTT)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (CMDT, 0x02))
                    {
                        If (CondRefOf (\_SB.PC00.CNVW.RSTT))
                        {
                            Store (CMDP, RSTT)
                        }

                        Return (Zero)
                    }

                    If (LEqual (CMDT, 0x03))
                    {
                        If (CondRefOf (\_SB.PC00.CNVW.PRRS))
                        {
                            Return (PRRS)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Return (Zero)
                }

                If (LEqual (Arg2, 0x03))
                {
                    If (LEqual (CRFI, One))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Method (IDSM, 1, Serialized)
            {
                If (LEqual (Arg0, ToUUID ("7266172c-220b-4b29-814f-75e4dd26b5fd")))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (EFUN, 4, Serialized)
            {
                If (LEqual (Arg2, Zero))
                {
                    If (LEqual (Arg1, Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                     
                        })
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }

                If (LEqual (Arg2, One))
                {
                    Store (ACSD, Local0)
                    Return (Local0)
                }

                If (LEqual (Arg2, 0x02))
                {
                    Store (I5BS, Local0)
                    Return (Local0)
                }

                If (LEqual (Arg2, 0x03))
                {
                    Store (UHBS, Local0)
                    Return (Local0)
                }

                If (LEqual (Arg2, 0x06))
                {
                    Store (AXMU, Local0)
                    ShiftLeft (Local0, One, Local0)
                    Or (Local0, AXSU, Local0)
                    Store (AXMR, Local1)
                    ShiftLeft (Local1, One, Local1)
                    Or (Local1, AXSR, Local1)
                    ShiftLeft (Local1, 0x02, Local1)
                    Or (Local0, Local1, Local0)
                    Return (Local0)
                }

                If (LEqual (Arg2, 0x04))
                {
                    Return (WFRC)
                }

                If (LEqual (Arg2, 0x05))
                {
                    Return (WFUC)
                }

                If (LEqual (Arg2, 0x07))
                {
                    Return (UNI4)
                }

                If (LEqual (Arg2, 0x08))
                {
                    Return (WFIC)
                }

                Return (Zero)
            }

            Method (EDSM, 1, Serialized)
            {
                If (LEqual (Arg0, ToUUID ("f21202bf-8f78-4dc6-a5b3-1f738e285ade")))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (EDSM (Arg0))
                {
                    Return (EFUN (Arg0, Arg1, Arg2, Arg3))
                }

                If (IDSM (Arg0))
                {
                    Return (IFUN (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        If (LOr (LEqual (PCHS, 0x02), LOr (LEqual (PCHS, 0x05), LEqual (PCHS, 0x03))))
        {
            Scope (_SB.PC00.XHCI.RHUB.HS10)
            {
                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                    Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                    Return (SADX)
                }

                Name (BRDY, Package (0x02)
                {
                    Zero, 
                    Package (0x08)
                    {
                        0x12, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (BRDS, 0, Serialized)
                {
                    Store (BTSE, Index (DerefOf (Index (BRDY, One)), One))
                    Store (BTBR, Index (DerefOf (Index (BRDY, One)), 0x02))
                    Store (BED2, Index (DerefOf (Index (BRDY, One)), 0x03))
                    Store (BED3, Index (DerefOf (Index (BRDY, One)), 0x04))
                    Store (BTLE, Index (DerefOf (Index (BRDY, One)), 0x05))
                    Store (BTL2, Index (DerefOf (Index (BRDY, One)), 0x06))
                    Store (BTLL, Index (DerefOf (Index (BRDY, One)), 0x07))
                    Return (BRDY)
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x12, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                    Return (ECKY)
                }

                Name (RDLY, 0x69)
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (LEqual (Arg0, ToUUID ("aa10f4e0-81ac-4233-abf6-3b2ac50e28d9")))
                    {
                        If (LEqual (Arg2, Zero))
                        {
                            If (LEqual (Arg1, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If (LEqual (Arg2, One))
                        {
                            Store (Arg3, RDLY)
                        }

                        Return (Zero)
                    }
                    ElseIf (LEqual (Arg0, ToUUID ("2d19d3e1-5708-4696-bd5b-2c3dbae2d6a9")))
                    {
                        If (LEqual (Arg2, Zero))
                        {
                            If (LEqual (Arg1, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If (LEqual (Arg2, One)){}
                        Return (Zero)
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }

                PowerResource (BTRT, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        Store (Acquire (CNMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            BTRK (Zero)
                            Sleep (RDLY)
                            BTRK (One)
                            Sleep (RDLY)
                        }

                        Release (CNMT)
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    Return (Package (0x01)
                    {
                        BTRT
                    })
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX)
                }

                Name (BTLY, Package (0x02)
                {
                    One, 
                    Package (0x0B)
                    {
                        0x12, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (BTLC, 0, Serialized)
                {
                    Store (TILE, Index (DerefOf (Index (BTLY, One)), One))
                    Store (TIS0, Index (DerefOf (Index (BTLY, One)), 0x02))
                    Store (TS0X, Index (DerefOf (Index (BTLY, One)), 0x03))
                    Store (TIS4, Index (DerefOf (Index (BTLY, One)), 0x04))
                    Store (TIS5, Index (DerefOf (Index (BTLY, One)), 0x05))
                    Store (BLEC, Index (DerefOf (Index (BTLY, One)), 0x06))
                    Store (BLPD, Index (DerefOf (Index (BTLY, One)), 0x07))
                    Store (BLPI, Index (DerefOf (Index (BTLY, One)), 0x08))
                    Return (BTLY)
                }
            }
        }
        ElseIf (LEqual (PCHS, 0x04))
        {
            Scope (_SB.PC00.XHCI.RHUB.HS14)
            {
                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    Store (ATDV, Index (DerefOf (Index (SADX, One)), One))
                    Store (ATDV, Index (DerefOf (Index (SADX, 0x02)), One))
                    Return (SADX)
                }

                Name (BRDY, Package (0x02)
                {
                    Zero, 
                    Package (0x08)
                    {
                        0x12, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (BRDS, 0, Serialized)
                {
                    Store (BTSE, Index (DerefOf (Index (BRDY, One)), One))
                    Store (BTBR, Index (DerefOf (Index (BRDY, One)), 0x02))
                    Store (BED2, Index (DerefOf (Index (BRDY, One)), 0x03))
                    Store (BED3, Index (DerefOf (Index (BRDY, One)), 0x04))
                    Store (BTLE, Index (DerefOf (Index (BRDY, One)), 0x05))
                    Store (BTL2, Index (DerefOf (Index (BRDY, One)), 0x06))
                    Store (BTLL, Index (DerefOf (Index (BRDY, One)), 0x07))
                    Return (BRDY)
                }

                Name (ECKY, Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x12, 
                        Zero
                    }
                })
                Method (ECKV, 0, Serialized)
                {
                    Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
                    Return (ECKY)
                }

                Name (RDLY, 0x69)
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (LEqual (Arg0, ToUUID ("aa10f4e0-81ac-4233-abf6-3b2ac50e28d9")))
                    {
                        If (LEqual (Arg2, Zero))
                        {
                            If (LEqual (Arg1, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If (LEqual (Arg2, One))
                        {
                            Store (Arg3, RDLY)
                        }

                        Return (Zero)
                    }
                    ElseIf (LEqual (Arg0, ToUUID ("2d19d3e1-5708-4696-bd5b-2c3dbae2d6a9")))
                    {
                        If (LEqual (Arg2, Zero))
                        {
                            If (LEqual (Arg1, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If (LEqual (Arg2, One)){}
                        Return (Zero)
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }

                PowerResource (BTRT, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        Store (Acquire (CNMT, 0x03E8), Local0)
                        If (LEqual (Local0, Zero))
                        {
                            BTRK (Zero)
                            Sleep (RDLY)
                            BTRK (One)
                            Sleep (RDLY)
                        }

                        Release (CNMT)
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    Return (Package (0x01)
                    {
                        BTRT
                    })
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX)
                }

                Name (BTLY, Package (0x02)
                {
                    One, 
                    Package (0x0B)
                    {
                        0x12, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Method (BTLC, 0, Serialized)
                {
                    Store (TILE, Index (DerefOf (Index (BTLY, One)), One))
                    Store (TIS0, Index (DerefOf (Index (BTLY, One)), 0x02))
                    Store (TS0X, Index (DerefOf (Index (BTLY, One)), 0x03))
                    Store (TIS4, Index (DerefOf (Index (BTLY, One)), 0x04))
                    Store (TIS5, Index (DerefOf (Index (BTLY, One)), 0x05))
                    Store (BLEC, Index (DerefOf (Index (BTLY, One)), 0x06))
                    Store (BLPD, Index (DerefOf (Index (BTLY, One)), 0x07))
                    Store (BLPI, Index (DerefOf (Index (BTLY, One)), 0x08))
                    Return (BTLY)
                }
            }
        }
    }

    Scope (_SB.PC00.UA00)
    {
        Device (BTH0)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return ("INT33E1")
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                SHPO (GBTI, One)
                SHPO (GBTK, One)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBFG, ResourceTemplate ()
                {
                    UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                        0xC0, LittleEndian, ParityTypeNone, FlowControlHardware,
                        0x0020, 0x0020, "\\_SB.PC00.UA00",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                    GpioInt (Edge, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                CreateWordField (SBFG, 0x5F, INT3)
                CreateWordField (SBFG, 0x3C, KIL3)
                Store (GNUM (GBTI), INT3)
                Store (GNUM (GBTK), KIL3)
                Name (SBFI, ResourceTemplate ()
                {
                    UartSerialBusV2 (0x0001C200, DataBitsEight, StopBitsOne,
                        0xC0, LittleEndian, ParityTypeNone, FlowControlHardware,
                        0x0020, 0x0020, "\\_SB.PC00.UA00",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                        "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                    Interrupt (ResourceConsumer, Edge, ActiveLow, ExclusiveAndWake, ,, _Y65)
                    {
                        0x00000000,
                    }
                })
                CreateDWordField (SBFI, \_SB.PC00.UA00.BTH0._CRS._Y65._INT, INT4)  // _INT: Interrupts
                CreateWordField (SBFI, 0x3C, KIL4)
                Store (INUM (GBTI), INT4)
                Store (GNUM (GBTK), KIL4)
                If (LEqual (SDM9, Zero))
                {
                    Return (SBFG)
                }
                Else
                {
                    Return (SBFI)
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (LNotEqual (SDS9, 0x02))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Name (_S0W, 0x02)  // _S0W: S0 Device Wake State
        }

        Name (BRDY, Package (0x02)
        {
            Zero, 
            Package (0x08)
            {
                0x12, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0x80
            }
        })
        Method (BRDS, 0, Serialized)
        {
            Store (BTSE, Index (DerefOf (Index (BRDY, One)), One))
            Store (BTBR, Index (DerefOf (Index (BRDY, One)), 0x02))
            Store (BED2, Index (DerefOf (Index (BRDY, One)), 0x03))
            Store (BED3, Index (DerefOf (Index (BRDY, One)), 0x04))
            Store (BTLE, Index (DerefOf (Index (BRDY, One)), 0x05))
            Store (BTL2, Index (DerefOf (Index (BRDY, One)), 0x06))
            Store (BTLL, Index (DerefOf (Index (BRDY, One)), 0x07))
            Return (BRDY)
        }

        Name (ECKY, Package (0x02)
        {
            Zero, 
            Package (0x02)
            {
                0x12, 
                Zero
            }
        })
        Method (ECKV, 0, Serialized)
        {
            Store (CECV, Index (DerefOf (Index (ECKY, One)), One))
            Return (ECKY)
        }

        Name (GPCX, Package (0x03)
        {
            Zero, 
            Package (0x02)
            {
                0x07, 
                Package (0x03)
                {
                    Zero, 
                    Zero, 
                    Zero
                }
            }, 

            Package (0x02)
            {
                0x12, 
                Package (0x03)
                {
                    Zero, 
                    Zero, 
                    Zero
                }
            }
        })
        Method (GPC, 0, Serialized)
        {
            Return (GPCX)
        }
    }

    Scope (_SB.PC00)
    {
        Method (PINR, 2, Serialized)
        {
            Name (GPIR, ResourceTemplate ()
            {
                GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                    "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0xFFFF
                    }
            })
            CreateWordField (GPIR, 0x17, PINF)
            Store (Add (GINF (Arg1, 0x08), Arg0), PINF)
            Return (GPIR)
        }

        Method (VPIN, 1, Serialized)
        {
            Name (GPOR, ResourceTemplate ()
            {
                GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                    "\\_SB.PC00.XHCI.RHUB.HS07.VGPO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0xFFFF
                    }
            })
            Name (GPR1, ResourceTemplate ()
            {
                GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                    "\\_SB.PC00.XHCI.RHUB.HS06.VGPO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0xFFFF
                    }
            })
            Name (GPR2, ResourceTemplate ()
            {
                GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                    "\\_SB.PC00.XHCI.RHUB.HS08.VGPO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0xFFFF
                    }
            })
            Name (GPR3, ResourceTemplate ()
            {
                GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                    "\\_SB.PC00.XHCI.RHUB.HS03.VGPO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0xFFFF
                    }
            })
            If (LEqual (CUPN, 0x06))
            {
                CreateWordField (GPR1, 0x17, PINU)
                Store (Arg0, PINU)
                Return (GPR1)
            }
            ElseIf (LEqual (CUPN, 0x07))
            {
                CreateWordField (GPOR, 0x17, PINV)
                Store (Arg0, PINV)
                Return (GPOR)
            }
            ElseIf (LEqual (CUPN, 0x08))
            {
                CreateWordField (GPR2, 0x17, PIN2)
                Store (Arg0, PIN2)
                Return (GPR2)
            }
            ElseIf (LEqual (CUPN, 0x03))
            {
                CreateWordField (GPR3, 0x17, PIN3)
                Store (Arg0, PIN3)
                Return (GPR3)
            }

            Return (ResourceTemplate ()
            {
                GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionNone,
                    "\\_SB.PC00.XHCI.RHUB.HSXX.VGPO", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0000
                    }
            })
        }

        Method (DSMI, 4, Serialized)
        {
            ShiftLeft (Arg3, 0x18, Local3)
            ShiftLeft (Arg2, 0x10, Local2)
            ShiftLeft (Arg1, 0x08, Local1)
            Or (Local1, Arg0, Local0)
            Or (Local0, Local2, Local0)
            Or (Local0, Local3, Local0)
            Return (Local0)
        }

        Method (GPPI, 4, Serialized)
        {
            ShiftLeft (Arg3, 0x18, Local3)
            ShiftLeft (Arg2, 0x10, Local2)
            ShiftLeft (Arg1, 0x08, Local1)
            Or (Local1, Arg0, Local0)
            Or (Local0, Local2, Local0)
            Or (Local0, Local3, Local0)
            Return (Local0)
        }

        Method (GRID, 1, Serialized)
        {
            Name (BUF, Buffer (0x09){})
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Store (L0H0, Index (BUF, Zero))
                    Store (L0H1, Index (BUF, One))
                    Store (L0H2, Index (BUF, 0x02))
                    Store (L0H3, Index (BUF, 0x03))
                    Store (L0H4, Index (BUF, 0x04))
                    Store (L0H5, Index (BUF, 0x05))
                    Store (L0H6, Index (BUF, 0x06))
                    Store (L0H7, Index (BUF, 0x07))
                    Store (L0H8, Index (BUF, 0x08))
                }
                Case (One)
                {
                    Store (L1H0, Index (BUF, Zero))
                    Store (L1H1, Index (BUF, One))
                    Store (L1H2, Index (BUF, 0x02))
                    Store (L1H3, Index (BUF, 0x03))
                    Store (L1H4, Index (BUF, 0x04))
                    Store (L1H5, Index (BUF, 0x05))
                    Store (L1H6, Index (BUF, 0x06))
                    Store (L1H7, Index (BUF, 0x07))
                    Store (L1H8, Index (BUF, 0x08))
                }
                Case (0x02)
                {
                    Store (L2H0, Index (BUF, Zero))
                    Store (L2H1, Index (BUF, One))
                    Store (L2H2, Index (BUF, 0x02))
                    Store (L2H3, Index (BUF, 0x03))
                    Store (L2H4, Index (BUF, 0x04))
                    Store (L2H5, Index (BUF, 0x05))
                    Store (L2H6, Index (BUF, 0x06))
                    Store (L2H7, Index (BUF, 0x07))
                    Store (L2H8, Index (BUF, 0x08))
                }
                Default
                {
                    Store (L3H0, Index (BUF, Zero))
                    Store (L3H1, Index (BUF, One))
                    Store (L3H2, Index (BUF, 0x02))
                    Store (L3H3, Index (BUF, 0x03))
                    Store (L3H4, Index (BUF, 0x04))
                    Store (L3H5, Index (BUF, 0x05))
                    Store (L3H6, Index (BUF, 0x06))
                    Store (L3H7, Index (BUF, 0x07))
                    Store (L3H8, Index (BUF, 0x08))
                }

            }

            Return (ToString (BUF, Ones))
        }

        Method (HCID, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Store (L0SM, Local0)
                }
                Case (One)
                {
                    Store (L1SM, Local0)
                }
                Case (0x02)
                {
                    Store (L2SM, Local0)
                }
                Case (0x03)
                {
                    Store (L3SM, Local0)
                }
                Case (0x04)
                {
                    Store (L4SM, Local0)
                }
                Default
                {
                    Store (L5SM, Local0)
                }

            }

            Switch (ToInteger (Local0))
            {
                Case (Zero)
                {
                    Return ("INT3471")
                }
                Case (One)
                {
                    Return ("INT33BE")
                }
                Case (0x02)
                {
                    Return ("INT3476")
                }
                Case (0x03)
                {
                    Return ("INT3477")
                }
                Case (0x04)
                {
                    Return ("INT3474")
                }
                Case (0x05)
                {
                    Return ("INT3473")
                }
                Case (0x06)
                {
                    Return ("INT3475")
                }
                Case (0x07)
                {
                    Return ("INT3478")
                }
                Case (0x08)
                {
                    Return ("INT3479")
                }
                Case (0x09)
                {
                    Return ("INT347A")
                }
                Case (0x0A)
                {
                    Return ("INT347B")
                }
                Case (0x0B)
                {
                    Return ("OVTI2742")
                }
                Case (0x0C)
                {
                    Return ("OVTI9234")
                }
                Case (0x0D)
                {
                    Return ("OVTI8856")
                }
                Case (0x0E)
                {
                    Return ("OVTIF860")
                }
                Case (0x0F)
                {
                    Return ("SONY362A")
                }
                Case (0x10)
                {
                    Return ("SONY488A")
                }
                Case (0x11)
                {
                    Return ("OVTI01AS")
                }
                Case (0x12)
                {
                    Return ("OVTI01A0")
                }
                Case (0x13)
                {
                    Return ("OVTI5678")
                }
                Case (0x14)
                {
                    Return ("OVTI9738")
                }
                Case (0x15)
                {
                    Return ("HIMX11B1")
                }
                Case (0x16)
                {
                    Return ("OVTID858")
                }
                Case (0x17)
                {
                    Return ("OVTI01AF")
                }
                Default
                {
                    Return (GRID (Arg0))
                }

            }
        }

        Method (FHCI, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Store (F0FM, Local0)
                }
                Case (One)
                {
                    Store (F1FM, Local0)
                }
                Case (0x02)
                {
                    Store (F2FM, Local0)
                }
                Case (0x03)
                {
                    Store (F3FM, Local0)
                }
                Case (0x04)
                {
                    Store (F4FM, Local0)
                }
                Default
                {
                    Store (F5FM, Local0)
                }

            }

            Switch (ToInteger (Local0))
            {
                Case (Zero)
                {
                    Return ("TXNW3643")
                }
                Case (One)
                {
                    Return ("PWRC0000")
                }
                Default
                {
                    Return ("TXNW3643")
                }

            }
        }

        Method (FMID, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Store (F0FM, Local0)
                }
                Case (One)
                {
                    Store (F1FM, Local0)
                }
                Case (0x02)
                {
                    Store (F2FM, Local0)
                }
                Case (0x03)
                {
                    Store (F3FM, Local0)
                }
                Case (0x04)
                {
                    Store (F4FM, Local0)
                }
                Default
                {
                    Store (F5FM, Local0)
                }

            }

            Switch (ToInteger (Local0))
            {
                Case (Zero)
                {
                    Return ("LM3643")
                }
                Case (One)
                {
                    Return ("PMICWRC")
                }
                Default
                {
                    Return ("LM3643")
                }

            }
        }

        Method (FMLS, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Return (F0MS)
                }
                Case (One)
                {
                    Return (F1MS)
                }
                Case (0x02)
                {
                    Return (F2MS)
                }
                Case (0x03)
                {
                    Return (F3MS)
                }
                Case (0x04)
                {
                    Return (F4MS)
                }
                Default
                {
                    Return (F5MS)
                }

            }
        }

        Method (AGPN, 2, Serialized)
        {
            ShiftLeft (Arg1, 0x10, Local0)
            Or (Local0, Arg0, Local0)
            Store (GNUM (Local0), Local1)
            Return (Local1)
        }

        Method (CDEP, 2, Serialized)
        {
            If (LEqual (Arg0, Zero))
            {
                If (LEqual (C0TP, One))
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (Zero)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C0
                            })
                        }
                        Case (One)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C1
                            })
                        }
                        Case (0x02)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C2
                            })
                        }
                        Case (0x03)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C3
                            })
                        }
                        Case (0x04)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C4
                            })
                        }
                        Case (0x05)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C5
                            })
                        }
                        Case (0x06)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C6
                            })
                        }
                        Case (0x07)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C7
                            })
                        }
                        Default
                        {
                            Return (Package (0x01)
                            {
                                DSC0
                            })
                        }

                    }
                }

                If (LGreater (C0TP, One))
                {
                    Return (Package (0x01)
                    {
                        CLP0
                    })
                }
            }

            If (LEqual (Arg0, One))
            {
                If (LEqual (C1TP, One))
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (Zero)
                        {
                            Return (Package (0x02)
                            {
                                DSC1, 
                                I2C0
                            })
                        }
                        Case (One)
                        {
                            Return (Package (0x02)
                            {
                                DSC1, 
                                I2C1
                            })
                        }
                        Case (0x02)
                        {
                            Return (Package (0x02)
                            {
                                DSC1, 
                                I2C2
                            })
                        }
                        Case (0x03)
                        {
                            Return (Package (0x02)
                            {
                                DSC1, 
                                I2C3
                            })
                        }
                        Case (0x04)
                        {
                            Return (Package (0x02)
                            {
                                DSC1, 
                                I2C4
                            })
                        }
                        Case (0x05)
                        {
                            Return (Package (0x02)
                            {
                                DSC1, 
                                I2C5
                            })
                        }
                        Case (0x06)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C6
                            })
                        }
                        Case (0x07)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C7
                            })
                        }
                        Default
                        {
                            Return (Package (0x01)
                            {
                                DSC1
                            })
                        }

                    }
                }

                If (LGreater (C1TP, One))
                {
                    Return (Package (0x01)
                    {
                        CLP1
                    })
                }
            }

            If (LEqual (Arg0, 0x02))
            {
                If (LEqual (C2TP, One))
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (Zero)
                        {
                            Return (Package (0x02)
                            {
                                DSC2, 
                                I2C0
                            })
                        }
                        Case (One)
                        {
                            Return (Package (0x02)
                            {
                                DSC2, 
                                I2C1
                            })
                        }
                        Case (0x02)
                        {
                            Return (Package (0x02)
                            {
                                DSC2, 
                                I2C2
                            })
                        }
                        Case (0x03)
                        {
                            Return (Package (0x02)
                            {
                                DSC2, 
                                I2C3
                            })
                        }
                        Case (0x04)
                        {
                            Return (Package (0x02)
                            {
                                DSC2, 
                                I2C4
                            })
                        }
                        Case (0x05)
                        {
                            Return (Package (0x02)
                            {
                                DSC2, 
                                I2C5
                            })
                        }
                        Case (0x06)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C6
                            })
                        }
                        Case (0x07)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C7
                            })
                        }
                        Default
                        {
                            Return (Package (0x01)
                            {
                                DSC2
                            })
                        }

                    }
                }

                If (LGreater (C2TP, One))
                {
                    Return (Package (0x01)
                    {
                        CLP2
                    })
                }
            }

            If (LEqual (Arg0, 0x03))
            {
                If (LEqual (C3TP, One))
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (Zero)
                        {
                            Return (Package (0x02)
                            {
                                DSC3, 
                                I2C0
                            })
                        }
                        Case (One)
                        {
                            Return (Package (0x02)
                            {
                                DSC3, 
                                I2C1
                            })
                        }
                        Case (0x02)
                        {
                            Return (Package (0x02)
                            {
                                DSC3, 
                                I2C2
                            })
                        }
                        Case (0x03)
                        {
                            Return (Package (0x02)
                            {
                                DSC3, 
                                I2C3
                            })
                        }
                        Case (0x04)
                        {
                            Return (Package (0x02)
                            {
                                DSC3, 
                                I2C4
                            })
                        }
                        Case (0x05)
                        {
                            Return (Package (0x02)
                            {
                                DSC3, 
                                I2C5
                            })
                        }
                        Case (0x06)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C6
                            })
                        }
                        Case (0x07)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C7
                            })
                        }
                        Default
                        {
                            Return (Package (0x01)
                            {
                                DSC3
                            })
                        }

                    }
                }

                If (LGreater (C3TP, One))
                {
                    Return (Package (0x01)
                    {
                        CLP3
                    })
                }
            }

            If (LEqual (Arg0, 0x04))
            {
                If (LEqual (C4TP, One))
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (Zero)
                        {
                            Return (Package (0x02)
                            {
                                DSC4, 
                                I2C0
                            })
                        }
                        Case (One)
                        {
                            Return (Package (0x02)
                            {
                                DSC4, 
                                I2C1
                            })
                        }
                        Case (0x02)
                        {
                            Return (Package (0x02)
                            {
                                DSC4, 
                                I2C2
                            })
                        }
                        Case (0x03)
                        {
                            Return (Package (0x02)
                            {
                                DSC3, 
                                I2C3
                            })
                        }
                        Case (0x04)
                        {
                            Return (Package (0x02)
                            {
                                DSC4, 
                                I2C4
                            })
                        }
                        Case (0x05)
                        {
                            Return (Package (0x02)
                            {
                                DSC4, 
                                I2C5
                            })
                        }
                        Case (0x06)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C6
                            })
                        }
                        Case (0x07)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C7
                            })
                        }
                        Default
                        {
                            Return (Package (0x01)
                            {
                                DSC4
                            })
                        }

                    }
                }

                If (LGreater (C4TP, One))
                {
                    Return (Package (0x01)
                    {
                        CLP4
                    })
                }
            }

            If (LEqual (Arg0, 0x05))
            {
                If (LEqual (C5TP, One))
                {
                    Switch (ToInteger (Arg1))
                    {
                        Case (Zero)
                        {
                            Return (Package (0x02)
                            {
                                DSC5, 
                                I2C0
                            })
                        }
                        Case (One)
                        {
                            Return (Package (0x02)
                            {
                                DSC5, 
                                I2C1
                            })
                        }
                        Case (0x02)
                        {
                            Return (Package (0x02)
                            {
                                DSC5, 
                                I2C2
                            })
                        }
                        Case (0x03)
                        {
                            Return (Package (0x02)
                            {
                                DSC5, 
                                I2C3
                            })
                        }
                        Case (0x04)
                        {
                            Return (Package (0x02)
                            {
                                DSC5, 
                                I2C4
                            })
                        }
                        Case (0x05)
                        {
                            Return (Package (0x02)
                            {
                                DSC5, 
                                I2C5
                            })
                        }
                        Case (0x06)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C6
                            })
                        }
                        Case (0x07)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C7
                            })
                        }
                        Default
                        {
                            Return (Package (0x01)
                            {
                                DSC5
                            })
                        }

                    }
                }

                If (LGreater (C5TP, One))
                {
                    Return (Package (0x01)
                    {
                        CLP5
                    })
                }
            }

            Return (Package (0x01)
            {
                PC00
            })
        }

        Method (CDEG, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Return (Zero)
                }
                Case (One)
                {
                    Return (0x2D)
                }
                Case (0x02)
                {
                    Return (0x5A)
                }
                Case (0x03)
                {
                    Return (0x87)
                }
                Case (0x04)
                {
                    Return (0xB4)
                }
                Case (0x05)
                {
                    Return (0xE1)
                }
                Case (0x06)
                {
                    Return (0x010E)
                }
                Case (0x07)
                {
                    Return (0x013B)
                }
                Default
                {
                    Return (Zero)
                }

            }
        }

        Device (DSC0)
        {
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, Zero)  // _UID: Unique ID
            If (LNotEqual (C0GP, Zero))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If (LGreater (C0GP, Zero))
                    {
                        Store (PINR (C0P0, C0G0), Local0)
                    }

                    If (LGreater (C0GP, One))
                    {
                        Store (PINR (C0P1, C0G1), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (C0GP, 0x02))
                    {
                        Store (PINR (C0P2, C0G2), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (C0GP, 0x03))
                    {
                        Store (PINR (C0P3, C0G3), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (C0GP, 0x04))
                    {
                        Store (PINR (C0P4, C0G4), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (C0GP, 0x05))
                    {
                        Store (PINR (C0P5, C0G5), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    Return (Local0)
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL00)
                {
                    If (LEqual (C0TP, One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00,
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                })
                Store (C0VE, Index (PAR, Zero))
                Store (C0TP, Index (PAR, One))
                Store (C0CV, Index (PAR, 0x03))
                Store (C0IC, Index (PAR, 0x04))
                Store (C0SP, Index (PAR, 0x06))
                Store (C0W0, Index (PAR, 0x08))
                Store (C0W1, Index (PAR, 0x09))
                Store (C0W2, Index (PAR, 0x0A))
                Store (C0W3, Index (PAR, 0x0B))
                Store (C0W4, Index (PAR, 0x0C))
                Store (C0W5, Index (PAR, 0x0D))
                Store (C0CS, Index (PAR, 0x0E))
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x3F                                           
                        })
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (C0GP)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (GPPI (C0F0, Add (Multiply (0x20, C0G0), C0P0), C0I0, C0A0))
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Return (GPPI (C0F1, Add (Multiply (0x20, C0G1), C0P1), C0I1, C0A1))
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (GPPI (C0F2, Add (Multiply (0x20, C0G2), C0P2), C0I2, C0A2))
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (GPPI (C0F3, Add (Multiply (0x20, C0G3), C0P3), C0I3, C0A3))
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        Return (GPPI (C0F4, Add (Multiply (0x20, C0G4), C0P4), C0I4, C0A4))
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        Return (GPPI (C0F5, Add (Multiply (0x20, C0G5), C0P5), C0I5, C0A5))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                If (LOr (LEqual (PCHS, PCHP), LEqual (PCHS, PCHN)))
                {
                    If (LEqual (Arg0, ToUUID ("82c0d13a-78c5-4244-9bb1-eb8b539a8d11")))
                    {
                        If (LEqual (Arg2, Zero))
                        {
                            If (LEqual (Arg1, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If (LEqual (Arg2, One))
                        {
                            ^^^ICLK.CLKC (ToInteger (DerefOf (Index (Arg3, Zero))), ToInteger (DerefOf (Index (Arg3, One))))
                            ^^^ICLK.CLKF (ToInteger (DerefOf (Index (Arg3, Zero))), ToInteger (DerefOf (Index (Arg3, 0x02))))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (DSC1)
        {
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, One)  // _UID: Unique ID
            If (LNotEqual (C1GP, Zero))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If (LGreater (C1GP, Zero))
                    {
                        Store (PINR (C1P0, C1G0), Local0)
                    }

                    If (LGreater (C1GP, One))
                    {
                        Store (PINR (C1P1, C1G1), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (C1GP, 0x02))
                    {
                        Store (PINR (C1P2, C1G2), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (C1GP, 0x03))
                    {
                        Store (PINR (C1P3, C1G3), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (C1GP, 0x04))
                    {
                        Store (PINR (C1P4, C1G4), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (C1GP, 0x05))
                    {
                        Store (PINR (C1P5, C1G5), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    Return (Local0)
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL01)
                {
                    If (LEqual (C1TP, One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x0C, 0x00, 0x00,
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                })
                Store (C1VE, Index (PAR, Zero))
                Store (C1TP, Index (PAR, One))
                Store (C1CV, Index (PAR, 0x03))
                Store (C1IC, Index (PAR, 0x04))
                Store (C1SP, Index (PAR, 0x06))
                Store (C1W0, Index (PAR, 0x08))
                Store (C1W1, Index (PAR, 0x09))
                Store (C1W2, Index (PAR, 0x0A))
                Store (C1W3, Index (PAR, 0x0B))
                Store (C1W4, Index (PAR, 0x0C))
                Store (C1W5, Index (PAR, 0x0D))
                Store (C1CS, Index (PAR, 0x0E))
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x3F                                           
                        })
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (C1GP)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (GPPI (C1F0, Add (Multiply (0x20, C1G0), C1P0), C1I0, C1A0))
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Return (GPPI (C1F1, Add (Multiply (0x20, C1G1), C1P1), C1I1, C1A1))
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (GPPI (C1F2, Add (Multiply (0x20, C1G2), C1P2), C1I2, C1A2))
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (GPPI (C1F3, Add (Multiply (0x20, C1G3), C1P3), C1I3, C1A3))
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        Return (GPPI (C1F4, Add (Multiply (0x20, C1G4), C1P4), C1I4, C1A4))
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        Return (GPPI (C1F5, Add (Multiply (0x20, C1G5), C1P5), C1I5, C1A5))
                    }
                }

                If (LOr (LEqual (PCHS, PCHP), LEqual (PCHS, PCHN)))
                {
                    If (LEqual (Arg0, ToUUID ("82c0d13a-78c5-4244-9bb1-eb8b539a8d11")))
                    {
                        If (LEqual (Arg2, Zero))
                        {
                            If (LEqual (Arg1, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If (LEqual (Arg2, One))
                        {
                            ^^^ICLK.CLKC (ToInteger (DerefOf (Index (Arg3, Zero))), ToInteger (DerefOf (Index (Arg3, One))))
                            ^^^ICLK.CLKF (ToInteger (DerefOf (Index (Arg3, Zero))), ToInteger (DerefOf (Index (Arg3, 0x02))))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (DSC2)
        {
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, 0x02)  // _UID: Unique ID
            If (LNotEqual (C2GP, Zero))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If (LGreater (C2GP, Zero))
                    {
                        Store (PINR (C2P0, C2G0), Local0)
                    }

                    If (LGreater (C2GP, One))
                    {
                        Store (PINR (C2P1, C2G1), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (C2GP, 0x02))
                    {
                        Store (PINR (C2P2, C2G2), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (C2GP, 0x03))
                    {
                        Store (PINR (C2P3, C2G3), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (C2GP, 0x04))
                    {
                        Store (PINR (C2P4, C2G4), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (C2GP, 0x05))
                    {
                        Store (PINR (C2P5, C2G5), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    Return (Local0)
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL02)
                {
                    If (LEqual (C2TP, One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x0C, 0x00, 0x00,
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                })
                Store (C2VE, Index (PAR, Zero))
                Store (C2TP, Index (PAR, One))
                Store (C2CV, Index (PAR, 0x03))
                Store (C2IC, Index (PAR, 0x04))
                Store (C2SP, Index (PAR, 0x06))
                Store (C2W0, Index (PAR, 0x08))
                Store (C2W1, Index (PAR, 0x09))
                Store (C2W2, Index (PAR, 0x0A))
                Store (C2W3, Index (PAR, 0x0B))
                Store (C2W4, Index (PAR, 0x0C))
                Store (C2W5, Index (PAR, 0x0D))
                Store (C2CS, Index (PAR, 0x0E))
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x3F                                           
                        })
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (C2GP)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (GPPI (C2F0, Add (Multiply (0x20, C2G0), C2P0), C2I0, C2A0))
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Return (GPPI (C2F1, Add (Multiply (0x20, C2G1), C2P1), C2I1, C2A1))
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (GPPI (C2F2, Add (Multiply (0x20, C2G2), C2P2), C2I2, C2A2))
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (GPPI (C2F3, Add (Multiply (0x20, C2G3), C2P3), C2I3, C2A3))
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        Return (GPPI (C2F4, Add (Multiply (0x20, C2G4), C2P4), C2I4, C2A4))
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        Return (GPPI (C2F5, Add (Multiply (0x20, C2G5), C2P5), C2I5, C2A5))
                    }
                }

                If (LOr (LEqual (PCHS, PCHP), LEqual (PCHS, PCHN)))
                {
                    If (LEqual (Arg0, ToUUID ("82c0d13a-78c5-4244-9bb1-eb8b539a8d11")))
                    {
                        If (LEqual (Arg2, Zero))
                        {
                            If (LEqual (Arg1, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If (LEqual (Arg2, One))
                        {
                            ^^^ICLK.CLKC (ToInteger (DerefOf (Index (Arg3, Zero))), ToInteger (DerefOf (Index (Arg3, One))))
                            ^^^ICLK.CLKF (ToInteger (DerefOf (Index (Arg3, Zero))), ToInteger (DerefOf (Index (Arg3, 0x02))))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (DSC3)
        {
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, 0x03)  // _UID: Unique ID
            If (LNotEqual (C3GP, Zero))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If (LGreater (C3GP, Zero))
                    {
                        Store (PINR (C3P0, C3G0), Local0)
                    }

                    If (LGreater (C3GP, One))
                    {
                        Store (PINR (C3P1, C3G1), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (C3GP, 0x02))
                    {
                        Store (PINR (C3P2, C3G2), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (C3GP, 0x03))
                    {
                        Store (PINR (C3P3, C3G3), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (C3GP, 0x04))
                    {
                        Store (PINR (C3P4, C3G4), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (C3GP, 0x05))
                    {
                        Store (PINR (C3P5, C3G5), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    Return (Local0)
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL03)
                {
                    If (LEqual (C3TP, One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x0C, 0x00, 0x00,
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                })
                Store (C3VE, Index (PAR, Zero))
                Store (C3TP, Index (PAR, One))
                Store (C3CV, Index (PAR, 0x03))
                Store (C3IC, Index (PAR, 0x04))
                Store (C3SP, Index (PAR, 0x06))
                Store (C3W0, Index (PAR, 0x08))
                Store (C3W1, Index (PAR, 0x09))
                Store (C3W2, Index (PAR, 0x0A))
                Store (C3W3, Index (PAR, 0x0B))
                Store (C3W4, Index (PAR, 0x0C))
                Store (C3W5, Index (PAR, 0x0D))
                Store (C3CS, Index (PAR, 0x0E))
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x3F                                           
                        })
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (C3GP)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (GPPI (C3F0, Add (Multiply (0x20, C3G0), C3P0), C3I0, C3A0))
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Return (GPPI (C3F1, Add (Multiply (0x20, C3G1), C3P1), C3I1, C3A1))
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (GPPI (C3F2, Add (Multiply (0x20, C3G2), C3P2), C3I2, C3A2))
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (GPPI (C3F3, Add (Multiply (0x20, C3G3), C3P3), C3I3, C3A3))
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        Return (GPPI (C3F4, Add (Multiply (0x20, C3G4), C3P4), C3I4, C3A4))
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        Return (GPPI (C3F5, Add (Multiply (0x20, C3G5), C3P5), C3I5, C3A5))
                    }
                }

                If (LOr (LEqual (PCHS, PCHP), LEqual (PCHS, PCHN)))
                {
                    If (LEqual (Arg0, ToUUID ("82c0d13a-78c5-4244-9bb1-eb8b539a8d11")))
                    {
                        If (LEqual (Arg2, Zero))
                        {
                            If (LEqual (Arg1, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If (LEqual (Arg2, One))
                        {
                            ^^^ICLK.CLKC (ToInteger (DerefOf (Index (Arg3, Zero))), ToInteger (DerefOf (Index (Arg3, One))))
                            ^^^ICLK.CLKF (ToInteger (DerefOf (Index (Arg3, Zero))), ToInteger (DerefOf (Index (Arg3, 0x02))))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (DSC4)
        {
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, 0x04)  // _UID: Unique ID
            If (LNotEqual (C4GP, Zero))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If (LGreater (C4GP, Zero))
                    {
                        Store (PINR (C4P0, C4G0), Local0)
                    }

                    If (LGreater (C4GP, One))
                    {
                        Store (PINR (C4P1, C4G1), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (C4GP, 0x02))
                    {
                        Store (PINR (C4P2, C4G2), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (C4GP, 0x03))
                    {
                        Store (PINR (C4P3, C4G3), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (C4GP, 0x04))
                    {
                        Store (PINR (C4P4, C4G4), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (C4GP, 0x05))
                    {
                        Store (PINR (C4P5, C4G5), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    Return (Local0)
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL04)
                {
                    If (LEqual (C4TP, One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x0C, 0x00, 0x00,
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                })
                Store (C4VE, Index (PAR, Zero))
                Store (C4TP, Index (PAR, One))
                Store (C4CV, Index (PAR, 0x03))
                Store (C4IC, Index (PAR, 0x04))
                Store (C4SP, Index (PAR, 0x06))
                Store (C4W0, Index (PAR, 0x08))
                Store (C4W1, Index (PAR, 0x09))
                Store (C4W2, Index (PAR, 0x0A))
                Store (C4W3, Index (PAR, 0x0B))
                Store (C4W4, Index (PAR, 0x0C))
                Store (C4W5, Index (PAR, 0x0D))
                Store (C4CS, Index (PAR, 0x0E))
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x3F                                           
                        })
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (C4GP)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (GPPI (C4F0, Add (Multiply (0x20, C4G0), C4P0), C4I0, C4A0))
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Return (GPPI (C4F1, Add (Multiply (0x20, C4G1), C4P1), C4I1, C4A1))
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (GPPI (C4F2, Add (Multiply (0x20, C4G2), C4P2), C4I2, C4A2))
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (GPPI (C4F3, Add (Multiply (0x20, C4G3), C4P3), C4I3, C4A3))
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        Return (GPPI (C4F4, Add (Multiply (0x20, C4G4), C4P4), C4I4, C4A4))
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        Return (GPPI (C4F5, Add (Multiply (0x20, C4G5), C4P5), C4I5, C4A5))
                    }
                }

                If (LOr (LEqual (PCHS, PCHP), LEqual (PCHS, PCHN)))
                {
                    If (LEqual (Arg0, ToUUID ("82c0d13a-78c5-4244-9bb1-eb8b539a8d11")))
                    {
                        If (LEqual (Arg2, Zero))
                        {
                            If (LEqual (Arg1, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If (LEqual (Arg2, One))
                        {
                            ^^^ICLK.CLKC (ToInteger (DerefOf (Index (Arg3, Zero))), ToInteger (DerefOf (Index (Arg3, One))))
                            ^^^ICLK.CLKF (ToInteger (DerefOf (Index (Arg3, Zero))), ToInteger (DerefOf (Index (Arg3, 0x02))))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (DSC5)
        {
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, 0x05)  // _UID: Unique ID
            If (LNotEqual (C5GP, Zero))
            {
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If (LGreater (C5GP, Zero))
                    {
                        Store (PINR (C5P0, C5G0), Local0)
                    }

                    If (LGreater (C5GP, One))
                    {
                        Store (PINR (C5P1, C5G1), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (C5GP, 0x02))
                    {
                        Store (PINR (C5P2, C5G2), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (C5GP, 0x03))
                    {
                        Store (PINR (C5P3, C5G3), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (C5GP, 0x04))
                    {
                        Store (PINR (C5P4, C5G4), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (C5GP, 0x05))
                    {
                        Store (PINR (C5P5, C5G5), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    Return (Local0)
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL05)
                {
                    If (LEqual (C5TP, One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x0C, 0x00, 0x00,
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                })
                Store (C5VE, Index (PAR, Zero))
                Store (C5TP, Index (PAR, One))
                Store (C5CV, Index (PAR, 0x03))
                Store (C5IC, Index (PAR, 0x04))
                Store (C5SP, Index (PAR, 0x06))
                Store (C5W0, Index (PAR, 0x08))
                Store (C5W1, Index (PAR, 0x09))
                Store (C5W2, Index (PAR, 0x0A))
                Store (C5W3, Index (PAR, 0x0B))
                Store (C5W4, Index (PAR, 0x0C))
                Store (C5W5, Index (PAR, 0x0D))
                Store (C5CS, Index (PAR, 0x0E))
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x3F                                           
                        })
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (C5GP)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (GPPI (C5F0, Add (Multiply (0x20, C5G0), C5P0), C5I0, C5A0))
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Return (GPPI (C5F1, Add (Multiply (0x20, C5G1), C5P1), C5I1, C5A1))
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (GPPI (C5F2, Add (Multiply (0x20, C5G2), C5P2), C5I2, C5A2))
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (GPPI (C5F3, Add (Multiply (0x20, C5G3), C5P3), C5I3, C5A3))
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        Return (GPPI (C5F4, Add (Multiply (0x20, C5G4), C5P4), C5I4, C5A4))
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        Return (GPPI (C5F4, Add (Multiply (0x20, C5G5), C5P5), C5I5, C5A5))
                    }
                }

                If (LOr (LEqual (PCHS, PCHP), LEqual (PCHS, PCHN)))
                {
                    If (LEqual (Arg0, ToUUID ("82c0d13a-78c5-4244-9bb1-eb8b539a8d11")))
                    {
                        If (LEqual (Arg2, Zero))
                        {
                            If (LEqual (Arg1, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                           
                                })
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If (LEqual (Arg2, One))
                        {
                            ^^^ICLK.CLKC (ToInteger (DerefOf (Index (Arg3, Zero))), ToInteger (DerefOf (Index (Arg3, One))))
                            ^^^ICLK.CLKF (ToInteger (DerefOf (Index (Arg3, Zero))), ToInteger (DerefOf (Index (Arg3, 0x02))))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (CLP0)
        {
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (CL00)
                {
                    If (LEqual (C0IB, 0x02))
                    {
                        Return (Package (0x01)
                        {
                            I2C2
                        })
                    }

                    If (LEqual (C0IB, 0x03))
                    {
                        Return (Package (0x01)
                        {
                            I2C3
                        })
                    }
                }

                Return (Package (0x01)
                {
                    PC00
                })
            }

            Name (_UID, 0x0A)  // _UID: Unique ID
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (IICB (C0IA, C0IB))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL00)
                {
                    If (LGreater (C0TP, One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00,
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                })
                Store (C0VE, Index (PAR, Zero))
                Store (C0TP, Index (PAR, One))
                Store (C0CV, Index (PAR, 0x03))
                Store (C0IC, Index (PAR, 0x04))
                Store (C0SP, Index (PAR, 0x06))
                Store (C0W0, Index (PAR, 0x08))
                Store (C0W1, Index (PAR, 0x09))
                Store (C0W2, Index (PAR, 0x0A))
                Store (C0W3, Index (PAR, 0x0B))
                Store (C0W4, Index (PAR, 0x0C))
                Store (C0W5, Index (PAR, 0x0D))
                Return (PAR)
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x29, 0x0D, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                    }
                })
                CreateByteField (DerefOf (Index (PLDB, Zero)), 0x08, BPOS)
                Store (C0PL, BPOS)
                Return (PLDB)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (One)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (DSMI (0x0B, C0IA, Zero, C0IB))
                    }
                }

                If (LEqual (Arg0, ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        Store (One, I2CC)
                        Store (DSMI (0x0B, C0IA, Zero, C0IB), DEV0)
                        Return (DSMB)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (CLP1)
        {
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (CL01)
                {
                    If (LEqual (C1IB, 0x02))
                    {
                        Return (Package (0x01)
                        {
                            I2C2
                        })
                    }

                    If (LEqual (C1IB, 0x03))
                    {
                        Return (Package (0x01)
                        {
                            I2C3
                        })
                    }
                }

                Return (Package (0x01)
                {
                    PC00
                })
            }

            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, 0x0B)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (IICB (C1IA, C1IB))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL01)
                {
                    If (LGreater (C1TP, One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x0C, 0x00, 0x00,
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                })
                Store (C1VE, Index (PAR, Zero))
                Store (C1TP, Index (PAR, One))
                Store (C1CV, Index (PAR, 0x03))
                Store (C1IC, Index (PAR, 0x04))
                Store (C1SP, Index (PAR, 0x06))
                Store (C1W0, Index (PAR, 0x08))
                Store (C1W1, Index (PAR, 0x09))
                Store (C1W2, Index (PAR, 0x0A))
                Store (C1W3, Index (PAR, 0x0B))
                Store (C1W4, Index (PAR, 0x0C))
                Store (C1W5, Index (PAR, 0x0D))
                Return (PAR)
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x29, 0x0D, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                    }
                })
                CreateByteField (DerefOf (Index (PLDB, Zero)), 0x08, BPOS)
                Store (C1PL, BPOS)
                Return (PLDB)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (One)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (DSMI (0x0B, C1IA, Zero, C1IB))
                    }
                }

                If (LEqual (Arg0, ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        Store (One, I2CC)
                        Store (DSMI (0x0B, C1IA, Zero, C1IB), DEV0)
                        Return (DSMB)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (CLP2)
        {
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (CL02)
                {
                    If (LEqual (C2IB, 0x02))
                    {
                        Return (Package (0x01)
                        {
                            I2C2
                        })
                    }

                    If (LEqual (C2IB, 0x03))
                    {
                        Return (Package (0x01)
                        {
                            I2C3
                        })
                    }
                }

                Return (Package (0x01)
                {
                    PC00
                })
            }

            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, 0x0C)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (IICB (C2IA, C2IB))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL02)
                {
                    If (LGreater (C2TP, One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x0C, 0x00, 0x00,
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                })
                Store (C2VE, Index (PAR, Zero))
                Store (C2TP, Index (PAR, One))
                Store (C2CV, Index (PAR, 0x03))
                Store (C2IC, Index (PAR, 0x04))
                Store (C2SP, Index (PAR, 0x06))
                Store (C2W0, Index (PAR, 0x08))
                Store (C2W1, Index (PAR, 0x09))
                Store (C2W2, Index (PAR, 0x0A))
                Store (C2W3, Index (PAR, 0x0B))
                Store (C2W4, Index (PAR, 0x0C))
                Store (C2W5, Index (PAR, 0x0D))
                Return (PAR)
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x29, 0x0D, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                    }
                })
                CreateByteField (DerefOf (Index (PLDB, Zero)), 0x08, BPOS)
                Store (C2PL, BPOS)
                Return (PLDB)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (One)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (DSMI (0x0B, C2IA, Zero, C2IB))
                    }
                }

                If (LEqual (Arg0, ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        Store (One, I2CC)
                        Store (DSMI (0x0B, C2IA, Zero, C2IB), DEV0)
                        Return (DSMB)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (CLP3)
        {
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (CL03)
                {
                    If (LEqual (C3IB, 0x02))
                    {
                        Return (Package (0x01)
                        {
                            I2C2
                        })
                    }

                    If (LEqual (C3IB, 0x03))
                    {
                        Return (Package (0x01)
                        {
                            I2C3
                        })
                    }
                }

                Return (Package (0x01)
                {
                    PC00
                })
            }

            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, 0x0D)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (IICB (C3IA, C3IB))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL03)
                {
                    If (LGreater (C3TP, One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x0C, 0x00, 0x00,
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                })
                Store (C3VE, Index (PAR, Zero))
                Store (C3TP, Index (PAR, One))
                Store (C3CV, Index (PAR, 0x03))
                Store (C3IC, Index (PAR, 0x04))
                Store (C3SP, Index (PAR, 0x06))
                Store (C3W0, Index (PAR, 0x08))
                Store (C3W1, Index (PAR, 0x09))
                Store (C3W2, Index (PAR, 0x0A))
                Store (C3W3, Index (PAR, 0x0B))
                Store (C3W4, Index (PAR, 0x0C))
                Store (C3W5, Index (PAR, 0x0D))
                Return (PAR)
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x29, 0x0D, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                    }
                })
                CreateByteField (DerefOf (Index (PLDB, Zero)), 0x08, BPOS)
                Store (C3PL, BPOS)
                Return (PLDB)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (One)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (DSMI (0x0B, C3IA, Zero, C3IB))
                    }
                }

                If (LEqual (Arg0, ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        Store (One, I2CC)
                        Store (DSMI (0x0B, C3IA, Zero, C3IB), DEV0)
                        Return (DSMB)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (CLP4)
        {
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (CL04)
                {
                    If (LEqual (C4IB, 0x02))
                    {
                        Return (Package (0x01)
                        {
                            I2C2
                        })
                    }

                    If (LEqual (C4IB, 0x03))
                    {
                        Return (Package (0x01)
                        {
                            I2C3
                        })
                    }
                }

                Return (Package (0x01)
                {
                    PC00
                })
            }

            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, 0x0E)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (IICB (C4IA, C4IB))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL04)
                {
                    If (LGreater (C4TP, One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x04, 0x00, 0x00, 0x0C, 0x00, 0x00,
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                })
                Store (C4VE, Index (PAR, Zero))
                Store (C4TP, Index (PAR, One))
                Store (C4CV, Index (PAR, 0x03))
                Store (C4IC, Index (PAR, 0x04))
                Store (C4SP, Index (PAR, 0x06))
                Store (C4W0, Index (PAR, 0x08))
                Store (C4W1, Index (PAR, 0x09))
                Store (C4W2, Index (PAR, 0x0A))
                Store (C4W3, Index (PAR, 0x0B))
                Store (C4W4, Index (PAR, 0x0C))
                Store (C4W5, Index (PAR, 0x0D))
                Return (PAR)
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x29, 0x0D, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                    }
                })
                CreateByteField (DerefOf (Index (PLDB, Zero)), 0x08, BPOS)
                Store (C4PL, BPOS)
                Return (PLDB)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (One)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (DSMI (0x0B, C4IA, Zero, C4IB))
                    }
                }

                If (LEqual (Arg0, ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        Store (One, I2CC)
                        Store (DSMI (0x0B, C4IA, Zero, C4IB), DEV0)
                        Return (DSMB)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (CLP5)
        {
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (CL05)
                {
                    If (LEqual (C5IB, 0x02))
                    {
                        Return (Package (0x01)
                        {
                            I2C2
                        })
                    }

                    If (LEqual (C5IB, 0x03))
                    {
                        Return (Package (0x01)
                        {
                            I2C3
                        })
                    }
                }

                Return (Package (0x01)
                {
                    PC00
                })
            }

            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, 0x0F)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (IICB (C5IA, C5IB))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL05)
                {
                    If (LGreater (C5TP, One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x05, 0x00, 0x00, 0x0C, 0x00, 0x00,
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                })
                Store (C5VE, Index (PAR, Zero))
                Store (C5TP, Index (PAR, One))
                Store (C5CV, Index (PAR, 0x03))
                Store (C5IC, Index (PAR, 0x04))
                Store (C5SP, Index (PAR, 0x06))
                Store (C5W0, Index (PAR, 0x08))
                Store (C5W1, Index (PAR, 0x09))
                Store (C5W2, Index (PAR, 0x0A))
                Store (C5W3, Index (PAR, 0x0B))
                Store (C5W4, Index (PAR, 0x0C))
                Store (C5W5, Index (PAR, 0x0D))
                Return (PAR)
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x29, 0x0D, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                    }
                })
                CreateByteField (DerefOf (Index (PLDB, Zero)), 0x08, BPOS)
                Store (C5PL, BPOS)
                Return (PLDB)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (One)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (DSMI (0x0B, C5IA, Zero, C5IB))
                    }
                }

                If (LEqual (Arg0, ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        Store (One, I2CC)
                        Store (DSMI (0x0B, C5IA, Zero, C5IB), DEV0)
                        Return (DSMB)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (LNK0)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L0EN)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L0EN)
                {
                    Return (CDEP (L0CL, L0BS))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PC00
                    })
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (HCID (Zero))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                Store (L0M0, Index (BUF, Zero))
                Store (L0M1, Index (BUF, One))
                Store (L0M2, Index (BUF, 0x02))
                Store (L0M3, Index (BUF, 0x03))
                Store (L0M4, Index (BUF, 0x04))
                Store (L0M5, Index (BUF, 0x05))
                Store (L0M6, Index (BUF, 0x06))
                Store (L0M7, Index (BUF, 0x07))
                Store (L0M8, Index (BUF, 0x08))
                Store (L0M9, Index (BUF, 0x09))
                Store (L0MA, Index (BUF, 0x0A))
                Store (L0MB, Index (BUF, 0x0B))
                Store (L0MC, Index (BUF, 0x0C))
                Store (L0MD, Index (BUF, 0x0D))
                Store (L0ME, Index (BUF, 0x0E))
                Store (L0MF, Index (BUF, 0x0F))
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x69, 0x0E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                    }
                })
                CreateByteField (DerefOf (Index (PLDB, Zero)), 0x08, BPOS)
                CreateField (DerefOf (Index (PLDB, Zero)), 0x73, 0x04, RPOS)
                Store (L0PL, BPOS)
                Store (L0DG, RPOS)
                Return (PLDB)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If (LEqual (L0DI, Zero))
                {
                    Return (Buffer (Zero){})
                }
                Else
                {
                    If (LGreater (L0DI, Zero))
                    {
                        Store (IICB (L0A0, L0BS), Local0)
                    }

                    If (LGreater (L0DI, One))
                    {
                        Store (IICB (L0A1, L0BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L0DI, 0x02))
                    {
                        Store (IICB (L0A2, L0BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L0DI, 0x03))
                    {
                        Store (IICB (L0A3, L0BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L0DI, 0x04))
                    {
                        Store (IICB (L0A4, L0BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L0DI, 0x05))
                    {
                        Store (IICB (L0A5, L0BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L0DI, 0x06))
                    {
                        Store (IICB (L0A6, L0BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L0DI, 0x07))
                    {
                        Store (IICB (L0A7, L0BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L0DI, 0x08))
                    {
                        Store (IICB (L0A8, L0BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L0DI, 0x09))
                    {
                        Store (IICB (L0A9, L0BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L0DI, 0x0A))
                    {
                        Store (IICB (L0AA, L0BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L0DI, 0x0B))
                    {
                        Store (IICB (L0AB, L0BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    Return (Local0)
                }
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x00, 0x69, 0x56, 0x39, 0x8A, 0xF7, 0x11,
                    /* 0008 */  0xA9, 0x4E, 0x9C, 0x7D, 0x20, 0xEE, 0x0A, 0xB5,
                    /* 0010 */  0xCA, 0x40, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0050 */  0x0F, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                         
                })
                Store (L0DV, Index (PAR, Zero))
                Store (L0CV, Index (PAR, One))
                Store (L0LC, Index (PAR, 0x18))
                Store (L0LU, Index (PAR, 0x1C))
                Store (L0NL, Index (PAR, 0x1D))
                Store (L0EE, Index (PAR, 0x4E))
                Store (L0VC, Index (PAR, 0x4F))
                Store (L0FS, Index (PAR, 0x52))
                Store (L0LE, Index (PAR, 0x53))
                Store (CDEG (L0DG), Index (PAR, 0x54))
                CreateDWordField (PAR, 0x56, DAT)
                Store (L0CK, DAT)
                Store (L0CL, Index (PAR, 0x5A))
                Store (L0PP, Index (PAR, 0x5F))
                Store (L0VR, Index (PAR, 0x60))
                Store (L0FI, Index (PAR, 0x63))
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (BUF, Buffer (0x10){})
                        Store (L0M0, Index (BUF, Zero))
                        Store (L0M1, Index (BUF, One))
                        Store (L0M2, Index (BUF, 0x02))
                        Store (L0M3, Index (BUF, 0x03))
                        Store (L0M4, Index (BUF, 0x04))
                        Store (L0M5, Index (BUF, 0x05))
                        Store (L0M6, Index (BUF, 0x06))
                        Store (L0M7, Index (BUF, 0x07))
                        Store (L0M8, Index (BUF, 0x08))
                        Store (L0M9, Index (BUF, 0x09))
                        Store (L0MA, Index (BUF, 0x0A))
                        Store (L0MB, Index (BUF, 0x0B))
                        Store (L0MC, Index (BUF, 0x0C))
                        Store (L0MD, Index (BUF, 0x0D))
                        Store (L0ME, Index (BUF, 0x0E))
                        Store (L0MF, Index (BUF, 0x0F))
                        Return (ToString (BUF, Ones))
                    }
                }

                If (LEqual (Arg0, ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        CreateDWordField (DSMB, 0x08, DEV1)
                        CreateDWordField (DSMB, 0x0C, DEV2)
                        CreateDWordField (DSMB, 0x10, DEV3)
                        CreateDWordField (DSMB, 0x14, DEV4)
                        CreateDWordField (DSMB, 0x18, DEV5)
                        CreateDWordField (DSMB, 0x1C, DEV6)
                        CreateDWordField (DSMB, 0x20, DEV7)
                        CreateDWordField (DSMB, 0x24, DEV8)
                        CreateDWordField (DSMB, 0x28, DEV9)
                        CreateDWordField (DSMB, 0x2C, DEVA)
                        CreateDWordField (DSMB, 0x30, DEVB)
                        Store (L0DI, I2CC)
                        Store (DSMI (L0D0, L0A0, Zero, L0BS), DEV0)
                        Store (DSMI (L0D1, L0A1, Zero, L0BS), DEV1)
                        Store (DSMI (L0D2, L0A2, Zero, L0BS), DEV2)
                        Store (DSMI (L0D3, L0A3, Zero, L0BS), DEV3)
                        Store (DSMI (L0D4, L0A4, Zero, L0BS), DEV4)
                        Store (DSMI (L0D5, L0A5, Zero, L0BS), DEV5)
                        Store (DSMI (L0D6, L0A6, Zero, L0BS), DEV6)
                        Store (DSMI (L0D7, L0A7, Zero, L0BS), DEV7)
                        Store (DSMI (L0D8, L0A8, Zero, L0BS), DEV8)
                        Store (DSMI (L0D9, L0A9, Zero, L0BS), DEV9)
                        Store (DSMI (L0DA, L0AA, Zero, L0BS), DEVA)
                        Store (DSMI (L0DB, L0AB, Zero, L0BS), DEVB)
                        Return (DSMB)
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                If (LEqual (Arg0, ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x1F                                     
                        })
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (L0DI)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        If (LGreater (L0DI, Zero))
                        {
                            Return (DSMI (L0D0, L0A0, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LGreater (L0DI, One))
                        {
                            Return (DSMI (L0D1, L0A1, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        If (LGreater (L0DI, 0x02))
                        {
                            Return (DSMI (L0D2, L0A2, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        If (LGreater (L0DI, 0x03))
                        {
                            Return (DSMI (L0D3, L0A3, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        If (LGreater (L0DI, 0x04))
                        {
                            Return (DSMI (L0D4, L0A4, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        If (LGreater (L0DI, 0x05))
                        {
                            Return (DSMI (L0D5, L0A5, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        If (LGreater (L0DI, 0x06))
                        {
                            Return (DSMI (L0D6, L0A6, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        If (LGreater (L0DI, 0x07))
                        {
                            Return (DSMI (L0D7, L0A7, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x09))
                    {
                        If (LGreater (L0DI, 0x08))
                        {
                            Return (DSMI (L0D8, L0A8, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0A))
                    {
                        If (LGreater (L0DI, 0x09))
                        {
                            Return (DSMI (L0D9, L0A9, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0B))
                    {
                        If (LGreater (L0DI, 0x0A))
                        {
                            Return (DSMI (L0DA, L0AA, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0C))
                    {
                        If (LGreater (L0DI, 0x0B))
                        {
                            Return (DSMI (L0DB, L0AB, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (LNK1)
        {
            Name (PNIO, Package (0x01)
            {
                "\\_SB.PC00.SPI1.SPFD.CVFD"
            })
            Name (PUSB, Package (0x02)
            {
                "\\_SB.PC00.SPI1.SPFD.CVFD", 
                "\\_SB.PC00.XHCI.RHUB.HS07.VIC0"
            })
            Name (MUSB, Package (0x02)
            {
                "\\_SB.PC00.SPI1.SPFD.CVFD", 
                "\\_SB.PC00.XHCI.RHUB.HS06.VIC0"
            })
            Name (AUSB, Package (0x02)
            {
                "\\_SB.PC00.SPI1.SPFD.CVFD", 
                "\\_SB.PC00.XHCI.RHUB.HS08.VIC0"
            })
            Name (MASB, Package (0x02)
            {
                "\\_SB.PC00.SPI1.SPFD.CVFD", 
                "\\_SB.PC00.XHCI.RHUB.HS03.VIC0"
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L1EN)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L1EN)
                {
                    If (LEqual (CVFS, 0x02))
                    {
                        If (LEqual (CUPN, 0x06))
                        {
                            Return (MUSB)
                        }
                        ElseIf (LEqual (CUPN, 0x07))
                        {
                            Return (PUSB)
                        }
                        ElseIf (LEqual (CUPN, 0x08))
                        {
                            Return (AUSB)
                        }
                        ElseIf (LEqual (CUPN, 0x03))
                        {
                            Return (MASB)
                        }

                        Return (Package (0x00){})
                    }

                    If (LEqual (CVFS, One))
                    {
                        Return (PNIO)
                    }
                    Else
                    {
                        Return (CDEP (L1CL, L1BS))
                    }
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PC00
                    })
                }
            }

            Name (_UID, One)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (HCID (One))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                Store (L1M0, Index (BUF, Zero))
                Store (L1M1, Index (BUF, One))
                Store (L1M2, Index (BUF, 0x02))
                Store (L1M3, Index (BUF, 0x03))
                Store (L1M4, Index (BUF, 0x04))
                Store (L1M5, Index (BUF, 0x05))
                Store (L1M6, Index (BUF, 0x06))
                Store (L1M7, Index (BUF, 0x07))
                Store (L1M8, Index (BUF, 0x08))
                Store (L1M9, Index (BUF, 0x09))
                Store (L1MA, Index (BUF, 0x0A))
                Store (L1MB, Index (BUF, 0x0B))
                Store (L1MC, Index (BUF, 0x0C))
                Store (L1MD, Index (BUF, 0x0D))
                Store (L1ME, Index (BUF, 0x0E))
                Store (L1MF, Index (BUF, 0x0F))
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x69, 0x0E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                    }
                })
                CreateByteField (DerefOf (Index (PLDB, Zero)), 0x08, BPOS)
                CreateField (DerefOf (Index (PLDB, Zero)), 0x73, 0x04, RPOS)
                Store (L1PL, BPOS)
                Store (L1DG, RPOS)
                Return (PLDB)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If (LEqual (CVFS, 0x02))
                {
                    Return (VIIC (L1A0, Zero))
                }

                If (LEqual (L1DI, Zero))
                {
                    Return (Buffer (Zero){})
                }
                Else
                {
                    If (LGreater (L1DI, Zero))
                    {
                        Store (IICB (L1A0, L1BS), Local0)
                    }

                    If (LGreater (L1DI, One))
                    {
                        Store (IICB (L1A1, L1BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L1DI, 0x02))
                    {
                        Store (IICB (L1A2, L1BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L1DI, 0x03))
                    {
                        Store (IICB (L1A3, L1BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L1DI, 0x04))
                    {
                        Store (IICB (L1A4, L1BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L1DI, 0x05))
                    {
                        Store (IICB (L1A5, L1BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L1DI, 0x06))
                    {
                        Store (IICB (L1A6, L1BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L1DI, 0x07))
                    {
                        Store (IICB (L1A7, L1BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L1DI, 0x08))
                    {
                        Store (IICB (L1A8, L1BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L1DI, 0x09))
                    {
                        Store (IICB (L1A9, L1BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L1DI, 0x0A))
                    {
                        Store (IICB (L1AA, L1BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L1DI, 0x0B))
                    {
                        Store (IICB (L1AB, L1BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    Return (Local0)
                }
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x00, 0x69, 0x56, 0x39, 0x8A, 0xF7, 0x11,
                    /* 0008 */  0xA9, 0x4E, 0x9C, 0x7D, 0x20, 0xEE, 0x0A, 0xB5,
                    /* 0010 */  0xCA, 0x40, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0050 */  0x0F, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0060 */  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                         
                })
                Store (L1DV, Index (PAR, Zero))
                Store (L1CV, Index (PAR, One))
                Store (L1LC, Index (PAR, 0x18))
                Store (L1LU, Index (PAR, 0x1C))
                Store (L1NL, Index (PAR, 0x1D))
                Store (L1EE, Index (PAR, 0x4E))
                Store (L1VC, Index (PAR, 0x4F))
                Store (L1FS, Index (PAR, 0x52))
                Store (L1LE, Index (PAR, 0x53))
                Store (CDEG (L1DG), Index (PAR, 0x54))
                CreateDWordField (PAR, 0x56, DAT)
                Store (L1CK, DAT)
                Store (L1CL, Index (PAR, 0x5A))
                Store (L1PP, Index (PAR, 0x5F))
                Store (L1VR, Index (PAR, 0x60))
                Store (L1FI, Index (PAR, 0x63))
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (BUF, Buffer (0x10){})
                        Store (L1M0, Index (BUF, Zero))
                        Store (L1M1, Index (BUF, One))
                        Store (L1M2, Index (BUF, 0x02))
                        Store (L1M3, Index (BUF, 0x03))
                        Store (L1M4, Index (BUF, 0x04))
                        Store (L1M5, Index (BUF, 0x05))
                        Store (L1M6, Index (BUF, 0x06))
                        Store (L1M7, Index (BUF, 0x07))
                        Store (L1M8, Index (BUF, 0x08))
                        Store (L1M9, Index (BUF, 0x09))
                        Store (L1MA, Index (BUF, 0x0A))
                        Store (L1MB, Index (BUF, 0x0B))
                        Store (L1MC, Index (BUF, 0x0C))
                        Store (L1MD, Index (BUF, 0x0D))
                        Store (L1ME, Index (BUF, 0x0E))
                        Store (L1MF, Index (BUF, 0x0F))
                        Return (ToString (BUF, Ones))
                    }
                }

                If (LEqual (Arg0, ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        CreateDWordField (DSMB, 0x08, DEV1)
                        CreateDWordField (DSMB, 0x0C, DEV2)
                        CreateDWordField (DSMB, 0x10, DEV3)
                        CreateDWordField (DSMB, 0x14, DEV4)
                        CreateDWordField (DSMB, 0x18, DEV5)
                        CreateDWordField (DSMB, 0x1C, DEV6)
                        CreateDWordField (DSMB, 0x20, DEV7)
                        CreateDWordField (DSMB, 0x24, DEV8)
                        CreateDWordField (DSMB, 0x28, DEV9)
                        CreateDWordField (DSMB, 0x2C, DEVA)
                        CreateDWordField (DSMB, 0x30, DEVB)
                        Store (L1DI, I2CC)
                        Store (DSMI (L1D0, L1A0, Zero, L1BS), DEV0)
                        Store (DSMI (L1D1, L1A1, Zero, L1BS), DEV1)
                        Store (DSMI (L1D2, L1A2, Zero, L1BS), DEV2)
                        Store (DSMI (L1D3, L1A3, Zero, L1BS), DEV3)
                        Store (DSMI (L1D4, L1A4, Zero, L1BS), DEV4)
                        Store (DSMI (L1D5, L1A5, Zero, L1BS), DEV5)
                        Store (DSMI (L1D6, L1A6, Zero, L1BS), DEV6)
                        Store (DSMI (L1D7, L1A7, Zero, L1BS), DEV7)
                        Store (DSMI (L1D8, L1A8, Zero, L1BS), DEV8)
                        Store (DSMI (L1D9, L1A9, Zero, L1BS), DEV9)
                        Store (DSMI (L1DA, L1AA, Zero, L1BS), DEVA)
                        Store (DSMI (L1DB, L1AB, Zero, L1BS), DEVB)
                        Return (DSMB)
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                If (LEqual (Arg0, ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x1F                                     
                        })
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (L1DI)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        If (LGreater (L1DI, Zero))
                        {
                            Return (DSMI (L1D0, L1A0, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LGreater (L1DI, One))
                        {
                            Return (DSMI (L1D1, L1A1, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        If (LGreater (L1DI, 0x02))
                        {
                            Return (DSMI (L1D2, L1A2, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        If (LGreater (L1DI, 0x03))
                        {
                            Return (DSMI (L1D3, L1A3, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        If (LGreater (L1DI, 0x04))
                        {
                            Return (DSMI (L1D4, L1A4, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        If (LGreater (L1DI, 0x05))
                        {
                            Return (DSMI (L1D5, L1A5, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        If (LGreater (L1DI, 0x06))
                        {
                            Return (DSMI (L1D6, L1A6, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        If (LGreater (L1DI, 0x07))
                        {
                            Return (DSMI (L1D7, L1A7, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x09))
                    {
                        If (LGreater (L1DI, 0x08))
                        {
                            Return (DSMI (L1D8, L1A8, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0A))
                    {
                        If (LGreater (L1DI, 0x09))
                        {
                            Return (DSMI (L1D9, L1A9, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0B))
                    {
                        If (LGreater (L1DI, 0x0A))
                        {
                            Return (DSMI (L1DA, L1AA, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0C))
                    {
                        If (LGreater (L1DI, 0x0B))
                        {
                            Return (DSMI (L1DB, L1AB, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                If (LEqual (Arg0, ToUUID ("02f55f0c-2e63-4f05-84f3-bf1980f9af79")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                           
                        })
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (CVFS)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (LNK2)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L2EN)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L2EN)
                {
                    Return (CDEP (L2CL, L2BS))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PC00
                    })
                }
            }

            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (HCID (0x02))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                Store (L2M0, Index (BUF, Zero))
                Store (L2M1, Index (BUF, One))
                Store (L2M2, Index (BUF, 0x02))
                Store (L2M3, Index (BUF, 0x03))
                Store (L2M4, Index (BUF, 0x04))
                Store (L2M5, Index (BUF, 0x05))
                Store (L2M6, Index (BUF, 0x06))
                Store (L2M7, Index (BUF, 0x07))
                Store (L2M8, Index (BUF, 0x08))
                Store (L2M9, Index (BUF, 0x09))
                Store (L2MA, Index (BUF, 0x0A))
                Store (L2MB, Index (BUF, 0x0B))
                Store (L2MC, Index (BUF, 0x0C))
                Store (L2MD, Index (BUF, 0x0D))
                Store (L2ME, Index (BUF, 0x0E))
                Store (L2MF, Index (BUF, 0x0F))
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x69, 0x0E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                    }
                })
                CreateByteField (DerefOf (Index (PLDB, Zero)), 0x08, BPOS)
                CreateField (DerefOf (Index (PLDB, Zero)), 0x73, 0x04, RPOS)
                Store (L2PL, BPOS)
                Store (L2DG, RPOS)
                Return (PLDB)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If (LEqual (L2DI, Zero))
                {
                    Return (Buffer (Zero){})
                }
                Else
                {
                    If (LGreater (L2DI, Zero))
                    {
                        Store (IICB (L2A0, L2BS), Local0)
                    }

                    If (LGreater (L2DI, One))
                    {
                        Store (IICB (L2A1, L2BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L2DI, 0x02))
                    {
                        Store (IICB (L2A2, L2BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L2DI, 0x03))
                    {
                        Store (IICB (L2A3, L2BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L2DI, 0x04))
                    {
                        Store (IICB (L2A4, L2BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L2DI, 0x05))
                    {
                        Store (IICB (L2A5, L2BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L2DI, 0x06))
                    {
                        Store (IICB (L2A6, L2BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L2DI, 0x07))
                    {
                        Store (IICB (L2A7, L2BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L2DI, 0x08))
                    {
                        Store (IICB (L2A8, L2BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L2DI, 0x09))
                    {
                        Store (IICB (L2A9, L2BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L2DI, 0x0A))
                    {
                        Store (IICB (L2AA, L2BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L2DI, 0x0B))
                    {
                        Store (IICB (L2AB, L2BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    Return (Local0)
                }
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x00, 0x69, 0x56, 0x39, 0x8A, 0xF7, 0x11,
                    /* 0008 */  0xA9, 0x4E, 0x9C, 0x7D, 0x20, 0xEE, 0x0A, 0xB5,
                    /* 0010 */  0xCA, 0x40, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0050 */  0x0F, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0060 */  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                         
                })
                Store (L2DV, Index (PAR, Zero))
                Store (L2CV, Index (PAR, One))
                Store (L2LC, Index (PAR, 0x18))
                Store (L2LU, Index (PAR, 0x1C))
                Store (L2NL, Index (PAR, 0x1D))
                Store (L2EE, Index (PAR, 0x4E))
                Store (L2VC, Index (PAR, 0x4F))
                Store (L2FS, Index (PAR, 0x52))
                Store (L2LE, Index (PAR, 0x53))
                Store (CDEG (L2DG), Index (PAR, 0x54))
                CreateDWordField (PAR, 0x56, DAT)
                Store (L2CK, DAT)
                Store (L2CL, Index (PAR, 0x5A))
                Store (L2PP, Index (PAR, 0x5F))
                Store (L2VR, Index (PAR, 0x60))
                Store (L2FI, Index (PAR, 0x63))
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (BUF, Buffer (0x10){})
                        Store (L2M0, Index (BUF, Zero))
                        Store (L2M1, Index (BUF, One))
                        Store (L2M2, Index (BUF, 0x02))
                        Store (L2M3, Index (BUF, 0x03))
                        Store (L2M4, Index (BUF, 0x04))
                        Store (L2M5, Index (BUF, 0x05))
                        Store (L2M6, Index (BUF, 0x06))
                        Store (L2M7, Index (BUF, 0x07))
                        Store (L2M8, Index (BUF, 0x08))
                        Store (L2M9, Index (BUF, 0x09))
                        Store (L2MA, Index (BUF, 0x0A))
                        Store (L2MB, Index (BUF, 0x0B))
                        Store (L2MC, Index (BUF, 0x0C))
                        Store (L2MD, Index (BUF, 0x0D))
                        Store (L2ME, Index (BUF, 0x0E))
                        Store (L2MF, Index (BUF, 0x0F))
                        Return (ToString (BUF, Ones))
                    }
                }

                If (LEqual (Arg0, ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        CreateDWordField (DSMB, 0x08, DEV1)
                        CreateDWordField (DSMB, 0x0C, DEV2)
                        CreateDWordField (DSMB, 0x10, DEV3)
                        CreateDWordField (DSMB, 0x14, DEV4)
                        CreateDWordField (DSMB, 0x18, DEV5)
                        CreateDWordField (DSMB, 0x1C, DEV6)
                        CreateDWordField (DSMB, 0x20, DEV7)
                        CreateDWordField (DSMB, 0x24, DEV8)
                        CreateDWordField (DSMB, 0x28, DEV9)
                        CreateDWordField (DSMB, 0x2C, DEVA)
                        CreateDWordField (DSMB, 0x30, DEVB)
                        Store (L2DI, I2CC)
                        Store (DSMI (L2D0, L2A0, Zero, L2BS), DEV0)
                        Store (DSMI (L2D1, L2A1, Zero, L2BS), DEV1)
                        Store (DSMI (L2D2, L2A2, Zero, L2BS), DEV2)
                        Store (DSMI (L2D3, L2A3, Zero, L2BS), DEV3)
                        Store (DSMI (L2D4, L2A4, Zero, L2BS), DEV4)
                        Store (DSMI (L2D5, L2A5, Zero, L2BS), DEV5)
                        Store (DSMI (L2D6, L2A6, Zero, L2BS), DEV6)
                        Store (DSMI (L2D7, L2A7, Zero, L2BS), DEV7)
                        Store (DSMI (L2D8, L2A8, Zero, L2BS), DEV8)
                        Store (DSMI (L2D9, L2A9, Zero, L2BS), DEV9)
                        Store (DSMI (L2DA, L2AA, Zero, L2BS), DEVA)
                        Store (DSMI (L2DB, L2AB, Zero, L2BS), DEVB)
                        Return (DSMB)
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                If (LEqual (Arg0, ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x1F                                     
                        })
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (L2DI)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        If (LGreater (L2DI, Zero))
                        {
                            Return (DSMI (L2D0, L2A0, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LGreater (L2DI, One))
                        {
                            Return (DSMI (L2D1, L2A1, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        If (LGreater (L2DI, 0x02))
                        {
                            Return (DSMI (L2D2, L2A2, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        If (LGreater (L2DI, 0x03))
                        {
                            Return (DSMI (L2D3, L2A3, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        If (LGreater (L2DI, 0x04))
                        {
                            Return (DSMI (L2D4, L2A4, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        If (LGreater (L2DI, 0x05))
                        {
                            Return (DSMI (L2D5, L2A5, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        If (LGreater (L2DI, 0x06))
                        {
                            Return (DSMI (L2D6, L2A6, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        If (LGreater (L2DI, 0x07))
                        {
                            Return (DSMI (L2D7, L2A7, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x09))
                    {
                        If (LGreater (L2DI, 0x08))
                        {
                            Return (DSMI (L2D8, L2A8, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0A))
                    {
                        If (LGreater (L2DI, 0x09))
                        {
                            Return (DSMI (L2D9, L2A9, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0B))
                    {
                        If (LGreater (L2DI, 0x0A))
                        {
                            Return (DSMI (L2DA, L2AA, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0C))
                    {
                        If (LGreater (L2DI, 0x0B))
                        {
                            Return (DSMI (L2DB, L2AB, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (LNK3)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L3EN)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L3EN)
                {
                    Return (CDEP (L3CL, L3BS))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PC00
                    })
                }
            }

            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (HCID (0x03))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                Store (L3M0, Index (BUF, Zero))
                Store (L3M1, Index (BUF, One))
                Store (L3M2, Index (BUF, 0x02))
                Store (L3M3, Index (BUF, 0x03))
                Store (L3M4, Index (BUF, 0x04))
                Store (L3M5, Index (BUF, 0x05))
                Store (L3M6, Index (BUF, 0x06))
                Store (L3M7, Index (BUF, 0x07))
                Store (L3M8, Index (BUF, 0x08))
                Store (L3M9, Index (BUF, 0x09))
                Store (L3MA, Index (BUF, 0x0A))
                Store (L3MB, Index (BUF, 0x0B))
                Store (L3MC, Index (BUF, 0x0C))
                Store (L3MD, Index (BUF, 0x0D))
                Store (L3ME, Index (BUF, 0x0E))
                Store (L3MF, Index (BUF, 0x0F))
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x69, 0x0E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                    }
                })
                CreateByteField (DerefOf (Index (PLDB, Zero)), 0x08, BPOS)
                CreateField (DerefOf (Index (PLDB, Zero)), 0x73, 0x04, RPOS)
                Store (L3PL, BPOS)
                Store (L3DG, RPOS)
                Return (PLDB)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If (LEqual (L3DI, Zero))
                {
                    Return (Buffer (Zero){})
                }
                Else
                {
                    If (LGreater (L3DI, Zero))
                    {
                        Store (IICB (L3A0, L3BS), Local0)
                    }

                    If (LGreater (L3DI, One))
                    {
                        Store (IICB (L3A1, L3BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L3DI, 0x02))
                    {
                        Store (IICB (L3A2, L3BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L3DI, 0x03))
                    {
                        Store (IICB (L3A3, L3BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L3DI, 0x04))
                    {
                        Store (IICB (L3A4, L3BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L3DI, 0x05))
                    {
                        Store (IICB (L3A5, L3BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L3DI, 0x06))
                    {
                        Store (IICB (L3A6, L3BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L3DI, 0x07))
                    {
                        Store (IICB (L3A7, L3BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L3DI, 0x08))
                    {
                        Store (IICB (L3A8, L3BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L3DI, 0x09))
                    {
                        Store (IICB (L3A9, L3BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L3DI, 0x0A))
                    {
                        Store (IICB (L3AA, L3BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L3DI, 0x0B))
                    {
                        Store (IICB (L3AB, L3BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    Return (Local0)
                }
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x00, 0x69, 0x56, 0x39, 0x8A, 0xF7, 0x11,
                    /* 0008 */  0xA9, 0x4E, 0x9C, 0x7D, 0x20, 0xEE, 0x0A, 0xB5,
                    /* 0010 */  0xCA, 0x40, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0050 */  0x0F, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0060 */  0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                         
                })
                Store (L3DV, Index (PAR, Zero))
                Store (L3CV, Index (PAR, One))
                Store (L3LC, Index (PAR, 0x18))
                Store (L3LU, Index (PAR, 0x1C))
                Store (L3NL, Index (PAR, 0x1D))
                Store (L3EE, Index (PAR, 0x4E))
                Store (L3VC, Index (PAR, 0x4F))
                Store (L3FS, Index (PAR, 0x52))
                Store (L3LE, Index (PAR, 0x53))
                Store (CDEG (L3DG), Index (PAR, 0x54))
                CreateDWordField (PAR, 0x56, DAT)
                Store (L3CK, DAT)
                Store (L3CL, Index (PAR, 0x5A))
                Store (L3PP, Index (PAR, 0x5F))
                Store (L3VR, Index (PAR, 0x60))
                Store (L3FI, Index (PAR, 0x63))
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (BUF, Buffer (0x10){})
                        Store (L3M0, Index (BUF, Zero))
                        Store (L3M1, Index (BUF, One))
                        Store (L3M2, Index (BUF, 0x02))
                        Store (L3M3, Index (BUF, 0x03))
                        Store (L3M4, Index (BUF, 0x04))
                        Store (L3M5, Index (BUF, 0x05))
                        Store (L3M6, Index (BUF, 0x06))
                        Store (L3M7, Index (BUF, 0x07))
                        Store (L3M8, Index (BUF, 0x08))
                        Store (L3M9, Index (BUF, 0x09))
                        Store (L3MA, Index (BUF, 0x0A))
                        Store (L3MB, Index (BUF, 0x0B))
                        Store (L3MC, Index (BUF, 0x0C))
                        Store (L3MD, Index (BUF, 0x0D))
                        Store (L3ME, Index (BUF, 0x0E))
                        Store (L3MF, Index (BUF, 0x0F))
                        Return (ToString (BUF, Ones))
                    }
                }

                If (LEqual (Arg0, ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        CreateDWordField (DSMB, 0x08, DEV1)
                        CreateDWordField (DSMB, 0x0C, DEV2)
                        CreateDWordField (DSMB, 0x10, DEV3)
                        CreateDWordField (DSMB, 0x14, DEV4)
                        CreateDWordField (DSMB, 0x18, DEV5)
                        CreateDWordField (DSMB, 0x1C, DEV6)
                        CreateDWordField (DSMB, 0x20, DEV7)
                        CreateDWordField (DSMB, 0x24, DEV8)
                        CreateDWordField (DSMB, 0x28, DEV9)
                        CreateDWordField (DSMB, 0x2C, DEVA)
                        CreateDWordField (DSMB, 0x30, DEVB)
                        Store (L3DI, I2CC)
                        Store (DSMI (L3D0, L3A0, Zero, L3BS), DEV0)
                        Store (DSMI (L3D1, L3A1, Zero, L3BS), DEV1)
                        Store (DSMI (L3D2, L3A2, Zero, L3BS), DEV2)
                        Store (DSMI (L3D3, L3A3, Zero, L3BS), DEV3)
                        Store (DSMI (L3D4, L3A4, Zero, L3BS), DEV4)
                        Store (DSMI (L3D5, L3A5, Zero, L3BS), DEV5)
                        Store (DSMI (L3D6, L3A6, Zero, L3BS), DEV6)
                        Store (DSMI (L3D7, L3A7, Zero, L3BS), DEV7)
                        Store (DSMI (L3D8, L3A8, Zero, L3BS), DEV8)
                        Store (DSMI (L3D9, L3A9, Zero, L3BS), DEV9)
                        Store (DSMI (L3DA, L3AA, Zero, L3BS), DEVA)
                        Store (DSMI (L3DB, L3AB, Zero, L3BS), DEVB)
                        Return (DSMB)
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                If (LEqual (Arg0, ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x1F                                     
                        })
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (L3DI)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        If (LGreater (L3DI, Zero))
                        {
                            Return (DSMI (L3D0, L3A0, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LGreater (L3DI, One))
                        {
                            Return (DSMI (L3D1, L3A1, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        If (LGreater (L3DI, 0x02))
                        {
                            Return (DSMI (L3D2, L3A2, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        If (LGreater (L3DI, 0x03))
                        {
                            Return (DSMI (L3D3, L3A3, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        If (LGreater (L3DI, 0x04))
                        {
                            Return (DSMI (L3D4, L3A4, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        If (LGreater (L3DI, 0x05))
                        {
                            Return (DSMI (L3D5, L3A5, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        If (LGreater (L3DI, 0x06))
                        {
                            Return (DSMI (L3D6, L3A6, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        If (LGreater (L3DI, 0x07))
                        {
                            Return (DSMI (L3D7, L3A7, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x09))
                    {
                        If (LGreater (L3DI, 0x08))
                        {
                            Return (DSMI (L3D8, L3A8, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0A))
                    {
                        If (LGreater (L3DI, 0x09))
                        {
                            Return (DSMI (L3D9, L3A9, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0B))
                    {
                        If (LGreater (L3DI, 0x0A))
                        {
                            Return (DSMI (L3DA, L3AA, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0C))
                    {
                        If (LGreater (L3DI, 0x0B))
                        {
                            Return (DSMI (L3DB, L3AB, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (LNK4)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L4EN)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L4EN)
                {
                    Return (CDEP (L4CL, L4BS))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PC00
                    })
                }
            }

            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (HCID (0x04))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                Store (L4M0, Index (BUF, Zero))
                Store (L4M1, Index (BUF, One))
                Store (L4M2, Index (BUF, 0x02))
                Store (L4M3, Index (BUF, 0x03))
                Store (L4M4, Index (BUF, 0x04))
                Store (L4M5, Index (BUF, 0x05))
                Store (L4M6, Index (BUF, 0x06))
                Store (L4M7, Index (BUF, 0x07))
                Store (L4M8, Index (BUF, 0x08))
                Store (L4M9, Index (BUF, 0x09))
                Store (L4MA, Index (BUF, 0x0A))
                Store (L4MB, Index (BUF, 0x0B))
                Store (L4MC, Index (BUF, 0x0C))
                Store (L4MD, Index (BUF, 0x0D))
                Store (L4ME, Index (BUF, 0x0E))
                Store (L4MF, Index (BUF, 0x0F))
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x69, 0x0E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                    }
                })
                CreateByteField (DerefOf (Index (PLDB, Zero)), 0x08, BPOS)
                CreateField (DerefOf (Index (PLDB, Zero)), 0x73, 0x04, RPOS)
                Store (L4PL, BPOS)
                Store (L4DG, RPOS)
                Return (PLDB)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If (LEqual (L4DI, Zero))
                {
                    Return (Buffer (Zero){})
                }
                Else
                {
                    If (LGreater (L4DI, Zero))
                    {
                        Store (IICB (L4A0, L4BS), Local0)
                    }

                    If (LGreater (L4DI, One))
                    {
                        Store (IICB (L4A1, L4BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L4DI, 0x02))
                    {
                        Store (IICB (L4A2, L4BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L4DI, 0x03))
                    {
                        Store (IICB (L4A3, L4BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L4DI, 0x04))
                    {
                        Store (IICB (L4A4, L4BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L4DI, 0x05))
                    {
                        Store (IICB (L4A5, L4BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L4DI, 0x06))
                    {
                        Store (IICB (L4A6, L4BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L4DI, 0x07))
                    {
                        Store (IICB (L4A7, L4BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L4DI, 0x08))
                    {
                        Store (IICB (L4A8, L4BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L4DI, 0x09))
                    {
                        Store (IICB (L4A9, L4BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L4DI, 0x0A))
                    {
                        Store (IICB (L4AA, L4BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L4DI, 0x0B))
                    {
                        Store (IICB (L4AB, L4BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    Return (Local0)
                }
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x00, 0x69, 0x56, 0x39, 0x8A, 0xF7, 0x11,
                    /* 0008 */  0xA9, 0x4E, 0x9C, 0x7D, 0x20, 0xEE, 0x0A, 0xB5,
                    /* 0010 */  0xCA, 0x40, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0050 */  0x0F, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0060 */  0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                         
                })
                Store (L4DV, Index (PAR, Zero))
                Store (L4CV, Index (PAR, One))
                Store (L4LC, Index (PAR, 0x18))
                Store (L4LU, Index (PAR, 0x1C))
                Store (L4NL, Index (PAR, 0x1D))
                Store (L4EE, Index (PAR, 0x4E))
                Store (L4VC, Index (PAR, 0x4F))
                Store (L4FS, Index (PAR, 0x52))
                Store (L4LE, Index (PAR, 0x53))
                Store (CDEG (L4DG), Index (PAR, 0x54))
                CreateDWordField (PAR, 0x56, DAT)
                Store (L4CK, DAT)
                Store (L4CL, Index (PAR, 0x5A))
                Store (L4PP, Index (PAR, 0x5F))
                Store (L4VR, Index (PAR, 0x60))
                Store (L4FI, Index (PAR, 0x63))
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (BUF, Buffer (0x10){})
                        Store (L4M0, Index (BUF, Zero))
                        Store (L4M1, Index (BUF, One))
                        Store (L4M2, Index (BUF, 0x02))
                        Store (L4M3, Index (BUF, 0x03))
                        Store (L4M4, Index (BUF, 0x04))
                        Store (L4M5, Index (BUF, 0x05))
                        Store (L4M6, Index (BUF, 0x06))
                        Store (L4M7, Index (BUF, 0x07))
                        Store (L4M8, Index (BUF, 0x08))
                        Store (L4M9, Index (BUF, 0x09))
                        Store (L4MA, Index (BUF, 0x0A))
                        Store (L4MB, Index (BUF, 0x0B))
                        Store (L4MC, Index (BUF, 0x0C))
                        Store (L4MD, Index (BUF, 0x0D))
                        Store (L4ME, Index (BUF, 0x0E))
                        Store (L4MF, Index (BUF, 0x0F))
                        Return (ToString (BUF, Ones))
                    }
                }

                If (LEqual (Arg0, ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        CreateDWordField (DSMB, 0x08, DEV1)
                        CreateDWordField (DSMB, 0x0C, DEV2)
                        CreateDWordField (DSMB, 0x10, DEV3)
                        CreateDWordField (DSMB, 0x14, DEV4)
                        CreateDWordField (DSMB, 0x18, DEV5)
                        CreateDWordField (DSMB, 0x1C, DEV6)
                        CreateDWordField (DSMB, 0x20, DEV7)
                        CreateDWordField (DSMB, 0x24, DEV8)
                        CreateDWordField (DSMB, 0x28, DEV9)
                        CreateDWordField (DSMB, 0x2C, DEVA)
                        CreateDWordField (DSMB, 0x30, DEVB)
                        Store (L4DI, I2CC)
                        Store (DSMI (L4D0, L4A0, Zero, L4BS), DEV0)
                        Store (DSMI (L4D1, L4A1, Zero, L4BS), DEV1)
                        Store (DSMI (L4D2, L4A2, Zero, L4BS), DEV2)
                        Store (DSMI (L4D3, L4A3, Zero, L4BS), DEV3)
                        Store (DSMI (L4D4, L4A4, Zero, L4BS), DEV4)
                        Store (DSMI (L4D5, L4A5, Zero, L4BS), DEV5)
                        Store (DSMI (L4D6, L4A6, Zero, L4BS), DEV6)
                        Store (DSMI (L4D7, L4A7, Zero, L4BS), DEV7)
                        Store (DSMI (L4D8, L4A8, Zero, L4BS), DEV8)
                        Store (DSMI (L4D9, L4A9, Zero, L4BS), DEV9)
                        Store (DSMI (L4DA, L4AA, Zero, L4BS), DEVA)
                        Store (DSMI (L4DB, L4AB, Zero, L4BS), DEVB)
                        Return (DSMB)
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                If (LEqual (Arg0, ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x1F                                     
                        })
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (L4DI)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        If (LGreater (L4DI, Zero))
                        {
                            Return (DSMI (L4D0, L4A0, Zero, L4BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LGreater (L4DI, One))
                        {
                            Return (DSMI (L4D1, L4A1, Zero, L4BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        If (LGreater (L4DI, 0x02))
                        {
                            Return (DSMI (L4D2, L4A2, Zero, L4BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        If (LGreater (L4DI, 0x03))
                        {
                            Return (DSMI (L4D3, L4A3, Zero, L4BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        If (LGreater (L4DI, 0x04))
                        {
                            Return (DSMI (L4D4, L4A4, Zero, L4BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        If (LGreater (L4DI, 0x05))
                        {
                            Return (DSMI (L4D5, L4A5, Zero, L4BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        If (LGreater (L4DI, 0x06))
                        {
                            Return (DSMI (L4D6, L4A6, Zero, L4BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        If (LGreater (L4DI, 0x07))
                        {
                            Return (DSMI (L3D7, L3A7, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x09))
                    {
                        If (LGreater (L4DI, 0x08))
                        {
                            Return (DSMI (L3D8, L3A8, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0A))
                    {
                        If (LGreater (L4DI, 0x09))
                        {
                            Return (DSMI (L4D9, L4A9, Zero, L4BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0B))
                    {
                        If (LGreater (L4DI, 0x0A))
                        {
                            Return (DSMI (L4DA, L4AA, Zero, L4BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0C))
                    {
                        If (LGreater (L4DI, 0x0B))
                        {
                            Return (DSMI (L4DB, L4AB, Zero, L4BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (LNK5)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L5EN)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L5EN)
                {
                    Return (CDEP (L5CL, L5BS))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PC00
                    })
                }
            }

            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (HCID (0x05))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                Store (L5M0, Index (BUF, Zero))
                Store (L5M1, Index (BUF, One))
                Store (L5M2, Index (BUF, 0x02))
                Store (L5M3, Index (BUF, 0x03))
                Store (L5M4, Index (BUF, 0x04))
                Store (L5M5, Index (BUF, 0x05))
                Store (L5M6, Index (BUF, 0x06))
                Store (L5M7, Index (BUF, 0x07))
                Store (L5M8, Index (BUF, 0x08))
                Store (L5M9, Index (BUF, 0x09))
                Store (L5MA, Index (BUF, 0x0A))
                Store (L5MB, Index (BUF, 0x0B))
                Store (L5MC, Index (BUF, 0x0C))
                Store (L5MD, Index (BUF, 0x0D))
                Store (L5ME, Index (BUF, 0x0E))
                Store (L5MF, Index (BUF, 0x0F))
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x69, 0x0E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                    }
                })
                CreateByteField (DerefOf (Index (PLDB, Zero)), 0x08, BPOS)
                CreateField (DerefOf (Index (PLDB, Zero)), 0x73, 0x04, RPOS)
                Store (L5PL, BPOS)
                Store (L5DG, RPOS)
                Return (PLDB)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If (LEqual (L5DI, Zero))
                {
                    Return (Buffer (Zero){})
                }
                Else
                {
                    If (LGreater (L5DI, Zero))
                    {
                        Store (IICB (L5A0, L5BS), Local0)
                    }

                    If (LGreater (L5DI, One))
                    {
                        Store (IICB (L5A1, L5BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L5DI, 0x02))
                    {
                        Store (IICB (L5A2, L5BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L5DI, 0x03))
                    {
                        Store (IICB (L5A3, L5BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L5DI, 0x04))
                    {
                        Store (IICB (L5A4, L5BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L5DI, 0x05))
                    {
                        Store (IICB (L5A5, L5BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L5DI, 0x06))
                    {
                        Store (IICB (L5A6, L5BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L5DI, 0x07))
                    {
                        Store (IICB (L5A7, L5BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L5DI, 0x08))
                    {
                        Store (IICB (L5A8, L5BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L5DI, 0x09))
                    {
                        Store (IICB (L5A9, L5BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L5DI, 0x0A))
                    {
                        Store (IICB (L5AA, L5BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    If (LGreater (L5DI, 0x0B))
                    {
                        Store (IICB (L5AB, L5BS), Local1)
                        ConcatenateResTemplate (Local0, Local1, Local2)
                        Store (Local2, Local0)
                    }

                    Return (Local0)
                }
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x00, 0x69, 0x56, 0x39, 0x8A, 0xF7, 0x11,
                    /* 0008 */  0xA9, 0x4E, 0x9C, 0x7D, 0x20, 0xEE, 0x0A, 0xB5,
                    /* 0010 */  0xCA, 0x40, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0050 */  0x0F, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0060 */  0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                         
                })
                Store (L5DV, Index (PAR, Zero))
                Store (L5CV, Index (PAR, One))
                Store (L5LC, Index (PAR, 0x18))
                Store (L5LU, Index (PAR, 0x1C))
                Store (L5NL, Index (PAR, 0x1D))
                Store (L5EE, Index (PAR, 0x4E))
                Store (L5VC, Index (PAR, 0x4F))
                Store (L5FS, Index (PAR, 0x52))
                Store (L5LE, Index (PAR, 0x53))
                Store (CDEG (L5DG), Index (PAR, 0x54))
                CreateDWordField (PAR, 0x56, DAT)
                Store (L5CK, DAT)
                Store (L5CL, Index (PAR, 0x5A))
                Store (L5PP, Index (PAR, 0x5F))
                Store (L5VR, Index (PAR, 0x60))
                Store (L5FI, Index (PAR, 0x63))
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (BUF, Buffer (0x10){})
                        Store (L5M0, Index (BUF, Zero))
                        Store (L5M1, Index (BUF, One))
                        Store (L5M2, Index (BUF, 0x02))
                        Store (L5M3, Index (BUF, 0x03))
                        Store (L5M4, Index (BUF, 0x04))
                        Store (L5M5, Index (BUF, 0x05))
                        Store (L5M6, Index (BUF, 0x06))
                        Store (L5M7, Index (BUF, 0x07))
                        Store (L5M8, Index (BUF, 0x08))
                        Store (L5M9, Index (BUF, 0x09))
                        Store (L5MA, Index (BUF, 0x0A))
                        Store (L5MB, Index (BUF, 0x0B))
                        Store (L5MC, Index (BUF, 0x0C))
                        Store (L5MD, Index (BUF, 0x0D))
                        Store (L5ME, Index (BUF, 0x0E))
                        Store (L5MF, Index (BUF, 0x0F))
                        Return (ToString (BUF, Ones))
                    }
                }

                If (LEqual (Arg0, ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                           
                            })
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        CreateDWordField (DSMB, 0x08, DEV1)
                        CreateDWordField (DSMB, 0x0C, DEV2)
                        CreateDWordField (DSMB, 0x10, DEV3)
                        CreateDWordField (DSMB, 0x14, DEV4)
                        CreateDWordField (DSMB, 0x18, DEV5)
                        CreateDWordField (DSMB, 0x1C, DEV6)
                        CreateDWordField (DSMB, 0x20, DEV7)
                        CreateDWordField (DSMB, 0x24, DEV8)
                        CreateDWordField (DSMB, 0x28, DEV9)
                        CreateDWordField (DSMB, 0x2C, DEVA)
                        CreateDWordField (DSMB, 0x30, DEVB)
                        Store (L5DI, I2CC)
                        Store (DSMI (L5D0, L5A0, Zero, L5BS), DEV0)
                        Store (DSMI (L5D1, L5A1, Zero, L5BS), DEV1)
                        Store (DSMI (L5D2, L5A2, Zero, L5BS), DEV2)
                        Store (DSMI (L5D3, L5A3, Zero, L5BS), DEV3)
                        Store (DSMI (L5D4, L5A4, Zero, L5BS), DEV4)
                        Store (DSMI (L5D5, L5A5, Zero, L5BS), DEV5)
                        Store (DSMI (L5D6, L5A6, Zero, L5BS), DEV6)
                        Store (DSMI (L5D7, L5A7, Zero, L5BS), DEV7)
                        Store (DSMI (L5D8, L5A8, Zero, L5BS), DEV8)
                        Store (DSMI (L5D9, L5A9, Zero, L5BS), DEV9)
                        Store (DSMI (L5DA, L5AA, Zero, L5BS), DEVA)
                        Store (DSMI (L5DB, L5AB, Zero, L5BS), DEVB)
                        Return (DSMB)
                    }

                    Return (Buffer (One)
                    {
                         0x00                                           
                    })
                }

                If (LEqual (Arg0, ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x1F                                     
                        })
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (L5DI)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        If (LGreater (L5DI, Zero))
                        {
                            Return (DSMI (L5D0, L5A0, Zero, L5BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        If (LGreater (L5DI, One))
                        {
                            Return (DSMI (L5D1, L5A1, Zero, L5BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        If (LGreater (L5DI, 0x02))
                        {
                            Return (DSMI (L5D2, L5A2, Zero, L5BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        If (LGreater (L5DI, 0x03))
                        {
                            Return (DSMI (L5D3, L5A3, Zero, L5BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        If (LGreater (L5DI, 0x04))
                        {
                            Return (DSMI (L5D4, L5A4, Zero, L5BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        If (LGreater (L5DI, 0x05))
                        {
                            Return (DSMI (L5D5, L5A5, Zero, L5BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        If (LGreater (L5DI, 0x06))
                        {
                            Return (DSMI (L5D6, L5A6, Zero, L5BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x08))
                    {
                        If (LGreater (L5DI, 0x07))
                        {
                            Return (DSMI (L5D7, L5A7, Zero, L5BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x09))
                    {
                        If (LGreater (L5DI, 0x08))
                        {
                            Return (DSMI (L5D8, L5A8, Zero, L5BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0A))
                    {
                        If (LGreater (L5DI, 0x09))
                        {
                            Return (DSMI (L5D9, L5A9, Zero, L5BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0B))
                    {
                        If (LGreater (L5DI, 0x0A))
                        {
                            Return (DSMI (L5DA, L5AA, Zero, L5BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, 0x0C))
                    {
                        If (LGreater (L5DI, 0x0B))
                        {
                            Return (DSMI (L5DB, L5AB, Zero, L5BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (FLM0)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L0FD)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L0EN)
                {
                    Return (CDEP (L0CL, L0BS))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PC00
                    })
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (FHCI (Zero))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                Store (F0M0, Index (BUF, Zero))
                Store (F0M1, Index (BUF, One))
                Store (F0M2, Index (BUF, 0x02))
                Store (F0M3, Index (BUF, 0x03))
                Store (F0M4, Index (BUF, 0x04))
                Store (F0M5, Index (BUF, 0x05))
                Store (F0M6, Index (BUF, 0x06))
                Store (F0M7, Index (BUF, 0x07))
                Store (F0M8, Index (BUF, 0x08))
                Store (F0M9, Index (BUF, 0x09))
                Store (F0MA, Index (BUF, 0x0A))
                Store (F0MB, Index (BUF, 0x0B))
                Store (F0MC, Index (BUF, 0x0C))
                Store (F0MD, Index (BUF, 0x0D))
                Store (F0ME, Index (BUF, 0x0E))
                Store (F0MF, Index (BUF, 0x0F))
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x69, 0x0C, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                    }
                })
                Return (PLDB)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Store (IICB (F0AB, F0BS), Local0)
                If (LNotEqual (F0MS, 0x03))
                {
                    Store (PINR (F0GP, F0GG), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Store (Local2, Local0)
                }

                Return (Local0)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("377ba76a-f390-4aff-ab38-9b1bf33a3015")))
                {
                    Return (FHCI (Zero))
                }

                If (LEqual (Arg0, ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee")))
                {
                    Return (FMID (Zero))
                }

                If (LEqual (Arg0, ToUUID ("7dcd9f7b-9080-4f5b-a26c-3470be2caa7a")))
                {
                    Return (FMLS (Zero))
                }

                If (LEqual (Arg0, ToUUID ("2959512a-028c-4646-b73d-4d1b5672fad8")))
                {
                    Return ("LKF")
                }

                If (LEqual (Arg0, ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If (LEqual (Arg2, One))
                    {
                        Return (F0BS)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (DSMI (Zero, F0AB, Zero, F0BS))
                    }
                }

                If (LEqual (Arg0, ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f")))
                {
                    If (LEqual (Arg2, One))
                    {
                        Return (One)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (GPPI (0x02, And (AGPN (F0GP, F0GG), 0xFF), F0IV, F0AV))
                    }
                }

                If (LEqual (Arg0, ToUUID ("5e9e0075-a7a0-4067-a823-b939f75cd2ca")))
                {
                    Return (Zero)
                }

                If (LEqual (Arg0, ToUUID ("6665d1ce-20a3-40d0-99a1-e488db5af908")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                           
                        })
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (L0FI)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (FLM1)
        {
            Name (PKG1, Package (0x01)
            {
                "\\_SB.PC00.XHCI.RHUB.HS07.VIC0"
            })
            Name (PKG0, Package (0x01)
            {
                "\\_SB.PC00.XHCI.RHUB.HS06.VIC0"
            })
            Name (PKG2, Package (0x01)
            {
                "\\_SB.PC00.XHCI.RHUB.HS08.VIC0"
            })
            Name (PKG3, Package (0x01)
            {
                "\\_SB.PC00.XHCI.RHUB.HS03.VIC0"
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L1FD)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L1EN)
                {
                    If (LEqual (CVFS, 0x02))
                    {
                        If (LEqual (CUPN, 0x06))
                        {
                            Return (PKG0)
                        }
                        ElseIf (LEqual (CUPN, 0x07))
                        {
                            Return (PKG1)
                        }
                        ElseIf (LEqual (CUPN, 0x08))
                        {
                            Return (PKG2)
                        }
                        ElseIf (LEqual (CUPN, 0x03))
                        {
                            Return (PKG3)
                        }

                        Return (Package (0x00){})
                    }
                    Else
                    {
                        Return (CDEP (L1CL, L1BS))
                    }
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PC00
                    })
                }
            }

            Name (_UID, One)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (FHCI (One))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                Store (F1M0, Index (BUF, Zero))
                Store (F1M1, Index (BUF, One))
                Store (F1M2, Index (BUF, 0x02))
                Store (F1M3, Index (BUF, 0x03))
                Store (F1M4, Index (BUF, 0x04))
                Store (F1M5, Index (BUF, 0x05))
                Store (F1M6, Index (BUF, 0x06))
                Store (F1M7, Index (BUF, 0x07))
                Store (F1M8, Index (BUF, 0x08))
                Store (F1M9, Index (BUF, 0x09))
                Store (F1MA, Index (BUF, 0x0A))
                Store (F1MB, Index (BUF, 0x0B))
                Store (F1MC, Index (BUF, 0x0C))
                Store (F1MD, Index (BUF, 0x0D))
                Store (F1ME, Index (BUF, 0x0E))
                Store (F1MF, Index (BUF, 0x0F))
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x69, 0x0C, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                    }
                })
                Return (PLDB)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If (LEqual (CVFS, 0x02))
                {
                    Store (VIIC (F1AB, Zero), Local0)
                }
                Else
                {
                    Store (IICB (F1AB, F1BS), Local0)
                }

                If (LNotEqual (F1MS, 0x03))
                {
                    If (LEqual (CVFS, 0x02))
                    {
                        Store (VPIN (0x03), Local1)
                    }
                    Else
                    {
                        Store (PINR (F1GP, F1GG), Local1)
                    }

                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Store (Local2, Local0)
                }

                Return (Local0)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("377ba76a-f390-4aff-ab38-9b1bf33a3015")))
                {
                    Return (FHCI (One))
                }

                If (LEqual (Arg0, ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee")))
                {
                    Return (FMID (One))
                }

                If (LEqual (Arg0, ToUUID ("7dcd9f7b-9080-4f5b-a26c-3470be2caa7a")))
                {
                    Return (FMLS (One))
                }

                If (LEqual (Arg0, ToUUID ("2959512a-028c-4646-b73d-4d1b5672fad8")))
                {
                    Return ("LKF")
                }

                If (LEqual (Arg0, ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If (LEqual (Arg2, One))
                    {
                        Return (F1BS)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (DSMI (Zero, F1AB, Zero, F1BS))
                    }
                }

                If (LEqual (Arg0, ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f")))
                {
                    If (LEqual (Arg2, One))
                    {
                        Return (One)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (GPPI (0x02, And (AGPN (F1GP, F1GG), 0xFF), F1IV, F1AV))
                    }
                }

                If (LEqual (Arg0, ToUUID ("5e9e0075-a7a0-4067-a823-b939f75cd2ca")))
                {
                    Return (Zero)
                }

                If (LEqual (Arg0, ToUUID ("6665d1ce-20a3-40d0-99a1-e488db5af908")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                           
                        })
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (L1FI)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (FLM2)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L2FD)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L2EN)
                {
                    Return (CDEP (L2CL, L2BS))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PC00
                    })
                }
            }

            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (FHCI (0x02))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                Store (F2M0, Index (BUF, Zero))
                Store (F2M1, Index (BUF, One))
                Store (F2M2, Index (BUF, 0x02))
                Store (F2M3, Index (BUF, 0x03))
                Store (F2M4, Index (BUF, 0x04))
                Store (F2M5, Index (BUF, 0x05))
                Store (F2M6, Index (BUF, 0x06))
                Store (F2M7, Index (BUF, 0x07))
                Store (F2M8, Index (BUF, 0x08))
                Store (F2M9, Index (BUF, 0x09))
                Store (F2MA, Index (BUF, 0x0A))
                Store (F2MB, Index (BUF, 0x0B))
                Store (F2MC, Index (BUF, 0x0C))
                Store (F2MD, Index (BUF, 0x0D))
                Store (F2ME, Index (BUF, 0x0E))
                Store (F2MF, Index (BUF, 0x0F))
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x69, 0x0C, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                    }
                })
                Return (PLDB)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Store (IICB (F2AB, F2BS), Local0)
                If (LNotEqual (F2MS, 0x03))
                {
                    Store (PINR (F2GP, F2GG), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Store (Local2, Local0)
                }

                Return (Local0)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("377ba76a-f390-4aff-ab38-9b1bf33a3015")))
                {
                    Return (FHCI (0x02))
                }

                If (LEqual (Arg0, ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee")))
                {
                    Return (FMID (0x02))
                }

                If (LEqual (Arg0, ToUUID ("7dcd9f7b-9080-4f5b-a26c-3470be2caa7a")))
                {
                    Return (FMLS (0x02))
                }

                If (LEqual (Arg0, ToUUID ("2959512a-028c-4646-b73d-4d1b5672fad8")))
                {
                    Return ("LKF")
                }

                If (LEqual (Arg0, ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If (LEqual (Arg2, One))
                    {
                        Return (F2BS)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (DSMI (Zero, F2AB, Zero, F2BS))
                    }
                }

                If (LEqual (Arg0, ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f")))
                {
                    If (LEqual (Arg2, One))
                    {
                        Return (One)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (GPPI (0x02, And (AGPN (F2GP, F2GG), 0xFF), F2IV, F2AV))
                    }
                }

                If (LEqual (Arg0, ToUUID ("5e9e0075-a7a0-4067-a823-b939f75cd2ca")))
                {
                    Return (Zero)
                }

                If (LEqual (Arg0, ToUUID ("6665d1ce-20a3-40d0-99a1-e488db5af908")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                           
                        })
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (L2FI)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (FLM3)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L3FD)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L3EN)
                {
                    Return (CDEP (L3CL, L3BS))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PC00
                    })
                }
            }

            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (FHCI (0x03))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                Store (F3M0, Index (BUF, Zero))
                Store (F3M1, Index (BUF, One))
                Store (F3M2, Index (BUF, 0x02))
                Store (F3M3, Index (BUF, 0x03))
                Store (F3M4, Index (BUF, 0x04))
                Store (F3M5, Index (BUF, 0x05))
                Store (F3M6, Index (BUF, 0x06))
                Store (F3M7, Index (BUF, 0x07))
                Store (F3M8, Index (BUF, 0x08))
                Store (F3M9, Index (BUF, 0x09))
                Store (F3MA, Index (BUF, 0x0A))
                Store (F3MB, Index (BUF, 0x0B))
                Store (F3MC, Index (BUF, 0x0C))
                Store (F3MD, Index (BUF, 0x0D))
                Store (F3ME, Index (BUF, 0x0E))
                Store (F3MF, Index (BUF, 0x0F))
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x69, 0x0C, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                    }
                })
                Return (PLDB)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Store (IICB (F3AB, F3BS), Local0)
                If (LNotEqual (F3MS, 0x03))
                {
                    Store (PINR (F3GP, F3GG), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Store (Local2, Local0)
                }

                Return (Local0)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("377ba76a-f390-4aff-ab38-9b1bf33a3015")))
                {
                    Return (FHCI (0x03))
                }

                If (LEqual (Arg0, ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee")))
                {
                    Return (FMID (0x03))
                }

                If (LEqual (Arg0, ToUUID ("7dcd9f7b-9080-4f5b-a26c-3470be2caa7a")))
                {
                    Return (FMLS (0x03))
                }

                If (LEqual (Arg0, ToUUID ("2959512a-028c-4646-b73d-4d1b5672fad8")))
                {
                    Return ("LKF")
                }

                If (LEqual (Arg0, ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If (LEqual (Arg2, One))
                    {
                        Return (F3BS)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (DSMI (Zero, F3AB, Zero, F3BS))
                    }
                }

                If (LEqual (Arg0, ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f")))
                {
                    If (LEqual (Arg2, One))
                    {
                        Return (One)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (GPPI (0x02, And (AGPN (F3GP, F3GG), 0xFF), F3IV, F3AV))
                    }
                }

                If (LEqual (Arg0, ToUUID ("5e9e0075-a7a0-4067-a823-b939f75cd2ca")))
                {
                    Return (Zero)
                }

                If (LEqual (Arg0, ToUUID ("6665d1ce-20a3-40d0-99a1-e488db5af908")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                           
                        })
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (L3FI)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (FLM4)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L4FD)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L4EN)
                {
                    Return (CDEP (L4CL, L4BS))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PC00
                    })
                }
            }

            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (FHCI (0x04))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                Store (F4M0, Index (BUF, Zero))
                Store (F4M1, Index (BUF, One))
                Store (F4M2, Index (BUF, 0x02))
                Store (F4M3, Index (BUF, 0x03))
                Store (F4M4, Index (BUF, 0x04))
                Store (F4M5, Index (BUF, 0x05))
                Store (F4M6, Index (BUF, 0x06))
                Store (F4M7, Index (BUF, 0x07))
                Store (F4M8, Index (BUF, 0x08))
                Store (F4M9, Index (BUF, 0x09))
                Store (F4MA, Index (BUF, 0x0A))
                Store (F4MB, Index (BUF, 0x0B))
                Store (F4MC, Index (BUF, 0x0C))
                Store (F4MD, Index (BUF, 0x0D))
                Store (F4ME, Index (BUF, 0x0E))
                Store (F4MF, Index (BUF, 0x0F))
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x69, 0x0C, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                    }
                })
                Return (PLDB)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Store (IICB (F4AB, F4BS), Local0)
                If (LNotEqual (F4MS, 0x03))
                {
                    Store (PINR (F4GP, F4GG), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Store (Local2, Local0)
                }

                Return (Local0)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("377ba76a-f390-4aff-ab38-9b1bf33a3015")))
                {
                    Return (FHCI (0x04))
                }

                If (LEqual (Arg0, ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee")))
                {
                    Return (FMID (0x04))
                }

                If (LEqual (Arg0, ToUUID ("7dcd9f7b-9080-4f5b-a26c-3470be2caa7a")))
                {
                    Return (FMLS (0x04))
                }

                If (LEqual (Arg0, ToUUID ("2959512a-028c-4646-b73d-4d1b5672fad8")))
                {
                    Return ("LKF")
                }

                If (LEqual (Arg0, ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If (LEqual (Arg2, One))
                    {
                        Return (F4BS)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (DSMI (Zero, F4AB, Zero, F4BS))
                    }
                }

                If (LEqual (Arg0, ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f")))
                {
                    If (LEqual (Arg2, One))
                    {
                        Return (One)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (GPPI (0x02, And (AGPN (F4GP, F4GG), 0xFF), F4IV, F4AV))
                    }
                }

                If (LEqual (Arg0, ToUUID ("5e9e0075-a7a0-4067-a823-b939f75cd2ca")))
                {
                    Return (Zero)
                }

                If (LEqual (Arg0, ToUUID ("6665d1ce-20a3-40d0-99a1-e488db5af908")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                           
                        })
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (L4FI)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }

        Device (FLM5)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L5FD)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L5EN)
                {
                    Return (CDEP (L5CL, L5BS))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PC00
                    })
                }
            }

            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (FHCI (0x05))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                Store (F5M0, Index (BUF, Zero))
                Store (F5M1, Index (BUF, One))
                Store (F5M2, Index (BUF, 0x02))
                Store (F5M3, Index (BUF, 0x03))
                Store (F5M4, Index (BUF, 0x04))
                Store (F5M5, Index (BUF, 0x05))
                Store (F5M6, Index (BUF, 0x06))
                Store (F5M7, Index (BUF, 0x07))
                Store (F5M8, Index (BUF, 0x08))
                Store (F5M9, Index (BUF, 0x09))
                Store (F5MA, Index (BUF, 0x0A))
                Store (F5MB, Index (BUF, 0x0B))
                Store (F5MC, Index (BUF, 0x0C))
                Store (F5MD, Index (BUF, 0x0D))
                Store (F5ME, Index (BUF, 0x0E))
                Store (F5MF, Index (BUF, 0x0F))
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x69, 0x0C, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                    }
                })
                Return (PLDB)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Store (IICB (F5AB, F5BS), Local0)
                If (LNotEqual (F5MS, 0x03))
                {
                    Store (PINR (F5GP, F5GG), Local1)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Store (Local2, Local0)
                }

                Return (Local0)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("377ba76a-f390-4aff-ab38-9b1bf33a3015")))
                {
                    Return (FHCI (0x05))
                }

                If (LEqual (Arg0, ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee")))
                {
                    Return (FMID (0x05))
                }

                If (LEqual (Arg0, ToUUID ("7dcd9f7b-9080-4f5b-a26c-3470be2caa7a")))
                {
                    Return (FMLS (0x05))
                }

                If (LEqual (Arg0, ToUUID ("2959512a-028c-4646-b73d-4d1b5672fad8")))
                {
                    Return ("LKF")
                }

                If (LEqual (Arg0, ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If (LEqual (Arg2, One))
                    {
                        Return (F5BS)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (DSMI (Zero, F5AB, Zero, F5BS))
                    }
                }

                If (LEqual (Arg0, ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f")))
                {
                    If (LEqual (Arg2, One))
                    {
                        Return (One)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (GPPI (0x02, And (AGPN (F5GP, F5GG), 0xFF), F5IV, F5AV))
                    }
                }

                If (LEqual (Arg0, ToUUID ("5e9e0075-a7a0-4067-a823-b939f75cd2ca")))
                {
                    Return (Zero)
                }

                If (LEqual (Arg0, ToUUID ("6665d1ce-20a3-40d0-99a1-e488db5af908")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                           
                        })
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (L5FI)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }
    }

    Scope (_SB.PC00.I2C2)
    {
        Device (CAM0)
        {
            Name (_HID, "INT3471")  // _HID: Hardware ID
            Name (_DDN, "IMX135-CRDG2")  // _DDN: DOS Device Name
            Name (_UID, "0")  // _UID: Unique ID
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PMIC
            })
            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                Buffer (0x14)
                {
                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0008 */  0x69, 0x0E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                }
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0010, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    I2cSerialBusV2 (0x000E, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    I2cSerialBusV2 (0x0050, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    I2cSerialBusV2 (0x0051, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    I2cSerialBusV2 (0x0052, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    I2cSerialBusV2 (0x0053, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (SBUF)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (LEqual (SCSS, One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x03,
                    /* 0050 */  0x09, 0x00, 0x02, 0x01, 0x00, 0x01, 0x00, 0x36,
                    /* 0058 */  0x6E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                         
                })
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee")))
                {
                    Return ("13P2BAD33")
                }

                If (LEqual (Arg0, ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If (LEqual (Arg2, One))
                    {
                        Return (0x06)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (0x02001000)
                    }

                    If (LEqual (Arg2, 0x03))
                    {
                        Return (0x02000E01)
                    }

                    If (LEqual (Arg2, 0x04))
                    {
                        Return (0x02005002)
                    }

                    If (LEqual (Arg2, 0x05))
                    {
                        Return (0x02005103)
                    }

                    If (LEqual (Arg2, 0x06))
                    {
                        Return (0x02005204)
                    }

                    If (LEqual (Arg2, 0x07))
                    {
                        Return (0x02005305)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }
    }

    Scope (_SB.PC00.I2C4)
    {
        Device (CAM1)
        {
            Name (_HID, "INT3474")  // _HID: Hardware ID
            Name (_DDN, "OV2740-CRDG2")  // _DDN: DOS Device Name
            Name (_UID, "0")  // _UID: Unique ID
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                ^^I2C2.PMIC
            })
            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                Buffer (0x14)
                {
                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0008 */  0x61, 0x0E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                }
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0036, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C4",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (SBUF)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (LEqual (SCSS, One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00,
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0050 */  0x09, 0x00, 0x02, 0x01, 0x00, 0x01, 0x00, 0xF8,
                    /* 0058 */  0x24, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                         
                })
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee")))
                {
                    Return ("4SF259T2")
                }

                If (LEqual (Arg0, ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If (LEqual (Arg2, One))
                    {
                        Return (One)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (0x04003600)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }
    }

    Scope (_SB.PC00.I2C2)
    {
        Device (PMIC)
        {
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_DDN, "PMIC-CRDG2")  // _DDN: DOS Device Name
            Name (_UID, "0")  // _UID: Unique ID
            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                Buffer (0x14)
                {
                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0008 */  0x21, 0x0D, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                }
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x004C, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PC00.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (SBUF)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (LEqual (SCSS, One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x02, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                })
                Return (PAR)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        Return (0x07)
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (One)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        Return (0x02004C0B)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                           
                })
            }
        }
    }

    Scope (_SB.PC00)
    {
        Name (HIDG, ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */)
        Name (TP7G, ToUUID ("ef87eb82-f951-46da-84ec-14871ac6f84b"))
        Method (HIDD, 5, Serialized)
        {
            If (LEqual (Arg0, HIDG))
            {
                If (LEqual (Arg2, Zero))
                {
                    If (LEqual (Arg1, One))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                           
                        })
                    }
                }

                If (LEqual (Arg2, One))
                {
                    Return (Arg4)
                }
            }

            Return (Buffer (One)
            {
                 0x00                                           
            })
        }

        Method (TP7D, 6, Serialized)
        {
            If (LEqual (Arg0, TP7G))
            {
                If (LEqual (Arg2, Zero))
                {
                    If (LEqual (Arg1, One))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                           
                        })
                    }
                }

                If (LEqual (Arg2, One))
                {
                    Return (ConcatenateResTemplate (Arg4, Arg5))
                }
            }

            Return (Buffer (One)
            {
                 0x00                                           
            })
        }

        Method (I2CM, 3, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Name (IIC0, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C0",
                            0x00, ResourceConsumer, _Y66, Exclusive,
                            )
                    })
                    CreateWordField (IIC0, \_SB.PC00.I2CM._Y66._ADR, DAD0)  // _ADR: Address
                    CreateDWordField (IIC0, \_SB.PC00.I2CM._Y66._SPE, DSP0)  // _SPE: Speed
                    Store (Arg1, DAD0)
                    Store (Arg2, DSP0)
                    Return (IIC0)
                }
                Case (One)
                {
                    Name (IIC1, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C1",
                            0x00, ResourceConsumer, _Y67, Exclusive,
                            )
                    })
                    CreateWordField (IIC1, \_SB.PC00.I2CM._Y67._ADR, DAD1)  // _ADR: Address
                    CreateDWordField (IIC1, \_SB.PC00.I2CM._Y67._SPE, DSP1)  // _SPE: Speed
                    Store (Arg1, DAD1)
                    Store (Arg2, DSP1)
                    Return (IIC1)
                }
                Case (0x02)
                {
                    Name (IIC2, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C2",
                            0x00, ResourceConsumer, _Y68, Exclusive,
                            )
                    })
                    CreateWordField (IIC2, \_SB.PC00.I2CM._Y68._ADR, DAD2)  // _ADR: Address
                    CreateDWordField (IIC2, \_SB.PC00.I2CM._Y68._SPE, DSP2)  // _SPE: Speed
                    Store (Arg1, DAD2)
                    Store (Arg2, DSP2)
                    Return (IIC2)
                }
                Case (0x03)
                {
                    Name (IIC3, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C3",
                            0x00, ResourceConsumer, _Y69, Exclusive,
                            )
                    })
                    CreateWordField (IIC3, \_SB.PC00.I2CM._Y69._ADR, DAD3)  // _ADR: Address
                    CreateDWordField (IIC3, \_SB.PC00.I2CM._Y69._SPE, DSP3)  // _SPE: Speed
                    Store (Arg1, DAD3)
                    Store (Arg2, DSP3)
                    Return (IIC3)
                }
                Case (0x04)
                {
                    Name (IIC4, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C4",
                            0x00, ResourceConsumer, _Y6A, Exclusive,
                            )
                    })
                    CreateWordField (IIC4, \_SB.PC00.I2CM._Y6A._ADR, DAD4)  // _ADR: Address
                    CreateDWordField (IIC4, \_SB.PC00.I2CM._Y6A._SPE, DSP4)  // _SPE: Speed
                    Store (Arg1, DAD4)
                    Store (Arg2, DSP4)
                    Return (IIC4)
                }
                Case (0x05)
                {
                    Name (IIC5, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C5",
                            0x00, ResourceConsumer, _Y6B, Exclusive,
                            )
                    })
                    CreateWordField (IIC5, \_SB.PC00.I2CM._Y6B._ADR, DAD5)  // _ADR: Address
                    CreateDWordField (IIC5, \_SB.PC00.I2CM._Y6B._SPE, DSP5)  // _SPE: Speed
                    Store (Arg1, DAD5)
                    Store (Arg2, DSP5)
                    Return (IIC5)
                }
                Case (0x0C)
                {
                    Name (IIC6, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C6",
                            0x00, ResourceConsumer, _Y6C, Exclusive,
                            )
                    })
                    CreateWordField (IIC6, \_SB.PC00.I2CM._Y6C._ADR, DAD6)  // _ADR: Address
                    CreateDWordField (IIC6, \_SB.PC00.I2CM._Y6C._SPE, DSP6)  // _SPE: Speed
                    Store (Arg1, DAD6)
                    Store (Arg2, DSP6)
                    Return (IIC6)
                }
                Case (0x0D)
                {
                    Name (IIC7, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C7",
                            0x00, ResourceConsumer, _Y6D, Exclusive,
                            )
                    })
                    CreateWordField (IIC7, \_SB.PC00.I2CM._Y6D._ADR, DAD7)  // _ADR: Address
                    CreateDWordField (IIC7, \_SB.PC00.I2CM._Y6D._SPE, DSP7)  // _SPE: Speed
                    Store (Arg1, DAD7)
                    Store (Arg2, DSP7)
                    Return (IIC7)
                }
                Default
                {
                    Return (Zero)
                }

            }
        }

        Method (SPIM, 3, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x07)
                {
                    Name (IIC7, ResourceTemplate ()
                    {
                        SpiSerialBusV2 (0x0000, PolarityLow, FourWireMode, 0x08,
                            ControllerInitiated, 0x00989680, ClockPolarityLow,
                            ClockPhaseFirst, "\\_SB.PC00.SPI1",
                            0x00, ResourceConsumer, _Y6E, Exclusive,
                            )
                    })
                    CreateByteField (IIC7, \_SB.PC00.SPIM._Y6E._PHA, DPH7)  // _PHA: Clock Phase
                    CreateDWordField (IIC7, \_SB.PC00.SPIM._Y6E._SPE, DSP7)  // _SPE: Speed
                    Store (Arg1, DPH7)
                    Store (Arg2, DSP7)
                    Return (IIC7)
                }
                Case (0x08)
                {
                    Name (IIC8, ResourceTemplate ()
                    {
                        SpiSerialBusV2 (0x0000, PolarityLow, FourWireMode, 0x08,
                            ControllerInitiated, 0x00989680, ClockPolarityLow,
                            ClockPhaseFirst, "\\_SB.PC00.SPI2",
                            0x00, ResourceConsumer, _Y6F, Exclusive,
                            )
                    })
                    CreateByteField (IIC8, \_SB.PC00.SPIM._Y6F._PHA, DPH8)  // _PHA: Clock Phase
                    CreateDWordField (IIC8, \_SB.PC00.SPIM._Y6F._SPE, DSP8)  // _SPE: Speed
                    Store (Arg1, DPH8)
                    Store (Arg2, DSP8)
                    Return (IIC8)
                }
                Default
                {
                    Return (Buffer (0x02)
                    {
                         0x79, 0x00                                     
                    })
                }

            }
        }

        Method (UCMM, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Name (UCM0, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C0",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C0",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C0",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C0",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (UCM0)
                }
                Case (One)
                {
                    Name (UCM1, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    If (LEqual (ToInteger (PLID), 0x23))
                    {
                        Store (ResourceTemplate ()
                            {
                                I2cSerialBusV2 (0x0023, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC00.I2C1",
                                    0x00, ResourceConsumer, , Exclusive,
                                    )
                                I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC00.I2C1",
                                    0x00, ResourceConsumer, , Exclusive,
                                    )
                                I2cSerialBusV2 (0x0021, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC00.I2C1",
                                    0x00, ResourceConsumer, , Exclusive,
                                    )
                                I2cSerialBusV2 (0x0025, ControllerInitiated, 0x00061A80,
                                    AddressingMode7Bit, "\\_SB.PC00.I2C1",
                                    0x00, ResourceConsumer, , Exclusive,
                                    )
                            }, UCM1)
                    }

                    Return (UCM1)
                }
                Case (0x02)
                {
                    Name (UCM2, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0021, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C2",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0025, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C2",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (UCM2)
                }
                Case (0x03)
                {
                    Name (UCM3, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C3",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C3",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C3",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PC00.I2C3",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (UCM3)
                }
                Default
                {
                    Return (Zero)
                }

            }
        }

        Method (I2CS, 1, NotSerialized)
        {
            Return (Or (And (Arg0, 0x04), And (Arg0, 0x08)))
        }
    }

    Scope (_SB.PC00.I2C0)
    {
        Name (I2CN, Zero)
        Name (I2CX, Zero)
        Name (I2CI, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            Store (SDS0, I2CN)
            Store (Zero, I2CX)
        }
    }

    Scope (_SB.PC00.I2C1)
    {
        Name (I2CN, Zero)
        Name (I2CX, Zero)
        Name (I2CI, One)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            Store (SDS1, I2CN)
            Store (One, I2CX)
        }
    }

    Scope (_SB.PC00.I2C2)
    {
        Name (I2CN, Zero)
        Name (I2CX, Zero)
        Name (I2CI, 0x02)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            Store (SDS2, I2CN)
            Store (0x02, I2CX)
        }
    }

    Scope (_SB.PC00.I2C3)
    {
        Name (I2CN, Zero)
        Name (I2CX, Zero)
        Name (I2CI, 0x03)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            Store (SDS3, I2CN)
            Store (0x03, I2CX)
        }
    }

    Scope (_SB.PC00.I2C4)
    {
    }

    Scope (_SB.PC00.I2C5)
    {
    }

    Scope (_SB.PC00.SPI1)
    {
        Name (SPIP, Zero)
        Name (SPIX, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            Store (SDS7, SPIP)
            Store (0x07, SPIX)
        }
    }

    Scope (_SB.PC00.SPI2)
    {
        Name (SPIP, Zero)
        Name (SPIX, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            Store (SDS8, SPIP)
            Store (0x08, SPIX)
        }
    }

    Method (PKG1, 1, Serialized)
    {
        Name (PKG, Package (0x01)
        {
            Zero
        })
        Store (Arg0, Index (PKG, Zero))
        Return (PKG)
    }

    Method (PKG3, 3, Serialized)
    {
        Name (PKG, Package (0x03)
        {
            Zero, 
            Zero, 
            Zero
        })
        Store (Arg0, Index (PKG, Zero))
        Store (Arg1, Index (PKG, One))
        Store (Arg2, Index (PKG, 0x02))
        Return (PKG)
    }

    If (USTP)
    {
        Scope (_SB.PC00.I2C0)
        {
            Method (SSCN, 0, NotSerialized)
            {
                Return (PKG3 (SSH0, SSL0, SSD0))
            }

            Method (FMCN, 0, NotSerialized)
            {
                Return (PKG3 (FMH0, FML0, FMD0))
            }

            Method (FPCN, 0, NotSerialized)
            {
                Return (PKG3 (FPH0, FPL0, FPD0))
            }

            Method (HSCN, 0, NotSerialized)
            {
                Return (PKG3 (HSH0, HSL0, HSD0))
            }

            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C0))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C0))
            }
        }

        Scope (_SB.PC00.I2C1)
        {
            Method (SSCN, 0, NotSerialized)
            {
                Return (PKG3 (SSH1, SSL1, SSD1))
            }

            Method (FMCN, 0, NotSerialized)
            {
                Return (PKG3 (FMH1, FML1, FMD1))
            }

            Method (FPCN, 0, NotSerialized)
            {
                Return (PKG3 (FPH1, FPL1, FPD1))
            }

            Method (HSCN, 0, NotSerialized)
            {
                Return (PKG3 (HSH1, HSL1, HSD1))
            }

            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C1))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C1))
            }
        }

        Scope (_SB.PC00.I2C2)
        {
            Method (SSCN, 0, NotSerialized)
            {
                Return (PKG3 (SSH2, SSL2, SSD2))
            }

            Method (FMCN, 0, NotSerialized)
            {
                Return (PKG3 (FMH2, FML2, FMD2))
            }

            Method (FPCN, 0, NotSerialized)
            {
                Return (PKG3 (FPH2, FPL2, FPD2))
            }

            Method (HSCN, 0, NotSerialized)
            {
                Return (PKG3 (HSH2, HSL2, HSD2))
            }

            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C2))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C2))
            }
        }

        Scope (_SB.PC00.I2C3)
        {
            Method (SSCN, 0, NotSerialized)
            {
                Return (PKG3 (SSH3, SSL3, SSD3))
            }

            Method (FMCN, 0, NotSerialized)
            {
                Return (PKG3 (FMH3, FML3, FMD3))
            }

            Method (FPCN, 0, NotSerialized)
            {
                Return (PKG3 (FPH3, FPL3, FPD3))
            }

            Method (HSCN, 0, NotSerialized)
            {
                Return (PKG3 (HSH3, HSL3, HSD3))
            }

            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C3))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C3))
            }
        }

        Scope (_SB.PC00.I2C4)
        {
            Method (SSCN, 0, NotSerialized)
            {
                Return (PKG3 (SSH4, SSL4, SSD4))
            }

            Method (FMCN, 0, NotSerialized)
            {
                Return (PKG3 (FMH4, FML4, FMD4))
            }

            Method (FPCN, 0, NotSerialized)
            {
                Return (PKG3 (FPH4, FPL4, FPD4))
            }

            Method (HSCN, 0, NotSerialized)
            {
                Return (PKG3 (HSH4, HSL4, HSD4))
            }

            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C4))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C4))
            }
        }

        Scope (_SB.PC00.I2C5)
        {
            Method (SSCN, 0, NotSerialized)
            {
                Return (PKG3 (SSH5, SSL5, SSD5))
            }

            Method (FMCN, 0, NotSerialized)
            {
                Return (PKG3 (FMH5, FML5, FMD5))
            }

            Method (FPCN, 0, NotSerialized)
            {
                Return (PKG3 (FPH5, FPL5, FPD5))
            }

            Method (HSCN, 0, NotSerialized)
            {
                Return (PKG3 (HSH5, HSL5, HSD5))
            }

            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C5))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C5))
            }
        }

        Scope (_SB.PC00.I2C6)
        {
            Method (SSCN, 0, NotSerialized)
            {
                Return (PKG3 (SSH6, SSL6, SSD6))
            }

            Method (FMCN, 0, NotSerialized)
            {
                Return (PKG3 (FMH6, FML6, FMD6))
            }

            Method (FPCN, 0, NotSerialized)
            {
                Return (PKG3 (FPH6, FPL6, FPD6))
            }

            Method (HSCN, 0, NotSerialized)
            {
                Return (PKG3 (HSH6, HSL6, HSD6))
            }

            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0CC))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1CC))
            }
        }

        Scope (_SB.PC00.I2C7)
        {
            Method (SSCN, 0, NotSerialized)
            {
                Return (PKG3 (SSH7, SSL7, SSD7))
            }

            Method (FMCN, 0, NotSerialized)
            {
                Return (PKG3 (FMH7, FML7, FMD7))
            }

            Method (FPCN, 0, NotSerialized)
            {
                Return (PKG3 (FPH7, FPL7, FPD7))
            }

            Method (HSCN, 0, NotSerialized)
            {
                Return (PKG3 (HSH7, HSL7, HSD7))
            }

            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0CD))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1CD))
            }
        }

        Scope (_SB.PC00.SPI0)
        {
            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C6))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C6))
            }
        }

        Scope (_SB.PC00.SPI1)
        {
            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C7))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C7))
            }
        }

        Scope (_SB.PC00.SPI2)
        {
            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C8))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C8))
            }
        }

        Scope (_SB.PC00.UA00)
        {
            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C9))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C9))
            }
        }

        Scope (_SB.PC00.UA01)
        {
            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0CA))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1CA))
            }
        }

        Scope (_SB.PC00.UA02)
        {
            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0CB))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1CB))
            }
        }
    }

    Scope (_SB.PC00.HDAS.IDA.SNDW)
    {
        Device (SWD4)
        {
            Name (_ADR, 0x000020025D071100)  // _ADR: Address
            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0F)
                {
                    Package (0x02)
                    {
                        "intel-endpoints-num", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "intel-autonomous-clock-stop", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sw-interface-revision", 
                        0x00010000
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-wake-up-unavailable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-test-mode-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clock-stop-mode1-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-clockstopprepare-sm-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clockstopprepare-hard-reset-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-highPHY-capable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-paging-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bank-delay-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port15-read-behavior", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-master-count", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-source-port-list", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sink-port-list", 
                        0x04
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x11)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-0", 
                        "EPD0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-1", 
                        "EPD1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-0-subproperties", 
                        "LNK0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-1-subproperties", 
                        "LNK1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-2-subproperties", 
                        "LNK2"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-3-subproperties", 
                        "LNK3"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-0-subproperties", 
                        "DP0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-3-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-4-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-5-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-6-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-7-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-8-source-subproperties", 
                        "DPN"
                    }
                }
            })
            Name (EPD0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN0"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF0"
                    }
                }
            })
            Name (WFX0, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0005DC00, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71 
                }
            })
            Name (WFX1, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x000BB800, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71 
                }
            })
            Name (WFX2, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71 
                }
            })
            Name (WFX3, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71 
                }
            })
            Name (EFM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX0"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX1"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX2"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX3"
                    }
                }
            })
            Name (ECF0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN0, Buffer (0x2F)
            {
                /* 0000 */  0xE2, 0x1C, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,
                /* 0010 */  0x01, 0x03, 0x00, 0x00, 0x00, 0x8C, 0xC9, 0xB3,
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                /* 0028 */  0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00       
            })
            Name (EPD1, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN1"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM1"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF1"
                    }
                }
            })
            Name (WFX4, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71 
                }
            })
            Name (WFX5, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71 
                }
            })
            Name (WFX6, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x00017700, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71 
                }
            })
            Name (WFX7, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0002EE00, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71 
                }
            })
            Name (EFM1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX4"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX5"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX6"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX7"
                    }
                }
            })
            Name (ECF1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN1, Buffer (0x2F)
            {
                /* 0000 */  0xE1, 0x1B, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,
                /* 0010 */  0x01, 0x01, 0x00, 0x00, 0x00, 0x99, 0x8C, 0xE8,
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                /* 0028 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00       
            })
            Name (DP0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-flow-controlled", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-imp-def-response-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dp0-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-bpt-supported", 
                        One
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-bra-mode", 
                        "BRA0"
                    }
                }
            })
            Name (BRA0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x05)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "bra-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-data-per-frame", 
                        0x01D6
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-min-us-between-transactions", 
                        Zero
                    }
                }
            })
            Name (DPN, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0D)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-data-port-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-grouping-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dpn-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-min-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-channel-number-list", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-modes-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-block-packing-mode", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-encoding-type", 
                        Zero
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-audio-mode-0", 
                        "AM0"
                    }
                }
            })
            Name (AM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-sampling-frequency", 
                        0x0002EE00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-sampling-frequency", 
                        0x1F40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-sampling-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-prepare-channel-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-glitchless-transitions", 
                        Zero
                    }
                }
            })
        }

        Device (SWD5)
        {
            Name (_ADR, 0x000120025D071100)  // _ADR: Address
            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0F)
                {
                    Package (0x02)
                    {
                        "intel-endpoints-num", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "intel-autonomous-clock-stop", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sw-interface-revision", 
                        0x00010000
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-wake-up-unavailable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-test-mode-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clock-stop-mode1-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-clockstopprepare-sm-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clockstopprepare-hard-reset-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-highPHY-capable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-paging-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bank-delay-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port15-read-behavior", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-master-count", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-source-port-list", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sink-port-list", 
                        0x04
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x11)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-0", 
                        "EPD0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-1", 
                        "EPD1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-0-subproperties", 
                        "LNK0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-1-subproperties", 
                        "LNK1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-2-subproperties", 
                        "LNK2"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-3-subproperties", 
                        "LNK3"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-0-subproperties", 
                        "DP0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-3-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-4-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-5-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-6-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-7-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-8-source-subproperties", 
                        "DPN"
                    }
                }
            })
            Name (EPD0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN0"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF0"
                    }
                }
            })
            Name (WFX0, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0005DC00, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71 
                }
            })
            Name (WFX1, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x000BB800, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71 
                }
            })
            Name (WFX2, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71 
                }
            })
            Name (WFX3, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71 
                }
            })
            Name (EFM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX0"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX1"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX2"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX3"
                    }
                }
            })
            Name (ECF0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN0, Buffer (0x2F)
            {
                /* 0000 */  0xE2, 0x1C, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,
                /* 0010 */  0x01, 0x03, 0x00, 0x00, 0x00, 0x8C, 0xC9, 0xB3,
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                /* 0028 */  0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00       
            })
            Name (EPD1, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN1"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM1"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF1"
                    }
                }
            })
            Name (WFX4, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71 
                }
            })
            Name (WFX5, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71 
                }
            })
            Name (WFX6, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x00017700, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71 
                }
            })
            Name (WFX7, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0002EE00, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71 
                }
            })
            Name (EFM1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX4"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX5"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX6"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX7"
                    }
                }
            })
            Name (ECF1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN1, Buffer (0x2F)
            {
                /* 0000 */  0xE1, 0x1B, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,
                /* 0010 */  0x01, 0x01, 0x00, 0x00, 0x00, 0x99, 0x8C, 0xE8,
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                /* 0028 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00       
            })
            Name (DP0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-flow-controlled", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-imp-def-response-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dp0-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-bpt-supported", 
                        One
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-bra-mode", 
                        "BRA0"
                    }
                }
            })
            Name (BRA0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x05)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "bra-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-data-per-frame", 
                        0x01D6
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-min-us-between-transactions", 
                        Zero
                    }
                }
            })
            Name (DPN, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0D)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-data-port-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-grouping-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dpn-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-min-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-channel-number-list", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-modes-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-block-packing-mode", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-encoding-type", 
                        Zero
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-audio-mode-0", 
                        "AM0"
                    }
                }
            })
            Name (AM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-sampling-frequency", 
                        0x0002EE00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-sampling-frequency", 
                        0x1F40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-sampling-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-prepare-channel-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-glitchless-transitions", 
                        Zero
                    }
                }
            })
        }
    }

    If (LEqual (I2SB, Zero))
    {
        Scope (_SB.PC00.I2C0)
        {
            Device (HDAC)
            {
                Name (_HID, "INT00000")  // _HID: Hardware ID
                Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                Name (_UID, One)  // _UID: Unique ID
                Name (CADR, Zero)
                Name (CDIS, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If (LEqual (I2SC, One))
                    {
                        Store ("INT34C2", _HID)
                        Store ("INT34C2", _CID)
                        Store (0x1C, CADR)
                    }
                    ElseIf (LEqual (I2SC, 0x02))
                    {
                        Store ("10EC1308", _HID)
                        Store ("10EC1308", _CID)
                        Store (0x10, CADR)
                    }
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (ConcatenateResTemplate (IICB (CADR, I2SB), INTB (I2SI, Zero, Zero)))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (LAnd (LNotEqual (I2SC, Zero), LNotEqual (CDIS, One)))
                    {
                        Return (0x0F)
                    }

                    If (LEqual (CDIS, One))
                    {
                        Return (0x0D)
                    }

                    Return (Zero)
                }

                Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                {
                    Store (Zero, CDIS)
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    Store (One, CDIS)
                }
            }
        }
    }
    ElseIf (LEqual (I2SB, One))
    {
        Scope (_SB.PC00.I2C1)
        {
            Device (HDAC)
            {
                Name (_HID, "INT00000")  // _HID: Hardware ID
                Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                Name (_UID, One)  // _UID: Unique ID
                Name (CADR, Zero)
                Name (CDIS, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If (LEqual (I2SC, One))
                    {
                        Store ("INT34C2", _HID)
                        Store ("INT34C2", _CID)
                        Store (0x1C, CADR)
                    }
                    ElseIf (LEqual (I2SC, 0x02))
                    {
                        Store ("10EC1308", _HID)
                        Store ("10EC1308", _CID)
                        Store (0x10, CADR)
                    }
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (ConcatenateResTemplate (IICB (CADR, I2SB), INTB (I2SI, Zero, Zero)))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (LAnd (LNotEqual (I2SC, Zero), LNotEqual (CDIS, One)))
                    {
                        Return (0x0F)
                    }

                    If (LEqual (CDIS, One))
                    {
                        Return (0x0D)
                    }

                    Return (Zero)
                }

                Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                {
                    Store (Zero, CDIS)
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    Store (One, CDIS)
                }
            }
        }
    }
    ElseIf (LEqual (I2SB, 0x02))
    {
        Scope (_SB.PC00.I2C2)
        {
            Device (HDAC)
            {
                Name (_HID, "INT00000")  // _HID: Hardware ID
                Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                Name (_UID, One)  // _UID: Unique ID
                Name (CADR, Zero)
                Name (CDIS, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If (LEqual (I2SC, One))
                    {
                        Store ("INT34C2", _HID)
                        Store ("INT34C2", _CID)
                        Store (0x1C, CADR)
                    }
                    ElseIf (LEqual (I2SC, 0x02))
                    {
                        Store ("10EC1308", _HID)
                        Store ("10EC1308", _CID)
                        Store (0x10, CADR)
                    }
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (ConcatenateResTemplate (IICB (CADR, I2SB), INTB (I2SI, Zero, Zero)))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (LAnd (LNotEqual (I2SC, Zero), LNotEqual (CDIS, One)))
                    {
                        Return (0x0F)
                    }

                    If (LEqual (CDIS, One))
                    {
                        Return (0x0D)
                    }

                    Return (Zero)
                }

                Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                {
                    Store (Zero, CDIS)
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    Store (One, CDIS)
                }
            }
        }
    }
    ElseIf (LEqual (I2SB, 0x03))
    {
        Scope (_SB.PC00.I2C3)
        {
            Device (HDAC)
            {
                Name (_HID, "INT00000")  // _HID: Hardware ID
                Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                Name (_UID, One)  // _UID: Unique ID
                Name (CADR, Zero)
                Name (CDIS, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If (LEqual (I2SC, One))
                    {
                        Store ("INT34C2", _HID)
                        Store ("INT34C2", _CID)
                        Store (0x1C, CADR)
                    }
                    ElseIf (LEqual (I2SC, 0x02))
                    {
                        Store ("10EC1308", _HID)
                        Store ("10EC1308", _CID)
                        Store (0x10, CADR)
                    }
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (ConcatenateResTemplate (IICB (CADR, I2SB), INTB (I2SI, Zero, Zero)))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (LAnd (LNotEqual (I2SC, Zero), LNotEqual (CDIS, One)))
                    {
                        Return (0x0F)
                    }

                    If (LEqual (CDIS, One))
                    {
                        Return (0x0D)
                    }

                    Return (Zero)
                }

                Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                {
                    Store (Zero, CDIS)
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    Store (One, CDIS)
                }
            }
        }
    }
    ElseIf (LEqual (I2SB, 0x04))
    {
        Scope (_SB.PC00.I2C4)
        {
            Device (HDAC)
            {
                Name (_HID, "INT00000")  // _HID: Hardware ID
                Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                Name (_UID, One)  // _UID: Unique ID
                Name (CADR, Zero)
                Name (CDIS, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If (LEqual (I2SC, One))
                    {
                        Store ("INT34C2", _HID)
                        Store ("INT34C2", _CID)
                        Store (0x1C, CADR)
                    }
                    ElseIf (LEqual (I2SC, 0x02))
                    {
                        Store ("10EC1308", _HID)
                        Store ("10EC1308", _CID)
                        Store (0x10, CADR)
                    }
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (ConcatenateResTemplate (IICB (CADR, I2SB), INTB (I2SI, Zero, Zero)))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (LAnd (LNotEqual (I2SC, Zero), LNotEqual (CDIS, One)))
                    {
                        Return (0x0F)
                    }

                    If (LEqual (CDIS, One))
                    {
                        Return (0x0D)
                    }

                    Return (Zero)
                }

                Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                {
                    Store (Zero, CDIS)
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    Store (One, CDIS)
                }
            }
        }
    }
    ElseIf (LEqual (I2SB, 0x05))
    {
        Scope (_SB.PC00.I2C5)
        {
            Device (HDAC)
            {
                Name (_HID, "INT00000")  // _HID: Hardware ID
                Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                Name (_UID, One)  // _UID: Unique ID
                Name (CADR, Zero)
                Name (CDIS, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If (LEqual (I2SC, One))
                    {
                        Store ("INT34C2", _HID)
                        Store ("INT34C2", _CID)
                        Store (0x1C, CADR)
                    }
                    ElseIf (LEqual (I2SC, 0x02))
                    {
                        Store ("10EC1308", _HID)
                        Store ("10EC1308", _CID)
                        Store (0x10, CADR)
                    }
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (ConcatenateResTemplate (IICB (CADR, I2SB), INTB (I2SI, Zero, Zero)))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (LAnd (LNotEqual (I2SC, Zero), LNotEqual (CDIS, One)))
                    {
                        Return (0x0F)
                    }

                    If (LEqual (CDIS, One))
                    {
                        Return (0x0D)
                    }

                    Return (Zero)
                }

                Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                {
                    Store (Zero, CDIS)
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    Store (One, CDIS)
                }
            }
        }
    }

    Scope (_SB.PC00.HDAS)
    {
        Method (PPMS, 1, Serialized)
        {
            If (LEqual (Arg0, ToUUID ("7c708106-3aff-40fe-88be-8c999b3f7445")))
            {
                Return (And (ADPM, 0x04))
            }

            If (LEqual (Arg0, ToUUID ("ec774fa9-28d3-424a-90e4-69f984f1eeb7")))
            {
                Return (And (ADPM, 0x0100))
            }

            If (LEqual (Arg0, ACCG (AG1L, AG1H)))
            {
                Return (And (ADPM, 0x20000000))
            }

            If (LEqual (Arg0, ACCG (AG2L, AG2H)))
            {
                Return (And (ADPM, 0x40000000))
            }

            If (LEqual (Arg0, ACCG (AG3L, AG3H)))
            {
                Return (And (ADPM, 0x80000000))
            }

            Return (Zero)
        }

        Method (ACCG, 2, NotSerialized)
        {
            Name (GBUF, Buffer (0x10){})
            Concatenate (Arg0, Arg1, GBUF)
            Return (GBUF)
        }
    }

    Scope (_SB)
    {
        Device (HIDD)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                If (LEqual (And (CPID, 0x0FFF0FF0), 0x000B0670))
                {
                    Return ("INTC1078")
                }
                ElseIf (LEqual (And (CPID, 0x0FFF0FF0), 0x000B06F0))
                {
                    Return ("INTC1078")
                }
                ElseIf (LEqual (And (CPID, 0x0FFF0FF0), 0x000B06A0))
                {
                    Return ("INTC1078")
                }

                Return ("INTC1070")
            }

            Name (HBSY, Zero)
            Name (HIDX, Zero)
            Name (HMDE, Zero)
            Name (HRDY, Zero)
            Name (BTLD, Zero)
            Name (BTS1, Zero)
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (LAnd (LGreaterEqual (OSYS, 0x07DD), LEqual (HEFE, One)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (HDDM, 0, Serialized)
            {
                Name (DPKG, Package (0x04)
                {
                    0x11111111, 
                    0x22222222, 
                    0x33333333, 
                    0x44444444
                })
                Return (DPKG)
            }

            Method (HDEM, 0, Serialized)
            {
                Store (Zero, HBSY)
                If (LEqual (HMDE, Zero))
                {
                    Return (HIDX)
                }

                Return (HMDE)
            }

            Method (HDMM, 0, Serialized)
            {
                Return (HMDE)
            }

            Method (HDSM, 1, Serialized)
            {
                Store (Arg0, HRDY)
            }

            Method (HPEM, 1, Serialized)
            {
                Store (One, HBSY)
                If (LEqual (HMDE, Zero))
                {
                    Store (Arg0, HIDX)
                }
                Else
                {
                    Store (Arg0, HIDX)
                }

                Notify (HIDD, 0xC0)
                Store (Zero, Local0)
                While (LAnd (LLess (Local0, 0xFA), HBSY))
                {
                    Sleep (0x04)
                    Increment (Local0)
                }

                If (LEqual (HBSY, One))
                {
                    Store (Zero, HBSY)
                    Store (Zero, HIDX)
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Method (ISAR, 4, NotSerialized)
    {
        Name (BUF1, Buffer (0x02)
        {
             0x00, 0x00                                     
        })
        If (LEqual (Arg0, ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
        {
            If (LEqual (Arg2, 0x03))
            {
                If (CondRefOf (\_SB.USSV))
                {
                    Store (DerefOf (Index (Arg3, One)), Local1)
                    Add (Local1, One, Local1)
                    Store (DerefOf (Index (Arg3, 0x02)), Local2)
                    Add (Local2, One, Local2)
                    ShiftLeft (Local2, 0x10, Local2)
                    Or (Local2, Local1, Local2)
                    \_SB.USSV (Local2)
                    Notify (\_SB.WFDE, 0xD0)
                }

                Return (Zero)
            }
            Else
            {
                Return (Zero)
            }
        }
        Else
        {
            Return (Buffer (One)
            {
                 0x00                                           
            })
        }
    }

    Method (DDMS, 0, NotSerialized)
    {
        If (LAnd (CondRefOf (\DPIW), LAnd (DPIW, 0x02)))
        {
            If (\_SB.PC00.GFX0.IPCO ())
            {
                If (CondRefOf (\DPG1))
                {
                    \_SB.SGOV (DPG1, One)
                }
                Else
                {
                }
            }
            Else
            {
            }
        }
        Else
        {
        }
    }

    Method (HIDW, 4, Serialized)
    {
        If (LEqual (Arg0, ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
        {
            If (LEqual (Arg2, Zero))
            {
                If (LEqual (Arg1, Zero))
                {
                    Return (Buffer (One)
                    {
                         0x03                                           
                    })
                }
                Else
                {
                    Return (Zero)
                }
            }

            If (LEqual (Arg2, One))
            {
                Switch (ToInteger (DerefOf (Index (Arg3, Zero))))
                {
                    Case (Zero)
                    {
                        If (CondRefOf (\_SB.HIDD.HPEM))
                        {
                            P8XH (Zero, 0x5C)
                        }
                    }
                    Case (One)
                    {
                        If (CondRefOf (\_SB.SLPB))
                        {
                            Notify (\_SB.SLPB, 0x80)
                            P8XH (Zero, 0x5D)
                        }
                    }
                    Case (0x02)
                    {
                    }
                    Case (0x03)
                    {
                    }

                }

                Return (Zero)
            }
            Else
            {
                Return (Zero)
            }
        }
        Else
        {
            Return (Buffer (One)
            {
                 0x00                                           
            })
        }
    }

    Method (HIWC, 1, NotSerialized)
    {
        If (LEqual (Arg0, ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
        {
            Return (One)
        }

        Return (Zero)
    }

    Scope (\)
    {
        PowerResource (PIN, 0x00, 0x0000)
        {
            Method (STA, 1, Serialized)
            {
                If (LEqual (\_SB.GGOV (DerefOf (Index (Arg0, Zero))), DerefOf (Index (Arg0, One))))
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (ON, 1, Serialized)
            {
                \_SB.SGOV (DerefOf (Index (Arg0, Zero)), DerefOf (Index (Arg0, One)))
            }

            Method (OFF, 1, Serialized)
            {
                \_SB.SGOV (DerefOf (Index (Arg0, Zero)), Not (DerefOf (Index (Arg0, One))))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (Zero)
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
            }
        }
    }

    Scope (_SB)
    {
        Name (C0PF, Package (0x01)
        {
            Buffer (0x14)
            {
                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x20, 0x03, 0xD0, 0x07,
                /* 0008 */  0x41, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01,
                /* 0010 */  0x00, 0x00, 0x00, 0x00                         
            }
        })
        Name (C1PF, Package (0x01)
        {
            Buffer (0x14)
            {
                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x20, 0x03, 0xD0, 0x07,
                /* 0008 */  0x41, 0x0E, 0x00, 0x00, 0x04, 0x00, 0x80, 0x01,
                /* 0010 */  0x00, 0x00, 0x00, 0x00                         
            }
        })
    }

    Scope (\)
    {
        Method (PLD1, 0, Serialized)
        {
            Return (\_SB.C0PF)
        }
    }

    Scope (\)
    {
        Method (PLD2, 0, Serialized)
        {
            Return (\_SB.C1PF)
        }
    }

    Scope (_SB.PC00.THC0)
    {
        Device (TLC1)
        {
            Name (_ADR, One)  // _ADR: Address
            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (C0PF)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (TLC2)
        {
            Name (_ADR, 0x02)  // _ADR: Address
            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (C0PF)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (TLC3)
        {
            Name (_ADR, 0x03)  // _ADR: Address
            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (C0PF)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }

    Scope (_SB.PC00.THC1)
    {
        Device (TLC1)
        {
            Name (_ADR, One)  // _ADR: Address
            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (C1PF)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (TLC2)
        {
            Name (_ADR, 0x02)  // _ADR: Address
            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (C1PF)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (TLC3)
        {
            Name (_ADR, 0x03)  // _ADR: Address
            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Return (C1PF)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }

    Name (DEVM, 0xFF)
    Scope (_SB)
    {
        Device (WCCD)
        {
            Name (_HID, "INTC1092")  // _HID: Hardware ID
            Name (_STR, Unicode ("Wireless Connectivity Configuration Device"))  // _STR: Description String
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Store (Zero, DEVM)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (LAnd (LNotEqual (WWEN, Zero), LEqual (WCEN, One)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (WCS0, Package (0x04)
            {
                Zero, 
                Package (0x04)
                {
                    Zero, 
                    One, 
                    0x02, 
                    0x03
                }, 

                Package (0x04)
                {
                    One, 
                    0x02, 
                    0x03, 
                    One
                }, 

                Package (0x04)
                {
                    0x02, 
                    0x03, 
                    One, 
                    0x02
                }
            })
            Name (WCS1, Package (0x04)
            {
                One, 
                Package (0x04)
                {
                    Zero, 
                    0x02, 
                    0x03, 
                    One
                }, 

                Package (0x04)
                {
                    One, 
                    0x03, 
                    One, 
                    0x02
                }, 

                Package (0x04)
                {
                    0x02, 
                    One, 
                    0x02, 
                    0x03
                }
            })
            Name (WCS2, Package (0x04)
            {
                0x02, 
                Package (0x04)
                {
                    Zero, 
                    0x03, 
                    One, 
                    0x02
                }, 

                Package (0x04)
                {
                    One, 
                    One, 
                    0x02, 
                    0x03
                }, 

                Package (0x04)
                {
                    0x02, 
                    0x02, 
                    0x03, 
                    One
                }
            })
            Name (WDMC, Package (0x03)
            {
                Zero, 
                0x03, 
                Package (0x04)
                {
                    Zero, 
                    Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg0, ToUUID ("82737e72-3a33-4c45-a9c7-57c0411a5f13")))
                {
                    If (LEqual (Arg2, Zero))
                    {
                        If (LEqual (Arg1, Zero))
                        {
                            Store (0x07, Local0)
                            Return (Local0)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If (LEqual (Arg2, One))
                    {
                        Return (DEVM)
                    }

                    If (LEqual (Arg2, 0x02))
                    {
                        If (LEqual (Arg3, Zero))
                        {
                            Store (WCS0, Index (WDMC, 0x02))
                        }
                        ElseIf (LEqual (Arg3, One))
                        {
                            Store (WCS1, Index (WDMC, 0x02))
                        }
                        ElseIf (LEqual (Arg3, 0x02))
                        {
                            Store (WCS2, Index (WDMC, 0x02))
                        }
                        Else
                        {
                        }

                        Return (WDMC)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    If (LAnd (LNotEqual (CVFS, Zero), LLessEqual (CVFS, 0x02)))
    {
        Scope (_SB.PC00)
        {
            Method (GCID, 0, Serialized)
            {
                Switch (And (CPID, 0x0FFF0FF0))
                {
                    Case (0x000B0670)
                    {
                        Return (Zero)
                    }
                    Case (0x000B06A0)
                    {
                        Return (Zero)
                    }
                    Case (0x000B06F0)
                    {
                        Return (Zero)
                    }
                    Default
                    {
                        Return (One)
                    }

                }
            }
        }

        Scope (_SB.PC00.SPI1)
        {
            Device (SPFD)
            {
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    Store (GCID (), Local0)
                    If (LEqual (Zero, Local0))
                    {
                        Return ("INTC1009")
                    }
                    Else
                    {
                        Return ("INTC1094")
                    }
                }

                Name (_DDN, "Intel SPI OED Device")  // _DDN: DOS Device Name
                Name (PKG0, Package (0x02)
                {
                    "\\_SB.PC00.XHCI.RHUB.HS07.VGPO", 
                    "\\_SB.PC00.XHCI.RHUB.HS07.VSPI"
                })
                Name (PKG1, Package (0x02)
                {
                    "\\_SB.PC00.XHCI.RHUB.HS06.VGPO", 
                    "\\_SB.PC00.XHCI.RHUB.HS06.VSPI"
                })
                Name (PKG2, Package (0x02)
                {
                    "\\_SB.PC00.XHCI.RHUB.HS08.VGPO", 
                    "\\_SB.PC00.XHCI.RHUB.HS08.VSPI"
                })
                Name (PKG3, Package (0x02)
                {
                    "\\_SB.PC00.XHCI.RHUB.HS03.VGPO", 
                    "\\_SB.PC00.XHCI.RHUB.HS03.VSPI"
                })
                Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
                {
                    If (LEqual (CVFS, 0x02))
                    {
                        If (LEqual (CUPN, 0x06))
                        {
                            Return (PKG1)
                        }
                        ElseIf (LEqual (CUPN, 0x07))
                        {
                            Return (PKG0)
                        }
                        ElseIf (LEqual (CUPN, 0x08))
                        {
                            Return (PKG2)
                        }
                        ElseIf (LEqual (CUPN, 0x03))
                        {
                            Return (PKG3)
                        }

                        Return (Package (0x00){})
                    }
                    Else
                    {
                        Return (Package (0x01)
                        {
                            PC00
                        })
                    }
                }

                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (CBUF, ResourceTemplate ()
                    {
                        GpioIo (Shared, PullDefault, 0x0000, 0x0000, IoRestrictionInputOnly,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0017
                            }
                        GpioInt (Edge, ActiveLow, Shared, PullDefault, 0x0000,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0017
                            }
                    })
                    Name (CRBF, ResourceTemplate ()
                    {
                        GpioIo (Shared, PullDefault, 0x0000, 0x0000, IoRestrictionInputOnly,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0150
                            }
                        GpioInt (Edge, ActiveLow, Shared, PullDefault, 0x0000,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0150
                            }
                    })
                    Name (CABF, ResourceTemplate ()
                    {
                        GpioIo (Shared, PullDefault, 0x0000, 0x0000, IoRestrictionInputOnly,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0047
                            }
                        GpioInt (Edge, ActiveLow, Shared, PullDefault, 0x0000,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0047
                            }
                    })
                    Name (GBUF, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0165
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x000E
                            }
                    })
                    Name (GRBF, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x014F
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x000E
                            }
                    })
                    Name (VGBF, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.PC00.XHCI.RHUB.HS07.VGPO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0000
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.PC00.XHCI.RHUB.HS07.VGPO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0001
                            }
                    })
                    Name (VGB1, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.PC00.XHCI.RHUB.HS06.VGPO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0000
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.PC00.XHCI.RHUB.HS06.VGPO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0001
                            }
                    })
                    Name (VGB2, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.PC00.XHCI.RHUB.HS08.VGPO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0000
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.PC00.XHCI.RHUB.HS08.VGPO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0001
                            }
                    })
                    Name (VGB3, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.PC00.XHCI.RHUB.HS03.VGPO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0000
                            }
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.PC00.XHCI.RHUB.HS03.VGPO", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0001
                            }
                    })
                    Name (SBUF, ResourceTemplate ()
                    {
                        SpiSerialBusV2 (0x0000, PolarityLow, FourWireMode, 0x08,
                            ControllerInitiated, 0x00D59F80, ClockPolarityHigh,
                            ClockPhaseSecond, "\\_SB.PC00.SPI1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Name (VSBF, ResourceTemplate ()
                    {
                        SpiSerialBusV2 (0x0000, PolarityLow, FourWireMode, 0x08,
                            ControllerInitiated, 0x00D59F80, ClockPolarityHigh,
                            ClockPhaseSecond, "\\_SB.PC00.XHCI.RHUB.HS07.VSPI",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Name (VSB1, ResourceTemplate ()
                    {
                        SpiSerialBusV2 (0x0000, PolarityLow, FourWireMode, 0x08,
                            ControllerInitiated, 0x00D59F80, ClockPolarityHigh,
                            ClockPhaseSecond, "\\_SB.PC00.XHCI.RHUB.HS06.VSPI",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Name (VSB2, ResourceTemplate ()
                    {
                        SpiSerialBusV2 (0x0000, PolarityLow, FourWireMode, 0x08,
                            ControllerInitiated, 0x00D59F80, ClockPolarityHigh,
                            ClockPhaseSecond, "\\_SB.PC00.XHCI.RHUB.HS08.VSPI",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Name (VSB3, ResourceTemplate ()
                    {
                        SpiSerialBusV2 (0x0000, PolarityLow, FourWireMode, 0x08,
                            ControllerInitiated, 0x00D59F80, ClockPolarityHigh,
                            ClockPhaseSecond, "\\_SB.PC00.XHCI.RHUB.HS03.VSPI",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    If (LEqual (CVFS, 0x02))
                    {
                        If (LEqual (CUPN, 0x06))
                        {
                            Return (ConcatenateResTemplate (ConcatenateResTemplate (CBUF, VGB1), VSB1))
                        }
                        ElseIf (LEqual (CUPN, 0x07))
                        {
                            If (LOr (LOr (LEqual (ToInteger (PLID), 0x0B), LEqual (ToInteger (PLID), 0x0A)), LEqual (ToInteger (PLID), 0x0C)))
                            {
                                Return (ConcatenateResTemplate (ConcatenateResTemplate (CRBF, VGBF), VSBF))
                            }

                            Return (ConcatenateResTemplate (ConcatenateResTemplate (CBUF, VGBF), VSBF))
                        }
                        ElseIf (LEqual (CUPN, 0x08))
                        {
                            If (LOr (LEqual (ToInteger (PLID), 0x1F), LEqual (ToInteger (PLID), 0x1E)))
                            {
                                Return (ConcatenateResTemplate (ConcatenateResTemplate (CABF, VGB2), VSB2))
                            }

                            Return (ConcatenateResTemplate (ConcatenateResTemplate (CBUF, VGB2), VSB2))
                        }
                        ElseIf (LEqual (CUPN, 0x03))
                        {
                            Return (ConcatenateResTemplate (ConcatenateResTemplate (CBUF, VGB3), VSB3))
                        }

                        Return (ResourceTemplate ()
                        {
                            GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionNone,
                                "\\_SB.PC00.XHCI.RHUB.HSXX.VGPO", 0x00, ResourceConsumer, ,
                                )
                                {   // Pin list
                                    0x0000
                                }
                        })
                    }
                    Else
                    {
                        If (LOr (LEqual (ToInteger (PLID), 0x0B), LEqual (ToInteger (PLID), 0x0A)))
                        {
                            Return (ConcatenateResTemplate (ConcatenateResTemplate (CRBF, GRBF), SBUF))
                        }

                        Return (ConcatenateResTemplate (ConcatenateResTemplate (CBUF, GBUF), SBUF))
                    }
                }

                Device (CVFD)
                {
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        Store (GCID (), Local0)
                        If (LEqual (Zero, Local0))
                        {
                            Return ("INTC100A")
                        }
                        Else
                        {
                            Return ("INTC1095")
                        }
                    }

                    Name (_DDN, "Intel CVF Device")  // _DDN: DOS Device Name
                    Method (SID, 1, Serialized)
                    {
                        Return (HCID (One))
                    }
                }
            }
        }

        If (LEqual (CUPN, 0x06))
        {
            Scope (_SB.PC00.XHCI.RHUB.HS06)
            {
                If (LEqual (CVFS, 0x02))
                {
                    Device (VGPO)
                    {
                        Name (_UID, "VGPO")  // _UID: Unique ID
                        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                        {
                            Store (GCID (), Local0)
                            If (LEqual (Zero, Local0))
                            {
                                Return ("INTC100B")
                            }
                            Else
                            {
                                Return ("INTC1096")
                            }
                        }

                        Name (_DDN, "Intel UsbGpio Device")  // _DDN: DOS Device Name
                    }

                    Device (VIC0)
                    {
                        Name (_UID, "VIC0")  // _UID: Unique ID
                        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                        {
                            Store (GCID (), Local0)
                            If (LEqual (Zero, Local0))
                            {
                                Return ("INTC100C")
                            }
                            Else
                            {
                                Return ("INTC1097")
                            }
                        }

                        Name (_DDN, "Intel UsbI2C Device")  // _DDN: DOS Device Name
                    }

                    Device (VIC1)
                    {
                        Name (_UID, "VIC1")  // _UID: Unique ID
                        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                        {
                            Store (GCID (), Local0)
                            If (LEqual (Zero, Local0))
                            {
                                Return ("INTC100C")
                            }
                            Else
                            {
                                Return ("INTC1097")
                            }
                        }

                        Name (_DDN, "Intel UsbI2C Device")  // _DDN: DOS Device Name
                    }

                    Device (VSPI)
                    {
                        Name (_UID, "VSPI")  // _UID: Unique ID
                        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                        {
                            Store (GCID (), Local0)
                            If (LEqual (Zero, Local0))
                            {
                                Return ("INTC100D")
                            }
                            Else
                            {
                                Return ("INTC1098")
                            }
                        }

                        Name (_DDN, "Intel UsbSPI Device")  // _DDN: DOS Device Name
                    }
                }
            }
        }
        ElseIf (LEqual (CUPN, 0x07))
        {
            Scope (_SB.PC00.XHCI.RHUB.HS07)
            {
                If (LEqual (CVFS, 0x02))
                {
                    Device (VGPO)
                    {
                        Name (_UID, "VGPO")  // _UID: Unique ID
                        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                        {
                            Store (GCID (), Local0)
                            If (LEqual (Zero, Local0))
                            {
                                Return ("INTC100B")
                            }
                            Else
                            {
                                Return ("INTC1096")
                            }
                        }

                        Name (_DDN, "Intel UsbGpio Device")  // _DDN: DOS Device Name
                    }

                    Device (VIC0)
                    {
                        Name (_UID, "VIC0")  // _UID: Unique ID
                        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                        {
                            Store (GCID (), Local0)
                            If (LEqual (Zero, Local0))
                            {
                                Return ("INTC100C")
                            }
                            Else
                            {
                                Return ("INTC1097")
                            }
                        }

                        Name (_DDN, "Intel UsbI2C Device")  // _DDN: DOS Device Name
                    }

                    Device (VIC1)
                    {
                        Name (_UID, "VIC1")  // _UID: Unique ID
                        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                        {
                            Store (GCID (), Local0)
                            If (LEqual (Zero, Local0))
                            {
                                Return ("INTC100C")
                            }
                            Else
                            {
                                Return ("INTC1097")
                            }
                        }

                        Name (_DDN, "Intel UsbI2C Device")  // _DDN: DOS Device Name
                    }

                    Device (VSPI)
                    {
                        Name (_UID, "VSPI")  // _UID: Unique ID
                        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                        {
                            Store (GCID (), Local0)
                            If (LEqual (Zero, Local0))
                            {
                                Return ("INTC100D")
                            }
                            Else
                            {
                                Return ("INTC1098")
                            }
                        }

                        Name (_DDN, "Intel UsbSPI Device")  // _DDN: DOS Device Name
                    }
                }
            }
        }
        ElseIf (LEqual (CUPN, 0x08))
        {
            Scope (_SB.PC00.XHCI.RHUB.HS08)
            {
                If (LEqual (CVFS, 0x02))
                {
                    Device (VGPO)
                    {
                        Name (_UID, "VGPO")  // _UID: Unique ID
                        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                        {
                            Store (GCID (), Local0)
                            If (LEqual (Zero, Local0))
                            {
                                Return ("INTC100B")
                            }
                            Else
                            {
                                Return ("INTC1096")
                            }
                        }

                        Name (_DDN, "Intel UsbGpio Device")  // _DDN: DOS Device Name
                    }

                    Device (VIC0)
                    {
                        Name (_UID, "VIC0")  // _UID: Unique ID
                        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                        {
                            Store (GCID (), Local0)
                            If (LEqual (Zero, Local0))
                            {
                                Return ("INTC100C")
                            }
                            Else
                            {
                                Return ("INTC1097")
                            }
                        }

                        Name (_DDN, "Intel UsbI2C Device")  // _DDN: DOS Device Name
                    }

                    Device (VIC1)
                    {
                        Name (_UID, "VIC1")  // _UID: Unique ID
                        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                        {
                            Store (GCID (), Local0)
                            If (LEqual (Zero, Local0))
                            {
                                Return ("INTC100C")
                            }
                            Else
                            {
                                Return ("INTC1097")
                            }
                        }

                        Name (_DDN, "Intel UsbI2C Device")  // _DDN: DOS Device Name
                    }

                    Device (VSPI)
                    {
                        Name (_UID, "VSPI")  // _UID: Unique ID
                        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                        {
                            Store (GCID (), Local0)
                            If (LEqual (Zero, Local0))
                            {
                                Return ("INTC100D")
                            }
                            Else
                            {
                                Return ("INTC1098")
                            }
                        }

                        Name (_DDN, "Intel UsbSPI Device")  // _DDN: DOS Device Name
                    }
                }
            }
        }
        ElseIf (LEqual (CUPN, 0x03))
        {
            Scope (_SB.PC00.XHCI.RHUB.HS03)
            {
                If (LEqual (CVFS, 0x02))
                {
                    Device (VGPO)
                    {
                        Name (_UID, "VGPO")  // _UID: Unique ID
                        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                        {
                            Store (GCID (), Local0)
                            If (LEqual (Zero, Local0))
                            {
                                Return ("INTC100B")
                            }
                            Else
                            {
                                Return ("INTC1096")
                            }
                        }

                        Name (_DDN, "Intel UsbGpio Device")  // _DDN: DOS Device Name
                    }

                    Device (VIC0)
                    {
                        Name (_UID, "VIC0")  // _UID: Unique ID
                        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                        {
                            Store (GCID (), Local0)
                            If (LEqual (Zero, Local0))
                            {
                                Return ("INTC100C")
                            }
                            Else
                            {
                                Return ("INTC1097")
                            }
                        }

                        Name (_DDN, "Intel UsbI2C Device")  // _DDN: DOS Device Name
                    }

                    Device (VIC1)
                    {
                        Name (_UID, "VIC1")  // _UID: Unique ID
                        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                        {
                            Store (GCID (), Local0)
                            If (LEqual (Zero, Local0))
                            {
                                Return ("INTC100C")
                            }
                            Else
                            {
                                Return ("INTC1097")
                            }
                        }

                        Name (_DDN, "Intel UsbI2C Device")  // _DDN: DOS Device Name
                    }

                    Device (VSPI)
                    {
                        Name (_UID, "VSPI")  // _UID: Unique ID
                        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                        {
                            Store (GCID (), Local0)
                            If (LEqual (Zero, Local0))
                            {
                                Return ("INTC100D")
                            }
                            Else
                            {
                                Return ("INTC1098")
                            }
                        }

                        Name (_DDN, "Intel UsbSPI Device")  // _DDN: DOS Device Name
                    }
                }
            }
        }
    }

    If (LEqual (VMDE, One))
    {
        Name (VDSD, One)
        If (LEqual (STD3, Zero))
        {
            Store (Zero, VDSD)
        }

        Scope (_SB.PC00)
        {
            Device (VMD0)
            {
                Name (_ADR, 0x000E0000)  // _ADR: Address
                If (CondRefOf (\VDSD))
                {
                    If (LEqual (VDSD, One))
                    {
                        Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
                        {
                            ToUUID ("5025030f-842f-4ab4-a561-99a5189762d0"), 
                            Package (0x01)
                            {
                                Package (0x02)
                                {
                                    "StorageD3Enable", 
                                    One
                                }
                            }
                        })
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x03)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x03)
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If (CondRefOf (VMS0))
                    {
                        If (LNotEqual (VMS0, Zero))
                        {
                            Store (Zero, ISAT)
                        }
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If (CondRefOf (VMS0))
                    {
                        If (LNotEqual (VMS0, Zero))
                        {
                            Store (One, ISAT)
                        }
                    }
                }

                Method (CBAR, 3, Serialized)
                {
                    Name (VCFB, Zero)
                    Store (XBAS, VCFB)
                    Or (VCFB, Zero, VCFB)
                    Or (VCFB, 0x00070000, VCFB)
                    Or (VCFB, Zero, VCFB)
                    OperationRegion (VCFG, SystemMemory, VCFB, 0x0100)
                    Field (VCFG, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0x10), 
                        BAR0,   64
                    }

                    Name (DCFB, Zero)
                    Store (BAR0, DCFB)
                    And (DCFB, 0xFFFFFFFFFFFFFFF0, DCFB)
                    Or (DCFB, ShiftLeft (Arg0, 0x14), DCFB)
                    Or (DCFB, ShiftLeft (Arg1, 0x0F), DCFB)
                    Or (DCFB, ShiftLeft (Arg2, 0x0C), DCFB)
                    Return (DCFB)
                }

                Device (NVDR)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (LEqual (DPMS, One))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (LEqual (Arg0, ToUUID ("a3316317-e8b6-4adf-96e8-94d94a51a38e")))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Switch (ToInteger (Arg1))
                                    {
                                        Case (One)
                                        {
                                            Return (0x03)
                                        }
                                        Default
                                        {
                                            Return (Zero)
                                        }

                                    }
                                }
                                Case (One)
                                {
                                    Name (PPAR, Package (0x01)
                                    {
                                        Buffer (0x18){}
                                    })
                                    CreateWordField (DerefOf (Index (PPAR, Zero)), Zero, DPM0)
                                    CreateWordField (DerefOf (Index (PPAR, Zero)), 0x02, DPM1)
                                    CreateDWordField (DerefOf (Index (PPAR, Zero)), 0x04, DPM2)
                                    CreateQWordField (DerefOf (Index (PPAR, Zero)), 0x08, DPM3)
                                    CreateQWordField (DerefOf (Index (PPAR, Zero)), 0x10, DPM4)
                                    If (LEqual (DPMS, Zero))
                                    {
                                        Store (0x02, DPM0)
                                        Store (Zero, DPM1)
                                        Store (Zero, DPM3)
                                        Store (Zero, DPM4)
                                        Return (PPAR)
                                    }
                                    Else
                                    {
                                        Store (Zero, DPM0)
                                        Store (Zero, DPM1)
                                        Store (PMSA, DPM3)
                                        Store (PMRL, DPM4)
                                        Return (PPAR)
                                    }
                                }

                            }

                            Return (Zero)
                        }
                        Else
                        {
                            Return (^^^^NVDR._DSM (Arg0, Arg1, Arg2, Arg3))
                        }
                    }

                    Device (NVD1)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (LEqual (DPMS, One))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_LSI, 0, NotSerialized)  // _LSI: Label Storage Information
                        {
                            Return (\_SB.NVDR.NVD1._LSI ())
                        }

                        Method (_LSR, 2, Serialized)  // _LSR: Label Storage Read
                        {
                            Return (\_SB.NVDR.NVD1._LSR (Arg0, Arg1))
                        }

                        Method (_LSW, 3, Serialized)  // _LSW: Label Storage Write
                        {
                            Return (\_SB.NVDR.NVD1._LSW (Arg0, Arg1, Arg2))
                        }

                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            Return (\_SB.NVDR.NVD1._DSM (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }

                Device (RP01)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, Zero)
                    Name (RSPT, One)
                    Name (RSPI, Zero)
                    Name (_ADR, 0x80E0FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If (LEqual (VDID, 0xFFFFFFFF))
                            {
                                Notify (^, Zero)
                                Store (0xC8, Local1)
                                While (LGreater (Local1, Zero))
                                {
                                    Store (Subtract (Local1, One), Local1)
                                    If (LNotEqual (VDID, 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If (LEqual (ID3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        Store (Zero, ID3C)
                        
                        Return (Zero)
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        Store (One, ID3C)
                        
                        Return (Zero)
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        Store (One, L23E)
                        Sleep (0x10)
                        Store (Zero, Local0)
                        While (L23E)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (One, SCB0)
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If (LNotEqual (SCB0, One))
                        {
                            Return (Zero)
                        }

                        Store (One, L23R)
                        Store (Zero, Local0)
                        While (L23R)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (Zero, SCB0)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }
                        
                        Return (Zero)
                    }
                }

                Device (RP02)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, One)
                    Name (RSPT, One)
                    Name (RSPI, One)
                    Name (_ADR, 0x80E1FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If (LEqual (VDID, 0xFFFFFFFF))
                            {
                                Notify (^, Zero)
                                Store (0xC8, Local1)
                                While (LGreater (Local1, Zero))
                                {
                                    Store (Subtract (Local1, One), Local1)
                                    If (LNotEqual (VDID, 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If (LEqual (ID3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        Store (Zero, ID3C)
                        
                        Return (Zero)
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        Store (One, ID3C)
                        
                        Return (Zero)
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        Store (One, L23E)
                        Sleep (0x10)
                        Store (Zero, Local0)
                        While (L23E)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (One, SCB0)
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If (LNotEqual (SCB0, One))
                        {
                            Return (Zero)
                        }

                        Store (One, L23R)
                        Store (Zero, Local0)
                        While (L23R)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (Zero, SCB0)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }
                        
                        Return (Zero)
                    }
                }

                Device (RP03)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, 0x02)
                    Name (RSPT, One)
                    Name (RSPI, 0x02)
                    Name (_ADR, 0x80E2FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If (LEqual (VDID, 0xFFFFFFFF))
                            {
                                Notify (^, Zero)
                                Store (0xC8, Local1)
                                While (LGreater (Local1, Zero))
                                {
                                    Store (Subtract (Local1, One), Local1)
                                    If (LNotEqual (VDID, 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If (LEqual (ID3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        Store (Zero, ID3C)
                        
                        Return (Zero)
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        Store (One, ID3C)
                        
                        Return (Zero)
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        Store (One, L23E)
                        Sleep (0x10)
                        Store (Zero, Local0)
                        While (L23E)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (One, SCB0)
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If (LNotEqual (SCB0, One))
                        {
                            Return (Zero)
                        }

                        Store (One, L23R)
                        Store (Zero, Local0)
                        While (L23R)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (Zero, SCB0)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }
                        
                        Return (Zero)
                    }
                }

                Device (RP04)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, 0x03)
                    Name (RSPT, One)
                    Name (RSPI, 0x03)
                    Name (_ADR, 0x80E3FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If (LEqual (VDID, 0xFFFFFFFF))
                            {
                                Notify (^, Zero)
                                Store (0xC8, Local1)
                                While (LGreater (Local1, Zero))
                                {
                                    Store (Subtract (Local1, One), Local1)
                                    If (LNotEqual (VDID, 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If (LEqual (ID3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        Store (Zero, ID3C)
                        
                        Return (Zero)
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        Store (One, ID3C)
                        
                        Return (Zero)
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        Store (One, L23E)
                        Sleep (0x10)
                        Store (Zero, Local0)
                        While (L23E)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (One, SCB0)
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If (LNotEqual (SCB0, One))
                        {
                            Return (Zero)
                        }

                        Store (One, L23R)
                        Store (Zero, Local0)
                        While (L23R)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (Zero, SCB0)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }
                        
                        Return (Zero)
                    }
                }

                Device (RP05)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, 0x04)
                    Name (RSPT, One)
                    Name (RSPI, 0x04)
                    Name (_ADR, 0x80E4FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If (LEqual (VDID, 0xFFFFFFFF))
                            {
                                Notify (^, Zero)
                                Store (0xC8, Local1)
                                While (LGreater (Local1, Zero))
                                {
                                    Store (Subtract (Local1, One), Local1)
                                    If (LNotEqual (VDID, 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If (LEqual (ID3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        Store (Zero, ID3C)
                        
                        Return (Zero)
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        Store (One, ID3C)
                        
                        Return (Zero)
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        Store (One, L23E)
                        Sleep (0x10)
                        Store (Zero, Local0)
                        While (L23E)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (One, SCB0)
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If (LNotEqual (SCB0, One))
                        {
                            Return (Zero)
                        }

                        Store (One, L23R)
                        Store (Zero, Local0)
                        While (L23R)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (Zero, SCB0)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }
                        
                        Return (Zero)
                    }
                }

                Device (RP06)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, 0x05)
                    Name (RSPT, One)
                    Name (RSPI, 0x05)
                    Name (_ADR, 0x80E5FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If (LEqual (VDID, 0xFFFFFFFF))
                            {
                                Notify (^, Zero)
                                Store (0xC8, Local1)
                                While (LGreater (Local1, Zero))
                                {
                                    Store (Subtract (Local1, One), Local1)
                                    If (LNotEqual (VDID, 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If (LEqual (ID3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        Store (Zero, ID3C)
                        
                        Return (Zero)
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        Store (One, ID3C)
                        
                        Return (Zero)
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        Store (One, L23E)
                        Sleep (0x10)
                        Store (Zero, Local0)
                        While (L23E)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (One, SCB0)
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If (LNotEqual (SCB0, One))
                        {
                            Return (Zero)
                        }

                        Store (One, L23R)
                        Store (Zero, Local0)
                        While (L23R)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (Zero, SCB0)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }
                        
                        Return (Zero)
                    }
                }

                Device (RP07)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, 0x06)
                    Name (RSPT, One)
                    Name (RSPI, 0x06)
                    Name (_ADR, 0x80E6FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If (LEqual (VDID, 0xFFFFFFFF))
                            {
                                Notify (^, Zero)
                                Store (0xC8, Local1)
                                While (LGreater (Local1, Zero))
                                {
                                    Store (Subtract (Local1, One), Local1)
                                    If (LNotEqual (VDID, 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If (LEqual (ID3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        Store (Zero, ID3C)
                        
                        Return (Zero)
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        Store (One, ID3C)
                        
                        Return (Zero)
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        Store (One, L23E)
                        Sleep (0x10)
                        Store (Zero, Local0)
                        While (L23E)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (One, SCB0)
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If (LNotEqual (SCB0, One))
                        {
                            Return (Zero)
                        }

                        Store (One, L23R)
                        Store (Zero, Local0)
                        While (L23R)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (Zero, SCB0)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }
                        
                        Return (Zero)
                    }
                }

                Device (RP08)
                {
                    Name (RPD, 0x1C)
                    Name (RPF, 0x07)
                    Name (RSPT, One)
                    Name (RSPI, 0x07)
                    Name (_ADR, 0x80E7FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If (LEqual (VDID, 0xFFFFFFFF))
                            {
                                Notify (^, Zero)
                                Store (0xC8, Local1)
                                While (LGreater (Local1, Zero))
                                {
                                    Store (Subtract (Local1, One), Local1)
                                    If (LNotEqual (VDID, 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If (LEqual (ID3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        Store (Zero, ID3C)
                        
                        Return (Zero)
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        Store (One, ID3C)
                        
                        Return (Zero)
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        Store (One, L23E)
                        Sleep (0x10)
                        Store (Zero, Local0)
                        While (L23E)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (One, SCB0)
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If (LNotEqual (SCB0, One))
                        {
                            Return (Zero)
                        }

                        Store (One, L23R)
                        Store (Zero, Local0)
                        While (L23R)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (Zero, SCB0)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }
                        
                        Return (Zero)
                    }
                }

                Device (RP09)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, Zero)
                    Name (RSPT, One)
                    Name (RSPI, 0x08)
                    Name (_ADR, 0x80E8FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If (LEqual (VDID, 0xFFFFFFFF))
                            {
                                Notify (^, Zero)
                                Store (0xC8, Local1)
                                While (LGreater (Local1, Zero))
                                {
                                    Store (Subtract (Local1, One), Local1)
                                    If (LNotEqual (VDID, 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If (LEqual (ID3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        Store (Zero, ID3C)
                        
                        Return (Zero)
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        Store (One, ID3C)
                        
                        Return (Zero)
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        Store (One, L23E)
                        Sleep (0x10)
                        Store (Zero, Local0)
                        While (L23E)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (One, SCB0)
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If (LNotEqual (SCB0, One))
                        {
                            Return (Zero)
                        }

                        Store (One, L23R)
                        Store (Zero, Local0)
                        While (L23R)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (Zero, SCB0)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }
                        
                        Return (Zero)
                    }
                }

                Device (RP10)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, One)
                    Name (RSPT, One)
                    Name (RSPI, 0x09)
                    Name (_ADR, 0x80E9FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If (LEqual (VDID, 0xFFFFFFFF))
                            {
                                Notify (^, Zero)
                                Store (0xC8, Local1)
                                While (LGreater (Local1, Zero))
                                {
                                    Store (Subtract (Local1, One), Local1)
                                    If (LNotEqual (VDID, 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If (LEqual (ID3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        Store (Zero, ID3C)
                        
                        Return (Zero)
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        Store (One, ID3C)
                        
                        Return (Zero)
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        Store (One, L23E)
                        Sleep (0x10)
                        Store (Zero, Local0)
                        While (L23E)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (One, SCB0)
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If (LNotEqual (SCB0, One))
                        {
                            Return (Zero)
                        }

                        Store (One, L23R)
                        Store (Zero, Local0)
                        While (L23R)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (Zero, SCB0)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }
                        
                        Return (Zero)
                    }
                }

                Device (RP11)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, 0x02)
                    Name (RSPT, One)
                    Name (RSPI, 0x0A)
                    Name (_ADR, 0x80EAFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If (LEqual (VDID, 0xFFFFFFFF))
                            {
                                Notify (^, Zero)
                                Store (0xC8, Local1)
                                While (LGreater (Local1, Zero))
                                {
                                    Store (Subtract (Local1, One), Local1)
                                    If (LNotEqual (VDID, 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If (LEqual (ID3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        Store (Zero, ID3C)
                        
                        Return (Zero)
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        Store (One, ID3C)
                        
                        Return (Zero)
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        Store (One, L23E)
                        Sleep (0x10)
                        Store (Zero, Local0)
                        While (L23E)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (One, SCB0)
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If (LNotEqual (SCB0, One))
                        {
                            Return (Zero)
                        }

                        Store (One, L23R)
                        Store (Zero, Local0)
                        While (L23R)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (Zero, SCB0)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }
                        
                        Return (Zero)
                    }
                }

                Device (RP12)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, 0x03)
                    Name (RSPT, One)
                    Name (RSPI, 0x0B)
                    Name (_ADR, 0x80EBFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If (LEqual (VDID, 0xFFFFFFFF))
                            {
                                Notify (^, Zero)
                                Store (0xC8, Local1)
                                While (LGreater (Local1, Zero))
                                {
                                    Store (Subtract (Local1, One), Local1)
                                    If (LNotEqual (VDID, 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If (LEqual (ID3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        Store (Zero, ID3C)
                        
                        Return (Zero)
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        Store (One, ID3C)
                        
                        Return (Zero)
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        Store (One, L23E)
                        Sleep (0x10)
                        Store (Zero, Local0)
                        While (L23E)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (One, SCB0)
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If (LNotEqual (SCB0, One))
                        {
                            Return (Zero)
                        }

                        Store (One, L23R)
                        Store (Zero, Local0)
                        While (L23R)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (Zero, SCB0)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }
                        
                        Return (Zero)
                    }
                }

                Device (RP13)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, 0x04)
                    Name (RSPT, One)
                    Name (RSPI, 0x0C)
                    Name (_ADR, 0x80ECFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If (LEqual (VDID, 0xFFFFFFFF))
                            {
                                Notify (^, Zero)
                                Store (0xC8, Local1)
                                While (LGreater (Local1, Zero))
                                {
                                    Store (Subtract (Local1, One), Local1)
                                    If (LNotEqual (VDID, 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If (LEqual (ID3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        Store (Zero, ID3C)
                        
                        Return (Zero)
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        Store (One, ID3C)
                        
                        Return (Zero)
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        Store (One, L23E)
                        Sleep (0x10)
                        Store (Zero, Local0)
                        While (L23E)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (One, SCB0)
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If (LNotEqual (SCB0, One))
                        {
                            Return (Zero)
                        }

                        Store (One, L23R)
                        Store (Zero, Local0)
                        While (L23R)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (Zero, SCB0)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }
                        
                        Return (Zero)
                    }
                }

                Device (RP14)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, 0x05)
                    Name (RSPT, One)
                    Name (RSPI, 0x0D)
                    Name (_ADR, 0x80EDFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If (LEqual (VDID, 0xFFFFFFFF))
                            {
                                Notify (^, Zero)
                                Store (0xC8, Local1)
                                While (LGreater (Local1, Zero))
                                {
                                    Store (Subtract (Local1, One), Local1)
                                    If (LNotEqual (VDID, 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If (LEqual (ID3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        Store (Zero, ID3C)
                        
                        Return (Zero)
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        Store (One, ID3C)
                        
                        Return (Zero)
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        Store (One, L23E)
                        Sleep (0x10)
                        Store (Zero, Local0)
                        While (L23E)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (One, SCB0)
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If (LNotEqual (SCB0, One))
                        {
                            Return (Zero)
                        }

                        Store (One, L23R)
                        Store (Zero, Local0)
                        While (L23R)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (Zero, SCB0)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }
                        
                        Return (Zero)
                    }
                }

                Device (RP15)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, 0x06)
                    Name (RSPT, One)
                    Name (RSPI, 0x0E)
                    Name (_ADR, 0x80EEFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If (LEqual (VDID, 0xFFFFFFFF))
                            {
                                Notify (^, Zero)
                                Store (0xC8, Local1)
                                While (LGreater (Local1, Zero))
                                {
                                    Store (Subtract (Local1, One), Local1)
                                    If (LNotEqual (VDID, 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If (LEqual (ID3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        Store (Zero, ID3C)
                        
                        Return (Zero)
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        Store (One, ID3C)
                        
                        Return (Zero)
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        Store (One, L23E)
                        Sleep (0x10)
                        Store (Zero, Local0)
                        While (L23E)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (One, SCB0)
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If (LNotEqual (SCB0, One))
                        {
                            Return (Zero)
                        }

                        Store (One, L23R)
                        Store (Zero, Local0)
                        While (L23R)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (Zero, SCB0)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }
                        
                        Return (Zero)
                    }
                }

                Device (RP16)
                {
                    Name (RPD, 0x1D)
                    Name (RPF, 0x07)
                    Name (RSPT, One)
                    Name (RSPI, 0x0F)
                    Name (_ADR, 0x80EFFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If (LEqual (VDID, 0xFFFFFFFF))
                            {
                                Notify (^, Zero)
                                Store (0xC8, Local1)
                                While (LGreater (Local1, Zero))
                                {
                                    Store (Subtract (Local1, One), Local1)
                                    If (LNotEqual (VDID, 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If (LEqual (ID3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        Store (Zero, ID3C)
                        
                        Return (Zero)
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        Store (One, ID3C)
                        
                        Return (Zero)
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        Store (One, L23E)
                        Sleep (0x10)
                        Store (Zero, Local0)
                        While (L23E)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (One, SCB0)
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If (LNotEqual (SCB0, One))
                        {
                            Return (Zero)
                        }

                        Store (One, L23R)
                        Store (Zero, Local0)
                        While (L23R)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (Zero, SCB0)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }
                        
                        Return (Zero)
                    }
                }

                Device (RP17)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, Zero)
                    Name (RSPT, One)
                    Name (RSPI, 0x10)
                    Name (_ADR, 0x80D8FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If (LEqual (VDID, 0xFFFFFFFF))
                            {
                                Notify (^, Zero)
                                Store (0xC8, Local1)
                                While (LGreater (Local1, Zero))
                                {
                                    Store (Subtract (Local1, One), Local1)
                                    If (LNotEqual (VDID, 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If (LEqual (ID3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        Store (Zero, ID3C)
                        
                        Return (Zero)
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        Store (One, ID3C)
                        
                        Return (Zero)
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        Store (One, L23E)
                        Sleep (0x10)
                        Store (Zero, Local0)
                        While (L23E)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (One, SCB0)
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If (LNotEqual (SCB0, One))
                        {
                            Return (Zero)
                        }

                        Store (One, L23R)
                        Store (Zero, Local0)
                        While (L23R)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (Zero, SCB0)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }
                        
                        Return (Zero)
                    }
                }

                Device (RP18)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, One)
                    Name (RSPT, One)
                    Name (RSPI, 0x11)
                    Name (_ADR, 0x80D9FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If (LEqual (VDID, 0xFFFFFFFF))
                            {
                                Notify (^, Zero)
                                Store (0xC8, Local1)
                                While (LGreater (Local1, Zero))
                                {
                                    Store (Subtract (Local1, One), Local1)
                                    If (LNotEqual (VDID, 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If (LEqual (ID3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        Store (Zero, ID3C)
                        
                        Return (Zero)
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        Store (One, ID3C)
                        
                        Return (Zero)
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        Store (One, L23E)
                        Sleep (0x10)
                        Store (Zero, Local0)
                        While (L23E)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (One, SCB0)
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If (LNotEqual (SCB0, One))
                        {
                            Return (Zero)
                        }

                        Store (One, L23R)
                        Store (Zero, Local0)
                        While (L23R)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (Zero, SCB0)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }
                        
                        Return (Zero)
                    }
                }

                Device (RP19)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, 0x02)
                    Name (RSPT, One)
                    Name (RSPI, 0x12)
                    Name (_ADR, 0x80DAFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If (LEqual (VDID, 0xFFFFFFFF))
                            {
                                Notify (^, Zero)
                                Store (0xC8, Local1)
                                While (LGreater (Local1, Zero))
                                {
                                    Store (Subtract (Local1, One), Local1)
                                    If (LNotEqual (VDID, 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If (LEqual (ID3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        Store (Zero, ID3C)
                        
                        Return (Zero)
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        Store (One, ID3C)
                        
                        Return (Zero)
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        Store (One, L23E)
                        Sleep (0x10)
                        Store (Zero, Local0)
                        While (L23E)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (One, SCB0)
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If (LNotEqual (SCB0, One))
                        {
                            Return (Zero)
                        }

                        Store (One, L23R)
                        Store (Zero, Local0)
                        While (L23R)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (Zero, SCB0)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }
                        
                        Return (Zero)
                    }
                }

                Device (RP20)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, 0x03)
                    Name (RSPT, One)
                    Name (RSPI, 0x13)
                    Name (_ADR, 0x80DBFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If (LEqual (VDID, 0xFFFFFFFF))
                            {
                                Notify (^, Zero)
                                Store (0xC8, Local1)
                                While (LGreater (Local1, Zero))
                                {
                                    Store (Subtract (Local1, One), Local1)
                                    If (LNotEqual (VDID, 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If (LEqual (ID3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        Store (Zero, ID3C)
                        
                        Return (Zero)
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        Store (One, ID3C)
                        
                        Return (Zero)
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        Store (One, L23E)
                        Sleep (0x10)
                        Store (Zero, Local0)
                        While (L23E)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (One, SCB0)
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If (LNotEqual (SCB0, One))
                        {
                            Return (Zero)
                        }

                        Store (One, L23R)
                        Store (Zero, Local0)
                        While (L23R)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (Zero, SCB0)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }
                        
                        Return (Zero)
                    }
                }

                Device (RP21)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, 0x04)
                    Name (RSPT, One)
                    Name (RSPI, 0x14)
                    Name (_ADR, 0x80DCFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If (LEqual (VDID, 0xFFFFFFFF))
                            {
                                Notify (^, Zero)
                                Store (0xC8, Local1)
                                While (LGreater (Local1, Zero))
                                {
                                    Store (Subtract (Local1, One), Local1)
                                    If (LNotEqual (VDID, 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If (LEqual (ID3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        Store (Zero, ID3C)
                        
                        Return (Zero)
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        Store (One, ID3C)
                        
                        Return (Zero)
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        Store (One, L23E)
                        Sleep (0x10)
                        Store (Zero, Local0)
                        While (L23E)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (One, SCB0)
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If (LNotEqual (SCB0, One))
                        {
                            Return (Zero)
                        }

                        Store (One, L23R)
                        Store (Zero, Local0)
                        While (L23R)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (Zero, SCB0)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }
                        
                        Return (Zero)
                    }
                }

                Device (RP22)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, 0x05)
                    Name (RSPT, One)
                    Name (RSPI, 0x15)
                    Name (_ADR, 0x80DDFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If (LEqual (VDID, 0xFFFFFFFF))
                            {
                                Notify (^, Zero)
                                Store (0xC8, Local1)
                                While (LGreater (Local1, Zero))
                                {
                                    Store (Subtract (Local1, One), Local1)
                                    If (LNotEqual (VDID, 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If (LEqual (ID3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        Store (Zero, ID3C)
                        
                        Return (Zero)
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        Store (One, ID3C)
                        
                        Return (Zero)
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        Store (One, L23E)
                        Sleep (0x10)
                        Store (Zero, Local0)
                        While (L23E)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (One, SCB0)
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If (LNotEqual (SCB0, One))
                        {
                            Return (Zero)
                        }

                        Store (One, L23R)
                        Store (Zero, Local0)
                        While (L23R)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (Zero, SCB0)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }
                        
                        Return (Zero)
                    }
                }

                Device (RP23)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, 0x06)
                    Name (RSPT, One)
                    Name (RSPI, 0x16)
                    Name (_ADR, 0x80DEFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If (LEqual (VDID, 0xFFFFFFFF))
                            {
                                Notify (^, Zero)
                                Store (0xC8, Local1)
                                While (LGreater (Local1, Zero))
                                {
                                    Store (Subtract (Local1, One), Local1)
                                    If (LNotEqual (VDID, 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If (LEqual (ID3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        Store (Zero, ID3C)
                        
                        Return (Zero)
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        Store (One, ID3C)
                        
                        Return (Zero)
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        Store (One, L23E)
                        Sleep (0x10)
                        Store (Zero, Local0)
                        While (L23E)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (One, SCB0)
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If (LNotEqual (SCB0, One))
                        {
                            Return (Zero)
                        }

                        Store (One, L23R)
                        Store (Zero, Local0)
                        While (L23R)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (Zero, SCB0)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }
                        
                        Return (Zero)
                    }
                }

                Device (RP24)
                {
                    Name (RPD, 0x1B)
                    Name (RPF, 0x07)
                    Name (RSPT, One)
                    Name (RSPI, 0x17)
                    Name (_ADR, 0x80DFFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If (LEqual (VDID, 0xFFFFFFFF))
                            {
                                Notify (^, Zero)
                                Store (0xC8, Local1)
                                While (LGreater (Local1, Zero))
                                {
                                    Store (Subtract (Local1, One), Local1)
                                    If (LNotEqual (VDID, 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If (LEqual (ID3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        Store (Zero, ID3C)
                        
                        Return (Zero)
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        Store (One, ID3C)
                        
                        Return (Zero)
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        Store (One, L23E)
                        Sleep (0x10)
                        Store (Zero, Local0)
                        While (L23E)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (One, SCB0)
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If (LNotEqual (SCB0, One))
                        {
                            Return (Zero)
                        }

                        Store (One, L23R)
                        Store (Zero, Local0)
                        While (L23R)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (Zero, SCB0)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }
                        
                        Return (Zero)
                    }
                }

                If (LEqual (PCHS, 0x04))
                {
                    Device (RP25)
                    {
                        Name (RPD, 0x1A)
                        Name (RPF, Zero)
                        Name (RSPT, One)
                        Name (RSPI, 0x18)
                        Name (_ADR, 0x80D0FFFF)  // _ADR: Address
                        Name (ID3C, Zero)
                        Method (VR3D, 0, NotSerialized)
                        {
                            Return (VD3C (_ADR))
                        }

                        Method (VPON, 0, Serialized)
                        {
                            Name (DCFB, Zero)
                            Store (CBAR (Zero, RPD, RPF), DCFB)
                            OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                            Field (DCFG, DWordAcc, NoLock, Preserve)
                            {
                                VDID,   32
                            }

                            If (CondRefOf (VDID))
                            {
                                If (LEqual (VDID, 0xFFFFFFFF))
                                {
                                    Notify (^, Zero)
                                    Store (0xC8, Local1)
                                    While (LGreater (Local1, Zero))
                                    {
                                        Store (Subtract (Local1, One), Local1)
                                        If (LNotEqual (VDID, 0xFFFFFFFF))
                                        {
                                            Break
                                        }

                                        Sleep (0x0A)
                                    }
                                }
                            }

                            If (LEqual (ID3C, Zero))
                            {
                                Return (Zero)
                            }

                            VDON (RSPT, RSPI)
                            RLA ()
                            Sleep (0x64)
                            Store (Zero, ID3C)
                            
                            Return (Zero)
                        }

                        Method (VPOF, 0, Serialized)
                        {
                            If (LNot (D3CV (RSPT, RSPI)))
                            {
                                Return (Zero)
                            }

                            RL23 ()
                            VDOF (RSPT, RSPI)
                            Store (One, ID3C)
                            
                            Return (Zero)
                        }

                        Method (RL23, 0, Serialized)
                        {
                            Name (DCFB, Zero)
                            Store (CBAR (Zero, RPD, RPF), DCFB)
                            OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                            Field (DCFG, DWordAcc, NoLock, Preserve)
                            {
                                Offset (0xE0), 
                                SCB0,   1, 
                                Offset (0xE2), 
                                    ,   2, 
                                L23E,   1
                            }

                            Store (One, L23E)
                            Sleep (0x10)
                            Store (Zero, Local0)
                            While (L23E)
                            {
                                If (LGreater (Local0, 0x04))
                                {
                                    Break
                                }

                                Sleep (0x10)
                                Increment (Local0)
                            }

                            Store (One, SCB0)
                        }

                        Method (RLA, 0, Serialized)
                        {
                            Name (DCFB, Zero)
                            Store (CBAR (Zero, RPD, RPF), DCFB)
                            OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                            Field (DCFG, DWordAcc, NoLock, Preserve)
                            {
                                Offset (0x52), 
                                    ,   13, 
                                LASX,   1, 
                                Offset (0xE0), 
                                SCB0,   1, 
                                Offset (0xE2), 
                                    ,   3, 
                                L23R,   1, 
                                Offset (0x420), 
                                    ,   30, 
                                DPGE,   1
                            }

                            If (LNotEqual (SCB0, One))
                            {
                                Return (Zero)
                            }

                            Store (One, L23R)
                            Store (Zero, Local0)
                            While (L23R)
                            {
                                If (LGreater (Local0, 0x04))
                                {
                                    Break
                                }

                                Sleep (0x10)
                                Increment (Local0)
                            }

                            Store (Zero, SCB0)
                            Store (Zero, Local0)
                            While (LEqual (LASX, Zero))
                            {
                                If (LGreater (Local0, 0x08))
                                {
                                    Break
                                }

                                Sleep (0x10)
                                Increment (Local0)
                            }
                            
                            Return (Zero)
                        }
                    }

                    Device (RP26)
                    {
                        Name (RPD, 0x1A)
                        Name (RPF, One)
                        Name (RSPT, One)
                        Name (RSPI, 0x19)
                        Name (_ADR, 0x80D1FFFF)  // _ADR: Address
                        Name (ID3C, Zero)
                        Method (VR3D, 0, NotSerialized)
                        {
                            Return (VD3C (_ADR))
                        }

                        Method (VPON, 0, Serialized)
                        {
                            Name (DCFB, Zero)
                            Store (CBAR (Zero, RPD, RPF), DCFB)
                            OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                            Field (DCFG, DWordAcc, NoLock, Preserve)
                            {
                                VDID,   32
                            }

                            If (CondRefOf (VDID))
                            {
                                If (LEqual (VDID, 0xFFFFFFFF))
                                {
                                    Notify (^, Zero)
                                    Store (0xC8, Local1)
                                    While (LGreater (Local1, Zero))
                                    {
                                        Store (Subtract (Local1, One), Local1)
                                        If (LNotEqual (VDID, 0xFFFFFFFF))
                                        {
                                            Break
                                        }

                                        Sleep (0x0A)
                                    }
                                }
                            }

                            If (LEqual (ID3C, Zero))
                            {
                                Return (Zero)
                            }

                            VDON (RSPT, RSPI)
                            RLA ()
                            Sleep (0x64)
                            Store (Zero, ID3C)
                            
                            Return (Zero)
                        }

                        Method (VPOF, 0, Serialized)
                        {
                            If (LNot (D3CV (RSPT, RSPI)))
                            {
                                Return (Zero)
                            }

                            RL23 ()
                            VDOF (RSPT, RSPI)
                            Store (One, ID3C)
                            
                            Return (Zero)
                        }

                        Method (RL23, 0, Serialized)
                        {
                            Name (DCFB, Zero)
                            Store (CBAR (Zero, RPD, RPF), DCFB)
                            OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                            Field (DCFG, DWordAcc, NoLock, Preserve)
                            {
                                Offset (0xE0), 
                                SCB0,   1, 
                                Offset (0xE2), 
                                    ,   2, 
                                L23E,   1
                            }

                            Store (One, L23E)
                            Sleep (0x10)
                            Store (Zero, Local0)
                            While (L23E)
                            {
                                If (LGreater (Local0, 0x04))
                                {
                                    Break
                                }

                                Sleep (0x10)
                                Increment (Local0)
                            }

                            Store (One, SCB0)
                        }

                        Method (RLA, 0, Serialized)
                        {
                            Name (DCFB, Zero)
                            Store (CBAR (Zero, RPD, RPF), DCFB)
                            OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                            Field (DCFG, DWordAcc, NoLock, Preserve)
                            {
                                Offset (0x52), 
                                    ,   13, 
                                LASX,   1, 
                                Offset (0xE0), 
                                SCB0,   1, 
                                Offset (0xE2), 
                                    ,   3, 
                                L23R,   1, 
                                Offset (0x420), 
                                    ,   30, 
                                DPGE,   1
                            }

                            If (LNotEqual (SCB0, One))
                            {
                                Return (Zero)
                            }

                            Store (One, L23R)
                            Store (Zero, Local0)
                            While (L23R)
                            {
                                If (LGreater (Local0, 0x04))
                                {
                                    Break
                                }

                                Sleep (0x10)
                                Increment (Local0)
                            }

                            Store (Zero, SCB0)
                            Store (Zero, Local0)
                            While (LEqual (LASX, Zero))
                            {
                                If (LGreater (Local0, 0x08))
                                {
                                    Break
                                }

                                Sleep (0x10)
                                Increment (Local0)
                            }
                            
                            Return (Zero)
                        }
                    }

                    Device (RP27)
                    {
                        Name (RPD, 0x1A)
                        Name (RPF, 0x02)
                        Name (RSPT, One)
                        Name (RSPI, 0x1A)
                        Name (_ADR, 0x80D2FFFF)  // _ADR: Address
                        Name (ID3C, Zero)
                        Method (VR3D, 0, NotSerialized)
                        {
                            Return (VD3C (_ADR))
                        }

                        Method (VPON, 0, Serialized)
                        {
                            Name (DCFB, Zero)
                            Store (CBAR (Zero, RPD, RPF), DCFB)
                            OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                            Field (DCFG, DWordAcc, NoLock, Preserve)
                            {
                                VDID,   32
                            }

                            If (CondRefOf (VDID))
                            {
                                If (LEqual (VDID, 0xFFFFFFFF))
                                {
                                    Notify (^, Zero)
                                    Store (0xC8, Local1)
                                    While (LGreater (Local1, Zero))
                                    {
                                        Store (Subtract (Local1, One), Local1)
                                        If (LNotEqual (VDID, 0xFFFFFFFF))
                                        {
                                            Break
                                        }

                                        Sleep (0x0A)
                                    }
                                }
                            }

                            If (LEqual (ID3C, Zero))
                            {
                                Return (Zero)
                            }

                            VDON (RSPT, RSPI)
                            RLA ()
                            Sleep (0x64)
                            Store (Zero, ID3C)
                            
                            Return (Zero)
                        }

                        Method (VPOF, 0, Serialized)
                        {
                            If (LNot (D3CV (RSPT, RSPI)))
                            {
                                Return (Zero)
                            }

                            RL23 ()
                            VDOF (RSPT, RSPI)
                            Store (One, ID3C)
                            
                            Return (Zero)
                        }

                        Method (RL23, 0, Serialized)
                        {
                            Name (DCFB, Zero)
                            Store (CBAR (Zero, RPD, RPF), DCFB)
                            OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                            Field (DCFG, DWordAcc, NoLock, Preserve)
                            {
                                Offset (0xE0), 
                                SCB0,   1, 
                                Offset (0xE2), 
                                    ,   2, 
                                L23E,   1
                            }

                            Store (One, L23E)
                            Sleep (0x10)
                            Store (Zero, Local0)
                            While (L23E)
                            {
                                If (LGreater (Local0, 0x04))
                                {
                                    Break
                                }

                                Sleep (0x10)
                                Increment (Local0)
                            }

                            Store (One, SCB0)
                        }

                        Method (RLA, 0, Serialized)
                        {
                            Name (DCFB, Zero)
                            Store (CBAR (Zero, RPD, RPF), DCFB)
                            OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                            Field (DCFG, DWordAcc, NoLock, Preserve)
                            {
                                Offset (0x52), 
                                    ,   13, 
                                LASX,   1, 
                                Offset (0xE0), 
                                SCB0,   1, 
                                Offset (0xE2), 
                                    ,   3, 
                                L23R,   1, 
                                Offset (0x420), 
                                    ,   30, 
                                DPGE,   1
                            }

                            If (LNotEqual (SCB0, One))
                            {
                                Return (Zero)
                            }

                            Store (One, L23R)
                            Store (Zero, Local0)
                            While (L23R)
                            {
                                If (LGreater (Local0, 0x04))
                                {
                                    Break
                                }

                                Sleep (0x10)
                                Increment (Local0)
                            }

                            Store (Zero, SCB0)
                            Store (Zero, Local0)
                            While (LEqual (LASX, Zero))
                            {
                                If (LGreater (Local0, 0x08))
                                {
                                    Break
                                }

                                Sleep (0x10)
                                Increment (Local0)
                            }
                            
                            Return (Zero)
                        }
                    }

                    Device (RP28)
                    {
                        Name (RPD, 0x1A)
                        Name (RPF, 0x03)
                        Name (RSPT, One)
                        Name (RSPI, 0x1B)
                        Name (_ADR, 0x80D3FFFF)  // _ADR: Address
                        Name (ID3C, Zero)
                        Method (VR3D, 0, NotSerialized)
                        {
                            Return (VD3C (_ADR))
                        }

                        Method (VPON, 0, Serialized)
                        {
                            Name (DCFB, Zero)
                            Store (CBAR (Zero, RPD, RPF), DCFB)
                            OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                            Field (DCFG, DWordAcc, NoLock, Preserve)
                            {
                                VDID,   32
                            }

                            If (CondRefOf (VDID))
                            {
                                If (LEqual (VDID, 0xFFFFFFFF))
                                {
                                    Notify (^, Zero)
                                    Store (0xC8, Local1)
                                    While (LGreater (Local1, Zero))
                                    {
                                        Store (Subtract (Local1, One), Local1)
                                        If (LNotEqual (VDID, 0xFFFFFFFF))
                                        {
                                            Break
                                        }

                                        Sleep (0x0A)
                                    }
                                }
                            }

                            If (LEqual (ID3C, Zero))
                            {
                                Return (Zero)
                            }

                            VDON (RSPT, RSPI)
                            RLA ()
                            Sleep (0x64)
                            Store (Zero, ID3C)
                            
                            Return (Zero)
                        }

                        Method (VPOF, 0, Serialized)
                        {
                            If (LNot (D3CV (RSPT, RSPI)))
                            {
                                Return (Zero)
                            }

                            RL23 ()
                            VDOF (RSPT, RSPI)
                            Store (One, ID3C)
                            
                            Return (Zero)
                        }

                        Method (RL23, 0, Serialized)
                        {
                            Name (DCFB, Zero)
                            Store (CBAR (Zero, RPD, RPF), DCFB)
                            OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                            Field (DCFG, DWordAcc, NoLock, Preserve)
                            {
                                Offset (0xE0), 
                                SCB0,   1, 
                                Offset (0xE2), 
                                    ,   2, 
                                L23E,   1
                            }

                            Store (One, L23E)
                            Sleep (0x10)
                            Store (Zero, Local0)
                            While (L23E)
                            {
                                If (LGreater (Local0, 0x04))
                                {
                                    Break
                                }

                                Sleep (0x10)
                                Increment (Local0)
                            }

                            Store (One, SCB0)
                        }

                        Method (RLA, 0, Serialized)
                        {
                            Name (DCFB, Zero)
                            Store (CBAR (Zero, RPD, RPF), DCFB)
                            OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                            Field (DCFG, DWordAcc, NoLock, Preserve)
                            {
                                Offset (0x52), 
                                    ,   13, 
                                LASX,   1, 
                                Offset (0xE0), 
                                SCB0,   1, 
                                Offset (0xE2), 
                                    ,   3, 
                                L23R,   1, 
                                Offset (0x420), 
                                    ,   30, 
                                DPGE,   1
                            }

                            If (LNotEqual (SCB0, One))
                            {
                                Return (Zero)
                            }

                            Store (One, L23R)
                            Store (Zero, Local0)
                            While (L23R)
                            {
                                If (LGreater (Local0, 0x04))
                                {
                                    Break
                                }

                                Sleep (0x10)
                                Increment (Local0)
                            }

                            Store (Zero, SCB0)
                            Store (Zero, Local0)
                            While (LEqual (LASX, Zero))
                            {
                                If (LGreater (Local0, 0x08))
                                {
                                    Break
                                }

                                Sleep (0x10)
                                Increment (Local0)
                            }
                            
                            Return (Zero)
                        }
                    }
                }

                Device (PEG0)
                {
                    Name (RPD, 0x06)
                    Name (RPF, Zero)
                    Name (RSPT, 0x02)
                    Name (RSPI, Zero)
                    Name (_ADR, 0x8030FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If (LEqual (VDID, 0xFFFFFFFF))
                            {
                                Notify (^, Zero)
                                Store (0xC8, Local1)
                                While (LGreater (Local1, Zero))
                                {
                                    Store (Subtract (Local1, One), Local1)
                                    If (LNotEqual (VDID, 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If (LEqual (ID3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        Store (Zero, ID3C)
                        
                        Return (Zero)
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        Store (One, ID3C)
                        
                        Return (Zero)
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        Store (One, L23E)
                        Sleep (0x10)
                        Store (Zero, Local0)
                        While (L23E)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (One, SCB0)
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If (LNotEqual (SCB0, One))
                        {
                            Return (Zero)
                        }

                        Store (One, L23R)
                        Store (Zero, Local0)
                        While (L23R)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (Zero, SCB0)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }
                        
                        Return (Zero)
                    }
                }

                Device (PEG1)
                {
                    Name (RPD, One)
                    Name (RPF, Zero)
                    Name (RSPT, 0x02)
                    Name (RSPI, One)
                    Name (_ADR, 0x8008FFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If (LEqual (VDID, 0xFFFFFFFF))
                            {
                                Notify (^, Zero)
                                Store (0xC8, Local1)
                                While (LGreater (Local1, Zero))
                                {
                                    Store (Subtract (Local1, One), Local1)
                                    If (LNotEqual (VDID, 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If (LEqual (ID3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        Store (Zero, ID3C)
                        
                        Return (Zero)
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        Store (One, ID3C)
                        
                        Return (Zero)
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        Store (One, L23E)
                        Sleep (0x10)
                        Store (Zero, Local0)
                        While (L23E)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (One, SCB0)
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If (LNotEqual (SCB0, One))
                        {
                            Return (Zero)
                        }

                        Store (One, L23R)
                        Store (Zero, Local0)
                        While (L23R)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (Zero, SCB0)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }
                        
                        Return (Zero)
                    }
                }

                Device (PEG2)
                {
                    If (CondRefOf (VMCP))
                    {
                        Name (RPD, Zero)
                        Name (RPF, Zero)
                        Name (RSPT, 0x02)
                        Name (RSPI, 0x02)
                        Name (_ADR, Zero)  // _ADR: Address
                        If (And (VMCP, 0x02))
                        {
                            Store (One, RPD)
                            Store (One, RPF)
                            Store (0x8009FFFF, _ADR)
                        }
                        ElseIf (And (VMCP, 0x10))
                        {
                            Store (0x06, RPD)
                            Store (0x02, RPF)
                            Store (0x8032FFFF, _ADR)
                        }
                    }

                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If (LEqual (VDID, 0xFFFFFFFF))
                            {
                                Notify (^, Zero)
                                Store (0xC8, Local1)
                                While (LGreater (Local1, Zero))
                                {
                                    Store (Subtract (Local1, One), Local1)
                                    If (LNotEqual (VDID, 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If (LEqual (ID3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        Store (Zero, ID3C)
                        
                        Return (Zero)
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        Store (One, ID3C)
                        
                        Return (Zero)
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        Store (One, L23E)
                        Sleep (0x10)
                        Store (Zero, Local0)
                        While (L23E)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (One, SCB0)
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If (LNotEqual (SCB0, One))
                        {
                            Return (Zero)
                        }

                        Store (One, L23R)
                        Store (Zero, Local0)
                        While (L23R)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (Zero, SCB0)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }
                        
                        Return (Zero)
                    }
                }

                Device (PEG3)
                {
                    Name (RPD, One)
                    Name (RPF, 0x02)
                    Name (RSPT, 0x02)
                    Name (RSPI, 0x03)
                    Name (_ADR, 0x800AFFFF)  // _ADR: Address
                    Name (ID3C, Zero)
                    Method (VR3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VPON, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            VDID,   32
                        }

                        If (CondRefOf (VDID))
                        {
                            If (LEqual (VDID, 0xFFFFFFFF))
                            {
                                Notify (^, Zero)
                                Store (0xC8, Local1)
                                While (LGreater (Local1, Zero))
                                {
                                    Store (Subtract (Local1, One), Local1)
                                    If (LNotEqual (VDID, 0xFFFFFFFF))
                                    {
                                        Break
                                    }

                                    Sleep (0x0A)
                                }
                            }
                        }

                        If (LEqual (ID3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        RLA ()
                        Sleep (0x64)
                        Store (Zero, ID3C)
                        
                        Return (Zero)
                    }

                    Method (VPOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        RL23 ()
                        VDOF (RSPT, RSPI)
                        Store (One, ID3C)
                        
                        Return (Zero)
                    }

                    Method (RL23, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   2, 
                            L23E,   1
                        }

                        Store (One, L23E)
                        Sleep (0x10)
                        Store (Zero, Local0)
                        While (L23E)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (One, SCB0)
                    }

                    Method (RLA, 0, Serialized)
                    {
                        Name (DCFB, Zero)
                        Store (CBAR (Zero, RPD, RPF), DCFB)
                        OperationRegion (DCFG, SystemMemory, DCFB, 0x0C80)
                        Field (DCFG, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x52), 
                                ,   13, 
                            LASX,   1, 
                            Offset (0xE0), 
                            SCB0,   1, 
                            Offset (0xE2), 
                                ,   3, 
                            L23R,   1, 
                            Offset (0x420), 
                                ,   30, 
                            DPGE,   1
                        }

                        If (LNotEqual (SCB0, One))
                        {
                            Return (Zero)
                        }

                        Store (One, L23R)
                        Store (Zero, Local0)
                        While (L23R)
                        {
                            If (LGreater (Local0, 0x04))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }

                        Store (Zero, SCB0)
                        Store (Zero, Local0)
                        While (LEqual (LASX, Zero))
                        {
                            If (LGreater (Local0, 0x08))
                            {
                                Break
                            }

                            Sleep (0x10)
                            Increment (Local0)
                        }
                        
                        Return (Zero)
                    }
                }

                Device (PRT0)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, Zero)
                    Name (_ADR, 0x00B8FFF0)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If (LEqual (SD3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        Store (Zero, SD3C)
                        
                        Return (Zero)
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        Store (One, SD3C)
                        
                        Return (Zero)
                    }
                }

                Device (PRT1)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, One)
                    Name (_ADR, 0x00B8FFF1)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If (LEqual (SD3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        Store (Zero, SD3C)
                        
                        Return (Zero)
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        Store (One, SD3C)
                        
                        Return (Zero)
                    }
                }

                Device (PRT2)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x02)
                    Name (_ADR, 0x00B8FFF2)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If (LEqual (SD3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        Store (Zero, SD3C)
                        
                        Return (Zero)
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        Store (One, SD3C)
                        
                        Return (Zero)
                    }
                }

                Device (PRT3)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x03)
                    Name (_ADR, 0x00B8FFF3)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If (LEqual (SD3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        Store (Zero, SD3C)
                        
                        Return (Zero)
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        Store (One, SD3C)
                        
                        Return (Zero)
                    }
                }

                Device (PRT4)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x04)
                    Name (_ADR, 0x00B8FFF4)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If (LEqual (SD3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        Store (Zero, SD3C)
                        
                        Return (Zero)
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        Store (One, SD3C)
                        
                        Return (Zero)
                    }
                }

                Device (PRT5)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x05)
                    Name (_ADR, 0x00B8FFF5)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If (LEqual (SD3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        Store (Zero, SD3C)
                        
                        Return (Zero)
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        Store (One, SD3C)
                        
                        Return (Zero)
                    }
                }

                Device (PRT6)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x06)
                    Name (_ADR, 0x00B8FFF6)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If (LEqual (SD3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        Store (Zero, SD3C)
                        
                        Return (Zero)
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        Store (One, SD3C)
                        
                        Return (Zero)
                    }
                }

                Device (PRT7)
                {
                    Name (RSPT, Zero)
                    Name (RSPI, 0x07)
                    Name (_ADR, 0x00B8FFF7)  // _ADR: Address
                    Name (SD3C, Zero)
                    Method (VS3D, 0, NotSerialized)
                    {
                        Return (VD3C (_ADR))
                    }

                    Method (VSON, 0, Serialized)
                    {
                        If (LEqual (SD3C, Zero))
                        {
                            Return (Zero)
                        }

                        VDON (RSPT, RSPI)
                        Sleep (0x10)
                        Store (Zero, SD3C)
                        
                        Return (Zero)
                    }

                    Method (VSOF, 0, Serialized)
                    {
                        If (LNot (D3CV (RSPT, RSPI)))
                        {
                            Return (Zero)
                        }

                        VDOF (RSPT, RSPI)
                        Store (One, SD3C)
                        
                        Return (Zero)
                    }
                }

                Name (VLVN, Zero)
                Name (VV0D, Package (0x20)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (VV1D, Package (0x20)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (VV2D, Package (0x20)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (VV3D, Package (0x20)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (VD3A, Zero)
                Name (VV0S, Zero)
                Name (VV1S, Zero)
                Name (VV2S, Zero)
                Name (VV3S, Zero)
                Method (PRUN, 1, Serialized)
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            PSD0 (^RP01.RSPI)
                            HBCM (^RP01.RSPI, One)
                        }
                        Case (One)
                        {
                            PSD0 (^RP02.RSPI)
                            HBCM (^RP02.RSPI, One)
                        }
                        Case (0x02)
                        {
                            PSD0 (^RP03.RSPI)
                            HBCM (^RP03.RSPI, One)
                        }
                        Case (0x03)
                        {
                            PSD0 (^RP04.RSPI)
                            HBCM (^RP04.RSPI, One)
                        }
                        Case (0x04)
                        {
                            PSD0 (^RP05.RSPI)
                            HBCM (^RP05.RSPI, One)
                        }
                        Case (0x05)
                        {
                            PSD0 (^RP06.RSPI)
                            HBCM (^RP06.RSPI, One)
                        }
                        Case (0x06)
                        {
                            PSD0 (^RP07.RSPI)
                            HBCM (^RP07.RSPI, One)
                        }
                        Case (0x07)
                        {
                            PSD0 (^RP08.RSPI)
                            HBCM (^RP08.RSPI, One)
                        }
                        Case (0x08)
                        {
                            PSD0 (^RP09.RSPI)
                            HBCM (^RP09.RSPI, One)
                        }
                        Case (0x09)
                        {
                            PSD0 (^RP10.RSPI)
                            HBCM (^RP10.RSPI, One)
                        }
                        Case (0x0A)
                        {
                            PSD0 (^RP11.RSPI)
                            HBCM (^RP11.RSPI, One)
                        }
                        Case (0x0B)
                        {
                            PSD0 (^RP12.RSPI)
                            HBCM (^RP12.RSPI, One)
                        }
                        Case (0x0C)
                        {
                            PSD0 (^RP13.RSPI)
                            HBCM (^RP13.RSPI, One)
                        }
                        Case (0x0D)
                        {
                            PSD0 (^RP14.RSPI)
                            HBCM (^RP14.RSPI, One)
                        }
                        Case (0x0E)
                        {
                            PSD0 (^RP15.RSPI)
                            HBCM (^RP15.RSPI, One)
                        }
                        Case (0x0F)
                        {
                            PSD0 (^RP16.RSPI)
                            HBCM (^RP16.RSPI, One)
                        }
                        Case (0x10)
                        {
                            PSD0 (^RP17.RSPI)
                            HBCM (^RP17.RSPI, One)
                        }

                    }
                }

                Method (PRLA, 1, Serialized)
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            ^RP01.RLA ()
                        }
                        Case (One)
                        {
                            ^RP02.RLA ()
                        }
                        Case (0x02)
                        {
                            ^RP03.RLA ()
                        }
                        Case (0x03)
                        {
                            ^RP04.RLA ()
                        }
                        Case (0x04)
                        {
                            ^RP05.RLA ()
                        }
                        Case (0x05)
                        {
                            ^RP06.RLA ()
                        }
                        Case (0x06)
                        {
                            ^RP07.RLA ()
                        }
                        Case (0x07)
                        {
                            ^RP08.RLA ()
                        }
                        Case (0x08)
                        {
                            ^RP09.RLA ()
                        }
                        Case (0x09)
                        {
                            ^RP10.RLA ()
                        }
                        Case (0x0A)
                        {
                            ^RP11.RLA ()
                        }
                        Case (0x0B)
                        {
                            ^RP12.RLA ()
                        }
                        Case (0x0C)
                        {
                            ^RP13.RLA ()
                        }
                        Case (0x0D)
                        {
                            ^RP14.RLA ()
                        }
                        Case (0x0E)
                        {
                            ^RP15.RLA ()
                        }
                        Case (0x0F)
                        {
                            ^RP16.RLA ()
                        }
                        Case (0x10)
                        {
                            ^RP17.RLA ()
                        }

                    }

                    Sleep (0x64)
                }

                Method (PRLD, 1, Serialized)
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            ^RP01.RL23 ()
                            PSD3 (^RP01.RSPI)
                            HBCM (^RP01.RSPI, Zero)
                        }
                        Case (One)
                        {
                            ^RP02.RL23 ()
                            PSD3 (^RP02.RSPI)
                            HBCM (^RP02.RSPI, Zero)
                        }
                        Case (0x02)
                        {
                            ^RP03.RL23 ()
                            PSD3 (^RP03.RSPI)
                            HBCM (^RP03.RSPI, Zero)
                        }
                        Case (0x03)
                        {
                            ^RP04.RL23 ()
                            PSD3 (^RP04.RSPI)
                            HBCM (^RP04.RSPI, Zero)
                        }
                        Case (0x04)
                        {
                            ^RP05.RL23 ()
                            PSD3 (^RP05.RSPI)
                            HBCM (^RP05.RSPI, Zero)
                        }
                        Case (0x05)
                        {
                            ^RP06.RL23 ()
                            PSD3 (^RP06.RSPI)
                            HBCM (^RP06.RSPI, Zero)
                        }
                        Case (0x06)
                        {
                            ^RP07.RL23 ()
                            PSD3 (^RP07.RSPI)
                            HBCM (^RP07.RSPI, Zero)
                        }
                        Case (0x07)
                        {
                            ^RP08.RL23 ()
                            PSD3 (^RP08.RSPI)
                            HBCM (^RP08.RSPI, Zero)
                        }
                        Case (0x08)
                        {
                            ^RP09.RL23 ()
                            PSD3 (^RP09.RSPI)
                            HBCM (^RP09.RSPI, Zero)
                        }
                        Case (0x09)
                        {
                            ^RP10.RL23 ()
                            PSD3 (^RP10.RSPI)
                            HBCM (^RP10.RSPI, Zero)
                        }
                        Case (0x0A)
                        {
                            ^RP11.RL23 ()
                            PSD3 (^RP11.RSPI)
                            HBCM (^RP11.RSPI, Zero)
                        }
                        Case (0x0B)
                        {
                            ^RP12.RL23 ()
                            PSD3 (^RP12.RSPI)
                            HBCM (^RP12.RSPI, Zero)
                        }
                        Case (0x0C)
                        {
                            ^RP13.RL23 ()
                            PSD3 (^RP13.RSPI)
                            HBCM (^RP13.RSPI, Zero)
                        }
                        Case (0x0D)
                        {
                            ^RP14.RL23 ()
                            PSD3 (^RP14.RSPI)
                            HBCM (^RP14.RSPI, Zero)
                        }
                        Case (0x0E)
                        {
                            ^RP15.RL23 ()
                            PSD3 (^RP15.RSPI)
                            HBCM (^RP15.RSPI, Zero)
                        }
                        Case (0x0F)
                        {
                            ^RP16.RL23 ()
                            PSD3 (^RP16.RSPI)
                            HBCM (^RP16.RSPI, Zero)
                        }
                        Case (0x10)
                        {
                            ^RP17.RL23 ()
                            PSD3 (^RP17.RSPI)
                            HBCM (^RP17.RSPI, Zero)
                        }

                    }
                }

                Method (SVRP, 3, NotSerialized)
                {
                    Subtract (SizeOf (Arg0), One, Local0)
                    ADBG (Concatenate ("Volume size is: ", Local0))
                    If (LGreater (Local0, 0x20))
                    {
                        ADBG ("Volume size over 32")
                        Return (Zero)
                    }

                    Store (Local0, Arg2)
                    Store (Zero, Local1)
                    While (LLess (Local1, Local0))
                    {
                        Store (DerefOf (Index (Arg0, Add (Local1, One))), Index (Arg1, Local1))
                        ADBG (Concatenate ("Adding to volume: ", ToHexString (DerefOf (Index (Arg1, Local1)))))
                        Increment (Local1)
                    }
                    
                    Return (Zero)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (LEqual (Arg0, ToUUID ("9cd9cddd-8845-4afd-8392-31c4eb87cabd")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (RBUF, Buffer (One)
                                {
                                     0x00                                           
                                })
                                CreateByteField (RBUF, Zero, SFUN)
                                Store (0x7F, SFUN)
                                Return (RBUF)
                            }
                            Case (One)
                            {
                                Store (ToInteger (DerefOf (Index (Arg3, Zero))), VLVN)
                                If (LEqual (VLVN, Zero))
                                {
                                    SVRP (Arg3, VV0D, RefOf (VV0S))
                                    Return (Zero)
                                }
                                ElseIf (LEqual (VLVN, One))
                                {
                                    SVRP (Arg3, VV1D, RefOf (VV1S))
                                    Return (Zero)
                                }
                                ElseIf (LEqual (VLVN, 0x02))
                                {
                                    SVRP (Arg3, VV2D, RefOf (VV2S))
                                    Return (Zero)
                                }
                                ElseIf (LEqual (VLVN, 0x03))
                                {
                                    SVRP (Arg3, VV3D, RefOf (VV3S))
                                    Return (Zero)
                                }
                                Else
                                {
                                    Return (One)
                                }
                            }
                            Case (0x02)
                            {
                                Name (VVON, Package (0x20)
                                {
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero
                                })
                                Store (SizeOf (Arg3), Local0)
                                Store (Zero, Local1)
                                If (LLessEqual (Local0, 0x20))
                                {
                                    While (LLess (Local1, Local0))
                                    {
                                        Store (ToInteger (DerefOf (Index (Arg3, Local1))), Index (VVON, Local1))
                                        Increment (Local1)
                                    }

                                    VLON (Local0, VVON)
                                }

                                Return (Zero)
                            }
                            Case (0x03)
                            {
                                Name (VVOF, Package (0x20)
                                {
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero, 
                                    Zero
                                })
                                Store (SizeOf (Arg3), Local0)
                                Store (Zero, Local1)
                                If (LLessEqual (Local0, 0x20))
                                {
                                    While (LLess (Local1, Local0))
                                    {
                                        Store (ToInteger (DerefOf (Index (Arg3, Local1))), Index (VVOF, Local1))
                                        Increment (Local1)
                                    }

                                    VLOF (Local0, VVOF)
                                }

                                Return (Zero)
                            }
                            Case (0x04)
                            {
                                Return (Zero)
                            }
                            Case (0x05)
                            {
                                Store (DerefOf (Index (Arg3, Zero)), VD3A)
                                Return (Zero)
                            }
                            Case (0x06)
                            {
                                If (CondRefOf (ZPPB))
                                {
                                    Return (ZPPB)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                            Default
                            {
                                Return (0x02)
                            }

                        }
                    }

                    Return (Zero)
                }

                Method (VLON, 2, Serialized)
                {
                    Name (DRVA, Zero)
                    Store (Arg0, Local1)
                    Store (Zero, Local0)
                    While (LGreater (Local1, Local0))
                    {
                        Store (ToInteger (DerefOf (Index (Arg1, Local0))), DRVA)
                        Switch (ToInteger (DRVA))
                        {
                            Case (0x80E0FFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, Zero)))
                                {
                                    If (And (HBSL, One))
                                    {
                                        If (D3CV (^RP01.RSPT, ^RP01.RSPI))
                                        {
                                            PSD0 (^RP03.RSPI)
                                            HBCM (^RP03.RSPI, One)
                                        }
                                    }

                                    ^RP01.VPON ()
                                    If (And (HBSL, One))
                                    {
                                        If (D3CV (^RP01.RSPT, ^RP01.RSPI))
                                        {
                                            ^RP03.RLA ()
                                            Sleep (0x64)
                                        }
                                    }
                                }
                            }
                            Case (0x80E1FFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, One)))
                                {
                                    ^RP02.VPON ()
                                }
                            }
                            Case (0x80E2FFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, 0x02)))
                                {
                                    If (And (HBSL, One)){}
                                    Else
                                    {
                                        ^RP03.VPON ()
                                    }
                                }
                            }
                            Case (0x80E3FFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, 0x03)))
                                {
                                    ^RP04.VPON ()
                                }
                            }
                            Case (0x80E4FFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, 0x04)))
                                {
                                    If (And (HBSL, 0x02))
                                    {
                                        If (D3CV (^RP05.RSPT, ^RP05.RSPI))
                                        {
                                            PSD0 (^RP07.RSPI)
                                            HBCM (^RP07.RSPI, One)
                                        }
                                    }

                                    ^RP05.VPON ()
                                    If (And (HBSL, 0x02))
                                    {
                                        If (D3CV (^RP05.RSPT, ^RP05.RSPI))
                                        {
                                            ^RP07.RLA ()
                                            Sleep (0x64)
                                        }
                                    }
                                }
                            }
                            Case (0x80E5FFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, 0x05)))
                                {
                                    ^RP06.VPON ()
                                }
                            }
                            Case (0x80E6FFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, 0x06)))
                                {
                                    If (And (HBSL, 0x02)){}
                                    Else
                                    {
                                        ^RP07.VPON ()
                                    }
                                }
                            }
                            Case (0x80E7FFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, 0x07)))
                                {
                                    ^RP08.VPON ()
                                }
                            }
                            Case (0x80E8FFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, 0x08)))
                                {
                                    If (And (HBSL, 0x04))
                                    {
                                        If (D3CV (^RP09.RSPT, ^RP09.RSPI))
                                        {
                                            PSD0 (^RP11.RSPI)
                                            HBCM (^RP11.RSPI, One)
                                        }
                                    }

                                    ^RP09.VPON ()
                                    If (And (HBSL, 0x04))
                                    {
                                        If (D3CV (^RP09.RSPT, ^RP09.RSPI))
                                        {
                                            ^RP11.RLA ()
                                            Sleep (0x64)
                                        }
                                    }
                                }
                            }
                            Case (0x80E9FFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, 0x09)))
                                {
                                    ^RP10.VPON ()
                                }
                            }
                            Case (0x80EAFFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, 0x0A)))
                                {
                                    If (And (HBSL, 0x04)){}
                                    Else
                                    {
                                        ^RP11.VPON ()
                                    }
                                }
                            }
                            Case (0x80EBFFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, 0x0B)))
                                {
                                    ^RP12.VPON ()
                                }
                            }
                            Case (0x80ECFFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, 0x0C)))
                                {
                                    If (And (HBSL, 0x08))
                                    {
                                        If (D3CV (^RP13.RSPT, ^RP13.RSPI))
                                        {
                                            PSD0 (^RP15.RSPI)
                                            HBCM (^RP15.RSPI, One)
                                        }
                                    }

                                    ^RP13.VPON ()
                                    If (And (HBSL, 0x08))
                                    {
                                        If (D3CV (^RP13.RSPT, ^RP13.RSPI))
                                        {
                                            ^RP15.RLA ()
                                            Sleep (0x64)
                                        }
                                    }
                                }
                            }
                            Case (0x80EDFFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, 0x0D)))
                                {
                                    ^RP14.VPON ()
                                }
                            }
                            Case (0x80EEFFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, 0x0E)))
                                {
                                    If (And (HBSL, 0x08)){}
                                    Else
                                    {
                                        ^RP15.VPON ()
                                    }
                                }
                            }
                            Case (0x80EFFFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, 0x0F)))
                                {
                                    ^RP16.VPON ()
                                }
                            }
                            Case (0x80D8FFFF)
                            {
                                If (And (HBSL, 0x10))
                                {
                                    If (D3CV (^RP17.RSPT, ^RP17.RSPI))
                                    {
                                        PSD0 (^RP19.RSPI)
                                        HBCM (^RP19.RSPI, One)
                                    }
                                }

                                ^RP17.VPON ()
                                If (And (HBSL, 0x10))
                                {
                                    If (D3CV (^RP17.RSPT, ^RP17.RSPI))
                                    {
                                        ^RP19.RLA ()
                                        Sleep (0x64)
                                    }
                                }
                            }
                            Case (0x80D9FFFF)
                            {
                                ^RP18.VPON ()
                            }
                            Case (0x80DAFFFF)
                            {
                                If (And (HBSL, 0x10)){}
                                Else
                                {
                                    ^RP19.VPON ()
                                }
                            }
                            Case (0x80DBFFFF)
                            {
                                ^RP20.VPON ()
                            }
                            Case (0x80DCFFFF)
                            {
                                If (And (HBSL, 0x20))
                                {
                                    If (D3CV (^RP21.RSPT, ^RP21.RSPI))
                                    {
                                        PSD0 (^RP23.RSPI)
                                        HBCM (^RP23.RSPI, One)
                                    }
                                }

                                ^RP21.VPON ()
                                If (And (HBSL, 0x20))
                                {
                                    If (D3CV (^RP21.RSPT, ^RP21.RSPI))
                                    {
                                        ^RP23.RLA ()
                                        Sleep (0x64)
                                    }
                                }
                            }
                            Case (0x000000080DDAFFFF)
                            {
                                ^RP22.VPON ()
                            }
                            Case (0x80DEFFFF)
                            {
                                If (And (HBSL, 0x20)){}
                                Else
                                {
                                    ^RP23.VPON ()
                                }
                            }
                            Case (0x80DFFFFF)
                            {
                                ^RP24.VPON ()
                            }
                            Case (0x80D0FFFF)
                            {
                                If (LEqual (PCHS, 0x04))
                                {
                                    If (And (HBSL, 0x40))
                                    {
                                        If (D3CV (^RP25.RSPT, ^RP25.RSPI))
                                        {
                                            PSD0 (^RP27.RSPI)
                                            HBCM (^RP27.RSPI, One)
                                        }
                                    }

                                    ^RP25.VPON ()
                                    If (And (HBSL, 0x40))
                                    {
                                        If (D3CV (^RP25.RSPT, ^RP25.RSPI))
                                        {
                                            ^RP27.RLA ()
                                            Sleep (0x64)
                                        }
                                    }
                                }
                            }
                            Case (0x80D1FFFF)
                            {
                                If (LEqual (PCHS, 0x04))
                                {
                                    ^RP26.VPON ()
                                }
                            }
                            Case (0x80D2FFFF)
                            {
                                If (LEqual (PCHS, 0x04))
                                {
                                    If (And (HBSL, 0x40)){}
                                    Else
                                    {
                                        ^RP27.VPON ()
                                    }
                                }
                            }
                            Case (0x80D3FFFF)
                            {
                                If (LEqual (PCHS, 0x04))
                                {
                                    ^RP28.VPON ()
                                }
                            }
                            Case (0x8030FFFF)
                            {
                                If (CondRefOf (\HBCL))
                                {
                                    If (LAnd (LNotEqual (HBCL, 0xFF), LEqual (HBCL, Zero)))
                                    {
                                        If (D3CV (^PEG0.RSPT, ^PEG0.RSPI))
                                        {
                                            PRUN (HBPL)
                                        }
                                    }
                                }

                                ^PEG0.VPON ()
                                If (CondRefOf (\HBCL))
                                {
                                    If (LAnd (LNotEqual (HBCL, 0xFF), LEqual (HBCL, Zero)))
                                    {
                                        If (D3CV (^PEG0.RSPT, ^PEG0.RSPI))
                                        {
                                            PRLA (HBPL)
                                        }
                                    }
                                }
                            }
                            Case (0x8008FFFF)
                            {
                                If (CondRefOf (\HBCL))
                                {
                                    If (LAnd (LNotEqual (HBCL, 0xFF), LEqual (HBCL, One)))
                                    {
                                        If (D3CV (^PEG1.RSPT, ^PEG1.RSPI))
                                        {
                                            PRUN (HBPL)
                                        }
                                    }
                                }

                                ^PEG1.VPON ()
                                If (CondRefOf (\HBCL))
                                {
                                    If (LAnd (LNotEqual (HBCL, 0xFF), LEqual (HBCL, One)))
                                    {
                                        If (D3CV (^PEG1.RSPT, ^PEG1.RSPI))
                                        {
                                            PRLA (HBPL)
                                        }
                                    }
                                }
                            }
                            Case (0x8009FFFF)
                            {
                                If (CondRefOf (\HBCL))
                                {
                                    If (LAnd (LNotEqual (HBCL, 0xFF), LEqual (HBCL, 0x02)))
                                    {
                                        If (D3CV (^PEG2.RSPT, ^PEG2.RSPI))
                                        {
                                            PRUN (HBPL)
                                        }
                                    }
                                }

                                ^PEG2.VPON ()
                                If (CondRefOf (\HBCL))
                                {
                                    If (LAnd (LNotEqual (HBCL, 0xFF), LEqual (HBCL, 0x02)))
                                    {
                                        If (D3CV (^PEG2.RSPT, ^PEG2.RSPI))
                                        {
                                            PRLA (HBPL)
                                        }
                                    }
                                }
                            }
                            Case (0x800AFFFF)
                            {
                                ^PEG3.VPON ()
                            }
                            Case (0x00B8FFF0)
                            {
                                ^PRT0.VSON ()
                            }
                            Case (0x00B8FFF1)
                            {
                                ^PRT1.VSON ()
                            }
                            Case (0x00B8FFF2)
                            {
                                ^PRT2.VSON ()
                            }
                            Case (0x00B8FFF3)
                            {
                                ^PRT3.VSON ()
                            }
                            Case (0x00B8FFF4)
                            {
                                ^PRT4.VSON ()
                            }
                            Case (0x00B8FFF5)
                            {
                                ^PRT5.VSON ()
                            }
                            Case (0x00B8FFF6)
                            {
                                ^PRT6.VSON ()
                            }
                            Case (0x00B8FFF7)
                            {
                                ^PRT7.VSON ()
                            }

                        }

                        Increment (Local0)
                    }
                }

                Method (VLOF, 2, Serialized)
                {
                    Name (DRVA, Zero)
                    Store (Arg0, Local1)
                    Store (Zero, Local0)
                    While (LGreater (Local1, Local0))
                    {
                        Store (ToInteger (DerefOf (Index (Arg1, Local0))), DRVA)
                        Switch (ToInteger (DRVA))
                        {
                            Case (0x80E0FFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, Zero)))
                                {
                                    If (And (HBSL, One))
                                    {
                                        If (D3CV (^RP01.RSPT, ^RP01.RSPI))
                                        {
                                            ^RP03.RL23 ()
                                            PSD3 (^RP03.RSPI)
                                            HBCM (^RP03.RSPI, Zero)
                                        }
                                    }

                                    ^RP01.VPOF ()
                                }
                            }
                            Case (0x80E1FFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, One)))
                                {
                                    ^RP02.VPOF ()
                                }
                            }
                            Case (0x80E2FFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, 0x02)))
                                {
                                    If (And (HBSL, One)){}
                                    Else
                                    {
                                        ^RP03.VPOF ()
                                    }
                                }
                            }
                            Case (0x80E3FFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, 0x03)))
                                {
                                    ^RP04.VPOF ()
                                }
                            }
                            Case (0x80E4FFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, 0x04)))
                                {
                                    If (And (HBSL, 0x02))
                                    {
                                        If (D3CV (^RP05.RSPT, ^RP05.RSPI))
                                        {
                                            ^RP07.RL23 ()
                                            PSD3 (^RP07.RSPI)
                                            HBCM (^RP07.RSPI, Zero)
                                        }
                                    }

                                    ^RP05.VPOF ()
                                }
                            }
                            Case (0x80E5FFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, 0x05)))
                                {
                                    ^RP06.VPOF ()
                                }
                            }
                            Case (0x80E6FFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, 0x06)))
                                {
                                    If (And (HBSL, 0x02)){}
                                    Else
                                    {
                                        ^RP07.VPOF ()
                                    }
                                }
                            }
                            Case (0x80E7FFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, 0x07)))
                                {
                                    ^RP08.VPOF ()
                                }
                            }
                            Case (0x80E8FFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, 0x08)))
                                {
                                    If (And (HBSL, 0x04))
                                    {
                                        If (D3CV (^RP09.RSPT, ^RP09.RSPI))
                                        {
                                            ^RP11.RL23 ()
                                            PSD3 (^RP11.RSPI)
                                            HBCM (^RP11.RSPI, Zero)
                                        }
                                    }

                                    ^RP09.VPOF ()
                                }
                            }
                            Case (0x80E9FFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, 0x09)))
                                {
                                    ^RP10.VPOF ()
                                }
                            }
                            Case (0x80EAFFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, 0x0A)))
                                {
                                    If (And (HBSL, 0x04)){}
                                    Else
                                    {
                                        ^RP11.VPOF ()
                                    }
                                }
                            }
                            Case (0x80EBFFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, 0x0B)))
                                {
                                    ^RP12.VPOF ()
                                }
                            }
                            Case (0x80ECFFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, 0x0C)))
                                {
                                    If (And (HBSL, 0x08))
                                    {
                                        If (D3CV (^RP13.RSPT, ^RP13.RSPI))
                                        {
                                            ^RP15.RL23 ()
                                            PSD3 (^RP15.RSPI)
                                            HBCM (^RP15.RSPI, Zero)
                                        }
                                    }

                                    ^RP13.VPOF ()
                                }
                            }
                            Case (0x80EDFFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, 0x0D)))
                                {
                                    ^RP14.VPOF ()
                                }
                            }
                            Case (0x80EEFFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, 0x0E)))
                                {
                                    If (And (HBSL, 0x08)){}
                                    Else
                                    {
                                        ^RP15.VPOF ()
                                    }
                                }
                            }
                            Case (0x80EFFFFF)
                            {
                                If (LOr (LOr (LEqual (HBCL, 0xFF), LGreater (HBCL, 0x02)), LNotEqual (HBPL, 0x0F)))
                                {
                                    ^RP16.VPOF ()
                                }
                            }
                            Case (0x80D8FFFF)
                            {
                                If (And (HBSL, 0x10))
                                {
                                    If (D3CV (^RP17.RSPT, ^RP17.RSPI))
                                    {
                                        ^RP19.RL23 ()
                                        PSD3 (^RP19.RSPI)
                                        HBCM (^RP19.RSPI, Zero)
                                    }
                                }

                                ^RP17.VPOF ()
                            }
                            Case (0x80D9FFFF)
                            {
                                ^RP18.VPOF ()
                            }
                            Case (0x80DAFFFF)
                            {
                                If (And (HBSL, 0x10)){}
                                Else
                                {
                                    ^RP19.VPOF ()
                                }
                            }
                            Case (0x80DBFFFF)
                            {
                                ^RP20.VPOF ()
                            }
                            Case (0x80DCFFFF)
                            {
                                If (And (HBSL, 0x20))
                                {
                                    If (D3CV (^RP21.RSPT, ^RP21.RSPI))
                                    {
                                        ^RP23.RL23 ()
                                        PSD3 (^RP23.RSPI)
                                        HBCM (^RP23.RSPI, Zero)
                                    }
                                }

                                ^RP21.VPOF ()
                            }
                            Case (0x000000080DDAFFFF)
                            {
                                ^RP22.VPOF ()
                            }
                            Case (0x80DEFFFF)
                            {
                                If (And (HBSL, 0x20)){}
                                Else
                                {
                                    ^RP23.VPOF ()
                                }
                            }
                            Case (0x80DFFFFF)
                            {
                                ^RP24.VPOF ()
                            }
                            Case (0x80D0FFFF)
                            {
                                If (LEqual (PCHS, 0x04))
                                {
                                    If (And (HBSL, 0x40))
                                    {
                                        If (D3CV (^RP25.RSPT, ^RP25.RSPI))
                                        {
                                            ^RP27.RL23 ()
                                            PSD3 (^RP27.RSPI)
                                            HBCM (^RP27.RSPI, Zero)
                                        }
                                    }

                                    ^RP25.VPOF ()
                                }
                            }
                            Case (0x80D1FFFF)
                            {
                                If (LEqual (PCHS, 0x04))
                                {
                                    ^RP26.VPOF ()
                                }
                            }
                            Case (0x80D2FFFF)
                            {
                                If (LEqual (PCHS, 0x04))
                                {
                                    If (And (HBSL, 0x40)){}
                                    Else
                                    {
                                        ^RP27.VPOF ()
                                    }
                                }
                            }
                            Case (0x80D3FFFF)
                            {
                                If (LEqual (PCHS, 0x04))
                                {
                                    ^RP28.VPOF ()
                                }
                            }
                            Case (0x8030FFFF)
                            {
                                If (CondRefOf (\HBCL))
                                {
                                    If (LAnd (LNotEqual (HBCL, 0xFF), LEqual (HBCL, Zero)))
                                    {
                                        If (D3CV (^PEG0.RSPT, ^PEG0.RSPI))
                                        {
                                            PRLD (HBPL)
                                        }
                                    }
                                }

                                ^PEG0.VPOF ()
                            }
                            Case (0x8008FFFF)
                            {
                                If (CondRefOf (\HBCL))
                                {
                                    If (LAnd (LNotEqual (HBCL, 0xFF), LEqual (HBCL, One)))
                                    {
                                        If (D3CV (^PEG1.RSPT, ^PEG1.RSPI))
                                        {
                                            PRLD (HBPL)
                                        }
                                    }
                                }

                                ^PEG1.VPOF ()
                            }
                            Case (0x8009FFFF)
                            {
                                If (CondRefOf (\HBCL))
                                {
                                    If (LAnd (LNotEqual (HBCL, 0xFF), LEqual (HBCL, 0x02)))
                                    {
                                        If (D3CV (^PEG2.RSPT, ^PEG2.RSPI))
                                        {
                                            PRLD (HBPL)
                                        }
                                    }
                                }

                                ^PEG2.VPOF ()
                            }
                            Case (0x800AFFFF)
                            {
                                ^PEG3.VPOF ()
                            }
                            Case (0x00B8FFF0)
                            {
                                ^PRT0.VSOF ()
                            }
                            Case (0x00B8FFF1)
                            {
                                ^PRT1.VSOF ()
                            }
                            Case (0x00B8FFF2)
                            {
                                ^PRT2.VSOF ()
                            }
                            Case (0x00B8FFF3)
                            {
                                ^PRT3.VSOF ()
                            }
                            Case (0x00B8FFF4)
                            {
                                ^PRT4.VSOF ()
                            }
                            Case (0x00B8FFF5)
                            {
                                ^PRT5.VSOF ()
                            }
                            Case (0x00B8FFF6)
                            {
                                ^PRT6.VSOF ()
                            }
                            Case (0x00B8FFF7)
                            {
                                ^PRT7.VSOF ()
                            }

                        }

                        Increment (Local0)
                    }
                }

                Method (IVRM, 1, NotSerialized)
                {
                    Store (Zero, Local0)
                    While (LGreater (VV0S, Local0))
                    {
                        If (LEqual (Arg0, ToInteger (DerefOf (Index (VV0D, Local0)))))
                        {
                            Return (One)
                        }

                        Increment (Local0)
                    }

                    Store (Zero, Local0)
                    While (LGreater (VV1S, Local0))
                    {
                        If (LEqual (Arg0, ToInteger (DerefOf (Index (VV1D, Local0)))))
                        {
                            Return (One)
                        }

                        Increment (Local0)
                    }

                    Store (Zero, Local0)
                    While (LGreater (VV2S, Local0))
                    {
                        If (LEqual (Arg0, ToInteger (DerefOf (Index (VV2D, Local0)))))
                        {
                            Return (One)
                        }

                        Increment (Local0)
                    }

                    Store (Zero, Local0)
                    While (LGreater (VV3S, Local0))
                    {
                        If (LEqual (Arg0, ToInteger (DerefOf (Index (VV3D, Local0)))))
                        {
                            Return (One)
                        }

                        Increment (Local0)
                    }

                    Return (Zero)
                }

                Method (VD3C, 1, NotSerialized)
                {
                    Return (LAnd (VD3A, IVRM (Arg0)))
                }

                Device (VOL0)
                {
                    Name (_ADR, 0x0080FFFF)  // _ADR: Address
                    If (LAnd (CondRefOf (\RTD3), CondRefOf (\STD3)))
                    {
                        If (LAnd (LNotEqual (RTD3, Zero), LEqual (STD3, 0x02)))
                        {
                            Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                            {
                                Return (Package (0x01)
                                {
                                    V0PR
                                })
                            }

                            Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                            {
                                Return (Package (0x01)
                                {
                                    V0PR
                                })
                            }
                        }
                    }

                    If (LAnd (CondRefOf (\RTD3), CondRefOf (\STD3)))
                    {
                        If (LAnd (LNotEqual (RTD3, Zero), LEqual (STD3, 0x02)))
                        {
                            PowerResource (V0PR, 0x04, 0x0000)
                            {
                                Name (_STA, One)  // _STA: Status
                                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                                {
                                    If (VD3A)
                                    {
                                        VLON (VV0S, VV0D)
                                        Store (One, _STA)
                                    }
                                    Else
                                    {
                                    }
                                }

                                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                                {
                                    If (VD3A)
                                    {
                                        VLOF (VV0S, VV0D)
                                        Store (Zero, _STA)
                                    }
                                    Else
                                    {
                                    }
                                }
                            }
                        }
                    }
                }

                Device (VOL1)
                {
                    Name (_ADR, 0x0081FFFF)  // _ADR: Address
                    If (LAnd (CondRefOf (\RTD3), CondRefOf (\STD3)))
                    {
                        If (LAnd (LNotEqual (RTD3, Zero), LEqual (STD3, 0x02)))
                        {
                            Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                            {
                                Return (Package (0x01)
                                {
                                    V1PR
                                })
                            }

                            Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                            {
                                Return (Package (0x01)
                                {
                                    V1PR
                                })
                            }
                        }
                    }

                    If (LAnd (CondRefOf (\RTD3), CondRefOf (\STD3)))
                    {
                        If (LAnd (LNotEqual (RTD3, Zero), LEqual (STD3, 0x02)))
                        {
                            PowerResource (V1PR, 0x04, 0x0000)
                            {
                                Name (_STA, One)  // _STA: Status
                                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                                {
                                    If (VD3A)
                                    {
                                        VLON (VV1S, VV1D)
                                        Store (One, _STA)
                                    }
                                    Else
                                    {
                                    }
                                }

                                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                                {
                                    If (VD3A)
                                    {
                                        VLOF (VV1S, VV1D)
                                        Store (Zero, _STA)
                                    }
                                    Else
                                    {
                                    }
                                }
                            }
                        }
                    }
                }

                Device (VOL2)
                {
                    Name (_ADR, 0x0082FFFF)  // _ADR: Address
                    If (LAnd (CondRefOf (\RTD3), CondRefOf (\STD3)))
                    {
                        If (LAnd (LNotEqual (RTD3, Zero), LEqual (STD3, 0x02)))
                        {
                            Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                            {
                                Return (Package (0x01)
                                {
                                    V2PR
                                })
                            }

                            Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                            {
                                Return (Package (0x01)
                                {
                                    V2PR
                                })
                            }
                        }
                    }

                    If (LAnd (CondRefOf (\RTD3), CondRefOf (\STD3)))
                    {
                        If (LAnd (LNotEqual (RTD3, Zero), LEqual (STD3, 0x02)))
                        {
                            PowerResource (V2PR, 0x04, 0x0000)
                            {
                                Name (_STA, One)  // _STA: Status
                                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                                {
                                    If (VD3A)
                                    {
                                        VLON (VV2S, VV2D)
                                        Store (One, _STA)
                                    }
                                    Else
                                    {
                                    }
                                }

                                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                                {
                                    If (VD3A)
                                    {
                                        VLOF (VV2S, VV2D)
                                        Store (Zero, _STA)
                                    }
                                    Else
                                    {
                                    }
                                }
                            }
                        }
                    }
                }

                Device (VOL3)
                {
                    Name (_ADR, 0x0083FFFF)  // _ADR: Address
                    If (LAnd (CondRefOf (\RTD3), CondRefOf (\STD3)))
                    {
                        If (LAnd (LNotEqual (RTD3, Zero), LEqual (STD3, 0x02)))
                        {
                            Method (_PR0, 0, NotSerialized)  // _PR0: Power Resources for D0
                            {
                                Return (Package (0x01)
                                {
                                    V3PR
                                })
                            }

                            Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
                            {
                                Return (Package (0x01)
                                {
                                    V3PR
                                })
                            }
                        }
                    }

                    If (LAnd (CondRefOf (\RTD3), CondRefOf (\STD3)))
                    {
                        If (LAnd (LNotEqual (RTD3, Zero), LEqual (STD3, 0x02)))
                        {
                            PowerResource (V3PR, 0x04, 0x0000)
                            {
                                Name (_STA, One)  // _STA: Status
                                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                                {
                                    If (VD3A)
                                    {
                                        VLON (VV3S, VV3D)
                                        Store (One, _STA)
                                    }
                                    Else
                                    {
                                    }
                                }

                                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                                {
                                    If (VD3A)
                                    {
                                        VLOF (VV3S, VV3D)
                                        Store (Zero, _STA)
                                    }
                                    Else
                                    {
                                    }
                                }
                            }
                        }
                    }
                }

                Method (D3CV, 2, Serialized)
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT0.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT1.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT2.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT3.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT4.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT5.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT6.SPOF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT7.SPOF))
                                    {
                                        Return (One)
                                    }
                                }

                            }
                        }
                        Case (One)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.RP01.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.RP02.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.RP03.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.RP04.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.RP05.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.RP06.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.RP07.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.RP08.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (\_SB.PC00.RP09.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (\_SB.PC00.RP10.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (\_SB.PC00.RP11.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (\_SB.PC00.RP12.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x0C)
                                {
                                    If (CondRefOf (\_SB.PC00.RP13.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x0D)
                                {
                                    If (CondRefOf (\_SB.PC00.RP14.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x0E)
                                {
                                    If (CondRefOf (\_SB.PC00.RP15.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x0F)
                                {
                                    If (CondRefOf (\_SB.PC00.RP16.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x10)
                                {
                                    If (CondRefOf (\_SB.PC00.RP17.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x11)
                                {
                                    If (CondRefOf (\_SB.PC00.RP18.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x12)
                                {
                                    If (CondRefOf (\_SB.PC00.RP19.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x13)
                                {
                                    If (CondRefOf (\_SB.PC00.RP20.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x14)
                                {
                                    If (CondRefOf (\_SB.PC00.RP21.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x15)
                                {
                                    If (CondRefOf (\_SB.PC00.RP22.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x16)
                                {
                                    If (CondRefOf (\_SB.PC00.RP23.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x17)
                                {
                                    If (CondRefOf (\_SB.PC00.RP24.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x18)
                                {
                                    If (CondRefOf (\_SB.PC00.RP25.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x19)
                                {
                                    If (CondRefOf (\_SB.PC00.RP26.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x1A)
                                {
                                    If (CondRefOf (\_SB.PC00.RP27.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x1B)
                                {
                                    If (CondRefOf (\_SB.PC00.RP28.POFF))
                                    {
                                        Return (One)
                                    }
                                }

                            }
                        }
                        Case (0x02)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG0.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG1.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG2.POFF))
                                    {
                                        Return (One)
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG3.POFF))
                                    {
                                        Return (One)
                                    }
                                }

                            }
                        }

                    }

                    Return (Zero)
                }

                Method (VDON, 2, Serialized)
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT0.SPON))
                                    {
                                        ^^SAT0.PRT0.SPON ()
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT1.SPON))
                                    {
                                        ^^SAT0.PRT1.SPON ()
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT2.SPON))
                                    {
                                        ^^SAT0.PRT2.SPON ()
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT3.SPON))
                                    {
                                        ^^SAT0.PRT3.SPON ()
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT4.SPON))
                                    {
                                        ^^SAT0.PRT4.SPON ()
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT5.SPON))
                                    {
                                        ^^SAT0.PRT5.SPON ()
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT6.SPON))
                                    {
                                        ^^SAT0.PRT6.SPON ()
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT7.SPON))
                                    {
                                        ^^SAT0.PRT7.SPON ()
                                    }
                                }

                            }
                        }
                        Case (One)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.RP01.PON))
                                    {
                                        ^^RP01.PON ()
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.RP02.PON))
                                    {
                                        ^^RP02.PON ()
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.RP03.PON))
                                    {
                                        ^^RP03.PON ()
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.RP04.PON))
                                    {
                                        ^^RP04.PON ()
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.RP05.PON))
                                    {
                                        ^^RP05.PON ()
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.RP06.PON))
                                    {
                                        ^^RP06.PON ()
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.RP07.PON))
                                    {
                                        ^^RP07.PON ()
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.RP08.PON))
                                    {
                                        ^^RP08.PON ()
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (\_SB.PC00.RP09.PON))
                                    {
                                        ^^RP09.PON ()
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (\_SB.PC00.RP10.PON))
                                    {
                                        ^^RP10.PON ()
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (\_SB.PC00.RP11.PON))
                                    {
                                        ^^RP11.PON ()
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (\_SB.PC00.RP12.PON))
                                    {
                                        ^^RP12.PON ()
                                    }
                                }
                                Case (0x0C)
                                {
                                    If (CondRefOf (\_SB.PC00.RP13.PON))
                                    {
                                        ^^RP13.PON ()
                                    }
                                }
                                Case (0x0D)
                                {
                                    If (CondRefOf (\_SB.PC00.RP14.PON))
                                    {
                                        ^^RP14.PON ()
                                    }
                                }
                                Case (0x0E)
                                {
                                    If (CondRefOf (\_SB.PC00.RP15.PON))
                                    {
                                        ^^RP15.PON ()
                                    }
                                }
                                Case (0x0F)
                                {
                                    If (CondRefOf (\_SB.PC00.RP16.PON))
                                    {
                                        ^^RP16.PON ()
                                    }
                                }
                                Case (0x10)
                                {
                                    If (CondRefOf (\_SB.PC00.RP17.PON))
                                    {
                                        ^^RP17.PON ()
                                    }
                                }
                                Case (0x11)
                                {
                                    If (CondRefOf (\_SB.PC00.RP18.PON))
                                    {
                                        ^^RP18.PON ()
                                    }
                                }
                                Case (0x12)
                                {
                                    If (CondRefOf (\_SB.PC00.RP19.PON))
                                    {
                                        ^^RP19.PON ()
                                    }
                                }
                                Case (0x13)
                                {
                                    If (CondRefOf (\_SB.PC00.RP20.PON))
                                    {
                                        ^^RP20.PON ()
                                    }
                                }
                                Case (0x14)
                                {
                                    If (CondRefOf (\_SB.PC00.RP21.PON))
                                    {
                                        ^^RP21.PON ()
                                    }
                                }
                                Case (0x15)
                                {
                                    If (CondRefOf (\_SB.PC00.RP22.PON))
                                    {
                                        ^^RP22.PON ()
                                    }
                                }
                                Case (0x16)
                                {
                                    If (CondRefOf (\_SB.PC00.RP23.PON))
                                    {
                                        ^^RP23.PON ()
                                    }
                                }
                                Case (0x17)
                                {
                                    If (CondRefOf (\_SB.PC00.RP24.PON))
                                    {
                                        ^^RP24.PON ()
                                    }
                                }
                                Case (0x18)
                                {
                                    If (CondRefOf (\_SB.PC00.RP25.PON))
                                    {
                                        ^^RP25.PON ()
                                    }
                                }
                                Case (0x19)
                                {
                                    If (CondRefOf (\_SB.PC00.RP26.PON))
                                    {
                                        ^^RP26.PON ()
                                    }
                                }
                                Case (0x1A)
                                {
                                    If (CondRefOf (\_SB.PC00.RP27.PON))
                                    {
                                        ^^RP27.PON ()
                                    }
                                }
                                Case (0x1B)
                                {
                                    If (CondRefOf (\_SB.PC00.RP28.PON))
                                    {
                                        ^^RP28.PON ()
                                    }
                                }

                            }
                        }
                        Case (0x02)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG0.PON))
                                    {
                                        ^^PEG0.PON ()
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG1.PON))
                                    {
                                        ^^PEG1.PON ()
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG2.PON))
                                    {
                                        ^^PEG2.PON ()
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG3.PON))
                                    {
                                        ^^PEG3.PON ()
                                    }
                                }

                            }
                        }

                    }
                }

                Method (VDOF, 2, Serialized)
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT0.SPOF))
                                    {
                                        ^^SAT0.PRT0.SPOF ()
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT1.SPOF))
                                    {
                                        ^^SAT0.PRT1.SPOF ()
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT2.SPOF))
                                    {
                                        ^^SAT0.PRT2.SPOF ()
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT3.SPOF))
                                    {
                                        ^^SAT0.PRT3.SPOF ()
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT4.SPOF))
                                    {
                                        ^^SAT0.PRT4.SPOF ()
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT5.SPOF))
                                    {
                                        ^^SAT0.PRT5.SPOF ()
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT6.SPOF))
                                    {
                                        ^^SAT0.PRT6.SPOF ()
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.SAT0.PRT7.SPOF))
                                    {
                                        ^^SAT0.PRT7.SPOF ()
                                    }
                                }

                            }
                        }
                        Case (One)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.RP01.POFF))
                                    {
                                        ^^RP01.POFF ()
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.RP02.POFF))
                                    {
                                        ^^RP02.POFF ()
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.RP03.POFF))
                                    {
                                        ^^RP03.POFF ()
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.RP04.POFF))
                                    {
                                        ^^RP04.POFF ()
                                    }
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.PC00.RP05.POFF))
                                    {
                                        ^^RP05.POFF ()
                                    }
                                }
                                Case (0x05)
                                {
                                    If (CondRefOf (\_SB.PC00.RP06.POFF))
                                    {
                                        ^^RP06.POFF ()
                                    }
                                }
                                Case (0x06)
                                {
                                    If (CondRefOf (\_SB.PC00.RP07.POFF))
                                    {
                                        ^^RP07.POFF ()
                                    }
                                }
                                Case (0x07)
                                {
                                    If (CondRefOf (\_SB.PC00.RP08.POFF))
                                    {
                                        ^^RP08.POFF ()
                                    }
                                }
                                Case (0x08)
                                {
                                    If (CondRefOf (\_SB.PC00.RP09.POFF))
                                    {
                                        ^^RP09.POFF ()
                                    }
                                }
                                Case (0x09)
                                {
                                    If (CondRefOf (\_SB.PC00.RP10.POFF))
                                    {
                                        ^^RP10.POFF ()
                                    }
                                }
                                Case (0x0A)
                                {
                                    If (CondRefOf (\_SB.PC00.RP11.POFF))
                                    {
                                        ^^RP11.POFF ()
                                    }
                                }
                                Case (0x0B)
                                {
                                    If (CondRefOf (\_SB.PC00.RP12.POFF))
                                    {
                                        ^^RP12.POFF ()
                                    }
                                }
                                Case (0x0C)
                                {
                                    If (CondRefOf (\_SB.PC00.RP13.POFF))
                                    {
                                        ^^RP13.POFF ()
                                    }
                                }
                                Case (0x0D)
                                {
                                    If (CondRefOf (\_SB.PC00.RP14.POFF))
                                    {
                                        ^^RP14.POFF ()
                                    }
                                }
                                Case (0x0E)
                                {
                                    If (CondRefOf (\_SB.PC00.RP15.POFF))
                                    {
                                        ^^RP15.POFF ()
                                    }
                                }
                                Case (0x0F)
                                {
                                    If (CondRefOf (\_SB.PC00.RP16.POFF))
                                    {
                                        ^^RP16.POFF ()
                                    }
                                }
                                Case (0x10)
                                {
                                    If (CondRefOf (\_SB.PC00.RP17.POFF))
                                    {
                                        ^^RP17.POFF ()
                                    }
                                }
                                Case (0x11)
                                {
                                    If (CondRefOf (\_SB.PC00.RP18.POFF))
                                    {
                                        ^^RP18.POFF ()
                                    }
                                }
                                Case (0x12)
                                {
                                    If (CondRefOf (\_SB.PC00.RP19.POFF))
                                    {
                                        ^^RP19.POFF ()
                                    }
                                }
                                Case (0x13)
                                {
                                    If (CondRefOf (\_SB.PC00.RP20.POFF))
                                    {
                                        ^^RP20.POFF ()
                                    }
                                }
                                Case (0x14)
                                {
                                    If (CondRefOf (\_SB.PC00.RP21.POFF))
                                    {
                                        ^^RP21.POFF ()
                                    }
                                }
                                Case (0x15)
                                {
                                    If (CondRefOf (\_SB.PC00.RP22.POFF))
                                    {
                                        ^^RP22.POFF ()
                                    }
                                }
                                Case (0x16)
                                {
                                    If (CondRefOf (\_SB.PC00.RP23.POFF))
                                    {
                                        ^^RP23.POFF ()
                                    }
                                }
                                Case (0x17)
                                {
                                    If (CondRefOf (\_SB.PC00.RP24.POFF))
                                    {
                                        ^^RP24.POFF ()
                                    }
                                }
                                Case (0x18)
                                {
                                    If (CondRefOf (\_SB.PC00.RP25.POFF))
                                    {
                                        ^^RP25.POFF ()
                                    }
                                }
                                Case (0x19)
                                {
                                    If (CondRefOf (\_SB.PC00.RP26.POFF))
                                    {
                                        ^^RP26.POFF ()
                                    }
                                }
                                Case (0x1A)
                                {
                                    If (CondRefOf (\_SB.PC00.RP27.POFF))
                                    {
                                        ^^RP27.POFF ()
                                    }
                                }
                                Case (0x1B)
                                {
                                    If (CondRefOf (\_SB.PC00.RP28.POFF))
                                    {
                                        ^^RP28.POFF ()
                                    }
                                }

                            }
                        }
                        Case (0x02)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Zero)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG0.POFF))
                                    {
                                        ^^PEG0.POFF ()
                                    }
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG1.POFF))
                                    {
                                        ^^PEG1.POFF ()
                                    }
                                }
                                Case (0x02)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG2.POFF))
                                    {
                                        ^^PEG2.POFF ()
                                    }
                                }
                                Case (0x03)
                                {
                                    If (CondRefOf (\_SB.PC00.PEG3.POFF))
                                    {
                                        ^^PEG3.POFF ()
                                    }
                                }

                            }
                        }

                    }
                }
            }
        }
    }

    Scope (_SB.PC00.RP01)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (CondRefOf (\_SB.PC00.RP01.TPRW))
            {
                Return (TPRW ())
            }

            If (LAnd (LNotEqual (PSW3, Zero), LEqual (RPN3, One)))
            {
                Return (XPRW (GGPE (PSW3), 0x04))
            }
            ElseIf (LAnd (LNotEqual (PSW2, Zero), LEqual (RPN2, One)))
            {
                Return (XPRW (GGPE (PSW2), 0x04))
            }
            Else
            {
                Return (XPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP02)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (LAnd (LNotEqual (WWKP, Zero), LEqual (WWRP, 0x02)))
            {
                Return (XPRW (GGPE (WWKP), 0x04))
            }
            ElseIf (LAnd (LEqual (FVSP, One), LAnd (LNotEqual (FVWP, Zero), LEqual (RPFV, 0x02))))
            {
                Return (XPRW (GGPE (FVWP), 0x04))
            }
            Else
            {
                Return (XPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP03)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (LAnd (LNotEqual (WWKP, Zero), LEqual (WWRP, 0x03)))
            {
                Return (XPRW (GGPE (WWKP), 0x04))
            }
            Else
            {
                Return (XPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP04)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (LAnd (LNotEqual (WLWK, Zero), LEqual (WLRP, 0x04)))
            {
                Return (XPRW (GGPE (WLWK), 0x04))
            }
            ElseIf (LAnd (LNotEqual (WWKP, Zero), LEqual (WWRP, 0x04)))
            {
                Return (XPRW (GGPE (WWKP), 0x04))
            }
            Else
            {
                Return (XPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP05)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (CondRefOf (\_SB.PC00.RP05.TPRW))
            {
                Return (TPRW ())
            }

            If (LOr (LAnd (LNotEqual (PSW3, Zero), LEqual (RPN3, 0x05)), LAnd (LNotEqual (WLWK, Zero), LEqual (WLRP, 0x05))))
            {
                If (LAnd (LNotEqual (PSW3, Zero), LEqual (RPN3, 0x05)))
                {
                    Return (XPRW (GGPE (PSW3), 0x04))
                }
                ElseIf (LAnd (LNotEqual (WLWK, Zero), LEqual (WLRP, 0x05)))
                {
                    Return (XPRW (GGPE (WLWK), 0x04))
                }
                Else
                {
                    Return (XPRW (0x69, 0x04))
                }
            }
            ElseIf (LAnd (LNotEqual (PSW2, Zero), LEqual (RPN2, 0x05)))
            {
                Return (XPRW (GGPE (PSW2), 0x04))
            }
            ElseIf (LAnd (LNotEqual (PSWP, Zero), LEqual (RPNB, 0x05)))
            {
                Return (XPRW (GGPE (PSWP), 0x04))
            }
            Else
            {
                Return (XPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP06)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (LAnd (LNotEqual (WWKP, Zero), LEqual (WWRP, 0x06)))
            {
                Return (XPRW (GGPE (WWKP), 0x04))
            }
            Else
            {
                Return (XPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP07)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (LAnd (LNotEqual (PSWP, Zero), LEqual (RPNB, 0x07)))
            {
                Return (XPRW (GGPE (PSWP), 0x04))
            }
            ElseIf (LAnd (LEqual (FVSP, One), LAnd (LNotEqual (FVWP, Zero), LEqual (RPFV, 0x07))))
            {
                Return (XPRW (GGPE (FVWP), 0x04))
            }
            Else
            {
                Return (XPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP08)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (LAnd (LNotEqual (WLWK, Zero), LEqual (WLRP, 0x08)))
            {
                Return (XPRW (GGPE (WLWK), 0x04))
            }
            ElseIf (LAnd (LNotEqual (PSWP, Zero), LEqual (RPNB, 0x08)))
            {
                Return (XPRW (GGPE (PSWP), 0x04))
            }
            Else
            {
                Return (XPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP09)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (CondRefOf (\_SB.PC00.RP09.TPRW))
            {
                Return (TPRW ())
            }

            If (LAnd (LNotEqual (PSW2, Zero), LEqual (RPN2, 0x09)))
            {
                Return (XPRW (GGPE (PSW2), 0x04))
            }
            ElseIf (LAnd (LNotEqual (PSW3, Zero), LEqual (RPN3, 0x09)))
            {
                Return (XPRW (GGPE (PSW3), 0x04))
            }
            ElseIf (LAnd (LNotEqual (PSWP, Zero), LEqual (RPNB, 0x09)))
            {
                Return (XPRW (GGPE (PSWP), 0x04))
            }
            ElseIf (LAnd (LNotEqual (OMW1, Zero), LEqual (RPO1, 0x09)))
            {
                Return (XPRW (GGPE (OMW1), 0x04))
            }
            ElseIf (LAnd (LNotEqual (WLWK, Zero), LEqual (WLRP, 0x09)))
            {
                Return (XPRW (GGPE (WLWK), 0x04))
            }
            Else
            {
                Return (XPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP10)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (LAnd (LNotEqual (WLWK, Zero), LEqual (WLRP, 0x0A)))
            {
                Return (XPRW (GGPE (WLWK), 0x04))
            }
            ElseIf (LAnd (LNotEqual (WWKP, Zero), LEqual (WWRP, 0x0A)))
            {
                Return (XPRW (GGPE (WWKP), 0x04))
            }
            Else
            {
                Return (XPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP11)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (XPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PC00.RP12)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (XPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PC00.RP13)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (CondRefOf (\_SB.PC00.RP13.TPRW))
            {
                Return (TPRW ())
            }

            If (LAnd (LNotEqual (PSWP, Zero), LEqual (RPNB, 0x0D)))
            {
                Return (XPRW (GGPE (PSWP), 0x04))
            }
            Else
            {
                Return (XPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP14)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (XPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PC00.RP15)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (XPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PC00.RP16)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (XPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PC00.RP17)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (CondRefOf (\_SB.PC00.RP17.TPRW))
            {
                Return (TPRW ())
            }

            Return (XPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PC00.RP18)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (XPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PC00.RP19)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (XPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PC00.RP20)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (XPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PC00.RP21)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            If (CondRefOf (\_SB.PC00.RP21.TPRW))
            {
                Return (TPRW ())
            }

            If (LAnd (LNotEqual (PSWP, Zero), LEqual (RPNB, 0x15)))
            {
                Return (XPRW (GGPE (PSWP), 0x04))
            }
            ElseIf (LAnd (LNotEqual (OMW1, Zero), LEqual (RPO1, 0x15)))
            {
                Return (XPRW (GGPE (OMW1), 0x04))
            }
            Else
            {
                Return (XPRW (0x69, 0x04))
            }
        }
    }

    Scope (_SB.PC00.RP22)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (XPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PC00.RP23)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (XPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PC00.RP24)
    {
        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (XPRW (0x69, 0x04))
        }
    }

    If (LEqual (PCHS, 0x04))
    {
        Scope (_SB.PC00.RP25)
        {
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                If (LAnd (LNotEqual (PSW2, Zero), LEqual (RPN2, 0x19)))
                {
                    Return (XPRW (GGPE (PSW2), 0x04))
                }
                ElseIf (LAnd (LNotEqual (OMW1, Zero), LEqual (RPO1, 0x19)))
                {
                    Return (XPRW (GGPE (OMW1), 0x04))
                }
                ElseIf (LAnd (LNotEqual (OMW2, Zero), LEqual (RPO2, 0x19)))
                {
                    Return (XPRW (GGPE (OMW2), 0x04))
                }
                Else
                {
                    Return (XPRW (0x69, 0x04))
                }
            }
        }

        Scope (_SB.PC00.RP26)
        {
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (XPRW (0x69, 0x04))
            }
        }

        Scope (_SB.PC00.RP27)
        {
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (XPRW (0x69, 0x04))
            }
        }

        Scope (_SB.PC00.RP28)
        {
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (XPRW (0x69, 0x04))
            }
        }
    }

    If (LEqual (WFFD, One))
    {
        Scope (_SB)
        {
            Method (WFRT, 3, Serialized)
            {
                Store (Acquire (WWMT, 0x03E8), Local0)
                If (LEqual (Local0, Zero))
                {
                    Store (One, Local0)
                    If (LEqual (WWRP, One))
                    {
                        If (LEqual (Arg0, Zero)){}
                        Else
                        {
                        }

                        If (CondRefOf (\_SB.PC00.RP01.PXSX.FHRF))
                        {
                            ^PC00.RP01.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        Notify (^PC00.RP01.PXSX, One)
                        If (CondRefOf (\_SB.PC00.RP01.PXSX.SHRF))
                        {
                            ^PC00.RP01.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        Notify (^PC00.RP01.PXSX, One)
                        Release (WWMT)
                        Store (Zero, Local0)
                        If (CondRefOf (\_SB.PC00.RP01.PXSX.DOSV))
                        {
                            ^PC00.RP01.PXSX.DOSV ()
                        }
                    }

                    If (LEqual (WWRP, 0x02))
                    {
                        If (LEqual (Arg0, Zero)){}
                        Else
                        {
                        }

                        If (CondRefOf (\_SB.PC00.RP02.PXSX.FHRF))
                        {
                            ^PC00.RP02.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        Notify (^PC00.RP02.PXSX, One)
                        If (CondRefOf (\_SB.PC00.RP02.PXSX.SHRF))
                        {
                            ^PC00.RP02.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        Notify (^PC00.RP02.PXSX, One)
                        Release (WWMT)
                        Store (Zero, Local0)
                        If (CondRefOf (\_SB.PC00.RP02.PXSX.DOSV))
                        {
                            ^PC00.RP02.PXSX.DOSV ()
                        }
                    }

                    If (LEqual (WWRP, 0x03))
                    {
                        If (LEqual (Arg0, Zero)){}
                        Else
                        {
                        }

                        If (CondRefOf (\_SB.PC00.RP03.PXSX.FHRF))
                        {
                            ^PC00.RP03.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        Notify (^PC00.RP03.PXSX, One)
                        If (CondRefOf (\_SB.PC00.RP03.PXSX.SHRF))
                        {
                            ^PC00.RP03.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        Notify (^PC00.RP03.PXSX, One)
                        Release (WWMT)
                        Store (Zero, Local0)
                        If (CondRefOf (\_SB.PC00.RP03.PXSX.DOSV))
                        {
                            ^PC00.RP03.PXSX.DOSV ()
                        }
                    }

                    If (LEqual (WWRP, 0x04))
                    {
                        If (LEqual (Arg0, Zero)){}
                        Else
                        {
                        }

                        If (CondRefOf (\_SB.PC00.RP04.PXSX.FHRF))
                        {
                            ^PC00.RP04.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        Notify (^PC00.RP04.PXSX, One)
                        If (CondRefOf (\_SB.PC00.RP04.PXSX.SHRF))
                        {
                            ^PC00.RP04.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        Notify (^PC00.RP04.PXSX, One)
                        Release (WWMT)
                        Store (Zero, Local0)
                        If (CondRefOf (\_SB.PC00.RP04.PXSX.DOSV))
                        {
                            ^PC00.RP04.PXSX.DOSV ()
                        }
                    }

                    If (LEqual (WWRP, 0x05))
                    {
                        If (LEqual (Arg0, Zero)){}
                        Else
                        {
                        }

                        If (CondRefOf (\_SB.PC00.RP05.PXSX.FHRF))
                        {
                            ^PC00.RP05.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        Notify (^PC00.RP05.PXSX, One)
                        If (CondRefOf (\_SB.PC00.RP05.PXSX.SHRF))
                        {
                            ^PC00.RP05.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        Notify (^PC00.RP05.PXSX, One)
                        Release (WWMT)
                        Store (Zero, Local0)
                        If (CondRefOf (\_SB.PC00.RP05.PXSX.DOSV))
                        {
                            ^PC00.RP05.PXSX.DOSV ()
                        }
                    }

                    If (LEqual (WWRP, 0x06))
                    {
                        If (LEqual (Arg0, Zero)){}
                        Else
                        {
                        }

                        If (CondRefOf (\_SB.PC00.RP06.PXSX.FHRF))
                        {
                            ^PC00.RP06.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        Notify (^PC00.RP06.PXSX, One)
                        If (CondRefOf (\_SB.PC00.RP06.PXSX.SHRF))
                        {
                            ^PC00.RP06.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        Notify (^PC00.RP06.PXSX, One)
                        Release (WWMT)
                        Store (Zero, Local0)
                        If (CondRefOf (\_SB.PC00.RP06.PXSX.DOSV))
                        {
                            ^PC00.RP06.PXSX.DOSV ()
                        }
                    }

                    If (LEqual (WWRP, 0x07))
                    {
                        If (LEqual (Arg0, Zero)){}
                        Else
                        {
                        }

                        If (CondRefOf (\_SB.PC00.RP07.PXSX.FHRF))
                        {
                            ^PC00.RP07.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        Notify (^PC00.RP07.PXSX, One)
                        If (CondRefOf (\_SB.PC00.RP07.PXSX.SHRF))
                        {
                            ^PC00.RP07.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        Notify (^PC00.RP07.PXSX, One)
                        Release (WWMT)
                        Store (Zero, Local0)
                        If (CondRefOf (\_SB.PC00.RP07.PXSX.DOSV))
                        {
                            ^PC00.RP07.PXSX.DOSV ()
                        }
                    }

                    If (LEqual (WWRP, 0x08))
                    {
                        If (LEqual (Arg0, Zero)){}
                        Else
                        {
                        }

                        If (CondRefOf (\_SB.PC00.RP08.PXSX.FHRF))
                        {
                            ^PC00.RP08.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        Notify (^PC00.RP08.PXSX, One)
                        If (CondRefOf (\_SB.PC00.RP08.PXSX.SHRF))
                        {
                            ^PC00.RP08.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        Notify (^PC00.RP08.PXSX, One)
                        Release (WWMT)
                        Store (Zero, Local0)
                        If (CondRefOf (\_SB.PC00.RP08.PXSX.DOSV))
                        {
                            ^PC00.RP08.PXSX.DOSV ()
                        }
                    }

                    If (LEqual (WWRP, 0x09))
                    {
                        If (LEqual (Arg0, Zero)){}
                        Else
                        {
                        }

                        If (CondRefOf (\_SB.PC00.RP09.PXSX.FHRF))
                        {
                            ^PC00.RP09.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        Notify (^PC00.RP09.PXSX, One)
                        If (CondRefOf (\_SB.PC00.RP09.PXSX.SHRF))
                        {
                            ^PC00.RP09.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        Notify (^PC00.RP09.PXSX, One)
                        Release (WWMT)
                        Store (Zero, Local0)
                        If (CondRefOf (\_SB.PC00.RP09.PXSX.DOSV))
                        {
                            ^PC00.RP09.PXSX.DOSV ()
                        }
                    }

                    If (LEqual (WWRP, 0x0A))
                    {
                        If (LEqual (Arg0, Zero)){}
                        Else
                        {
                        }

                        If (CondRefOf (\_SB.PC00.RP10.PXSX.FHRF))
                        {
                            ^PC00.RP10.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        Notify (^PC00.RP10.PXSX, One)
                        If (CondRefOf (\_SB.PC00.RP10.PXSX.SHRF))
                        {
                            ^PC00.RP10.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        Notify (^PC00.RP10.PXSX, One)
                        Release (WWMT)
                        Store (Zero, Local0)
                        If (CondRefOf (\_SB.PC00.RP10.PXSX.DOSV))
                        {
                            ^PC00.RP10.PXSX.DOSV ()
                        }
                    }

                    If (LEqual (WWRP, 0x0B))
                    {
                        If (LEqual (Arg0, Zero)){}
                        Else
                        {
                        }

                        If (CondRefOf (\_SB.PC00.RP11.PXSX.FHRF))
                        {
                            ^PC00.RP11.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        Notify (^PC00.RP11.PXSX, One)
                        If (CondRefOf (\_SB.PC00.RP11.PXSX.SHRF))
                        {
                            ^PC00.RP11.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        Notify (^PC00.RP11.PXSX, One)
                        Release (WWMT)
                        Store (Zero, Local0)
                        If (CondRefOf (\_SB.PC00.RP11.PXSX.DOSV))
                        {
                            ^PC00.RP11.PXSX.DOSV ()
                        }
                    }

                    If (LEqual (WWRP, 0x0C))
                    {
                        If (LEqual (Arg0, Zero)){}
                        Else
                        {
                        }

                        If (CondRefOf (\_SB.PC00.RP12.PXSX.FHRF))
                        {
                            ^PC00.RP12.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        Notify (^PC00.RP12.PXSX, One)
                        If (CondRefOf (\_SB.PC00.RP12.PXSX.SHRF))
                        {
                            ^PC00.RP12.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        Notify (^PC00.RP12.PXSX, One)
                        Release (WWMT)
                        Store (Zero, Local0)
                        If (CondRefOf (\_SB.PC00.RP12.PXSX.DOSV))
                        {
                            ^PC00.RP12.PXSX.DOSV ()
                        }
                    }

                    If (LEqual (WWRP, 0x0D))
                    {
                        If (LEqual (Arg0, Zero)){}
                        Else
                        {
                        }

                        If (CondRefOf (\_SB.PC00.RP13.PXSX.FHRF))
                        {
                            ^PC00.RP13.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        Notify (^PC00.RP13.PXSX, One)
                        If (CondRefOf (\_SB.PC00.RP13.PXSX.SHRF))
                        {
                            ^PC00.RP13.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        Notify (^PC00.RP13.PXSX, One)
                        Release (WWMT)
                        Store (Zero, Local0)
                        If (CondRefOf (\_SB.PC00.RP13.PXSX.DOSV))
                        {
                            ^PC00.RP13.PXSX.DOSV ()
                        }
                    }

                    If (LEqual (WWRP, 0x0E))
                    {
                        If (LEqual (Arg0, Zero)){}
                        Else
                        {
                        }

                        If (CondRefOf (\_SB.PC00.RP14.PXSX.FHRF))
                        {
                            ^PC00.RP14.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        Notify (^PC00.RP14.PXSX, One)
                        If (CondRefOf (\_SB.PC00.RP14.PXSX.SHRF))
                        {
                            ^PC00.RP14.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        Notify (^PC00.RP14.PXSX, One)
                        Release (WWMT)
                        Store (Zero, Local0)
                        If (CondRefOf (\_SB.PC00.RP14.PXSX.DOSV))
                        {
                            ^PC00.RP14.PXSX.DOSV ()
                        }
                    }

                    If (LEqual (WWRP, 0x0F))
                    {
                        If (LEqual (Arg0, Zero)){}
                        Else
                        {
                        }

                        If (CondRefOf (\_SB.PC00.RP15.PXSX.FHRF))
                        {
                            ^PC00.RP15.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        Notify (^PC00.RP15.PXSX, One)
                        If (CondRefOf (\_SB.PC00.RP15.PXSX.SHRF))
                        {
                            ^PC00.RP15.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        Notify (^PC00.RP15.PXSX, One)
                        Release (WWMT)
                        Store (Zero, Local0)
                        If (CondRefOf (\_SB.PC00.RP15.PXSX.DOSV))
                        {
                            ^PC00.RP15.PXSX.DOSV ()
                        }
                    }

                    If (LEqual (WWRP, 0x10))
                    {
                        If (LEqual (Arg0, Zero)){}
                        Else
                        {
                        }

                        If (CondRefOf (\_SB.PC00.RP16.PXSX.FHRF))
                        {
                            ^PC00.RP16.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        Notify (^PC00.RP16.PXSX, One)
                        If (CondRefOf (\_SB.PC00.RP16.PXSX.SHRF))
                        {
                            ^PC00.RP16.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        Notify (^PC00.RP16.PXSX, One)
                        Release (WWMT)
                        Store (Zero, Local0)
                        If (CondRefOf (\_SB.PC00.RP16.PXSX.DOSV))
                        {
                            ^PC00.RP16.PXSX.DOSV ()
                        }
                    }

                    If (LEqual (WWRP, 0x11))
                    {
                        If (LEqual (Arg0, Zero)){}
                        Else
                        {
                        }

                        If (CondRefOf (\_SB.PC00.RP17.PXSX.FHRF))
                        {
                            ^PC00.RP17.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        Notify (^PC00.RP17.PXSX, One)
                        If (CondRefOf (\_SB.PC00.RP17.PXSX.SHRF))
                        {
                            ^PC00.RP17.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        Notify (^PC00.RP17.PXSX, One)
                        Release (WWMT)
                        Store (Zero, Local0)
                        If (CondRefOf (\_SB.PC00.RP17.PXSX.DOSV))
                        {
                            ^PC00.RP17.PXSX.DOSV ()
                        }
                    }

                    If (LEqual (WWRP, 0x12))
                    {
                        If (LEqual (Arg0, Zero)){}
                        Else
                        {
                        }

                        If (CondRefOf (\_SB.PC00.RP18.PXSX.FHRF))
                        {
                            ^PC00.RP18.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        Notify (^PC00.RP18.PXSX, One)
                        If (CondRefOf (\_SB.PC00.RP18.PXSX.SHRF))
                        {
                            ^PC00.RP18.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        Notify (^PC00.RP18.PXSX, One)
                        Release (WWMT)
                        Store (Zero, Local0)
                        If (CondRefOf (\_SB.PC00.RP18.PXSX.DOSV))
                        {
                            ^PC00.RP18.PXSX.DOSV ()
                        }
                    }

                    If (LEqual (WWRP, 0x13))
                    {
                        If (LEqual (Arg0, Zero)){}
                        Else
                        {
                        }

                        If (CondRefOf (\_SB.PC00.RP19.PXSX.FHRF))
                        {
                            ^PC00.RP19.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        Notify (^PC00.RP19.PXSX, One)
                        If (CondRefOf (\_SB.PC00.RP19.PXSX.SHRF))
                        {
                            ^PC00.RP19.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        Notify (^PC00.RP19.PXSX, One)
                        Release (WWMT)
                        Store (Zero, Local0)
                        If (CondRefOf (\_SB.PC00.RP19.PXSX.DOSV))
                        {
                            ^PC00.RP19.PXSX.DOSV ()
                        }
                    }

                    If (LEqual (WWRP, 0x14))
                    {
                        If (LEqual (Arg0, Zero)){}
                        Else
                        {
                        }

                        If (CondRefOf (\_SB.PC00.RP20.PXSX.FHRF))
                        {
                            ^PC00.RP20.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        Notify (^PC00.RP20.PXSX, One)
                        If (CondRefOf (\_SB.PC00.RP20.PXSX.SHRF))
                        {
                            ^PC00.RP20.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        Notify (^PC00.RP20.PXSX, One)
                        Release (WWMT)
                        Store (Zero, Local0)
                        If (CondRefOf (\_SB.PC00.RP20.PXSX.DOSV))
                        {
                            ^PC00.RP20.PXSX.DOSV ()
                        }
                    }

                    If (LEqual (WWRP, 0x15))
                    {
                        If (LEqual (Arg0, Zero)){}
                        Else
                        {
                        }

                        If (CondRefOf (\_SB.PC00.RP21.PXSX.FHRF))
                        {
                            ^PC00.RP21.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        Notify (^PC00.RP21.PXSX, One)
                        If (CondRefOf (\_SB.PC00.RP21.PXSX.SHRF))
                        {
                            ^PC00.RP21.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        Notify (^PC00.RP21.PXSX, One)
                        Release (WWMT)
                        Store (Zero, Local0)
                        If (CondRefOf (\_SB.PC00.RP21.PXSX.DOSV))
                        {
                            ^PC00.RP21.PXSX.DOSV ()
                        }
                    }

                    If (LEqual (WWRP, 0x16))
                    {
                        If (LEqual (Arg0, Zero)){}
                        Else
                        {
                        }

                        If (CondRefOf (\_SB.PC00.RP22.PXSX.FHRF))
                        {
                            ^PC00.RP22.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        Notify (^PC00.RP22.PXSX, One)
                        If (CondRefOf (\_SB.PC00.RP22.PXSX.SHRF))
                        {
                            ^PC00.RP22.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        Notify (^PC00.RP22.PXSX, One)
                        Release (WWMT)
                        Store (Zero, Local0)
                        If (CondRefOf (\_SB.PC00.RP22.PXSX.DOSV))
                        {
                            ^PC00.RP22.PXSX.DOSV ()
                        }
                    }

                    If (LEqual (WWRP, 0x17))
                    {
                        If (LEqual (Arg0, Zero)){}
                        Else
                        {
                        }

                        If (CondRefOf (\_SB.PC00.RP23.PXSX.FHRF))
                        {
                            ^PC00.RP23.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        Notify (^PC00.RP23.PXSX, One)
                        If (CondRefOf (\_SB.PC00.RP23.PXSX.SHRF))
                        {
                            ^PC00.RP23.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        Notify (^PC00.RP23.PXSX, One)
                        Release (WWMT)
                        Store (Zero, Local0)
                        If (CondRefOf (\_SB.PC00.RP23.PXSX.DOSV))
                        {
                            ^PC00.RP23.PXSX.DOSV ()
                        }
                    }

                    If (LEqual (WWRP, 0x18))
                    {
                        If (LEqual (Arg0, Zero)){}
                        Else
                        {
                        }

                        If (CondRefOf (\_SB.PC00.RP24.PXSX.FHRF))
                        {
                            ^PC00.RP24.PXSX.FHRF (Arg0)
                        }

                        Sleep (Arg1)
                        Notify (^PC00.RP24.PXSX, One)
                        If (CondRefOf (\_SB.PC00.RP24.PXSX.SHRF))
                        {
                            ^PC00.RP24.PXSX.SHRF ()
                        }

                        Sleep (Arg2)
                        Notify (^PC00.RP24.PXSX, One)
                        Release (WWMT)
                        Store (Zero, Local0)
                        If (CondRefOf (\_SB.PC00.RP24.PXSX.DOSV))
                        {
                            ^PC00.RP24.PXSX.DOSV ()
                        }
                    }

                    If (LEqual (PCHS, 0x04))
                    {
                        If (LEqual (WWRP, 0x19))
                        {
                            If (LEqual (Arg0, Zero)){}
                            Else
                            {
                            }

                            If (CondRefOf (\_SB.PC00.RP25.PXSX.FHRF))
                            {
                                ^PC00.RP25.PXSX.FHRF (Arg0)
                            }

                            Sleep (Arg1)
                            Notify (^PC00.RP25.PXSX, One)
                            If (CondRefOf (\_SB.PC00.RP25.PXSX.SHRF))
                            {
                                ^PC00.RP25.PXSX.SHRF ()
                            }

                            Sleep (Arg2)
                            Notify (^PC00.RP25.PXSX, One)
                            Release (WWMT)
                            Store (Zero, Local0)
                            If (CondRefOf (\_SB.PC00.RP25.PXSX.DOSV))
                            {
                                ^PC00.RP25.PXSX.DOSV ()
                            }
                        }

                        If (LEqual (WWRP, 0x1A))
                        {
                            If (LEqual (Arg0, Zero)){}
                            Else
                            {
                            }

                            If (CondRefOf (\_SB.PC00.RP26.PXSX.FHRF))
                            {
                                ^PC00.RP26.PXSX.FHRF (Arg0)
                            }

                            Sleep (Arg1)
                            Notify (^PC00.RP26.PXSX, One)
                            If (CondRefOf (\_SB.PC00.RP26.PXSX.SHRF))
                            {
                                ^PC00.RP26.PXSX.SHRF ()
                            }

                            Sleep (Arg2)
                            Notify (^PC00.RP26.PXSX, One)
                            Release (WWMT)
                            Store (Zero, Local0)
                            If (CondRefOf (\_SB.PC00.RP26.PXSX.DOSV))
                            {
                                ^PC00.RP26.PXSX.DOSV ()
                            }
                        }

                        If (LEqual (WWRP, 0x1B))
                        {
                            If (LEqual (Arg0, Zero)){}
                            Else
                            {
                            }

                            If (CondRefOf (\_SB.PC00.RP27.PXSX.FHRF))
                            {
                                ^PC00.RP27.PXSX.FHRF (Arg0)
                            }

                            Sleep (Arg1)
                            Notify (^PC00.RP27.PXSX, One)
                            If (CondRefOf (\_SB.PC00.RP27.PXSX.SHRF))
                            {
                                ^PC00.RP27.PXSX.SHRF ()
                            }

                            Sleep (Arg2)
                            Notify (^PC00.RP27.PXSX, One)
                            Release (WWMT)
                            Store (Zero, Local0)
                            If (CondRefOf (\_SB.PC00.RP27.PXSX.DOSV))
                            {
                                ^PC00.RP27.PXSX.DOSV ()
                            }
                        }

                        If (LEqual (WWRP, 0x1C))
                        {
                            If (LEqual (Arg0, Zero)){}
                            Else
                            {
                            }

                            If (CondRefOf (\_SB.PC00.RP28.PXSX.FHRF))
                            {
                                ^PC00.RP28.PXSX.FHRF (Arg0)
                            }

                            Sleep (Arg1)
                            Notify (^PC00.RP28.PXSX, One)
                            If (CondRefOf (\_SB.PC00.RP28.PXSX.SHRF))
                            {
                                ^PC00.RP28.PXSX.SHRF ()
                            }

                            Sleep (Arg2)
                            Notify (^PC00.RP28.PXSX, One)
                            Release (WWMT)
                            Store (Zero, Local0)
                            If (CondRefOf (\_SB.PC00.RP28.PXSX.DOSV))
                            {
                                ^PC00.RP28.PXSX.DOSV ()
                            }
                        }
                    }

                    If (LEqual (Local0, One))
                    {
                        Release (WWMT)
                    }
                }
            }

            Device (MFFD)
            {
                Name (_HID, "INTC1073")  // _HID: Hardware ID
                Name (_STR, Unicode ("Modem Firmware Flash Device"))  // _STR: Description String
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (LEqual (WFFD, One))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (LEqual (Arg0, ToUUID ("0f3d57aa-6046-47b2-8a9a-88f1021d3865")))
                    {
                        If (LEqual (Arg2, Zero))
                        {
                            If (LEqual (Arg1, Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x07                                           
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                           
                                })
                            }
                        }

                        If (LEqual (Arg2, One))
                        {
                            WFRT (Zero, DerefOf (Index (Arg3, Zero)), DerefOf (Index (Arg3, One)))
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }

                        If (LEqual (Arg2, 0x02))
                        {
                            WFRT (One, DerefOf (Index (Arg3, Zero)), DerefOf (Index (Arg3, One)))
                            Return (Buffer (One)
                            {
                                 0x00                                           
                            })
                        }

                        Return (Zero)
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                           
                        })
                    }
                }
            }
        }
    }

    Scope (_SB.PC00.SAT0)
    {
        Method (SATC, 1, Serialized)
        {
            If (LEqual (Arg0, ToUUID ("e4db149b-fcfe-425b-a6d8-92357d78fc7f") /* SATA Controller */))
            {
                Return (One)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (SATD, 4, Serialized)
        {
            If (CondRefOf (ZPOV))
            {
                Return (ZPOV (Arg1, Arg2, Arg3))
            }
            Else
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                           
                        })
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }

            Return (Buffer (One)
            {
                 0x00                                           
            })
        }

        If (LAnd (LEqual (S0ID, One), LEqual (PUIS, One)))
        {
            Scope (PRT0)
            {
                Name (GTF0, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00       
                })
                Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
                {
                    CreateByteField (GTF0, Zero, FEAT)
                    CreateByteField (GTF0, 0x06, CMMD)
                    CreateWordField (Arg0, 0xA6, W083)
                    CreateWordField (Arg0, 0xAC, W086)
                    If (LEqual (SizeOf (Arg0), 0x0200))
                    {
                        If (LEqual (And (W083, 0x20), 0x20))
                        {
                            If (LEqual (And (W086, 0x20), Zero))
                            {
                                Store (0x06, FEAT)
                                Store (0xEF, CMMD)
                            }
                        }
                    }
                }

                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    Return (GTF0)
                }
            }

            Scope (PRT1)
            {
                Name (GTF0, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00       
                })
                Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
                {
                    CreateByteField (GTF0, Zero, FEAT)
                    CreateByteField (GTF0, 0x06, CMMD)
                    CreateWordField (Arg0, 0xA6, W083)
                    CreateWordField (Arg0, 0xAC, W086)
                    If (LEqual (SizeOf (Arg0), 0x0200))
                    {
                        If (LEqual (And (W083, 0x20), 0x20))
                        {
                            If (LEqual (And (W086, 0x20), Zero))
                            {
                                Store (0x06, FEAT)
                                Store (0xEF, CMMD)
                            }
                        }
                    }
                }

                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    Return (GTF0)
                }
            }

            Scope (PRT2)
            {
                Name (GTF0, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00       
                })
                Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
                {
                    CreateByteField (GTF0, Zero, FEAT)
                    CreateByteField (GTF0, 0x06, CMMD)
                    CreateWordField (Arg0, 0xA6, W083)
                    CreateWordField (Arg0, 0xAC, W086)
                    If (LEqual (SizeOf (Arg0), 0x0200))
                    {
                        If (LEqual (And (W083, 0x20), 0x20))
                        {
                            If (LEqual (And (W086, 0x20), Zero))
                            {
                                Store (0x06, FEAT)
                                Store (0xEF, CMMD)
                            }
                        }
                    }
                }

                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    Return (GTF0)
                }
            }

            Scope (PRT3)
            {
                Name (GTF0, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00       
                })
                Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
                {
                    CreateByteField (GTF0, Zero, FEAT)
                    CreateByteField (GTF0, 0x06, CMMD)
                    CreateWordField (Arg0, 0xA6, W083)
                    CreateWordField (Arg0, 0xAC, W086)
                    If (LEqual (SizeOf (Arg0), 0x0200))
                    {
                        If (LEqual (And (W083, 0x20), 0x20))
                        {
                            If (LEqual (And (W086, 0x20), Zero))
                            {
                                Store (0x06, FEAT)
                                Store (0xEF, CMMD)
                            }
                        }
                    }
                }

                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    Return (GTF0)
                }
            }

            Scope (PRT4)
            {
                Name (GTF0, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00       
                })
                Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
                {
                    CreateByteField (GTF0, Zero, FEAT)
                    CreateByteField (GTF0, 0x06, CMMD)
                    CreateWordField (Arg0, 0xA6, W083)
                    CreateWordField (Arg0, 0xAC, W086)
                    If (LEqual (SizeOf (Arg0), 0x0200))
                    {
                        If (LEqual (And (W083, 0x20), 0x20))
                        {
                            If (LEqual (And (W086, 0x20), Zero))
                            {
                                Store (0x06, FEAT)
                                Store (0xEF, CMMD)
                            }
                        }
                    }
                }

                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    Return (GTF0)
                }
            }

            Scope (PRT5)
            {
                Name (GTF0, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00       
                })
                Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
                {
                    CreateByteField (GTF0, Zero, FEAT)
                    CreateByteField (GTF0, 0x06, CMMD)
                    CreateWordField (Arg0, 0xA6, W083)
                    CreateWordField (Arg0, 0xAC, W086)
                    If (LEqual (SizeOf (Arg0), 0x0200))
                    {
                        If (LEqual (And (W083, 0x20), 0x20))
                        {
                            If (LEqual (And (W086, 0x20), Zero))
                            {
                                Store (0x06, FEAT)
                                Store (0xEF, CMMD)
                            }
                        }
                    }
                }

                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    Return (GTF0)
                }
            }

            If (CondRefOf (PRT6))
            {
                Scope (PRT6)
                {
                    Name (GTF0, Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00       
                    })
                    Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
                    {
                        CreateByteField (GTF0, Zero, FEAT)
                        CreateByteField (GTF0, 0x06, CMMD)
                        CreateWordField (Arg0, 0xA6, W083)
                        CreateWordField (Arg0, 0xAC, W086)
                        If (LEqual (SizeOf (Arg0), 0x0200))
                        {
                            If (LEqual (And (W083, 0x20), 0x20))
                            {
                                If (LEqual (And (W086, 0x20), Zero))
                                {
                                    Store (0x06, FEAT)
                                    Store (0xEF, CMMD)
                                }
                            }
                        }
                    }

                    Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                    {
                        Return (GTF0)
                    }
                }
            }

            If (CondRefOf (PRT7))
            {
                Scope (PRT7)
                {
                    Name (GTF0, Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00       
                    })
                    Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
                    {
                        CreateByteField (GTF0, Zero, FEAT)
                        CreateByteField (GTF0, 0x06, CMMD)
                        CreateWordField (Arg0, 0xA6, W083)
                        CreateWordField (Arg0, 0xAC, W086)
                        If (LEqual (SizeOf (Arg0), 0x0200))
                        {
                            If (LEqual (And (W083, 0x20), 0x20))
                            {
                                If (LEqual (And (W086, 0x20), Zero))
                                {
                                    Store (0x06, FEAT)
                                    Store (0xEF, CMMD)
                                }
                            }
                        }
                    }

                    Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                    {
                        Return (GTF0)
                    }
                }
            }
        }
    }

    Scope (_SB.PC00.XDCI)
    {
        Method (XDAT, 0, Serialized)
        {
            Return (Zero)
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C"))  // _HID: Hardware ID
            Name (PBST, One)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }

    Scope (_SB.PC00.LPCB.H_EC)
    {
        Method (BST1, 0, NotSerialized)
        {
            Name (PKG1, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Return (PKG1)
        }

        Method (BST2, 0, NotSerialized)
        {
            Name (PKG2, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Return (PKG2)
        }
    }

    Scope (_SB.PC00.LPCB)
    {
        Device (HPET)
        {
            Name (_HID, EisaId ("PNP0103"))  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    _Y70)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HPTE)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (XCRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (HPTE)
                {
                    CreateDWordField (BUF0, \_SB.PC00.LPCB.HPET._Y70._BAS, HPT0)  // _BAS: Base Address
                    Store (HPTB, HPT0)
                }

                Return (BUF0)
            }
        }

        Device (IPIC)
        {
            Name (_HID, EisaId ("PNP0000"))  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0020,             // Range Minimum
                    0x0020,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0024,             // Range Minimum
                    0x0024,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0028,             // Range Minimum
                    0x0028,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x002C,             // Range Minimum
                    0x002C,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0030,             // Range Minimum
                    0x0030,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0034,             // Range Minimum
                    0x0034,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0038,             // Range Minimum
                    0x0038,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x003C,             // Range Minimum
                    0x003C,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A0,             // Range Minimum
                    0x00A0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A4,             // Range Minimum
                    0x00A4,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A8,             // Range Minimum
                    0x00A8,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00AC,             // Range Minimum
                    0x00AC,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B0,             // Range Minimum
                    0x00B0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B4,             // Range Minimum
                    0x00B4,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B8,             // Range Minimum
                    0x00B8,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00BC,             // Range Minimum
                    0x00BC,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x04D0,             // Range Minimum
                    0x04D0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IRQNoFlags ()
                    {2}
            })
        }

        Device (MATH)
        {
            Name (_HID, EisaId ("PNP0C04"))  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x00F0,             // Range Minimum
                    0x00F0,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IRQNoFlags ()
                    {13}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (LEqual (PCHS, PCHH))
                {
                    Return (0x1F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (LDRC)
        {
            Name (_HID, EisaId ("PNP0C02"))  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x002E,             // Range Minimum
                    0x002E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x004E,             // Range Minimum
                    0x004E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0061,             // Range Minimum
                    0x0061,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0063,             // Range Minimum
                    0x0063,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0065,             // Range Minimum
                    0x0065,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0067,             // Range Minimum
                    0x0067,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0070,             // Range Minimum
                    0x0070,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0080,             // Range Minimum
                    0x0080,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0092,             // Range Minimum
                    0x0092,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x00B2,             // Range Minimum
                    0x00B2,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0680,             // Range Minimum
                    0x0680,             // Range Maximum
                    0x01,               // Alignment
                    0x20,               // Length
                    )
                IO (Decode16,
                    0x164E,             // Range Minimum
                    0x164E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
            })
        }

        Device (RTC)
        {
            Name (_HID, EisaId ("PNP0B00"))  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0070,             // Range Minimum
                    0x0070,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                IRQNoFlags ()
                    {8}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (LEqual (STAS, One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (TIMR)
        {
            Name (_HID, EisaId ("PNP0100"))  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0040,             // Range Minimum
                    0x0040,             // Range Maximum
                    0x01,               // Alignment
                    0x04,               // Length
                    )
                IO (Decode16,
                    0x0050,             // Range Minimum
                    0x0050,             // Range Maximum
                    0x10,               // Alignment
                    0x04,               // Length
                    )
                IRQNoFlags ()
                    {0}
            })
        }

        Device (CWDT)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                If (LEqual (And (CPID, 0x0FFF0FF0), 0x000B0670))
                {
                    Return ("INTC109C")
                }
                ElseIf (LEqual (And (CPID, 0x0FFF0FF0), 0x000B06F0))
                {
                    Return ("INTC109C")
                }
                ElseIf (LEqual (And (CPID, 0x0FFF0FF0), 0x000B06A0))
                {
                    Return ("INTC109C")
                }
                Else
                {
                    Return ("INTC1099")
                }
            }

            Name (_CID, EisaId ("PNP0C02"))  // _CID: Compatible ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x04,               // Alignment
                        0x04,               // Length
                        _Y71)
                })
                CreateWordField (RBUF, \_SB.PC00.LPCB.CWDT._CRS._Y71._MIN, OMIN)  // _MIN: Minimum Base Address
                CreateWordField (RBUF, \_SB.PC00.LPCB.CWDT._CRS._Y71._MAX, OMAX)  // _MAX: Maximum Base Address
                Add (PMBS, 0x54, OMIN)
                Add (PMBS, 0x54, OMAX)
                Return (RBUF)
            }
        }
    }

    Scope (_SB.PC00)
    {
        Device (LDR2)
        {
            Name (_HID, EisaId ("PNP0C02"))  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y72)
                })
                CreateDWordField (BUF0, \_SB.PC00.LDR2._CRS._Y72._BAS, LBAS)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.PC00.LDR2._CRS._Y72._LEN, LLEN)  // _LEN: Length
                Store (LGMS, LLEN)
                If (LEqual (LGMB, 0xFC00))
                {
                    Store (0xFC000000, LBAS)
                }

                If (LEqual (LGMB, 0xFB00))
                {
                    Store (0xFB000000, LBAS)
                }

                If (LEqual (LGMB, 0xFA00))
                {
                    Store (0xFA000000, LBAS)
                }

                If (LEqual (LGMB, 0xF900))
                {
                    Store (0xF9000000, LBAS)
                }

                Return (BUF0)
            }
        }
    }

    Device (_SB.TPM)
    {
        Name (TMRQ, 0xFFFFFFFF)
        Name (TLVL, 0xFFFFFFFF)
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf (LEqual (TTDP, Zero))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            ACC0,   8, 
            Offset (0x08), 
            INTE,   32, 
            INTV,   8, 
            Offset (0x10), 
            INTS,   32, 
            INTF,   32, 
            TSTS,   32, 
            Offset (0x24), 
            FIFO,   32, 
            Offset (0x30), 
            IDTF,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If (LEqual (TTDP, Zero))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, One)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y73)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y74)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y75)
        })
        Name (CRID, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y76)
        })
        Name (CREI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
            Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y77)
            {
                0x00000000,
            }
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If (LEqual (AMDT, One))
            {
                CreateDWordField (CRST, \_SB.TPM._Y73._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y73._LEN, LTFB)  // _LEN: Length
                Store (TPMB, MTFB)
                Store (TPBS, LTFB)
                CreateDWordField (CRST, \_SB.TPM._Y74._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y74._LEN, LTFC)  // _LEN: Length
                Store (TPMC, MTFC)
                Store (TPCS, LTFC)
                Return (CRST)
            }
            Else
            {
                If (LEqual (DTP1, One))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y75._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y75._LEN, LTFE)  // _LEN: Length
                    Store (0xFED40000, MTFE)
                    Store (0x5000, LTFE)
                    Return (CRSD)
                }
                ElseIf (LEqual (TTPF, One))
                {
                    If (LOr (LEqual (TMRQ, Zero), LEqual (TMRQ, 0xFFFFFFFF)))
                    {
                        CreateDWordField (CRID, \_SB.TPM._Y76._BAS, MTFD)  // _BAS: Base Address
                        CreateDWordField (CRID, \_SB.TPM._Y76._LEN, LTFD)  // _LEN: Length
                        Store (0xFED40000, MTFD)
                        Store (0x5000, LTFD)
                        Return (CRID)
                    }
                    Else
                    {
                        CreateDWordField (CREI, \_SB.TPM._Y77._INT, LIRQ)  // _INT: Interrupts
                        Store (TMRQ, LIRQ)
                        Return (CREI)
                    }
                }
                ElseIf (LEqual (TTPF, Zero))
                {
                    CreateDWordField (CRST, \_SB.TPM._Y74._BAS, MTFF)  // _BAS: Base Address
                    Store (FTPM, MTFF)
                    Return (CRST)
                }

                Store (Zero, MTFE)
                Store (Zero, LTFE)
                Return (CRID)
            }

            Return (CRID)
        }

        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
        {
            If (LAnd (LNotEqual (TMRQ, Zero), LNotEqual (TMRQ, 0xFFFFFFFF)))
            {
                CreateDWordField (Arg0, 0x11, IRQ0)
                CreateDWordField (CREI, \_SB.TPM._Y77._INT, LIRQ)  // _INT: Interrupts
                Store (IRQ0, LIRQ)
                Store (IRQ0, TMRQ)
                CreateBitField (Arg0, 0x79, ITRG)
                CreateBitField (CREI, \_SB.TPM._Y77._HE, LTRG)  // _HE_: High-Edge
                Store (ITRG, LTRG)
                CreateBitField (Arg0, 0x7A, ILVL)
                CreateBitField (CREI, \_SB.TPM._Y77._LL, LLVL)  // _LL_: Low Level
                Store (ILVL, LLVL)
                If (LOr (LEqual (And (IDTF, 0x0F), Zero), LEqual (And (IDTF, 0x0F), 0x0F)))
                {
                    If (LLess (IRQ0, 0x10))
                    {
                        Store (And (IRQ0, 0x0F), INTV)
                    }

                    If (LEqual (ITRG, One))
                    {
                        Or (INTE, 0x10, INTE)
                    }
                    Else
                    {
                        And (INTE, 0xFFFFFFEF, INTE)
                    }

                    If (LEqual (ILVL, Zero))
                    {
                        Or (INTE, 0x08, INTE)
                    }
                    Else
                    {
                        And (INTE, 0xFFFFFFF7, INTE)
                    }
                }
            }
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If (LEqual (TTDP, Zero))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            ElseIf (LEqual (TTDP, One))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, Zero)
            If (LNotEqual (ToInteger (Arg0), Zero)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                           
                    })
                }
                Case (One)
                {
                    Store (Zero, TIMR)
                    If (LEqual (AMDT, One))
                    {
                        While (LAnd (LEqual (BEGN, One), LLess (TIMR, 0x0200)))
                        {
                            If (LEqual (BEGN, One))
                            {
                                Sleep (One)
                                Increment (TIMR)
                            }
                        }
                    }
                    ElseIf (LEqual (Or (And (HSTS, 0x02), And (HSTS, One)), 0x03))
                    {
                        Store (One, HCMD)
                    }
                    Else
                    {
                        Store (One, FERR)
                        Store (Zero, BEGN)
                    }

                    Return (Zero)
                }

            }

            Return (One)
        }

        Method (CRYF, 3, Serialized)
        {
            If (LNotEqual (ToInteger (Arg0), One)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                           
                    })
                }
                Case (One)
                {
                    Name (TPMV, Package (0x02)
                    {
                        One, 
                        Package (0x02)
                        {
                            One, 
                            0x20
                        }
                    })
                    If (LEqual (_STA (), Zero))
                    {
                        Return (Package (0x01)
                        {
                            Zero
                        })
                    }

                    Return (TPMV)
                }

            }

            Return (Buffer (One)
            {
                 0x00                                           
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, One)
        Field (TSMI, ByteAcc, NoLock, Preserve)
        {
            SMI,    8
        }

        OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
        Field (ATNV, AnyAcc, NoLock, Preserve)
        {
            RQST,   32, 
            RCNT,   32, 
            ERRO,   32, 
            FLAG,   32, 
            MISC,   32, 
            OPTN,   32, 
            SRSP,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If (LEqual (Arg0, ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                     
                        })
                    }
                    Case (One)
                    {
                        If (LEqual (PPIV, Zero))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            Return ("1.3")
                        }
                    }
                    Case (0x02)
                    {
                        Store (DerefOf (Index (Arg3, Zero)), RQST)
                        Store (Zero, SRSP)
                        Store (0x02, FLAG)
                        Store (OFST, TMF1)
                        Store (Zero, SRSP)
                        Store (TMF1, SMI)
                        Return (SRSP)
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                        Store (RQST, Index (PPI1, One))
                        Return (PPI1)
                    }
                    Case (0x04)
                    {
                        Return (TRST)
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Store (Zero, SRSP)
                        Store (0x05, FLAG)
                        Store (OFST, SMI)
                        Store (RCNT, Index (PPI2, One))
                        Store (ERRO, Index (PPI2, 0x02))
                        Return (PPI2)
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        Store (DerefOf (Index (Arg3, Zero)), RQST)
                        Store (0x07, FLAG)
                        Store (Zero, OPTN)
                        If (LEqual (RQST, 0x17))
                        {
                            ToInteger (DerefOf (Index (Arg3, One)), OPTN)
                        }

                        Store (OFST, TMF1)
                        Store (Zero, SRSP)
                        Store (TMF1, SMI)
                        Return (SRSP)
                    }
                    Case (0x08)
                    {
                        Store (DerefOf (Index (Arg3, Zero)), RQST)
                        Store (0x08, FLAG)
                        Store (OFST, TMF1)
                        Store (Zero, SRSP)
                        Store (TMF1, SMI)
                        Return (SRSP)
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf (LEqual (Arg0, ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d")))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                           
                        })
                    }
                    Case (One)
                    {
                        Store (DerefOf (Index (Arg3, Zero)), RQST)
                        Store (0x09, FLAG)
                        Store (OFST, TMF1)
                        Store (Zero, SRSP)
                        Store (TMF1, SMI)
                        Return (SRSP)
                    }
                    Default
                    {
                    }

                }
            }

            If (LEqual (Arg0, ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8")))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If (LEqual (Arg0, ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4")))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (One)
            {
                 0x00                                           
            })
        }

        Method (TPTS, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x04)
                {
                    Store (Zero, RQST)
                    Store (0x09, FLAG)
                    Store (Zero, SRSP)
                    Store (OFST, SMI)
                }
                Case (0x05)
                {
                    Store (Zero, RQST)
                    Store (0x09, FLAG)
                    Store (Zero, SRSP)
                    Store (OFST, SMI)
                }

            }
        }
    }

    Scope (_SB)
    {
        Method (MPTS, 1, NotSerialized)
        {
            \GSA1.MPTS (Arg0)
        }

        Method (MWAK, 1, NotSerialized)
        {
            \GSA1.MWAK (Arg0)
        }
    }

    Scope (_SB)
    {
    }
}

